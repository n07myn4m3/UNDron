#include "soc-hw.h"

uart_t     *uart0    = (uart_t *)    0x20000000;
timer_t    *timer0   = (timer_t *)   0x30000000;
gpio_t     *gpio0    = (gpio_t *)    0x40000000;
i2c_t 		 *i2c0		 = (i2c_t *)		 0x50000000;
//basicIO_t  *basicIO0 = (basicIO_t *) 0x60000000;
pwm_t			 *pwm0		 = (pwm_t *)     0x60000000;
spi_t      *spi0     = (spi_t *)     0x70000000;


isr_ptr_t isr_table[32];

/*
void prueba()
{
	   uart0->rxtx=30;
	   timer0->tcr0 = 0xAA;
	   gpio0->ctrl=0x50;
		 i2c0 ->wxrx = 0x40;
}*/

void tic_isr();
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
    int i;

    for(i=0; i<32; i++) {
        if (pending & 0x01) (*isr_table[i])();
        pending >>= 1;
    }
}

void isr_init()
{
    int i;
    for(i=0; i<32; i++)
        isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
    isr_table[irq] = isr;
}

void isr_unregister(int irq)
{
    isr_table[irq] = &isr_null;
}
/***************************************************************************
 * GPIO Functions
 */
static uint8_t output;
static uint8_t addrs;
static uint8_t data;

void gpio_init_write(void)
{
	addrs = 0xff;
	gpio0->oe = addrs;
}

/*
void gpio_init_read(void)
{
	gpio0->oe = 0x00;
}
*/

void digitalWrite(uint8_t data, uint8_t mode)
{
	if(mode==TRUE){
    output |= data;
		} else {
		output &= ~data;
	}
	gpio0->out = data; 
}


uint8_t read_gpio(void)
{
	uint8_t data;
	data = gpio0-> in;
	return data;
}

/***************************************************************************
 * TIMER Functions
 */
uint32_t tic_msec;

void step_sleep(uint32_t step)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = step;
    timer0->counter1 = 0;
    timer0->tcr1 = TIMER_EN;

    do {
        //halt();
         tcr = timer0->tcr1;
     } while ( ! (tcr & TIMER_TRIG) );
	
}


void msleep(uint32_t msec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000)*msec;
    timer0->counter1 = 0;
    timer0->tcr1 = TIMER_EN;

    do {
        //halt();
         tcr = timer0->tcr1;
     } while ( ! (tcr & TIMER_TRIG) );
}

void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
    timer0->counter1 = 0;
    timer0->tcr1 = TIMER_EN;

    do {
        //halt();
         tcr = timer0->tcr1;
     } while ( ! (tcr & TIMER_TRIG) );
}


uint8_t time_happened_millis(uint32_t millis)
{
    uint32_t tcr;
		
		tcr =timer0->tcr0;
		if(! (tcr & TIMER_EN)){
		  // Use timer0.1
			if(tcr & TIMER_TRIG){
				return 1;
			}else{ 
		  timer0->compare0 = (FCPU/1000)*millis;
		  timer0->counter0 = 0;
		  timer0->tcr0 = TIMER_EN;	
			return 0;
			}
		}else{
			return 0;			
		}		
}


void init_watch(void){
	timer0->tcr0=0x00;
}


uint8_t time_happened_micro(uint32_t micros)
{
    uint32_t tcr;
		static uint32_t time;
		time = micros;
		tcr =timer0->tcr0;
		if(! (tcr & TIMER_EN)){
		  // Use timer0.1
			if(tcr & TIMER_TRIG){
				return 1;
			}else{ 
				timer0->compare0 = (FCPU/1000000)*time;
				timer0->counter0 = 0;
				timer0->tcr0 = TIMER_EN;	
				return 0;
			}
		}else{
			return 0;			
		}		
}

//void n2sleep(uint32_t nsec)


void tic_isr()
{
    tic_msec++;
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
    tic_msec = 0;

    // Setup timer0.0
    timer0->compare0 = (FCPU/10000);
    timer0->counter0 = 0;
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

    isr_register(1, &tic_isr);
}





/***************************************************************************
 * UART Functions
 */
void uart_init()
{
    //uart0->ier = 0x00;  // Interrupt Enable Register
    //uart0->lcr = 0x03;  // Line Control Register:    8N1
    //uart0->mcr = 0x00;  // Modem Control Register

    // Setup Divisor register (Fclk / Baud)
    //uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
    while (! (uart0->ucr & UART_DR)) ;
    return uart0->rxtx;
}

void uart_putchar(char c)
{
    while (uart0->ucr & UART_BUSY) ;
    uart0->rxtx = c;
}

void uart_putstr(char *str)
{
    char *c = str;
    while(*c) {
        uart_putchar(*c);
        c++;
    }
}

/***************************************************************************
 * BasicIO Functions
 */

/*
static uint32_t leds;

void basicIO_init()
{
  //LEDs off
  basicIO0->leds = 0;
  leds = 0;

	isr_register(4, &btn0_isr);
}

void basicIO_leds_on(uint8_t leds_on)
{
  //LEDs on
  leds |= leds_on;
  basicIO0->leds = leds;
}

void basicIO_leds_off(uint8_t leds_off)
{
  //LEDs off
  leds &= ~leds_off;
  basicIO0->leds = leds;
}

void basicIO_leds(uint8_t leds0)
{
  //LEDs
  leds = leds0;
  basicIO0->leds = leds0;
}

uint8_t basicIO_bt(void)
{
return basicIO0->buttons;
}

uint8_t basicIO_sw(void)
{
return basicIO0->switches;
}
*/
/***************************************************************************
 * I2C Functions
 */

//static uint8_t data;
//static uint32_t rwaddrs;
//static uint8_t ena;
//static uint8_t rw;


void i2c_putchar(char c)
{
	while ((i2c0->ucr & I2C_BUSY));
	i2c0->wxrx = c;
}

void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
{
	i2c0 -> rwaddr = ((rw<<7)|addrs>>1);
}

void i2c_putdatas(const char *str)	
{
  const char *c = str;
	while (*c) {
		nsleep(20);
		i2c_putchar(*c);
		i2c_init();
    c++;
/*
	while(len --){
		i2c_putchar(*p++);
*/
	}
	nsleep(20);
	i2c_sleep();
}

void i2c_init()
{
 i2c0->ucr = I2C_ENA;  
}

void i2c_sleep()
{
	while((i2c0->ucr & I2C_BUSY));
	i2c0->ucr = 0x00;
}

char i2c_getdata()
{
	while ( (i2c0->ucr & I2C_BUSY) && (!(i2c0->ucr & I2C_ERROR)));
	return i2c0-> wxrx;
}

/***************************************************************************
 * SPI Functions
 */
void spi_init()
{
	spi0-> ucr = SPI_ENA;
	//nsleep(1); //Valido para cuando la frecuencia del reloj del spi es bastante rapida
	spi0-> ucr = !SPI_ENA;
}

uint8_t spi_getchar()
{   
    while (spi0->ucr & SPI_BUSY) ;
    return spi0->rxtx;
}

void spi_not_ena()
{
	spi0->ucr = !SPI_ENA;
}

void spi_sleep()
{
	while ((spi0->ucr & SPI_BUSY));
	spi0->ucr = 0x00;
}

void spi_continue(uint8_t a)
{
	if(a) {
	spi0->ucr = SPI_CONT;
	}
	else {
	spi0->ucr = !SPI_CONT;
	}
}

void spi_cont_d(char data)
{
	spi0->ucr = SPI_CONT;
	spi0->rxtx = data;
}

void spi_putchar(char c)
{
    while (spi0->ucr & SPI_BUSY) ;
    spi0->rxtx = c;
}


void spi_putstr(char *str)
{
    char *c = str;
    while(*c) {
				spi_continue(0x01);
        spi_putchar(*c);
        c++;
    }
}

/***************************************************************************
 * PWM Functions
 */

uint8_t setmotor1(uint8_t bit)
{
	uint8_t val0=bit;
	pwm0->duty_m1=val0;
	return val0;
	
}

uint8_t setmotor2(uint8_t bit)
{
	uint8_t val0=bit;
	pwm0-> duty_m2=val0;
	return val0;
}

uint8_t setmotor3(uint8_t bit)
{
	uint8_t val0=bit;
	pwm0-> duty_m3=val0;
	return val0;
}

uint8_t setmotor4(uint8_t bit)
{
	uint8_t val0=bit;
	pwm0-> duty_m4=val0;
	return val0;
}

void pwm_init(void)
{
		pwm0->enable=TRUE;
}


void set_pwm(uint8_t state)
{
	if(state == HIGH){
		pwm0->enable=TRUE;
	}else if(state ==LOW){
		pwm0->enable=FALSE;
	}
}


