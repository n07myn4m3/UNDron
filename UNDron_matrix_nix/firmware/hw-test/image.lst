
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029f0  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000450  000029f0  000029f0  00002a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         0000001c  00002e40  00002e40  00002e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000000a0  00002e5c  00002e5c  00002eb0  2**2
                  ALLOC
  4 .debug_abbrev 00000830  00000000  00000000  00002eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002e24  00000000  00000000  000036e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000028eb  00000000  00000000  00006504  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000004b0  00000000  00000000  00008df0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002373  00000000  00000000  000092a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000541  00000000  00000000  0000b613  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000000a0  00000000  00000000  0000bb54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000a03  00000000  00000000  0000bbf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000005a  00000000  00000000  0000c5f7  2**0
                  CONTENTS, READONLY
 13 .debug_ranges 00000c28  00000000  00000000  0000c651  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <_ftext>:
       0:	98 00 00 00 	xor r0,r0,r0
       4:	d0 00 00 00 	wcsr IE,r0
       8:	78 01 00 00 	mvhi r1,0x0
       c:	38 21 00 00 	ori r1,r1,0x0
      10:	d0 e1 00 00 	wcsr EBA,r1
      14:	f8 00 00 3b 	calli 100 <_crt0>
      18:	34 00 00 00 	nop
      1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
      20:	34 00 00 00 	nop
      24:	34 00 00 00 	nop
      28:	34 00 00 00 	nop
      2c:	34 00 00 00 	nop
      30:	34 00 00 00 	nop
      34:	34 00 00 00 	nop
      38:	34 00 00 00 	nop
      3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
      40:	34 00 00 00 	nop
      44:	34 00 00 00 	nop
      48:	34 00 00 00 	nop
      4c:	34 00 00 00 	nop
      50:	34 00 00 00 	nop
      54:	34 00 00 00 	nop
      58:	34 00 00 00 	nop
      5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
      60:	34 00 00 00 	nop
      64:	34 00 00 00 	nop
      68:	34 00 00 00 	nop
      6c:	34 00 00 00 	nop
      70:	34 00 00 00 	nop
      74:	34 00 00 00 	nop
      78:	34 00 00 00 	nop
      7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
      80:	34 00 00 00 	nop
      84:	34 00 00 00 	nop
      88:	34 00 00 00 	nop
      8c:	34 00 00 00 	nop
      90:	34 00 00 00 	nop
      94:	34 00 00 00 	nop
      98:	34 00 00 00 	nop
      9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
      a0:	34 00 00 00 	nop
      a4:	34 00 00 00 	nop
      a8:	34 00 00 00 	nop
      ac:	34 00 00 00 	nop
      b0:	34 00 00 00 	nop
      b4:	34 00 00 00 	nop
      b8:	34 00 00 00 	nop
      bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
      c0:	5b 9d 00 00 	sw (sp+0),ra
      c4:	f8 00 00 2b 	calli 170 <_save_all>
      c8:	90 40 08 00 	rcsr r1,IP
      cc:	f8 00 00 68 	calli 26c <irq_handler>
      d0:	78 01 ff ff 	mvhi r1,0xffff
      d4:	38 21 ff ff 	ori r1,r1,0xffff
      d8:	d0 41 00 00 	wcsr IP,r1
      dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
      e0:	34 00 00 00 	nop
      e4:	34 00 00 00 	nop
      e8:	34 00 00 00 	nop
      ec:	34 00 00 00 	nop
      f0:	34 00 00 00 	nop
      f4:	34 00 00 00 	nop
      f8:	34 00 00 00 	nop
      fc:	34 00 00 00 	nop

00000100 <_crt0>:
     100:	78 1c 00 00 	mvhi sp,0x0
     104:	3b 9c 3f fc 	ori sp,sp,0x3ffc
     108:	78 1a 00 00 	mvhi gp,0x0
     10c:	3b 5a 2e 60 	ori gp,gp,0x2e60
     110:	78 01 00 00 	mvhi r1,0x0
     114:	38 21 2e 5c 	ori r1,r1,0x2e5c
     118:	78 03 00 00 	mvhi r3,0x0
     11c:	38 63 2e fc 	ori r3,r3,0x2efc

00000120 <.clearBSS>:
     120:	44 23 00 04 	be r1,r3,130 <.callMain>
     124:	58 20 00 00 	sw (r1+0),r0
     128:	34 21 00 04 	addi r1,r1,4
     12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
     130:	34 01 00 00 	mvi r1,0
     134:	34 02 00 00 	mvi r2,0
     138:	34 03 00 00 	mvi r3,0
     13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
     140:	34 01 00 01 	mvi r1,1
     144:	d0 01 00 00 	wcsr IE,r1
     148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
     14c:	34 01 00 00 	mvi r1,0
     150:	d0 01 00 00 	wcsr IE,r1
     154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
     158:	d0 21 00 00 	wcsr IM,r1
     15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
     160:	90 20 08 00 	rcsr r1,IM
     164:	c3 a0 00 00 	ret

00000168 <jump>:
     168:	c0 20 00 00 	b r1

0000016c <halt>:
     16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
     170:	37 9c ff 80 	addi sp,sp,-128
     174:	5b 81 00 04 	sw (sp+4),r1
     178:	5b 82 00 08 	sw (sp+8),r2
     17c:	5b 83 00 0c 	sw (sp+12),r3
     180:	5b 84 00 10 	sw (sp+16),r4
     184:	5b 85 00 14 	sw (sp+20),r5
     188:	5b 86 00 18 	sw (sp+24),r6
     18c:	5b 87 00 1c 	sw (sp+28),r7
     190:	5b 88 00 20 	sw (sp+32),r8
     194:	5b 89 00 24 	sw (sp+36),r9
     198:	5b 8a 00 28 	sw (sp+40),r10
     19c:	5b 9e 00 78 	sw (sp+120),ea
     1a0:	5b 9f 00 7c 	sw (sp+124),ba
     1a4:	2b 81 00 80 	lw r1,(sp+128)
     1a8:	5b 81 00 74 	sw (sp+116),r1
     1ac:	bb 80 08 00 	mv r1,sp
     1b0:	34 21 00 80 	addi r1,r1,128
     1b4:	5b 81 00 70 	sw (sp+112),r1
     1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
     1bc:	2b 81 00 04 	lw r1,(sp+4)
     1c0:	2b 82 00 08 	lw r2,(sp+8)
     1c4:	2b 83 00 0c 	lw r3,(sp+12)
     1c8:	2b 84 00 10 	lw r4,(sp+16)
     1cc:	2b 85 00 14 	lw r5,(sp+20)
     1d0:	2b 86 00 18 	lw r6,(sp+24)
     1d4:	2b 87 00 1c 	lw r7,(sp+28)
     1d8:	2b 88 00 20 	lw r8,(sp+32)
     1dc:	2b 89 00 24 	lw r9,(sp+36)
     1e0:	2b 8a 00 28 	lw r10,(sp+40)
     1e4:	2b 9d 00 74 	lw ra,(sp+116)
     1e8:	2b 9e 00 78 	lw ea,(sp+120)
     1ec:	2b 9f 00 7c 	lw ba,(sp+124)
     1f0:	2b 9c 00 70 	lw sp,(sp+112)
     1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
     1f8:	bb 80 08 00 	mv r1,sp
     1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
     200:	bb 40 08 00 	mv r1,gp
     204:	c3 a0 00 00 	ret

00000208 <main>:
#include "soc-hw.h"
#include "softfloat.h"
#include "LSM9DS1.h"
#include "MPL3115A2.h"

int main(int argc, char **argv){
     208:	37 9c ff fc 	addi sp,sp,-4
     20c:	5b 9d 00 04 	sw (sp+4),ra

 //   uint8_t  c;
    pwm_init();
     210:	f8 00 01 be 	calli 908 <pwm_init>
    setmotor1(0b00001100);
     214:	34 01 00 0c 	mvi r1,12
     218:	f8 00 01 a0 	calli 898 <setmotor1>
    msleep(5000);
     21c:	34 01 13 88 	mvi r1,5000
     220:	f8 00 00 43 	calli 32c <msleep>
						  )(   ) _) \___ \  )(  
						 (__) (____)(____/ (__)                         
---------------------------------------------------------------------------
 Prueba motores
---------------------------------------------------------------------------*/
setmotor1(0b00001110);
     224:	34 01 00 0e 	mvi r1,14
     228:	f8 00 01 9c 	calli 898 <setmotor1>
msleep(10000);
     22c:	34 01 27 10 	mvi r1,10000
     230:	f8 00 00 3f 	calli 32c <msleep>
setmotor1(0b00001111);
     234:	34 01 00 0f 	mvi r1,15
     238:	f8 00 01 98 	calli 898 <setmotor1>
msleep(10000);
     23c:	34 01 27 10 	mvi r1,10000
     240:	f8 00 00 3b 	calli 32c <msleep>
setmotor1(0b00010011);
     244:	34 01 00 13 	mvi r1,19
     248:	f8 00 01 94 	calli 898 <setmotor1>
msleep(10000);
     24c:	34 01 27 10 	mvi r1,10000
     250:	f8 00 00 37 	calli 32c <msleep>
setmotor1(0b00001100);
     254:	34 01 00 0c 	mvi r1,12
     258:	f8 00 01 90 	calli 898 <setmotor1>
msleep(10000);
     25c:	34 01 27 10 	mvi r1,10000
     260:	f8 00 00 33 	calli 32c <msleep>
     264:	e3 ff ff f0 	bi 224 <main+0x1c>

00000268 <isr_null>:
void tic_isr();
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
     268:	c3 a0 00 00 	ret

0000026c <irq_handler>:
}

void irq_handler(uint32_t pending)
{
     26c:	37 9c ff f0 	addi sp,sp,-16
     270:	5b 8b 00 10 	sw (sp+16),r11
     274:	5b 8c 00 0c 	sw (sp+12),r12
     278:	5b 8d 00 08 	sw (sp+8),r13
     27c:	5b 9d 00 04 	sw (sp+4),ra
     280:	78 0b 00 00 	mvhi r11,0x0
     284:	39 6b 2e 78 	ori r11,r11,0x2e78
     288:	b8 20 60 00 	mv r12,r1
     28c:	35 6d 00 80 	addi r13,r11,128
     290:	e0 00 00 03 	bi 29c <irq_handler+0x30>
    int i;

    for(i=0; i<32; i++) {
        if (pending & 0x01) (*isr_table[i])();
     294:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
    int i;

    for(i=0; i<32; i++) {
     298:	45 6d 00 08 	be r11,r13,2b8 <irq_handler+0x4c>
        if (pending & 0x01) (*isr_table[i])();
     29c:	21 81 00 01 	andi r1,r12,0x1
        pending >>= 1;
     2a0:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
    int i;

    for(i=0; i<32; i++) {
        if (pending & 0x01) (*isr_table[i])();
     2a4:	44 20 ff fc 	be r1,r0,294 <irq_handler+0x28>
     2a8:	29 61 00 00 	lw r1,(r11+0)
     2ac:	35 6b 00 04 	addi r11,r11,4
     2b0:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
    int i;

    for(i=0; i<32; i++) {
     2b4:	5d 6d ff fa 	bne r11,r13,29c <irq_handler+0x30>
        if (pending & 0x01) (*isr_table[i])();
        pending >>= 1;
    }
}
     2b8:	2b 9d 00 04 	lw ra,(sp+4)
     2bc:	2b 8b 00 10 	lw r11,(sp+16)
     2c0:	2b 8c 00 0c 	lw r12,(sp+12)
     2c4:	2b 8d 00 08 	lw r13,(sp+8)
     2c8:	37 9c 00 10 	addi sp,sp,16
     2cc:	c3 a0 00 00 	ret

000002d0 <isr_init>:

void isr_init()
{
     2d0:	78 01 00 00 	mvhi r1,0x0
     2d4:	38 21 2e 78 	ori r1,r1,0x2e78
     2d8:	78 02 00 00 	mvhi r2,0x0
     2dc:	38 42 02 68 	ori r2,r2,0x268
     2e0:	34 23 00 80 	addi r3,r1,128
    int i;
    for(i=0; i<32; i++)
        isr_table[i] = &isr_null;
     2e4:	58 22 00 00 	sw (r1+0),r2
     2e8:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
    int i;
    for(i=0; i<32; i++)
     2ec:	5c 23 ff fe 	bne r1,r3,2e4 <isr_init+0x14>
        isr_table[i] = &isr_null;
}
     2f0:	c3 a0 00 00 	ret

000002f4 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
     2f4:	3c 21 00 02 	sli r1,r1,2
     2f8:	78 03 00 00 	mvhi r3,0x0
     2fc:	38 63 2e 78 	ori r3,r3,0x2e78
     300:	b4 61 18 00 	add r3,r3,r1
     304:	58 62 00 00 	sw (r3+0),r2
    isr_table[irq] = isr;
}
     308:	c3 a0 00 00 	ret

0000030c <isr_unregister>:

void isr_unregister(int irq)
{
     30c:	3c 21 00 02 	sli r1,r1,2
     310:	78 03 00 00 	mvhi r3,0x0
     314:	38 63 2e 78 	ori r3,r3,0x2e78
     318:	78 02 00 00 	mvhi r2,0x0
     31c:	b4 61 18 00 	add r3,r3,r1
     320:	38 42 02 68 	ori r2,r2,0x268
     324:	58 62 00 00 	sw (r3+0),r2
    isr_table[irq] = &isr_null;
}
     328:	c3 a0 00 00 	ret

0000032c <msleep>:
 * TIMER Functions
 */
uint32_t tic_msec;

void msleep(uint32_t msec)
{
     32c:	78 02 00 00 	mvhi r2,0x0
     330:	38 42 2e 44 	ori r2,r2,0x2e44
     334:	38 03 c3 50 	mvu r3,0xc350
     338:	88 23 08 00 	mul r1,r1,r3
     33c:	28 43 00 00 	lw r3,(r2+0)
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000)*msec;
    timer0->counter1 = 0;
    timer0->tcr1 = TIMER_EN;
     340:	34 02 00 08 	mvi r2,8
void msleep(uint32_t msec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000)*msec;
     344:	58 61 00 10 	sw (r3+16),r1
    timer0->counter1 = 0;
     348:	34 01 00 00 	mvi r1,0
     34c:	58 61 00 14 	sw (r3+20),r1
    timer0->tcr1 = TIMER_EN;
     350:	58 62 00 0c 	sw (r3+12),r2

    do {
        //halt();
         tcr = timer0->tcr1;
     354:	28 61 00 0c 	lw r1,(r3+12)
     } while ( ! (tcr & TIMER_TRIG) );
     358:	20 21 00 01 	andi r1,r1,0x1
     35c:	44 20 ff fe 	be r1,r0,354 <msleep+0x28>
}
     360:	c3 a0 00 00 	ret

00000364 <nsleep>:

void nsleep(uint32_t nsec)
{
     364:	78 02 00 00 	mvhi r2,0x0
     368:	38 42 2e 44 	ori r2,r2,0x2e44
     36c:	28 43 00 00 	lw r3,(r2+0)
     370:	08 21 00 32 	muli r1,r1,50
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
    timer0->counter1 = 0;
    timer0->tcr1 = TIMER_EN;
     374:	34 02 00 08 	mvi r2,8
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     378:	58 61 00 10 	sw (r3+16),r1
    timer0->counter1 = 0;
     37c:	34 01 00 00 	mvi r1,0
     380:	58 61 00 14 	sw (r3+20),r1
    timer0->tcr1 = TIMER_EN;
     384:	58 62 00 0c 	sw (r3+12),r2

    do {
        //halt();
         tcr = timer0->tcr1;
     388:	28 61 00 0c 	lw r1,(r3+12)
     } while ( ! (tcr & TIMER_TRIG) );
     38c:	20 21 00 01 	andi r1,r1,0x1
     390:	44 20 ff fe 	be r1,r0,388 <nsleep+0x24>
}
     394:	c3 a0 00 00 	ret

00000398 <tic_isr>:

void tic_isr()
{
     398:	78 03 00 00 	mvhi r3,0x0
     39c:	38 63 2e f8 	ori r3,r3,0x2ef8
     3a0:	28 62 00 00 	lw r2,(r3+0)
    tic_msec++;
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     3a4:	78 01 00 00 	mvhi r1,0x0
     3a8:	38 21 2e 44 	ori r1,r1,0x2e44
     3ac:	28 24 00 00 	lw r4,(r1+0)
     } while ( ! (tcr & TIMER_TRIG) );
}

void tic_isr()
{
    tic_msec++;
     3b0:	34 42 00 01 	addi r2,r2,1
     3b4:	58 62 00 00 	sw (r3+0),r2
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     3b8:	34 01 00 0e 	mvi r1,14
     3bc:	58 81 00 00 	sw (r4+0),r1
}
     3c0:	c3 a0 00 00 	ret

000003c4 <tic_init>:

void tic_init()
{
     3c4:	78 01 00 00 	mvhi r1,0x0
     3c8:	38 21 2e 44 	ori r1,r1,0x2e44
     3cc:	28 24 00 00 	lw r4,(r1+0)
    tic_msec = 0;
     3d0:	78 02 00 00 	mvhi r2,0x0
     3d4:	38 42 2e f8 	ori r2,r2,0x2ef8
     3d8:	34 05 00 00 	mvi r5,0
     3dc:	58 45 00 00 	sw (r2+0),r5

    // Setup timer0.0
    timer0->compare0 = (FCPU/10000);
     3e0:	34 01 13 88 	mvi r1,5000
     3e4:	58 81 00 04 	sw (r4+4),r1
        isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
    isr_table[irq] = isr;
     3e8:	78 03 00 00 	mvhi r3,0x0
     3ec:	78 02 00 00 	mvhi r2,0x0
{
    tic_msec = 0;

    // Setup timer0.0
    timer0->compare0 = (FCPU/10000);
    timer0->counter0 = 0;
     3f0:	58 85 00 08 	sw (r4+8),r5
        isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
    isr_table[irq] = isr;
     3f4:	38 63 2e 78 	ori r3,r3,0x2e78
     3f8:	38 42 03 98 	ori r2,r2,0x398
    tic_msec = 0;

    // Setup timer0.0
    timer0->compare0 = (FCPU/10000);
    timer0->counter0 = 0;
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     3fc:	34 01 00 0e 	mvi r1,14
     400:	58 81 00 00 	sw (r4+0),r1
        isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
    isr_table[irq] = isr;
     404:	58 62 00 04 	sw (r3+4),r2
    timer0->compare0 = (FCPU/10000);
    timer0->counter0 = 0;
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

    isr_register(1, &tic_isr);
}
     408:	c3 a0 00 00 	ret

0000040c <uart_init>:

/***************************************************************************
 * UART Functions
 */
void uart_init()
{
     40c:	c3 a0 00 00 	ret

00000410 <uart_getchar>:
    // Setup Divisor register (Fclk / Baud)
    //uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
     410:	78 01 00 00 	mvhi r1,0x0
     414:	38 21 2e 40 	ori r1,r1,0x2e40
     418:	28 22 00 00 	lw r2,(r1+0)
     41c:	28 41 00 00 	lw r1,(r2+0)
     420:	20 21 00 01 	andi r1,r1,0x1
     424:	44 20 ff fe 	be r1,r0,41c <uart_getchar+0xc>
    while (! (uart0->ucr & UART_DR)) ;
    return uart0->rxtx;
     428:	28 41 00 04 	lw r1,(r2+4)
}
     42c:	20 21 00 ff 	andi r1,r1,0xff
     430:	c3 a0 00 00 	ret

00000434 <uart_putchar>:

void uart_putchar(char c)
{
     434:	78 02 00 00 	mvhi r2,0x0
     438:	38 42 2e 40 	ori r2,r2,0x2e40
     43c:	28 42 00 00 	lw r2,(r2+0)
     440:	20 23 00 ff 	andi r3,r1,0xff
    while (uart0->ucr & UART_BUSY) ;
     444:	28 41 00 00 	lw r1,(r2+0)
     448:	20 21 00 10 	andi r1,r1,0x10
     44c:	5c 20 ff fe 	bne r1,r0,444 <uart_putchar+0x10>
    uart0->rxtx = c;
     450:	58 43 00 04 	sw (r2+4),r3
}
     454:	c3 a0 00 00 	ret

00000458 <uart_putstr>:

void uart_putstr(char *str)
{
     458:	40 24 00 00 	lbu r4,(r1+0)
     45c:	b8 20 18 00 	mv r3,r1
    char *c = str;
    while(*c) {
     460:	44 80 00 0b 	be r4,r0,48c <uart_putstr+0x34>
    return uart0->rxtx;
}

void uart_putchar(char c)
{
    while (uart0->ucr & UART_BUSY) ;
     464:	78 01 00 00 	mvhi r1,0x0
     468:	38 21 2e 40 	ori r1,r1,0x2e40
     46c:	28 22 00 00 	lw r2,(r1+0)
     470:	28 41 00 00 	lw r1,(r2+0)
     474:	20 21 00 10 	andi r1,r1,0x10
     478:	5c 20 ff fe 	bne r1,r0,470 <uart_putstr+0x18>
    uart0->rxtx = c;
     47c:	58 44 00 04 	sw (r2+4),r4
void uart_putstr(char *str)
{
    char *c = str;
    while(*c) {
        uart_putchar(*c);
        c++;
     480:	34 63 00 01 	addi r3,r3,1
}

void uart_putstr(char *str)
{
    char *c = str;
    while(*c) {
     484:	40 64 00 00 	lbu r4,(r3+0)
     488:	5c 81 ff fa 	bne r4,r1,470 <uart_putstr+0x18>
     48c:	c3 a0 00 00 	ret

00000490 <i2c_putdata>:
 */

	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
     490:	78 02 00 00 	mvhi r2,0x0
     494:	38 42 2e 54 	ori r2,r2,0x2e54
     498:	28 44 00 00 	lw r4,(r2+0)
	  data = c;
     49c:	78 03 00 00 	mvhi r3,0x0
 */

	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
     4a0:	20 21 00 ff 	andi r1,r1,0xff
	  data = c;
     4a4:	38 63 2e 5c 	ori r3,r3,0x2e5c
     4a8:	30 61 00 00 	sb (r3+0),r1
		while ((i2c0->ucr & !I2C_BUSY));
     4ac:	28 82 00 00 	lw r2,(r4+0)
		i2c0->wxrx = data;
     4b0:	58 81 00 04 	sw (r4+4),r1
	}
     4b4:	c3 a0 00 00 	ret

000004b8 <i2c_putrwaddr>:
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
     4b8:	78 03 00 00 	mvhi r3,0x0
     4bc:	20 21 00 ff 	andi r1,r1,0xff
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     4c0:	38 63 2e 54 	ori r3,r3,0x2e54
     4c4:	28 64 00 00 	lw r4,(r3+0)
     4c8:	3c 21 00 07 	sli r1,r1,7
		while ((i2c0->ucr & !I2C_BUSY));
		i2c0->wxrx = data;
	}
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
     4cc:	20 42 00 ff 	andi r2,r2,0xff
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     4d0:	b8 41 10 00 	or r2,r2,r1
     4d4:	58 82 00 08 	sw (r4+8),r2
	}
     4d8:	c3 a0 00 00 	ret

000004dc <i2c_putdatas>:
    //----------------------------------------------------------------
	void i2c_putdatas(char *str)	
	{
     4dc:	40 22 00 00 	lbu r2,(r1+0)
     4e0:	b8 20 20 00 	mv r4,r1
		char *c= str;
		while (*c) {
     4e4:	44 40 00 0e 	be r2,r0,51c <i2c_putdatas+0x40>
	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
		while ((i2c0->ucr & !I2C_BUSY));
     4e8:	78 01 00 00 	mvhi r1,0x0
     4ec:	38 21 2e 54 	ori r1,r1,0x2e54
     4f0:	28 23 00 00 	lw r3,(r1+0)
     4f4:	b8 80 08 00 	mv r1,r4
		i2c0->wxrx = data;
     4f8:	b8 40 20 00 	mv r4,r2
	void i2c_putdatas(char *str)	
	{
		char *c= str;
		while (*c) {
			i2c_putdata(*c);
		c++;
     4fc:	34 21 00 01 	addi r1,r1,1
	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
		while ((i2c0->ucr & !I2C_BUSY));
     500:	28 62 00 00 	lw r2,(r3+0)
		i2c0->wxrx = data;
     504:	58 64 00 04 	sw (r3+4),r4
	}
    //----------------------------------------------------------------
	void i2c_putdatas(char *str)	
	{
		char *c= str;
		while (*c) {
     508:	40 22 00 00 	lbu r2,(r1+0)
     50c:	5c 40 ff fb 	bne r2,r0,4f8 <i2c_putdatas+0x1c>
     510:	78 01 00 00 	mvhi r1,0x0
     514:	38 21 2e 5c 	ori r1,r1,0x2e5c
     518:	30 24 00 00 	sb (r1+0),r4
     51c:	c3 a0 00 00 	ret

00000520 <i2c_init>:
		c++;
		}
	}
    //----------------------------------------------------------------
	void i2c_init()
	{
     520:	78 01 00 00 	mvhi r1,0x0
     524:	38 21 2e 54 	ori r1,r1,0x2e54
     528:	28 23 00 00 	lw r3,(r1+0)
     52c:	34 02 00 08 	mvi r2,8
     530:	58 62 00 00 	sw (r3+0),r2
	 i2c0->ucr = I2C_ENA;  
	}
     534:	c3 a0 00 00 	ret

00000538 <i2c_sleep>:
    //----------------------------------------------------------------
	void i2c_sleep()
	{
     538:	78 01 00 00 	mvhi r1,0x0
     53c:	38 21 2e 54 	ori r1,r1,0x2e54
     540:	28 23 00 00 	lw r3,(r1+0)
     544:	28 62 00 00 	lw r2,(r3+0)
     548:	20 42 00 01 	andi r2,r2,0x1
     54c:	44 40 00 06 	be r2,r0,564 <i2c_sleep+0x2c>
		while((i2c0->ucr & I2C_BUSY))
		i2c0->ucr = 0x00;
     550:	34 02 00 00 	mvi r2,0
     554:	58 62 00 00 	sw (r3+0),r2
	 i2c0->ucr = I2C_ENA;  
	}
    //----------------------------------------------------------------
	void i2c_sleep()
	{
		while((i2c0->ucr & I2C_BUSY))
     558:	28 61 00 00 	lw r1,(r3+0)
     55c:	20 21 00 01 	andi r1,r1,0x1
     560:	5c 20 ff fd 	bne r1,r0,554 <i2c_sleep+0x1c>
     564:	c3 a0 00 00 	ret

00000568 <i2c_getdata>:
		i2c0->ucr = 0x00;
	}
    //----------------------------------------------------------------
	uint8_t i2c_getdata()
	{
     568:	78 01 00 00 	mvhi r1,0x0
     56c:	38 21 2e 54 	ori r1,r1,0x2e54
     570:	28 22 00 00 	lw r2,(r1+0)
     574:	28 41 00 00 	lw r1,(r2+0)
     578:	20 21 00 01 	andi r1,r1,0x1
     57c:	44 20 00 04 	be r1,r0,58c <i2c_getdata+0x24>
     580:	28 41 00 00 	lw r1,(r2+0)
     584:	20 21 00 02 	andi r1,r1,0x2
     588:	44 20 ff fb 	be r1,r0,574 <i2c_getdata+0xc>
		while ( (i2c0->ucr & I2C_BUSY) && (!(i2c0->ucr & I2C_ERROR)));
		return i2c0-> wxrx;
     58c:	28 41 00 04 	lw r1,(r2+4)
	}
     590:	20 21 00 ff 	andi r1,r1,0xff
     594:	c3 a0 00 00 	ret

00000598 <I2CreadByte>:
    //----------------------------------------------------------------
    uint8_t I2CreadByte(uint8_t address, uint8_t subaddress)
    {
     598:	78 03 00 00 	mvhi r3,0x0
     59c:	38 63 2e 54 	ori r3,r3,0x2e54
     5a0:	28 65 00 00 	lw r5,(r3+0)
     5a4:	20 26 00 ff 	andi r6,r1,0xff

	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
     5a8:	78 01 00 00 	mvhi r1,0x0
		i2c0->wxrx = data;
	}
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     5ac:	58 a6 00 08 	sw (r5+8),r6
		while ( (i2c0->ucr & I2C_BUSY) && (!(i2c0->ucr & I2C_ERROR)));
		return i2c0-> wxrx;
	}
    //----------------------------------------------------------------
    uint8_t I2CreadByte(uint8_t address, uint8_t subaddress)
    {
     5b0:	20 42 00 ff 	andi r2,r2,0xff

	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
     5b4:	38 21 2e 5c 	ori r1,r1,0x2e5c
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     5b8:	78 03 00 00 	mvhi r3,0x0

	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
     5bc:	30 22 00 00 	sb (r1+0),r2
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     5c0:	38 63 2e 44 	ori r3,r3,0x2e44
	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
		while ((i2c0->ucr & !I2C_BUSY));
     5c4:	28 a1 00 00 	lw r1,(r5+0)
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     5c8:	28 64 00 00 	lw r4,(r3+0)
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
		while ((i2c0->ucr & !I2C_BUSY));
		i2c0->wxrx = data;
     5cc:	58 a2 00 04 	sw (r5+4),r2
		}
	}
    //----------------------------------------------------------------
	void i2c_init()
	{
	 i2c0->ucr = I2C_ENA;  
     5d0:	34 03 00 08 	mvi r3,8
     5d4:	58 a3 00 00 	sw (r5+0),r3
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     5d8:	34 01 03 e8 	mvi r1,1000
     5dc:	58 81 00 10 	sw (r4+16),r1
    timer0->counter1 = 0;
     5e0:	34 02 00 00 	mvi r2,0
     5e4:	58 82 00 14 	sw (r4+20),r2
    timer0->tcr1 = TIMER_EN;
     5e8:	58 83 00 0c 	sw (r4+12),r3

    do {
        //halt();
         tcr = timer0->tcr1;
     5ec:	28 81 00 0c 	lw r1,(r4+12)
     } while ( ! (tcr & TIMER_TRIG) );
     5f0:	20 21 00 01 	andi r1,r1,0x1
     5f4:	44 20 ff fe 	be r1,r0,5ec <I2CreadByte+0x54>
		  //Indicar la direccion interna que se desea leer    
      i2c_putrwaddr (I2C_WRITE, address);
      i2c_putdata(subaddress);
      i2c_init(); 
      nsleep(20);
	  i2c0->ucr = 0x00;
     5f8:	34 01 00 00 	mvi r1,0
     5fc:	58 a1 00 00 	sw (r5+0),r1
		  //Pausa para que el esclavo procese la orden
      while((i2c0->ucr & I2C_BUSY));
     600:	28 a1 00 00 	lw r1,(r5+0)
     604:	20 22 00 01 	andi r2,r1,0x1
     608:	5c 40 ff fe 	bne r2,r0,600 <I2CreadByte+0x68>
void msleep(uint32_t msec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000)*msec;
     60c:	38 01 c3 50 	mvu r1,0xc350
     610:	58 81 00 10 	sw (r4+16),r1
    timer0->counter1 = 0;
     614:	58 82 00 14 	sw (r4+20),r2
    timer0->tcr1 = TIMER_EN;
     618:	34 01 00 08 	mvi r1,8
     61c:	58 81 00 0c 	sw (r4+12),r1

    do {
        //halt();
         tcr = timer0->tcr1;
     620:	28 81 00 0c 	lw r1,(r4+12)
     } while ( ! (tcr & TIMER_TRIG) );
     624:	20 21 00 01 	andi r1,r1,0x1
     628:	44 20 ff fe 	be r1,r0,620 <I2CreadByte+0x88>
		i2c0->wxrx = data;
	}
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     62c:	38 c1 00 80 	ori r1,r6,0x80
     630:	58 a1 00 08 	sw (r5+8),r1
		}
	}
    //----------------------------------------------------------------
	void i2c_init()
	{
	 i2c0->ucr = I2C_ENA;  
     634:	34 03 00 08 	mvi r3,8
     638:	58 a3 00 00 	sw (r5+0),r3
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     63c:	34 02 03 e8 	mvi r2,1000
     640:	58 82 00 10 	sw (r4+16),r2
    timer0->counter1 = 0;
     644:	34 01 00 00 	mvi r1,0
     648:	58 81 00 14 	sw (r4+20),r1
    timer0->tcr1 = TIMER_EN;
     64c:	58 83 00 0c 	sw (r4+12),r3

    do {
        //halt();
         tcr = timer0->tcr1;
     650:	28 81 00 0c 	lw r1,(r4+12)
     } while ( ! (tcr & TIMER_TRIG) );
     654:	20 21 00 01 	andi r1,r1,0x1
     658:	44 20 ff fe 	be r1,r0,650 <I2CreadByte+0xb8>
		  //gpio0->out = 0x65;
		  //Lectura de la informacion otorgada por el esclavo
      i2c_putrwaddr(I2C_READ, address);
      i2c_init();  
      nsleep(20);
      i2c0->ucr = 0x00;
     65c:	34 01 00 00 	mvi r1,0
     660:	58 a1 00 00 	sw (r5+0),r1
	  while ( (i2c0->ucr & I2C_BUSY) && (!(i2c0->ucr & I2C_ERROR)));
     664:	28 a1 00 00 	lw r1,(r5+0)
     668:	20 21 00 01 	andi r1,r1,0x1
     66c:	44 20 00 04 	be r1,r0,67c <I2CreadByte+0xe4>
     670:	28 a1 00 00 	lw r1,(r5+0)
     674:	20 21 00 02 	andi r1,r1,0x2
     678:	44 20 ff fb 	be r1,r0,664 <I2CreadByte+0xcc>
		  //gpio0->oe  = 0x000000ff;
		  //gpio0->out = 0x66;
	  return i2c0-> wxrx;     
     67c:	28 a1 00 04 	lw r1,(r5+4)
    }
     680:	20 21 00 ff 	andi r1,r1,0xff
     684:	c3 a0 00 00 	ret

00000688 <I2CreadBytes>:
    //----------------------------------------------------------------
    void I2CreadBytes(uint8_t address, uint8_t subaddress, int *dest, uint8_t count)
    {
     688:	37 9c ff fc 	addi sp,sp,-4
     68c:	5b 8b 00 04 	sw (sp+4),r11
		i2c0->wxrx = data;
	}
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     690:	78 05 00 00 	mvhi r5,0x0
     694:	38 a5 2e 54 	ori r5,r5,0x2e54
     698:	28 a7 00 00 	lw r7,(r5+0)
		  //gpio0->out = 0x66;
	  return i2c0-> wxrx;     
    }
    //----------------------------------------------------------------
    void I2CreadBytes(uint8_t address, uint8_t subaddress, int *dest, uint8_t count)
    {
     69c:	20 28 00 ff 	andi r8,r1,0xff

	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
     6a0:	78 01 00 00 	mvhi r1,0x0
		i2c0->wxrx = data;
	}
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     6a4:	58 e8 00 08 	sw (r7+8),r8
		  //gpio0->out = 0x66;
	  return i2c0-> wxrx;     
    }
    //----------------------------------------------------------------
    void I2CreadBytes(uint8_t address, uint8_t subaddress, int *dest, uint8_t count)
    {
     6a8:	20 42 00 ff 	andi r2,r2,0xff

	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
     6ac:	38 21 2e 5c 	ori r1,r1,0x2e5c
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     6b0:	78 05 00 00 	mvhi r5,0x0

	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
     6b4:	30 22 00 00 	sb (r1+0),r2
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     6b8:	38 a5 2e 44 	ori r5,r5,0x2e44
	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
		while ((i2c0->ucr & !I2C_BUSY));
     6bc:	28 e1 00 00 	lw r1,(r7+0)
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     6c0:	28 a6 00 00 	lw r6,(r5+0)
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
		while ((i2c0->ucr & !I2C_BUSY));
		i2c0->wxrx = data;
     6c4:	58 e2 00 04 	sw (r7+4),r2
		}
	}
    //----------------------------------------------------------------
	void i2c_init()
	{
	 i2c0->ucr = I2C_ENA;  
     6c8:	34 05 00 08 	mvi r5,8
     6cc:	58 e5 00 00 	sw (r7+0),r5
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     6d0:	34 01 03 e8 	mvi r1,1000
     6d4:	58 c1 00 10 	sw (r6+16),r1
    timer0->counter1 = 0;
     6d8:	34 02 00 00 	mvi r2,0
     6dc:	58 c2 00 14 	sw (r6+20),r2
    timer0->tcr1 = TIMER_EN;
     6e0:	58 c5 00 0c 	sw (r6+12),r5
		  //gpio0->out = 0x66;
	  return i2c0-> wxrx;     
    }
    //----------------------------------------------------------------
    void I2CreadBytes(uint8_t address, uint8_t subaddress, int *dest, uint8_t count)
    {
     6e4:	20 84 00 ff 	andi r4,r4,0xff
    timer0->counter1 = 0;
    timer0->tcr1 = TIMER_EN;

    do {
        //halt();
         tcr = timer0->tcr1;
     6e8:	28 c1 00 0c 	lw r1,(r6+12)
     } while ( ! (tcr & TIMER_TRIG) );
     6ec:	20 21 00 01 	andi r1,r1,0x1
     6f0:	44 20 ff fe 	be r1,r0,6e8 <I2CreadBytes+0x60>
    {
		i2c_putrwaddr (I2C_WRITE, address);
		i2c_putdata(subaddress);
		i2c_init(); 
		nsleep(20);
		i2c0->ucr = 0x00;
     6f4:	34 01 00 00 	mvi r1,0
     6f8:	58 e1 00 00 	sw (r7+0),r1
		  //Pausa para que el esclavo procese la orden
		while((i2c0->ucr & I2C_BUSY));
     6fc:	28 e1 00 00 	lw r1,(r7+0)
     700:	20 22 00 01 	andi r2,r1,0x1
     704:	5c 40 ff fe 	bne r2,r0,6fc <I2CreadBytes+0x74>
void msleep(uint32_t msec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000)*msec;
     708:	38 01 c3 50 	mvu r1,0xc350
     70c:	58 c1 00 10 	sw (r6+16),r1
    timer0->counter1 = 0;
     710:	58 c2 00 14 	sw (r6+20),r2
    timer0->tcr1 = TIMER_EN;
     714:	34 01 00 08 	mvi r1,8
     718:	58 c1 00 0c 	sw (r6+12),r1

    do {
        //halt();
         tcr = timer0->tcr1;
     71c:	28 c1 00 0c 	lw r1,(r6+12)
     } while ( ! (tcr & TIMER_TRIG) );
     720:	20 21 00 01 	andi r1,r1,0x1
     724:	44 20 ff fe 	be r1,r0,71c <I2CreadBytes+0x94>
		i2c0->wxrx = data;
	}
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     728:	39 01 00 80 	ori r1,r8,0x80
     72c:	58 e1 00 08 	sw (r7+8),r1
		}
	}
    //----------------------------------------------------------------
	void i2c_init()
	{
	 i2c0->ucr = I2C_ENA;  
     730:	34 01 00 08 	mvi r1,8
     734:	58 e1 00 00 	sw (r7+0),r1
		  //Lectura de la informacion otorgada por el esclavo
		i2c_putrwaddr(I2C_READ, address);
		i2c_init();  
		//-------------------------------------
      uint8_t i;
		for (i=0; i<count;)
     738:	44 80 00 19 	be r4,r0,79c <I2CreadBytes+0x114>
     73c:	34 05 00 00 	mvi r5,0
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
    timer0->counter1 = 0;
    timer0->tcr1 = TIMER_EN;
     740:	b8 20 58 00 	mv r11,r1
		  //Lectura de la informacion otorgada por el esclavo
		i2c_putrwaddr(I2C_READ, address);
		i2c_init();  
		//-------------------------------------
      uint8_t i;
		for (i=0; i<count;)
     744:	34 88 ff ff 	addi r8,r4,-1
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     748:	34 0a 03 e8 	mvi r10,1000
    timer0->counter1 = 0;
     74c:	b8 a0 48 00 	mv r9,r5
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     750:	58 ca 00 10 	sw (r6+16),r10
    timer0->counter1 = 0;
     754:	58 c9 00 14 	sw (r6+20),r9
    timer0->tcr1 = TIMER_EN;
     758:	58 cb 00 0c 	sw (r6+12),r11

    do {
        //halt();
         tcr = timer0->tcr1;
     75c:	28 c1 00 0c 	lw r1,(r6+12)
     } while ( ! (tcr & TIMER_TRIG) );
     760:	20 21 00 01 	andi r1,r1,0x1
     764:	44 20 ff fe 	be r1,r0,75c <I2CreadBytes+0xd4>
		//-------------------------------------
      uint8_t i;
		for (i=0; i<count;)
		{
			nsleep(20);
         if (i==count-1) i2c0->ucr = 0x00;
     768:	44 a8 00 10 	be r5,r8,7a8 <I2CreadBytes+0x120>

			while ( (i2c0->ucr & I2C_BUSY) && (!(i2c0->ucr & I2C_ERROR)));
     76c:	28 e1 00 00 	lw r1,(r7+0)
     770:	20 21 00 01 	andi r1,r1,0x1
     774:	44 20 00 04 	be r1,r0,784 <I2CreadBytes+0xfc>
     778:	28 e1 00 00 	lw r1,(r7+0)
     77c:	20 21 00 02 	andi r1,r1,0x2
     780:	44 20 ff fb 	be r1,r0,76c <I2CreadBytes+0xe4>
            dest[i++] = i2c0-> wxrx;
     784:	28 e1 00 04 	lw r1,(r7+4)
     788:	34 a5 00 01 	addi r5,r5,1
		  //Lectura de la informacion otorgada por el esclavo
		i2c_putrwaddr(I2C_READ, address);
		i2c_init();  
		//-------------------------------------
      uint8_t i;
		for (i=0; i<count;)
     78c:	20 a2 00 ff 	andi r2,r5,0xff
		{
			nsleep(20);
         if (i==count-1) i2c0->ucr = 0x00;

			while ( (i2c0->ucr & I2C_BUSY) && (!(i2c0->ucr & I2C_ERROR)));
            dest[i++] = i2c0-> wxrx;
     790:	58 61 00 00 	sw (r3+0),r1
     794:	34 63 00 04 	addi r3,r3,4
		  //Lectura de la informacion otorgada por el esclavo
		i2c_putrwaddr(I2C_READ, address);
		i2c_init();  
		//-------------------------------------
      uint8_t i;
		for (i=0; i<count;)
     798:	54 82 ff ee 	bgu r4,r2,750 <I2CreadBytes+0xc8>

			while ( (i2c0->ucr & I2C_BUSY) && (!(i2c0->ucr & I2C_ERROR)));
            dest[i++] = i2c0-> wxrx;
		}
		//-------------------------------------
    }
     79c:	2b 8b 00 04 	lw r11,(sp+4)
     7a0:	37 9c 00 04 	addi sp,sp,4
     7a4:	c3 a0 00 00 	ret
		//-------------------------------------
      uint8_t i;
		for (i=0; i<count;)
		{
			nsleep(20);
         if (i==count-1) i2c0->ucr = 0x00;
     7a8:	34 01 00 00 	mvi r1,0
     7ac:	58 e1 00 00 	sw (r7+0),r1
     7b0:	e3 ff ff ef 	bi 76c <I2CreadBytes+0xe4>

000007b4 <I2CwriteByte>:
		}
		//-------------------------------------
    }
    //----------------------------------------------------------------
	void I2CwriteByte(uint8_t address, uint8_t subaddress, uint8_t data)
    {
     7b4:	78 04 00 00 	mvhi r4,0x0
     7b8:	38 84 2e 54 	ori r4,r4,0x2e54
     7bc:	28 86 00 00 	lw r6,(r4+0)
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     7c0:	78 05 00 00 	mvhi r5,0x0
		}
		//-------------------------------------
    }
    //----------------------------------------------------------------
	void I2CwriteByte(uint8_t address, uint8_t subaddress, uint8_t data)
    {
     7c4:	20 21 00 ff 	andi r1,r1,0xff
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     7c8:	38 a5 2e 44 	ori r5,r5,0x2e44
		i2c0->wxrx = data;
	}
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     7cc:	58 c1 00 08 	sw (r6+8),r1
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     7d0:	28 a5 00 00 	lw r5,(r5+0)
		}
		//-------------------------------------
    }
    //----------------------------------------------------------------
	void I2CwriteByte(uint8_t address, uint8_t subaddress, uint8_t data)
    {
     7d4:	20 42 00 ff 	andi r2,r2,0xff
      i2c_putrwaddr (I2C_WRITE, address);
      i2c0->wxrx = subaddress;
     7d8:	58 c2 00 04 	sw (r6+4),r2
		}
	}
    //----------------------------------------------------------------
	void i2c_init()
	{
	 i2c0->ucr = I2C_ENA;  
     7dc:	34 04 00 08 	mvi r4,8
     7e0:	58 c4 00 00 	sw (r6+0),r4
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     7e4:	34 01 03 e8 	mvi r1,1000
     7e8:	58 a1 00 10 	sw (r5+16),r1
    timer0->counter1 = 0;
     7ec:	34 02 00 00 	mvi r2,0
     7f0:	58 a2 00 14 	sw (r5+20),r2
    timer0->tcr1 = TIMER_EN;
     7f4:	58 a4 00 0c 	sw (r5+12),r4
		}
		//-------------------------------------
    }
    //----------------------------------------------------------------
	void I2CwriteByte(uint8_t address, uint8_t subaddress, uint8_t data)
    {
     7f8:	20 63 00 ff 	andi r3,r3,0xff
    timer0->counter1 = 0;
    timer0->tcr1 = TIMER_EN;

    do {
        //halt();
         tcr = timer0->tcr1;
     7fc:	28 a1 00 0c 	lw r1,(r5+12)
     } while ( ! (tcr & TIMER_TRIG) );
     800:	20 21 00 01 	andi r1,r1,0x1
     804:	44 20 ff fe 	be r1,r0,7fc <I2CwriteByte+0x48>
      i2c_putrwaddr (I2C_WRITE, address);
      i2c0->wxrx = subaddress;
      i2c_init();
      nsleep(20);
	  //Para verificar cuando se valida la condicion
      while((i2c0->ucr & I2C_BUSY));
     808:	28 c1 00 00 	lw r1,(r6+0)
     80c:	20 22 00 01 	andi r2,r1,0x1
     810:	5c 40 ff fe 	bne r2,r0,808 <I2CwriteByte+0x54>
	   //gpio0->oe  = 0x000000ff;
	   //gpio0->out = 0xAA;
      i2c0->wxrx = data;
     814:	58 c3 00 04 	sw (r6+4),r3
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     818:	34 01 03 e8 	mvi r1,1000
     81c:	58 a1 00 10 	sw (r5+16),r1
    timer0->counter1 = 0;
     820:	58 a2 00 14 	sw (r5+20),r2
    timer0->tcr1 = TIMER_EN;
     824:	34 01 00 08 	mvi r1,8
     828:	58 a1 00 0c 	sw (r5+12),r1

    do {
        //halt();
         tcr = timer0->tcr1;
     82c:	28 a1 00 0c 	lw r1,(r5+12)
     } while ( ! (tcr & TIMER_TRIG) );
     830:	20 21 00 01 	andi r1,r1,0x1
     834:	44 20 ff fe 	be r1,r0,82c <I2CwriteByte+0x78>
      while((i2c0->ucr & I2C_BUSY));
	   //gpio0->oe  = 0x000000ff;
	   //gpio0->out = 0xAA;
      i2c0->wxrx = data;
      nsleep(20);
	  i2c0->ucr = 0x00;
     838:	34 01 00 00 	mvi r1,0
     83c:	58 c1 00 00 	sw (r6+0),r1
      while((i2c0->ucr & I2C_BUSY));
     840:	28 c1 00 00 	lw r1,(r6+0)
     844:	20 21 00 01 	andi r1,r1,0x1
     848:	5c 20 ff fe 	bne r1,r0,840 <I2CwriteByte+0x8c>
    }
     84c:	c3 a0 00 00 	ret

00000850 <everloop_putdata_1>:

/***************************************************************************
 * everloop functions
 */
	void everloop_putdata_1(uint8_t data1)
	{
     850:	78 02 00 00 	mvhi r2,0x0
     854:	38 42 2e 50 	ori r2,r2,0x2e50
     858:	28 43 00 00 	lw r3,(r2+0)
     85c:	20 21 00 ff 	andi r1,r1,0xff
	  everloop0->prueba_1 = data1;
     860:	30 61 00 00 	sb (r3+0),r1
	}
     864:	c3 a0 00 00 	ret

00000868 <everloop_putdata_2>:

	void everloop_putdata_2(uint8_t data2)
	{
     868:	78 02 00 00 	mvhi r2,0x0
     86c:	38 42 2e 50 	ori r2,r2,0x2e50
     870:	28 43 00 00 	lw r3,(r2+0)
     874:	20 21 00 ff 	andi r1,r1,0xff
	  everloop0->prueba_2 = data2;
     878:	30 61 00 01 	sb (r3+1),r1
	}
     87c:	c3 a0 00 00 	ret

00000880 <everloop_putdata_3>:

	void everloop_putdata_3(uint8_t data3)
	{
     880:	78 02 00 00 	mvhi r2,0x0
     884:	38 42 2e 50 	ori r2,r2,0x2e50
     888:	28 43 00 00 	lw r3,(r2+0)
     88c:	20 21 00 ff 	andi r1,r1,0xff
	  everloop0->prueba_3 = data3;
     890:	30 61 00 02 	sb (r3+2),r1
	}
     894:	c3 a0 00 00 	ret

00000898 <setmotor1>:
/***************************************************************************
 * PWM Functions
 */
    //----------------------------------------------------------------
	uint8_t setmotor1(uint8_t bit)
	{
     898:	78 02 00 00 	mvhi r2,0x0
     89c:	38 42 2e 58 	ori r2,r2,0x2e58
     8a0:	28 44 00 00 	lw r4,(r2+0)
     8a4:	20 23 00 ff 	andi r3,r1,0xff
		uint8_t val0=bit;
		pwm0->duty_m1=val0;
		return val0;
	
	}
     8a8:	b8 60 08 00 	mv r1,r3
 */
    //----------------------------------------------------------------
	uint8_t setmotor1(uint8_t bit)
	{
		uint8_t val0=bit;
		pwm0->duty_m1=val0;
     8ac:	58 83 00 04 	sw (r4+4),r3
		return val0;
	
	}
     8b0:	c3 a0 00 00 	ret

000008b4 <setmotor2>:
    //----------------------------------------------------------------
	uint8_t setmotor2(uint8_t bit)
	{
     8b4:	78 02 00 00 	mvhi r2,0x0
     8b8:	38 42 2e 58 	ori r2,r2,0x2e58
     8bc:	28 44 00 00 	lw r4,(r2+0)
     8c0:	20 23 00 ff 	andi r3,r1,0xff
		uint8_t val0=bit;
		pwm0-> duty_m2=val0;
		return val0;
	}
     8c4:	b8 60 08 00 	mv r1,r3
	}
    //----------------------------------------------------------------
	uint8_t setmotor2(uint8_t bit)
	{
		uint8_t val0=bit;
		pwm0-> duty_m2=val0;
     8c8:	58 83 00 08 	sw (r4+8),r3
		return val0;
	}
     8cc:	c3 a0 00 00 	ret

000008d0 <setmotor3>:
    //----------------------------------------------------------------
	uint8_t setmotor3(uint8_t bit)
	{
     8d0:	78 02 00 00 	mvhi r2,0x0
     8d4:	38 42 2e 58 	ori r2,r2,0x2e58
     8d8:	28 44 00 00 	lw r4,(r2+0)
     8dc:	20 23 00 ff 	andi r3,r1,0xff
		uint8_t val0=bit;
		pwm0-> duty_m3=val0;
		return val0;
	}
     8e0:	b8 60 08 00 	mv r1,r3
	}
    //----------------------------------------------------------------
	uint8_t setmotor3(uint8_t bit)
	{
		uint8_t val0=bit;
		pwm0-> duty_m3=val0;
     8e4:	58 83 00 0c 	sw (r4+12),r3
		return val0;
	}
     8e8:	c3 a0 00 00 	ret

000008ec <setmotor4>:
    //----------------------------------------------------------------
	uint8_t setmotor4(uint8_t bit)
	{
     8ec:	78 02 00 00 	mvhi r2,0x0
     8f0:	38 42 2e 58 	ori r2,r2,0x2e58
     8f4:	28 44 00 00 	lw r4,(r2+0)
     8f8:	20 23 00 ff 	andi r3,r1,0xff
		uint8_t val0=bit;
		pwm0-> duty_m4=val0;
		return val0;
	}
     8fc:	b8 60 08 00 	mv r1,r3
	}
    //----------------------------------------------------------------
	uint8_t setmotor4(uint8_t bit)
	{
		uint8_t val0=bit;
		pwm0-> duty_m4=val0;
     900:	58 83 00 10 	sw (r4+16),r3
		return val0;
	}
     904:	c3 a0 00 00 	ret

00000908 <pwm_init>:
    //----------------------------------------------------------------
	void pwm_init(void)
	{
     908:	78 01 00 00 	mvhi r1,0x0
     90c:	38 21 2e 58 	ori r1,r1,0x2e58
     910:	28 23 00 00 	lw r3,(r1+0)
     914:	34 02 00 01 	mvi r2,1
     918:	58 62 00 00 	sw (r3+0),r2
			pwm0->enable=TRUE;
	}
     91c:	c3 a0 00 00 	ret

00000920 <set_pwm>:
    //----------------------------------------------------------------
	void set_pwm(uint8_t state)
	{
     920:	20 23 00 ff 	andi r3,r1,0xff
		if(state == HIGH){
     924:	34 01 00 01 	mvi r1,1
     928:	44 61 00 07 	be r3,r1,944 <set_pwm+0x24>
			pwm0->enable=TRUE;
		}else if(state ==LOW){
     92c:	5c 60 00 05 	bne r3,r0,940 <set_pwm+0x20>
			pwm0->enable=FALSE;
     930:	78 01 00 00 	mvhi r1,0x0
     934:	38 21 2e 58 	ori r1,r1,0x2e58
     938:	28 22 00 00 	lw r2,(r1+0)
     93c:	58 43 00 00 	sw (r2+0),r3
     940:	c3 a0 00 00 	ret
	}
    //----------------------------------------------------------------
	void set_pwm(uint8_t state)
	{
		if(state == HIGH){
			pwm0->enable=TRUE;
     944:	78 01 00 00 	mvhi r1,0x0
     948:	38 21 2e 58 	ori r1,r1,0x2e58
     94c:	28 22 00 00 	lw r2,(r1+0)
     950:	58 43 00 00 	sw (r2+0),r3
     954:	c3 a0 00 00 	ret

00000958 <estimateDiv64To32>:
the exact quotient q is larger than 32 bits, the maximum positive 32-bit
unsigned integer is returned.
-------------------------------------------------------------------------------
*/
static bits32 estimateDiv64To32( bits32 a0, bits32 a1, bits32 b )
{
     958:	37 9c ff f0 	addi sp,sp,-16
     95c:	5b 8b 00 10 	sw (sp+16),r11
     960:	5b 8c 00 0c 	sw (sp+12),r12
     964:	5b 8d 00 08 	sw (sp+8),r13
     968:	5b 8e 00 04 	sw (sp+4),r14
     96c:	b8 20 38 00 	mv r7,r1
     970:	b8 60 60 00 	mv r12,r3
     974:	b8 40 68 00 	mv r13,r2
    bits32 b0, b1;
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
     978:	54 61 00 08 	bgu r3,r1,998 <estimateDiv64To32+0x40>
     97c:	34 01 ff ff 	mvi r1,-1
    }
    rem0 = ( rem0<<16 ) | ( rem1>>16 );
    z |= ( b0<<16 <= rem0 ) ? 0xFFFF : rem0 / b0;
    return z;

}
     980:	2b 8b 00 10 	lw r11,(sp+16)
     984:	2b 8c 00 0c 	lw r12,(sp+12)
     988:	2b 8d 00 08 	lw r13,(sp+8)
     98c:	2b 8e 00 04 	lw r14,(sp+4)
     990:	37 9c 00 10 	addi sp,sp,16
     994:	c3 a0 00 00 	ret
    bits32 b0, b1;
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
     998:	00 69 00 10 	srui r9,r3,16
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
     99c:	3d 2e 00 10 	sli r14,r9,16
     9a0:	55 c1 00 2f 	bgu r14,r1,a5c <estimateDiv64To32+0x104>
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
     9a4:	20 61 ff ff 	andi r1,r3,0xffff
     9a8:	3c 22 00 10 	sli r2,r1,16
     9ac:	34 0b 00 00 	mvi r11,0
     9b0:	78 08 ff ff 	mvhi r8,0xffff
     9b4:	c8 41 28 00 	sub r5,r2,r1
     9b8:	39 08 00 00 	ori r8,r8,0x0
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
     9bc:	21 2a ff ff 	andi r10,r9,0xffff
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
     9c0:	b9 60 20 00 	mv r4,r11
     9c4:	38 06 ff ff 	mvu r6,0xffff
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
     9c8:	3c a2 00 10 	sli r2,r5,16
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
     9cc:	89 46 08 00 	mul r1,r10,r6
    zMiddleA <<= 16;
    z1 += zMiddleA;
     9d0:	b4 44 18 00 	add r3,r2,r4
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
     9d4:	00 a5 00 10 	srui r5,r5,16
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
     9d8:	f4 43 10 00 	cmpgu r2,r2,r3
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
     9dc:	c8 e1 08 00 	sub r1,r7,r1
     9e0:	c8 25 08 00 	sub r1,r1,r5
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
     9e4:	f4 6d 20 00 	cmpgu r4,r3,r13
     9e8:	c8 22 08 00 	sub r1,r1,r2
     9ec:	c8 24 08 00 	sub r1,r1,r4
     9f0:	c8 2b 28 00 	sub r5,r1,r11
INLINE void
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
     9f4:	c9 a3 10 00 	sub r2,r13,r3
    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    mul32To64( b, z, &term0, &term1 );
    sub64( a0, a1, term0, term1, &rem0, &rem1 );
    while ( ( (sbits32) rem0 ) < 0 ) {
     9f8:	4c a0 00 0d 	bge r5,r0,a2c <estimateDiv64To32+0xd4>
     9fc:	78 07 ff ff 	mvhi r7,0xffff
     a00:	3d 83 00 10 	sli r3,r12,16
        z -= 0x10000;
     a04:	38 e7 00 00 	ori r7,r7,0x0
 add64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{
    bits32 z1;

    z1 = a1 + b1;
     a08:	b4 43 30 00 	add r6,r2,r3
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
     a0c:	f4 46 08 00 	cmpgu r1,r2,r6
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    mul32To64( b, z, &term0, &term1 );
    sub64( a0, a1, term0, term1, &rem0, &rem1 );
    while ( ( (sbits32) rem0 ) < 0 ) {
        z -= 0x10000;
     a10:	b5 07 40 00 	add r8,r8,r7
{
    bits32 z1;

    z1 = a1 + b1;
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
     a14:	b4 29 08 00 	add r1,r1,r9
     a18:	b4 a1 28 00 	add r5,r5,r1
    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    mul32To64( b, z, &term0, &term1 );
    sub64( a0, a1, term0, term1, &rem0, &rem1 );
    while ( ( (sbits32) rem0 ) < 0 ) {
     a1c:	b8 c0 10 00 	mv r2,r6
     a20:	4c a0 00 02 	bge r5,r0,a28 <estimateDiv64To32+0xd0>
     a24:	e3 ff ff f9 	bi a08 <estimateDiv64To32+0xb0>
     a28:	b8 c0 10 00 	mv r2,r6
        z -= 0x10000;
        b1 = b<<16;
        add64( rem0, rem1, b0, b1, &rem0, &rem1 );
    }
    rem0 = ( rem0<<16 ) | ( rem1>>16 );
     a2c:	00 42 00 10 	srui r2,r2,16
     a30:	3c a1 00 10 	sli r1,r5,16
     a34:	b8 41 08 00 	or r1,r2,r1
    z |= ( b0<<16 <= rem0 ) ? 0xFFFF : rem0 / b0;
     a38:	55 c1 00 19 	bgu r14,r1,a9c <estimateDiv64To32+0x144>
     a3c:	38 01 ff ff 	mvu r1,0xffff
     a40:	b8 28 08 00 	or r1,r1,r8
    return z;

}
     a44:	2b 8b 00 10 	lw r11,(sp+16)
     a48:	2b 8c 00 0c 	lw r12,(sp+12)
     a4c:	2b 8d 00 08 	lw r13,(sp+8)
     a50:	2b 8e 00 04 	lw r14,(sp+4)
     a54:	37 9c 00 10 	addi sp,sp,16
     a58:	c3 a0 00 00 	ret
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
     a5c:	8c 29 08 00 	divu r1,r1,r9
     a60:	20 64 ff ff 	andi r4,r3,0xffff
     a64:	3c 28 00 10 	sli r8,r1,16
     a68:	21 2a ff ff 	andi r10,r9,0xffff
     a6c:	01 06 00 10 	srui r6,r8,16
     a70:	21 01 ff ff 	andi r1,r8,0xffff
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
     a74:	88 86 10 00 	mul r2,r4,r6
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
     a78:	88 2a 18 00 	mul r3,r1,r10
     a7c:	88 24 20 00 	mul r4,r1,r4
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
     a80:	b4 43 28 00 	add r5,r2,r3
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
     a84:	54 65 00 03 	bgu r3,r5,a90 <estimateDiv64To32+0x138>
     a88:	34 0b 00 00 	mvi r11,0
     a8c:	e3 ff ff cf 	bi 9c8 <estimateDiv64To32+0x70>
     a90:	78 0b 00 01 	mvhi r11,0x1
     a94:	39 6b 00 00 	ori r11,r11,0x0
     a98:	e3 ff ff cc 	bi 9c8 <estimateDiv64To32+0x70>
        z -= 0x10000;
        b1 = b<<16;
        add64( rem0, rem1, b0, b1, &rem0, &rem1 );
    }
    rem0 = ( rem0<<16 ) | ( rem1>>16 );
    z |= ( b0<<16 <= rem0 ) ? 0xFFFF : rem0 / b0;
     a9c:	8c 29 08 00 	divu r1,r1,r9
     aa0:	b8 28 08 00 	or r1,r1,r8
     aa4:	e3 ff ff e8 	bi a44 <estimateDiv64To32+0xec>

00000aa8 <float_raise>:
substitute a result value.  If traps are not implemented, this routine
should be simply `float_exception_flags |= flags;'.
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{
     aa8:	78 02 00 00 	mvhi r2,0x0
     aac:	38 42 2e 64 	ori r2,r2,0x2e64
     ab0:	28 43 00 00 	lw r3,(r2+0)
     ab4:	b8 23 08 00 	or r1,r1,r3
     ab8:	58 41 00 00 	sw (r2+0),r1

    float_exception_flags |= flags;

}
     abc:	c3 a0 00 00 	ret

00000ac0 <float32_is_nan>:
Returns 1 if the single-precision floating-point value `a' is a NaN;
otherwise returns 0.
-------------------------------------------------------------------------------
*/
flag float32_is_nan( float32 a )
{
     ac0:	78 02 ff 00 	mvhi r2,0xff00
     ac4:	38 42 00 00 	ori r2,r2,0x0
     ac8:	b4 21 08 00 	add r1,r1,r1

    return ( 0xFF000000 < (bits32) ( a<<1 ) );

}
     acc:	f4 22 08 00 	cmpgu r1,r1,r2
     ad0:	c3 a0 00 00 	ret

00000ad4 <float32_is_signaling_nan>:
Returns 1 if the single-precision floating-point value `a' is a signaling
NaN; otherwise returns 0.
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{
     ad4:	b8 20 20 00 	mv r4,r1

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     ad8:	00 21 00 16 	srui r1,r1,22
     adc:	34 02 01 fe 	mvi r2,510
     ae0:	20 21 01 ff 	andi r1,r1,0x1ff
     ae4:	34 03 00 00 	mvi r3,0
     ae8:	44 22 00 03 	be r1,r2,af4 <float32_is_signaling_nan+0x20>

}
     aec:	b8 60 08 00 	mv r1,r3
     af0:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     af4:	78 01 00 3f 	mvhi r1,0x3f
     af8:	38 21 ff ff 	ori r1,r1,0xffff
     afc:	a0 81 08 00 	and r1,r4,r1
     b00:	7c 23 00 00 	cmpnei r3,r1,0

}
     b04:	b8 60 08 00 	mv r1,r3
     b08:	c3 a0 00 00 	ret

00000b0c <propagateFloat32NaN>:
is a NaN, and returns the appropriate NaN result.  If either `a' or `b' is a
signaling NaN, the invalid exception is raised.
-------------------------------------------------------------------------------
*/
static float32 propagateFloat32NaN( float32 a, float32 b )
{
     b0c:	00 23 00 16 	srui r3,r1,22
     b10:	b8 20 30 00 	mv r6,r1
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     b14:	20 63 01 ff 	andi r3,r3,0x1ff
     b18:	34 01 01 fe 	mvi r1,510
is a NaN, and returns the appropriate NaN result.  If either `a' or `b' is a
signaling NaN, the invalid exception is raised.
-------------------------------------------------------------------------------
*/
static float32 propagateFloat32NaN( float32 a, float32 b )
{
     b1c:	b8 40 20 00 	mv r4,r2
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     b20:	34 07 00 00 	mvi r7,0
     b24:	44 61 00 24 	be r3,r1,bb4 <propagateFloat32NaN+0xa8>
    aIsNaN = float32_is_nan( a );
    aIsSignalingNaN = float32_is_signaling_nan( a );
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
    b |= 0x00400000;
     b28:	00 81 00 16 	srui r1,r4,22
     b2c:	34 02 01 fe 	mvi r2,510
     b30:	20 21 01 ff 	andi r1,r1,0x1ff
     b34:	34 03 00 00 	mvi r3,0
     b38:	44 22 00 1a 	be r1,r2,ba0 <propagateFloat32NaN+0x94>
     b3c:	78 05 00 40 	mvhi r5,0x40
     b40:	b8 a0 08 00 	mv r1,r5
    if ( aIsSignalingNaN | bIsSignalingNaN ) float_raise( float_flag_invalid );
     b44:	b8 67 10 00 	or r2,r3,r7
    aIsNaN = float32_is_nan( a );
    aIsSignalingNaN = float32_is_signaling_nan( a );
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
    b |= 0x00400000;
     b48:	38 21 00 00 	ori r1,r1,0x0
     b4c:	b8 81 18 00 	or r3,r4,r1
    if ( aIsSignalingNaN | bIsSignalingNaN ) float_raise( float_flag_invalid );
     b50:	44 40 00 06 	be r2,r0,b68 <propagateFloat32NaN+0x5c>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
     b54:	78 02 00 00 	mvhi r2,0x0
     b58:	38 42 2e 64 	ori r2,r2,0x2e64
     b5c:	28 41 00 00 	lw r1,(r2+0)
     b60:	38 21 00 10 	ori r1,r1,0x10
     b64:	58 41 00 00 	sw (r2+0),r1
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
    b |= 0x00400000;
    if ( aIsSignalingNaN | bIsSignalingNaN ) float_raise( float_flag_invalid );
    if ( aIsNaN ) {
     b68:	78 02 ff 00 	mvhi r2,0xff00
     b6c:	38 42 00 00 	ori r2,r2,0x0
     b70:	b4 c6 08 00 	add r1,r6,r6
     b74:	50 41 00 05 	bgeu r2,r1,b88 <propagateFloat32NaN+0x7c>
        return ( aIsSignalingNaN & bIsNaN ) ? b : a;
     b78:	b4 84 08 00 	add r1,r4,r4
     b7c:	f4 22 08 00 	cmpgu r1,r1,r2
     b80:	a0 e1 08 00 	and r1,r7,r1
     b84:	44 20 00 03 	be r1,r0,b90 <propagateFloat32NaN+0x84>
    }
    else {
        return b;
    }

}
     b88:	b8 60 08 00 	mv r1,r3
     b8c:	c3 a0 00 00 	ret

    aIsNaN = float32_is_nan( a );
    aIsSignalingNaN = float32_is_signaling_nan( a );
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
     b90:	38 a5 00 00 	ori r5,r5,0x0
     b94:	b8 c5 18 00 	or r3,r6,r5
    }
    else {
        return b;
    }

}
     b98:	b8 60 08 00 	mv r1,r3
     b9c:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     ba0:	78 01 00 3f 	mvhi r1,0x3f
     ba4:	38 21 ff ff 	ori r1,r1,0xffff
     ba8:	a0 81 08 00 	and r1,r4,r1
     bac:	7c 23 00 00 	cmpnei r3,r1,0
     bb0:	e3 ff ff e3 	bi b3c <propagateFloat32NaN+0x30>
     bb4:	78 01 00 3f 	mvhi r1,0x3f
     bb8:	38 21 ff ff 	ori r1,r1,0xffff
     bbc:	a0 c1 08 00 	and r1,r6,r1
     bc0:	7c 27 00 00 	cmpnei r7,r1,0
     bc4:	e3 ff ff d9 	bi b28 <propagateFloat32NaN+0x1c>

00000bc8 <roundAndPackFloat32>:
The handling of underflow and overflow follows the IEC/IEEE Standard for
Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 roundAndPackFloat32( flag zSign, int16 zExp, bits32 zSig )
{
     bc8:	78 04 00 00 	mvhi r4,0x0
     bcc:	38 84 2e 60 	ori r4,r4,0x2e60
     bd0:	28 84 00 00 	lw r4,(r4+0)
     bd4:	b8 20 48 00 	mv r9,r1
     bd8:	b8 40 30 00 	mv r6,r2
    flag roundNearestEven;
    int8 roundIncrement, roundBits;
    flag isTiny;

    roundingMode = float_rounding_mode;
    roundNearestEven = roundingMode == float_round_nearest_even;
     bdc:	64 88 00 00 	cmpei r8,r4,0
The handling of underflow and overflow follows the IEC/IEEE Standard for
Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 roundAndPackFloat32( flag zSign, int16 zExp, bits32 zSig )
{
     be0:	b8 60 38 00 	mv r7,r3
    flag isTiny;

    roundingMode = float_rounding_mode;
    roundNearestEven = roundingMode == float_round_nearest_even;
    roundIncrement = 0x40;
    if ( ! roundNearestEven ) {
     be4:	34 05 00 40 	mvi r5,64
     be8:	5d 00 00 07 	bne r8,r0,c04 <roundAndPackFloat32+0x3c>
        if ( roundingMode == float_round_to_zero ) {
     bec:	34 01 00 01 	mvi r1,1
     bf0:	44 81 00 37 	be r4,r1,ccc <roundAndPackFloat32+0x104>
            roundIncrement = 0;
        }
        else {
            roundIncrement = 0x7F;
            if ( zSign ) {
     bf4:	45 28 00 34 	be r9,r8,cc4 <roundAndPackFloat32+0xfc>
                if ( roundingMode == float_round_up ) roundIncrement = 0;
     bf8:	34 01 00 02 	mvi r1,2
     bfc:	44 81 00 34 	be r4,r1,ccc <roundAndPackFloat32+0x104>
            }
            else {
                if ( roundingMode == float_round_down ) roundIncrement = 0;
     c00:	34 05 00 7f 	mvi r5,127
            }
        }
    }
    roundBits = zSig & 0x7F;
    if ( 0xFD <= (bits16) zExp ) {
     c04:	20 c2 ff ff 	andi r2,r6,0xffff
     c08:	34 01 00 fc 	mvi r1,252
            else {
                if ( roundingMode == float_round_down ) roundIncrement = 0;
            }
        }
    }
    roundBits = zSig & 0x7F;
     c0c:	20 e3 00 7f 	andi r3,r7,0x7f
     c10:	b4 a7 20 00 	add r4,r5,r7
    if ( 0xFD <= (bits16) zExp ) {
     c14:	50 22 00 05 	bgeu r1,r2,c28 <roundAndPackFloat32+0x60>
        if (    ( 0xFD < zExp )
     c18:	34 01 00 fd 	mvi r1,253
     c1c:	48 c1 00 1e 	bg r6,r1,c94 <roundAndPackFloat32+0xcc>
     c20:	44 c1 00 1c 	be r6,r1,c90 <roundAndPackFloat32+0xc8>
                  && ( (sbits32) ( zSig + roundIncrement ) < 0 ) )
           ) {
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
        }
        if ( zExp < 0 ) {
     c24:	48 06 00 2c 	bg r0,r6,cd4 <roundAndPackFloat32+0x10c>
            zExp = 0;
            roundBits = zSig & 0x7F;
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
        }
    }
    if ( roundBits ) float_exception_flags |= float_flag_inexact;
     c28:	5c 60 00 0d 	bne r3,r0,c5c <roundAndPackFloat32+0x94>
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
     c2c:	64 61 00 40 	cmpei r1,r3,64
     c30:	00 82 00 07 	srui r2,r4,7
     c34:	a0 28 08 00 	and r1,r1,r8
     c38:	a4 20 08 00 	not r1,r1
     c3c:	a0 22 10 00 	and r2,r1,r2
    if ( zSig == 0 ) zExp = 0;
     c40:	3c c3 00 17 	sli r3,r6,23
     c44:	5c 40 00 02 	bne r2,r0,c4c <roundAndPackFloat32+0x84>
     c48:	b8 40 18 00 	mv r3,r2
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
     c4c:	3d 21 00 1f 	sli r1,r9,31
     c50:	b4 41 08 00 	add r1,r2,r1
     c54:	b4 23 08 00 	add r1,r1,r3
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
    if ( zSig == 0 ) zExp = 0;
    return packFloat32( zSign, zExp, zSig );

}
     c58:	c3 a0 00 00 	ret
     c5c:	78 02 00 00 	mvhi r2,0x0
     c60:	38 42 2e 64 	ori r2,r2,0x2e64
            zExp = 0;
            roundBits = zSig & 0x7F;
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
        }
    }
    if ( roundBits ) float_exception_flags |= float_flag_inexact;
     c64:	28 41 00 00 	lw r1,(r2+0)
     c68:	38 21 00 01 	ori r1,r1,0x1
     c6c:	58 41 00 00 	sw (r2+0),r1
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
     c70:	64 61 00 40 	cmpei r1,r3,64
     c74:	00 82 00 07 	srui r2,r4,7
     c78:	a0 28 08 00 	and r1,r1,r8
     c7c:	a4 20 08 00 	not r1,r1
     c80:	a0 22 10 00 	and r2,r1,r2
    if ( zSig == 0 ) zExp = 0;
     c84:	3c c3 00 17 	sli r3,r6,23
     c88:	5c 40 ff f1 	bne r2,r0,c4c <roundAndPackFloat32+0x84>
     c8c:	e3 ff ff ef 	bi c48 <roundAndPackFloat32+0x80>
            }
        }
    }
    roundBits = zSig & 0x7F;
    if ( 0xFD <= (bits16) zExp ) {
        if (    ( 0xFD < zExp )
     c90:	4c 80 ff e6 	bge r4,r0,c28 <roundAndPackFloat32+0x60>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
     c94:	78 04 00 00 	mvhi r4,0x0
     c98:	38 84 2e 64 	ori r4,r4,0x2e64
     c9c:	28 82 00 00 	lw r2,(r4+0)
             || (    ( zExp == 0xFD )
                  && ( (sbits32) ( zSig + roundIncrement ) < 0 ) )
           ) {
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
     ca0:	3d 23 00 1f 	sli r3,r9,31
     ca4:	78 01 7f 80 	mvhi r1,0x7f80
     ca8:	38 21 00 00 	ori r1,r1,0x0
     cac:	64 a5 00 00 	cmpei r5,r5,0
     cb0:	b4 61 18 00 	add r3,r3,r1
     cb4:	38 42 00 09 	ori r2,r2,0x9
     cb8:	58 82 00 00 	sw (r4+0),r2
     cbc:	c8 65 08 00 	sub r1,r3,r5
     cc0:	c3 a0 00 00 	ret
            roundIncrement = 0x7F;
            if ( zSign ) {
                if ( roundingMode == float_round_up ) roundIncrement = 0;
            }
            else {
                if ( roundingMode == float_round_down ) roundIncrement = 0;
     cc4:	34 01 00 03 	mvi r1,3
     cc8:	5c 81 ff ce 	bne r4,r1,c00 <roundAndPackFloat32+0x38>
     ccc:	34 05 00 00 	mvi r5,0
     cd0:	e3 ff ff cd 	bi c04 <roundAndPackFloat32+0x3c>
           ) {
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
        }
        if ( zExp < 0 ) {
            isTiny =
     cd4:	78 01 00 00 	mvhi r1,0x0
     cd8:	38 21 2e 68 	ori r1,r1,0x2e68
     cdc:	28 22 00 00 	lw r2,(r1+0)
     ce0:	34 03 ff ff 	mvi r3,-1
     ce4:	e8 66 18 00 	cmpg r3,r3,r6
     ce8:	64 42 00 01 	cmpei r2,r2,1
     cec:	34 0a 00 01 	mvi r10,1
     cf0:	b8 43 10 00 	or r2,r2,r3
     cf4:	5c 40 00 02 	bne r2,r0,cfc <roundAndPackFloat32+0x134>
     cf8:	6c 8a 00 00 	cmpgei r10,r4,0
                   ( float_detect_tininess == float_tininess_before_rounding )
                || ( zExp < -1 )
                || ( zSig + roundIncrement < 0x80000000 );
            shift32RightJamming( zSig, - zExp, &zSig );
     cfc:	c8 06 10 00 	sub r2,r0,r6
    bits32 z;

    if ( count == 0 ) {
        z = a;
    }
    else if ( count < 32 ) {
     d00:	34 01 00 1f 	mvi r1,31
     d04:	48 41 00 06 	bg r2,r1,d1c <roundAndPackFloat32+0x154>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
     d08:	bc e6 08 00 	sl r1,r7,r6
     d0c:	80 e2 10 00 	sru r2,r7,r2
     d10:	7c 21 00 00 	cmpnei r1,r1,0
     d14:	b8 22 38 00 	or r7,r1,r2
     d18:	e0 00 00 02 	bi d20 <roundAndPackFloat32+0x158>
    }
    else {
        z = ( a != 0 );
     d1c:	7c e7 00 00 	cmpnei r7,r7,0
            zExp = 0;
            roundBits = zSig & 0x7F;
     d20:	20 e3 00 7f 	andi r3,r7,0x7f
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
     d24:	7c 61 00 00 	cmpnei r1,r3,0
     d28:	b4 a7 20 00 	add r4,r5,r7
     d2c:	a1 41 08 00 	and r1,r10,r1
     d30:	b8 20 30 00 	mv r6,r1
     d34:	44 20 ff bd 	be r1,r0,c28 <roundAndPackFloat32+0x60>
     d38:	78 02 00 00 	mvhi r2,0x0
     d3c:	38 42 2e 64 	ori r2,r2,0x2e64
     d40:	28 41 00 00 	lw r1,(r2+0)
     d44:	b4 a7 20 00 	add r4,r5,r7
     d48:	34 06 00 00 	mvi r6,0
     d4c:	38 21 00 04 	ori r1,r1,0x4
     d50:	58 41 00 00 	sw (r2+0),r1
     d54:	e3 ff ff c4 	bi c64 <roundAndPackFloat32+0x9c>

00000d58 <normalizeRoundAndPackFloat32>:
point exponent.
-------------------------------------------------------------------------------
*/
static float32
 normalizeRoundAndPackFloat32( flag zSign, int16 zExp, bits32 zSig )
{
     d58:	37 9c ff fc 	addi sp,sp,-4
     d5c:	5b 9d 00 04 	sw (sp+4),ra
     d60:	b8 20 30 00 	mv r6,r1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
     d64:	38 01 ff ff 	mvu r1,0xffff
     d68:	b8 40 38 00 	mv r7,r2
     d6c:	b8 60 28 00 	mv r5,r3
        shiftCount += 16;
        a <<= 16;
     d70:	3c 62 00 10 	sli r2,r3,16
     d74:	34 04 00 10 	mvi r4,16
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
     d78:	50 23 00 03 	bgeu r1,r3,d84 <normalizeRoundAndPackFloat32+0x2c>
     d7c:	b8 60 10 00 	mv r2,r3
     d80:	34 04 00 00 	mvi r4,0
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
     d84:	78 01 00 ff 	mvhi r1,0xff
     d88:	38 21 ff ff 	ori r1,r1,0xffff
     d8c:	54 41 00 03 	bgu r2,r1,d98 <normalizeRoundAndPackFloat32+0x40>
        shiftCount += 8;
        a <<= 8;
     d90:	3c 42 00 08 	sli r2,r2,8
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
     d94:	34 84 00 08 	addi r4,r4,8
    int8 shiftCount;
	
    shiftCount = countLeadingZeros32( zSig ) - 1;
     d98:	00 42 00 18 	srui r2,r2,24
     d9c:	78 01 00 00 	mvhi r1,0x0
     da0:	3c 42 00 02 	sli r2,r2,2
     da4:	38 21 29 f0 	ori r1,r1,0x29f0
     da8:	b4 22 08 00 	add r1,r1,r2
     dac:	28 23 00 00 	lw r3,(r1+0)
     db0:	34 82 ff ff 	addi r2,r4,-1
    return roundAndPackFloat32( zSign, zExp - shiftCount, zSig<<shiftCount );
     db4:	b8 c0 08 00 	mv r1,r6
static float32
 normalizeRoundAndPackFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    int8 shiftCount;
	
    shiftCount = countLeadingZeros32( zSig ) - 1;
     db8:	b4 43 10 00 	add r2,r2,r3
    return roundAndPackFloat32( zSign, zExp - shiftCount, zSig<<shiftCount );
     dbc:	bc a2 18 00 	sl r3,r5,r2
     dc0:	c8 e2 10 00 	sub r2,r7,r2
     dc4:	fb ff ff 81 	calli bc8 <roundAndPackFloat32>

}
     dc8:	2b 9d 00 04 	lw ra,(sp+4)
     dcc:	37 9c 00 04 	addi sp,sp,4
     dd0:	c3 a0 00 00 	ret

00000dd4 <int32_to_float32>:
the single-precision floating-point format.  The conversion is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 int32_to_float32( int32 a )
{
     dd4:	37 9c ff fc 	addi sp,sp,-4
     dd8:	5b 9d 00 04 	sw (sp+4),ra
     ddc:	b8 20 18 00 	mv r3,r1
    flag zSign;

    if ( a == 0 ) return 0;
     de0:	44 60 00 09 	be r3,r0,e04 <int32_to_float32+0x30>
    if ( a == 0x80000000 ) return packFloat32( 1, 0x9E, 0 );
     de4:	78 01 80 00 	mvhi r1,0x8000
     de8:	38 21 00 00 	ori r1,r1,0x0
     dec:	44 61 00 09 	be r3,r1,e10 <int32_to_float32+0x3c>
    zSign = ( a < 0 );
     df0:	00 61 00 1f 	srui r1,r3,31
    return normalizeRoundAndPackFloat32( zSign, 0x9C, zSign ? - a : a );
     df4:	44 20 00 02 	be r1,r0,dfc <int32_to_float32+0x28>
     df8:	c8 03 18 00 	sub r3,r0,r3
     dfc:	34 02 00 9c 	mvi r2,156
     e00:	fb ff ff d6 	calli d58 <normalizeRoundAndPackFloat32>

}
     e04:	2b 9d 00 04 	lw ra,(sp+4)
     e08:	37 9c 00 04 	addi sp,sp,4
     e0c:	c3 a0 00 00 	ret
float32 int32_to_float32( int32 a )
{
    flag zSign;

    if ( a == 0 ) return 0;
    if ( a == 0x80000000 ) return packFloat32( 1, 0x9E, 0 );
     e10:	78 01 cf 00 	mvhi r1,0xcf00
     e14:	38 21 00 00 	ori r1,r1,0x0
    zSign = ( a < 0 );
    return normalizeRoundAndPackFloat32( zSign, 0x9C, zSign ? - a : a );

}
     e18:	2b 9d 00 04 	lw ra,(sp+4)
     e1c:	37 9c 00 04 	addi sp,sp,4
     e20:	c3 a0 00 00 	ret

00000e24 <float32_to_int32>:
positive integer is returned.  Otherwise, if the conversion overflows, the
largest integer with the same sign as `a' is returned.
-------------------------------------------------------------------------------
*/
int32 float32_to_int32( float32 a )
{
     e24:	00 22 00 17 	srui r2,r1,23
     e28:	b8 20 18 00 	mv r3,r1
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
     e2c:	20 45 00 ff 	andi r5,r2,0xff
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
     e30:	78 01 00 7f 	mvhi r1,0x7f
     e34:	38 21 ff ff 	ori r1,r1,0xffff
    int8 roundingMode;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x96;
     e38:	34 a4 ff 6a 	addi r4,r5,-150
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
     e3c:	a0 61 30 00 	and r6,r3,r1
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
     e40:	00 67 00 1f 	srui r7,r3,31

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x96;
    if ( 0 <= shiftCount ) {
     e44:	48 04 00 1c 	bg r0,r4,eb4 <float32_to_int32+0x90>
        if ( 0x9E <= aExp ) {
     e48:	34 01 00 9d 	mvi r1,157
     e4c:	4c 25 00 12 	bge r1,r5,e94 <float32_to_int32+0x70>
            if ( a == 0xCF000000 ) return 0x80000000;
     e50:	78 01 cf 00 	mvhi r1,0xcf00
     e54:	38 21 00 00 	ori r1,r1,0x0
     e58:	44 61 00 40 	be r3,r1,f58 <float32_to_int32+0x134>
     e5c:	78 02 00 00 	mvhi r2,0x0
     e60:	38 42 2e 64 	ori r2,r2,0x2e64
     e64:	28 41 00 00 	lw r1,(r2+0)
     e68:	38 21 00 10 	ori r1,r1,0x10
     e6c:	58 41 00 00 	sw (r2+0),r1
            float_raise( float_flag_invalid );
            if ( ! aSign || ( ( aExp == 0xFF ) && aSig ) ) return 0x7FFFFFFF;
     e70:	44 e0 00 05 	be r7,r0,e84 <float32_to_int32+0x60>
     e74:	64 a1 00 ff 	cmpei r1,r5,255
     e78:	7c c2 00 00 	cmpnei r2,r6,0
     e7c:	a0 22 08 00 	and r1,r1,r2
     e80:	44 20 00 36 	be r1,r0,f58 <float32_to_int32+0x134>
            if ( aSign ) {
                z += ( roundingMode == float_round_down ) & zExtra;
                z = - z;
            }
            else {
                z += ( roundingMode == float_round_up ) & zExtra;
     e84:	78 03 7f ff 	mvhi r3,0x7fff
     e88:	38 63 ff ff 	ori r3,r3,0xffff
            }
        }
    }
    return z;

}
     e8c:	b8 60 08 00 	mv r1,r3
     e90:	c3 a0 00 00 	ret
            if ( a == 0xCF000000 ) return 0x80000000;
            float_raise( float_flag_invalid );
            if ( ! aSign || ( ( aExp == 0xFF ) && aSig ) ) return 0x7FFFFFFF;
            return 0x80000000;
        }
        z = ( aSig | 0x00800000 )<<shiftCount;
     e94:	78 01 00 80 	mvhi r1,0x80
     e98:	38 21 00 00 	ori r1,r1,0x0
     e9c:	b8 c1 08 00 	or r1,r6,r1
     ea0:	bc 24 18 00 	sl r3,r1,r4
        if ( aSign ) z = - z;
     ea4:	44 e0 ff fa 	be r7,r0,e8c <float32_to_int32+0x68>
        if ( roundingMode == float_round_nearest_even ) {
            if ( (sbits32) zExtra < 0 ) {
                ++z;
                if ( (bits32) ( zExtra<<1 ) == 0 ) z &= ~1;
            }
            if ( aSign ) z = - z;
     ea8:	c8 03 18 00 	sub r3,r0,r3
            }
        }
    }
    return z;

}
     eac:	b8 60 08 00 	mv r1,r3
     eb0:	c3 a0 00 00 	ret
        }
        z = ( aSig | 0x00800000 )<<shiftCount;
        if ( aSign ) z = - z;
    }
    else {
        if ( aExp < 0x7E ) {
     eb4:	34 01 00 7d 	mvi r1,125
     eb8:	48 a1 00 16 	bg r5,r1,f10 <float32_to_int32+0xec>
            zExtra = aExp | aSig;
     ebc:	b8 a6 20 00 	or r4,r5,r6
     ec0:	34 03 00 00 	mvi r3,0
        else {
            aSig |= 0x00800000;
            zExtra = aSig<<( shiftCount & 31 );
            z = aSig>>( - shiftCount );
        }
        if ( zExtra ) float_exception_flags |= float_flag_inexact;
     ec4:	44 80 00 06 	be r4,r0,edc <float32_to_int32+0xb8>
     ec8:	78 02 00 00 	mvhi r2,0x0
     ecc:	38 42 2e 64 	ori r2,r2,0x2e64
     ed0:	28 41 00 00 	lw r1,(r2+0)
     ed4:	38 21 00 01 	ori r1,r1,0x1
     ed8:	58 41 00 00 	sw (r2+0),r1
        roundingMode = float_rounding_mode;
     edc:	78 01 00 00 	mvhi r1,0x0
     ee0:	38 21 2e 60 	ori r1,r1,0x2e60
     ee4:	28 21 00 00 	lw r1,(r1+0)
        if ( roundingMode == float_round_nearest_even ) {
     ee8:	5c 20 00 11 	bne r1,r0,f2c <float32_to_int32+0x108>
            if ( (sbits32) zExtra < 0 ) {
     eec:	4c 81 00 06 	bge r4,r1,f04 <float32_to_int32+0xe0>
                ++z;
                if ( (bits32) ( zExtra<<1 ) == 0 ) z &= ~1;
     ef0:	b4 84 08 00 	add r1,r4,r4
        }
        if ( zExtra ) float_exception_flags |= float_flag_inexact;
        roundingMode = float_rounding_mode;
        if ( roundingMode == float_round_nearest_even ) {
            if ( (sbits32) zExtra < 0 ) {
                ++z;
     ef4:	34 63 00 01 	addi r3,r3,1
                if ( (bits32) ( zExtra<<1 ) == 0 ) z &= ~1;
     ef8:	5c 20 00 03 	bne r1,r0,f04 <float32_to_int32+0xe0>
     efc:	34 01 ff fe 	mvi r1,-2
     f00:	a0 61 18 00 	and r3,r3,r1
            }
            if ( aSign ) z = - z;
     f04:	44 e0 ff e2 	be r7,r0,e8c <float32_to_int32+0x68>
     f08:	c8 03 18 00 	sub r3,r0,r3
     f0c:	e3 ff ff e8 	bi eac <float32_to_int32+0x88>
        if ( aExp < 0x7E ) {
            zExtra = aExp | aSig;
            z = 0;
        }
        else {
            aSig |= 0x00800000;
     f10:	78 01 00 80 	mvhi r1,0x80
     f14:	38 21 00 00 	ori r1,r1,0x0
     f18:	b8 c1 08 00 	or r1,r6,r1
            zExtra = aSig<<( shiftCount & 31 );
            z = aSig>>( - shiftCount );
     f1c:	c8 04 10 00 	sub r2,r0,r4
     f20:	80 22 18 00 	sru r3,r1,r2
            zExtra = aExp | aSig;
            z = 0;
        }
        else {
            aSig |= 0x00800000;
            zExtra = aSig<<( shiftCount & 31 );
     f24:	bc 24 20 00 	sl r4,r1,r4
     f28:	e3 ff ff e7 	bi ec4 <float32_to_int32+0xa0>
                if ( (bits32) ( zExtra<<1 ) == 0 ) z &= ~1;
            }
            if ( aSign ) z = - z;
        }
        else {
            zExtra = ( zExtra != 0 );
     f2c:	7c 82 00 00 	cmpnei r2,r4,0
            if ( aSign ) {
     f30:	44 e0 00 06 	be r7,r0,f48 <float32_to_int32+0x124>
                z += ( roundingMode == float_round_down ) & zExtra;
     f34:	64 21 00 03 	cmpei r1,r1,3
     f38:	a0 41 08 00 	and r1,r2,r1
     f3c:	b4 23 08 00 	add r1,r1,r3
                z = - z;
     f40:	c8 01 18 00 	sub r3,r0,r1
     f44:	e3 ff ff d2 	bi e8c <float32_to_int32+0x68>
            }
            else {
                z += ( roundingMode == float_round_up ) & zExtra;
     f48:	64 21 00 02 	cmpei r1,r1,2
     f4c:	a0 41 08 00 	and r1,r2,r1
     f50:	b4 23 18 00 	add r3,r1,r3
     f54:	e3 ff ff ce 	bi e8c <float32_to_int32+0x68>
    shiftCount = aExp - 0x96;
    if ( 0 <= shiftCount ) {
        if ( 0x9E <= aExp ) {
            if ( a == 0xCF000000 ) return 0x80000000;
            float_raise( float_flag_invalid );
            if ( ! aSign || ( ( aExp == 0xFF ) && aSig ) ) return 0x7FFFFFFF;
     f58:	78 03 80 00 	mvhi r3,0x8000
     f5c:	38 63 00 00 	ori r3,r3,0x0
     f60:	e3 ff ff cb 	bi e8c <float32_to_int32+0x68>

00000f64 <float32_to_int32_round_to_zero>:
conversion overflows, the largest integer with the same sign as `a' is
returned.
-------------------------------------------------------------------------------
*/
int32 float32_to_int32_round_to_zero( float32 a )
{
     f64:	00 22 00 17 	srui r2,r1,23
     f68:	b8 20 18 00 	mv r3,r1
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
     f6c:	20 45 00 ff 	andi r5,r2,0xff
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
     f70:	78 01 00 7f 	mvhi r1,0x7f
     f74:	38 21 ff ff 	ori r1,r1,0xffff
    int32 z;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x9E;
     f78:	34 a4 ff 62 	addi r4,r5,-158
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
     f7c:	a0 61 30 00 	and r6,r3,r1
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
     f80:	00 67 00 1f 	srui r7,r3,31

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x9E;
    if ( 0 <= shiftCount ) {
     f84:	48 04 00 11 	bg r0,r4,fc8 <float32_to_int32_round_to_zero+0x64>
        if ( a == 0xCF000000 ) return 0x80000000;
     f88:	78 01 cf 00 	mvhi r1,0xcf00
     f8c:	38 21 00 00 	ori r1,r1,0x0
     f90:	44 61 00 0b 	be r3,r1,fbc <float32_to_int32_round_to_zero+0x58>
     f94:	78 02 00 00 	mvhi r2,0x0
     f98:	38 42 2e 64 	ori r2,r2,0x2e64
     f9c:	28 41 00 00 	lw r1,(r2+0)
     fa0:	38 21 00 10 	ori r1,r1,0x10
     fa4:	58 41 00 00 	sw (r2+0),r1
        float_raise( float_flag_invalid );
        if ( ! aSign || ( ( aExp == 0xFF ) && aSig ) ) return 0x7FFFFFFF;
     fa8:	44 e0 00 26 	be r7,r0,1040 <float32_to_int32_round_to_zero+0xdc>
     fac:	64 a1 00 ff 	cmpei r1,r5,255
     fb0:	7c c2 00 00 	cmpnei r2,r6,0
     fb4:	a0 22 08 00 	and r1,r1,r2
     fb8:	5c 20 00 22 	bne r1,r0,1040 <float32_to_int32_round_to_zero+0xdc>
     fbc:	78 04 80 00 	mvhi r4,0x8000
     fc0:	38 84 00 00 	ori r4,r4,0x0
     fc4:	e0 00 00 0c 	bi ff4 <float32_to_int32_round_to_zero+0x90>
        return 0x80000000;
    }
    else if ( aExp <= 0x7E ) {
     fc8:	34 01 00 7e 	mvi r1,126
     fcc:	48 a1 00 0c 	bg r5,r1,ffc <float32_to_int32_round_to_zero+0x98>
        if ( aExp | aSig ) float_exception_flags |= float_flag_inexact;
     fd0:	b8 a6 08 00 	or r1,r5,r6
     fd4:	b8 20 20 00 	mv r4,r1
     fd8:	44 20 00 07 	be r1,r0,ff4 <float32_to_int32_round_to_zero+0x90>
     fdc:	78 02 00 00 	mvhi r2,0x0
     fe0:	38 42 2e 64 	ori r2,r2,0x2e64
     fe4:	28 41 00 00 	lw r1,(r2+0)
     fe8:	34 04 00 00 	mvi r4,0
     fec:	38 21 00 01 	ori r1,r1,0x1
     ff0:	58 41 00 00 	sw (r2+0),r1
    if ( (bits32) ( aSig<<( shiftCount & 31 ) ) ) {
        float_exception_flags |= float_flag_inexact;
    }
    return aSign ? - z : z;

}
     ff4:	b8 80 08 00 	mv r1,r4
     ff8:	c3 a0 00 00 	ret
    }
    else if ( aExp <= 0x7E ) {
        if ( aExp | aSig ) float_exception_flags |= float_flag_inexact;
        return 0;
    }
    aSig = ( aSig | 0x00800000 )<<8;
     ffc:	78 01 00 80 	mvhi r1,0x80
    1000:	38 21 00 00 	ori r1,r1,0x0
    1004:	b8 c1 08 00 	or r1,r6,r1
    1008:	3c 21 00 08 	sli r1,r1,8
    z = aSig>>( - shiftCount );
    100c:	c8 04 10 00 	sub r2,r0,r4
    if ( (bits32) ( aSig<<( shiftCount & 31 ) ) ) {
    1010:	bc 24 18 00 	sl r3,r1,r4
    else if ( aExp <= 0x7E ) {
        if ( aExp | aSig ) float_exception_flags |= float_flag_inexact;
        return 0;
    }
    aSig = ( aSig | 0x00800000 )<<8;
    z = aSig>>( - shiftCount );
    1014:	80 22 20 00 	sru r4,r1,r2
    if ( (bits32) ( aSig<<( shiftCount & 31 ) ) ) {
    1018:	44 60 00 06 	be r3,r0,1030 <float32_to_int32_round_to_zero+0xcc>
        float_exception_flags |= float_flag_inexact;
    101c:	78 02 00 00 	mvhi r2,0x0
    1020:	38 42 2e 64 	ori r2,r2,0x2e64
    1024:	28 41 00 00 	lw r1,(r2+0)
    1028:	38 21 00 01 	ori r1,r1,0x1
    102c:	58 41 00 00 	sw (r2+0),r1
    }
    return aSign ? - z : z;
    1030:	44 e0 ff f1 	be r7,r0,ff4 <float32_to_int32_round_to_zero+0x90>
    1034:	c8 04 20 00 	sub r4,r0,r4

}
    1038:	b8 80 08 00 	mv r1,r4
    103c:	c3 a0 00 00 	ret
    aSig = ( aSig | 0x00800000 )<<8;
    z = aSig>>( - shiftCount );
    if ( (bits32) ( aSig<<( shiftCount & 31 ) ) ) {
        float_exception_flags |= float_flag_inexact;
    }
    return aSign ? - z : z;
    1040:	78 04 7f ff 	mvhi r4,0x7fff
    1044:	38 84 ff ff 	ori r4,r4,0xffff
    1048:	e3 ff ff eb 	bi ff4 <float32_to_int32_round_to_zero+0x90>

0000104c <float32_round_to_int>:
operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_round_to_int( float32 a )
{
    104c:	37 9c ff fc 	addi sp,sp,-4
    1050:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1054:	00 22 00 17 	srui r2,r1,23
    bits32 lastBitMask, roundBitsMask;
    int8 roundingMode;
    float32 z;

    aExp = extractFloat32Exp( a );
    if ( 0x96 <= aExp ) {
    1058:	34 03 00 95 	mvi r3,149
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    105c:	20 44 00 ff 	andi r4,r2,0xff
operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_round_to_int( float32 a )
{
    1060:	b8 20 28 00 	mv r5,r1
    bits32 lastBitMask, roundBitsMask;
    int8 roundingMode;
    float32 z;

    aExp = extractFloat32Exp( a );
    if ( 0x96 <= aExp ) {
    1064:	4c 64 00 07 	bge r3,r4,1080 <float32_round_to_int+0x34>
        if ( ( aExp == 0xFF ) && extractFloat32Frac( a ) ) {
    1068:	34 02 00 ff 	mvi r2,255
    106c:	44 82 00 34 	be r4,r2,113c <float32_round_to_int+0xf0>
    }
    z &= ~ roundBitsMask;
    if ( z != a ) float_exception_flags |= float_flag_inexact;
    return z;

}
    1070:	b8 a0 08 00 	mv r1,r5
    1074:	2b 9d 00 04 	lw ra,(sp+4)
    1078:	37 9c 00 04 	addi sp,sp,4
    107c:	c3 a0 00 00 	ret
        if ( ( aExp == 0xFF ) && extractFloat32Frac( a ) ) {
            return propagateFloat32NaN( a, a );
        }
        return a;
    }
    if ( aExp <= 0x7E ) {
    1080:	34 07 00 7e 	mvi r7,126
    1084:	48 87 00 13 	bg r4,r7,10d0 <float32_round_to_int+0x84>
        if ( (bits32) ( a<<1 ) == 0 ) return a;
    1088:	b4 21 08 00 	add r1,r1,r1
    108c:	44 20 ff f9 	be r1,r0,1070 <float32_round_to_int+0x24>
        float_exception_flags |= float_flag_inexact;
    1090:	78 03 00 00 	mvhi r3,0x0
    1094:	38 63 2e 64 	ori r3,r3,0x2e64
    1098:	28 62 00 00 	lw r2,(r3+0)
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
    109c:	78 01 00 00 	mvhi r1,0x0
    10a0:	38 21 2e 60 	ori r1,r1,0x2e60
    10a4:	28 26 00 00 	lw r6,(r1+0)
        }
        return a;
    }
    if ( aExp <= 0x7E ) {
        if ( (bits32) ( a<<1 ) == 0 ) return a;
        float_exception_flags |= float_flag_inexact;
    10a8:	38 42 00 01 	ori r2,r2,0x1
    10ac:	58 62 00 00 	sw (r3+0),r2
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
    10b0:	34 01 00 02 	mvi r1,2
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    10b4:	00 a2 00 1f 	srui r2,r5,31
    }
    if ( aExp <= 0x7E ) {
        if ( (bits32) ( a<<1 ) == 0 ) return a;
        float_exception_flags |= float_flag_inexact;
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
    10b8:	44 c1 00 41 	be r6,r1,11bc <float32_round_to_int+0x170>
    10bc:	34 01 00 03 	mvi r1,3
    10c0:	44 c1 00 3a 	be r6,r1,11a8 <float32_round_to_int+0x15c>
    10c4:	44 c0 00 2f 	be r6,r0,1180 <float32_round_to_int+0x134>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    10c8:	3c 45 00 1f 	sli r5,r2,31
    10cc:	e3 ff ff e9 	bi 1070 <float32_round_to_int+0x24>
    }
    lastBitMask = 1;
    lastBitMask <<= 0x96 - aExp;
    roundBitsMask = lastBitMask - 1;
    z = a;
    roundingMode = float_rounding_mode;
    10d0:	78 01 00 00 	mvhi r1,0x0
    10d4:	38 21 2e 60 	ori r1,r1,0x2e60
            return aSign ? 0x80000000 : 0x3F800000;
        }
        return packFloat32( aSign, 0, 0 );
    }
    lastBitMask = 1;
    lastBitMask <<= 0x96 - aExp;
    10d8:	34 02 00 96 	mvi r2,150
    10dc:	c8 44 10 00 	sub r2,r2,r4
    roundBitsMask = lastBitMask - 1;
    z = a;
    roundingMode = float_rounding_mode;
    10e0:	28 24 00 00 	lw r4,(r1+0)
            return aSign ? 0x80000000 : 0x3F800000;
        }
        return packFloat32( aSign, 0, 0 );
    }
    lastBitMask = 1;
    lastBitMask <<= 0x96 - aExp;
    10e4:	34 01 00 01 	mvi r1,1
    10e8:	bc 22 18 00 	sl r3,r1,r2
    roundBitsMask = lastBitMask - 1;
    10ec:	34 67 ff ff 	addi r7,r3,-1
    z = a;
    roundingMode = float_rounding_mode;
    if ( roundingMode == float_round_nearest_even ) {
    10f0:	44 80 00 1b 	be r4,r0,115c <float32_round_to_int+0x110>
        z += lastBitMask>>1;
        if ( ( z & roundBitsMask ) == 0 ) z &= ~ lastBitMask;
    }
    else if ( roundingMode != float_round_to_zero ) {
    10f4:	44 81 00 21 	be r4,r1,1178 <float32_round_to_int+0x12c>
        if ( extractFloat32Sign( z ) ^ ( roundingMode == float_round_up ) ) {
    10f8:	64 82 00 02 	cmpei r2,r4,2
    10fc:	00 a1 00 1f 	srui r1,r5,31
            z += roundBitsMask;
    1100:	b4 e5 30 00 	add r6,r7,r5
    if ( roundingMode == float_round_nearest_even ) {
        z += lastBitMask>>1;
        if ( ( z & roundBitsMask ) == 0 ) z &= ~ lastBitMask;
    }
    else if ( roundingMode != float_round_to_zero ) {
        if ( extractFloat32Sign( z ) ^ ( roundingMode == float_round_up ) ) {
    1104:	44 41 00 1d 	be r2,r1,1178 <float32_round_to_int+0x12c>
            z += roundBitsMask;
        }
    }
    z &= ~ roundBitsMask;
    1108:	a4 e0 08 00 	not r1,r7
    110c:	a0 c1 18 00 	and r3,r6,r1
    if ( z != a ) float_exception_flags |= float_flag_inexact;
    1110:	44 65 ff d8 	be r3,r5,1070 <float32_round_to_int+0x24>
    1114:	78 02 00 00 	mvhi r2,0x0
    1118:	38 42 2e 64 	ori r2,r2,0x2e64
    111c:	28 41 00 00 	lw r1,(r2+0)
    1120:	b8 60 28 00 	mv r5,r3
    1124:	38 21 00 01 	ori r1,r1,0x1
    1128:	58 41 00 00 	sw (r2+0),r1
    return z;

}
    112c:	b8 a0 08 00 	mv r1,r5
    1130:	2b 9d 00 04 	lw ra,(sp+4)
    1134:	37 9c 00 04 	addi sp,sp,4
    1138:	c3 a0 00 00 	ret
    int8 roundingMode;
    float32 z;

    aExp = extractFloat32Exp( a );
    if ( 0x96 <= aExp ) {
        if ( ( aExp == 0xFF ) && extractFloat32Frac( a ) ) {
    113c:	78 02 00 7f 	mvhi r2,0x7f
    1140:	38 42 ff ff 	ori r2,r2,0xffff
    1144:	a0 22 10 00 	and r2,r1,r2
    1148:	44 40 ff ca 	be r2,r0,1070 <float32_round_to_int+0x24>
            return propagateFloat32NaN( a, a );
    114c:	b8 20 10 00 	mv r2,r1
    1150:	fb ff fe 6f 	calli b0c <propagateFloat32NaN>
    1154:	b8 20 28 00 	mv r5,r1
    1158:	e3 ff ff c6 	bi 1070 <float32_round_to_int+0x24>
    lastBitMask <<= 0x96 - aExp;
    roundBitsMask = lastBitMask - 1;
    z = a;
    roundingMode = float_rounding_mode;
    if ( roundingMode == float_round_nearest_even ) {
        z += lastBitMask>>1;
    115c:	80 61 08 00 	sru r1,r3,r1
    1160:	b4 25 30 00 	add r6,r1,r5
        if ( ( z & roundBitsMask ) == 0 ) z &= ~ lastBitMask;
    1164:	a0 c7 10 00 	and r2,r6,r7
    1168:	5c 44 ff e8 	bne r2,r4,1108 <float32_round_to_int+0xbc>
    116c:	a4 60 08 00 	not r1,r3
    1170:	a0 c1 30 00 	and r6,r6,r1
    1174:	e3 ff ff e5 	bi 1108 <float32_round_to_int+0xbc>
    }
    else if ( roundingMode != float_round_to_zero ) {
        if ( extractFloat32Sign( z ) ^ ( roundingMode == float_round_up ) ) {
            z += roundBitsMask;
    1178:	b8 a0 30 00 	mv r6,r5
    117c:	e3 ff ff e3 	bi 1108 <float32_round_to_int+0xbc>
        if ( (bits32) ( a<<1 ) == 0 ) return a;
        float_exception_flags |= float_flag_inexact;
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
         case float_round_nearest_even:
            if ( ( aExp == 0x7E ) && extractFloat32Frac( a ) ) {
    1180:	5c 87 ff d2 	bne r4,r7,10c8 <float32_round_to_int+0x7c>
    1184:	78 01 00 7f 	mvhi r1,0x7f
    1188:	38 21 ff ff 	ori r1,r1,0xffff
    118c:	a0 a1 08 00 	and r1,r5,r1
    1190:	44 20 ff ce 	be r1,r0,10c8 <float32_round_to_int+0x7c>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1194:	3c 42 00 1f 	sli r2,r2,31
    1198:	78 01 3f 80 	mvhi r1,0x3f80
    119c:	38 21 00 00 	ori r1,r1,0x0
    11a0:	b4 41 28 00 	add r5,r2,r1
    11a4:	e3 ff ff b3 	bi 1070 <float32_round_to_int+0x24>
            if ( ( aExp == 0x7E ) && extractFloat32Frac( a ) ) {
                return packFloat32( aSign, 0x7F, 0 );
            }
            break;
         case float_round_down:
            return aSign ? 0xBF800000 : 0;
    11a8:	b8 40 28 00 	mv r5,r2
    11ac:	44 40 ff b1 	be r2,r0,1070 <float32_round_to_int+0x24>
    11b0:	78 05 bf 80 	mvhi r5,0xbf80
    11b4:	38 a5 00 00 	ori r5,r5,0x0
    11b8:	e3 ff ff ae 	bi 1070 <float32_round_to_int+0x24>
         case float_round_up:
            return aSign ? 0x80000000 : 0x3F800000;
    11bc:	5c 40 00 04 	bne r2,r0,11cc <float32_round_to_int+0x180>
    11c0:	78 05 3f 80 	mvhi r5,0x3f80
    11c4:	38 a5 00 00 	ori r5,r5,0x0
    11c8:	e3 ff ff aa 	bi 1070 <float32_round_to_int+0x24>
    11cc:	78 05 80 00 	mvhi r5,0x8000
    11d0:	38 a5 00 00 	ori r5,r5,0x0
    11d4:	e3 ff ff a7 	bi 1070 <float32_round_to_int+0x24>

000011d8 <addFloat32Sigs>:
addition is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 addFloat32Sigs( float32 a, float32 b, flag zSign )
{
    11d8:	37 9c ff fc 	addi sp,sp,-4
    11dc:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    11e0:	00 26 00 17 	srui r6,r1,23
    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 6;
    11e4:	00 47 00 17 	srui r7,r2,23
    11e8:	78 04 00 7f 	mvhi r4,0x7f
    11ec:	38 84 ff ff 	ori r4,r4,0xffff
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    11f0:	20 c6 00 ff 	andi r6,r6,0xff
    11f4:	20 e7 00 ff 	andi r7,r7,0xff
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 6;
    bSig <<= 6;
    11f8:	a0 44 28 00 	and r5,r2,r4

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    11fc:	c8 c7 48 00 	sub r9,r6,r7
    aSig <<= 6;
    1200:	a0 24 20 00 	and r4,r1,r4
    1204:	3c 8a 00 06 	sli r10,r4,6
addition is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 addFloat32Sigs( float32 a, float32 b, flag zSign )
{
    1208:	b8 20 40 00 	mv r8,r1
    120c:	b8 60 e8 00 	mv ra,r3
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 6;
    bSig <<= 6;
    1210:	3c a4 00 06 	sli r4,r5,6
    if ( 0 < expDiff ) {
    1214:	4c 09 00 1b 	bge r0,r9,1280 <addFloat32Sigs+0xa8>
        if ( aExp == 0xFF ) {
    1218:	34 03 00 ff 	mvi r3,255
    121c:	44 c3 00 15 	be r6,r3,1270 <addFloat32Sigs+0x98>
            if ( aSig ) return propagateFloat32NaN( a, b );
            return a;
        }
        if ( bExp == 0 ) {
    1220:	5c e0 00 21 	bne r7,r0,12a4 <addFloat32Sigs+0xcc>
            --expDiff;
    1224:	35 29 ff ff 	addi r9,r9,-1
    1228:	78 08 20 00 	mvhi r8,0x2000
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
    122c:	5d 27 00 22 	bne r9,r7,12b4 <addFloat32Sigs+0xdc>
    1230:	78 08 20 00 	mvhi r8,0x2000
        zSig = 0x40000000 + aSig + bSig;
        zExp = aExp;
        goto roundAndPack;
    }
    aSig |= 0x20000000;
    zSig = ( aSig + bSig )<<1;
    1234:	39 08 00 00 	ori r8,r8,0x0
    1238:	b9 48 08 00 	or r1,r10,r8
    123c:	b4 24 18 00 	add r3,r1,r4
    1240:	b4 63 08 00 	add r1,r3,r3
    --zExp;
    if ( (sbits32) zSig < 0 ) {
    1244:	48 01 00 03 	bg r0,r1,1250 <addFloat32Sigs+0x78>
        zExp = aExp;
        goto roundAndPack;
    }
    aSig |= 0x20000000;
    zSig = ( aSig + bSig )<<1;
    --zExp;
    1248:	34 c6 ff ff 	addi r6,r6,-1
    124c:	b8 20 18 00 	mv r3,r1
    if ( (sbits32) zSig < 0 ) {
        zSig = aSig + bSig;
        ++zExp;
    }
 roundAndPack:
    return roundAndPackFloat32( zSign, zExp, zSig );
    1250:	bb a0 08 00 	mv r1,ra
    1254:	b8 c0 10 00 	mv r2,r6
    1258:	fb ff fe 5c 	calli bc8 <roundAndPackFloat32>
    125c:	b8 20 40 00 	mv r8,r1

}
    1260:	b9 00 08 00 	mv r1,r8
    1264:	2b 9d 00 04 	lw ra,(sp+4)
    1268:	37 9c 00 04 	addi sp,sp,4
    126c:	c3 a0 00 00 	ret
    expDiff = aExp - bExp;
    aSig <<= 6;
    bSig <<= 6;
    if ( 0 < expDiff ) {
        if ( aExp == 0xFF ) {
            if ( aSig ) return propagateFloat32NaN( a, b );
    1270:	45 40 ff fc 	be r10,r0,1260 <addFloat32Sigs+0x88>
        shift32RightJamming( aSig, - expDiff, &aSig );
        zExp = bExp;
    }
    else {
        if ( aExp == 0xFF ) {
            if ( aSig | bSig ) return propagateFloat32NaN( a, b );
    1274:	fb ff fe 26 	calli b0c <propagateFloat32NaN>
    1278:	b8 20 40 00 	mv r8,r1
    127c:	e3 ff ff f9 	bi 1260 <addFloat32Sigs+0x88>
            bSig |= 0x20000000;
        }
        shift32RightJamming( bSig, expDiff, &bSig );
        zExp = aExp;
    }
    else if ( expDiff < 0 ) {
    1280:	5d 20 00 1a 	bne r9,r0,12e8 <addFloat32Sigs+0x110>
        }
        shift32RightJamming( aSig, - expDiff, &aSig );
        zExp = bExp;
    }
    else {
        if ( aExp == 0xFF ) {
    1284:	34 03 00 ff 	mvi r3,255
    1288:	44 c3 00 15 	be r6,r3,12dc <addFloat32Sigs+0x104>
            if ( aSig | bSig ) return propagateFloat32NaN( a, b );
            return a;
        }
        if ( aExp == 0 ) return packFloat32( zSign, 0, ( aSig + bSig )>>6 );
    128c:	44 c0 00 28 	be r6,r0,132c <addFloat32Sigs+0x154>
        zSig = 0x40000000 + aSig + bSig;
    1290:	78 01 40 00 	mvhi r1,0x4000
    1294:	38 21 00 00 	ori r1,r1,0x0
    1298:	b5 41 08 00 	add r1,r10,r1
    129c:	b4 24 18 00 	add r3,r1,r4
    12a0:	e3 ff ff ec 	bi 1250 <addFloat32Sigs+0x78>
        }
        if ( bExp == 0 ) {
            --expDiff;
        }
        else {
            bSig |= 0x20000000;
    12a4:	78 08 20 00 	mvhi r8,0x2000
    12a8:	b9 00 08 00 	mv r1,r8
    12ac:	38 21 00 00 	ori r1,r1,0x0
    12b0:	b8 81 20 00 	or r4,r4,r1
        z = a;
    }
    else if ( count < 32 ) {
    12b4:	34 01 00 1f 	mvi r1,31
    12b8:	49 21 00 07 	bg r9,r1,12d4 <addFloat32Sigs+0xfc>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    12bc:	c8 09 08 00 	sub r1,r0,r9
    12c0:	bc 81 08 00 	sl r1,r4,r1
    12c4:	80 89 10 00 	sru r2,r4,r9
    12c8:	7c 21 00 00 	cmpnei r1,r1,0
    12cc:	b8 22 20 00 	or r4,r1,r2
    12d0:	e3 ff ff d9 	bi 1234 <addFloat32Sigs+0x5c>
    }
    else {
        z = ( a != 0 );
    12d4:	7c 84 00 00 	cmpnei r4,r4,0
    12d8:	e3 ff ff d7 	bi 1234 <addFloat32Sigs+0x5c>
        shift32RightJamming( aSig, - expDiff, &aSig );
        zExp = bExp;
    }
    else {
        if ( aExp == 0xFF ) {
            if ( aSig | bSig ) return propagateFloat32NaN( a, b );
    12dc:	b8 8a 18 00 	or r3,r4,r10
    12e0:	44 60 ff e0 	be r3,r0,1260 <addFloat32Sigs+0x88>
    12e4:	e3 ff ff e4 	bi 1274 <addFloat32Sigs+0x9c>
        }
        shift32RightJamming( bSig, expDiff, &bSig );
        zExp = aExp;
    }
    else if ( expDiff < 0 ) {
        if ( bExp == 0xFF ) {
    12e8:	34 03 00 ff 	mvi r3,255
    12ec:	44 e3 00 18 	be r7,r3,134c <addFloat32Sigs+0x174>
            if ( bSig ) return propagateFloat32NaN( a, b );
            return packFloat32( zSign, 0xFF, 0 );
        }
        if ( aExp == 0 ) {
    12f0:	44 c0 00 14 	be r6,r0,1340 <addFloat32Sigs+0x168>
            ++expDiff;
        }
        else {
            aSig |= 0x20000000;
    12f4:	78 08 20 00 	mvhi r8,0x2000
    12f8:	b9 00 08 00 	mv r1,r8
    12fc:	38 21 00 00 	ori r1,r1,0x0
    1300:	b9 41 50 00 	or r10,r10,r1
        }
        shift32RightJamming( aSig, - expDiff, &aSig );
    1304:	c8 09 10 00 	sub r2,r0,r9
            return a;
        }
        if ( aExp == 0 ) return packFloat32( zSign, 0, ( aSig + bSig )>>6 );
        zSig = 0x40000000 + aSig + bSig;
        zExp = aExp;
        goto roundAndPack;
    1308:	b8 e0 30 00 	mv r6,r7
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
    130c:	44 40 ff ca 	be r2,r0,1234 <addFloat32Sigs+0x5c>
        z = a;
    }
    else if ( count < 32 ) {
    1310:	34 01 00 1f 	mvi r1,31
    1314:	48 41 00 14 	bg r2,r1,1364 <addFloat32Sigs+0x18c>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    1318:	bd 49 08 00 	sl r1,r10,r9
    131c:	81 42 10 00 	sru r2,r10,r2
    1320:	7c 21 00 00 	cmpnei r1,r1,0
    1324:	b8 22 50 00 	or r10,r1,r2
    1328:	e3 ff ff c3 	bi 1234 <addFloat32Sigs+0x5c>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    132c:	b4 8a 08 00 	add r1,r4,r10
    1330:	00 21 00 06 	srui r1,r1,6
    1334:	3f a2 00 1f 	sli r2,ra,31
    1338:	b4 22 40 00 	add r8,r1,r2
    133c:	e3 ff ff c9 	bi 1260 <addFloat32Sigs+0x88>
        if ( bExp == 0xFF ) {
            if ( bSig ) return propagateFloat32NaN( a, b );
            return packFloat32( zSign, 0xFF, 0 );
        }
        if ( aExp == 0 ) {
            ++expDiff;
    1340:	35 29 00 01 	addi r9,r9,1
    1344:	78 08 20 00 	mvhi r8,0x2000
    1348:	e3 ff ff ef 	bi 1304 <addFloat32Sigs+0x12c>
        shift32RightJamming( bSig, expDiff, &bSig );
        zExp = aExp;
    }
    else if ( expDiff < 0 ) {
        if ( bExp == 0xFF ) {
            if ( bSig ) return propagateFloat32NaN( a, b );
    134c:	5c 80 ff ca 	bne r4,r0,1274 <addFloat32Sigs+0x9c>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1350:	3f a2 00 1f 	sli r2,ra,31
    1354:	78 01 7f 80 	mvhi r1,0x7f80
    1358:	38 21 00 00 	ori r1,r1,0x0
    135c:	b4 41 40 00 	add r8,r2,r1
    1360:	e3 ff ff c0 	bi 1260 <addFloat32Sigs+0x88>
    }
    else {
        z = ( a != 0 );
    1364:	7d 4a 00 00 	cmpnei r10,r10,0
    1368:	e3 ff ff b3 	bi 1234 <addFloat32Sigs+0x5c>

0000136c <subFloat32Sigs>:
result is a NaN.  The subtraction is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 subFloat32Sigs( float32 a, float32 b, flag zSign )
{
    136c:	37 9c ff fc 	addi sp,sp,-4
    1370:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1374:	00 26 00 17 	srui r6,r1,23
    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 7;
    1378:	00 47 00 17 	srui r7,r2,23
    137c:	78 04 00 7f 	mvhi r4,0x7f
    1380:	38 84 ff ff 	ori r4,r4,0xffff
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1384:	20 c6 00 ff 	andi r6,r6,0xff
    1388:	20 e7 00 ff 	andi r7,r7,0xff
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 7;
    bSig <<= 7;
    138c:	a0 44 28 00 	and r5,r2,r4

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    1390:	c8 c7 48 00 	sub r9,r6,r7
    aSig <<= 7;
    1394:	a0 24 20 00 	and r4,r1,r4
result is a NaN.  The subtraction is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 subFloat32Sigs( float32 a, float32 b, flag zSign )
{
    1398:	b8 20 40 00 	mv r8,r1
    139c:	b8 60 50 00 	mv r10,r3
    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 7;
    13a0:	3c 84 00 07 	sli r4,r4,7
    bSig <<= 7;
    13a4:	3c a5 00 07 	sli r5,r5,7
    if ( 0 < expDiff ) goto aExpBigger;
    13a8:	49 20 00 0f 	bg r9,r0,13e4 <subFloat32Sigs+0x78>
    if ( expDiff < 0 ) goto bExpBigger;
    13ac:	5d 20 00 3b 	bne r9,r0,1498 <subFloat32Sigs+0x12c>
    if ( aExp == 0xFF ) {
    13b0:	34 03 00 ff 	mvi r3,255
    13b4:	44 c3 00 30 	be r6,r3,1474 <subFloat32Sigs+0x108>
        if ( aSig | bSig ) return propagateFloat32NaN( a, b );
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( aExp == 0 ) {
    13b8:	5c c0 00 03 	bne r6,r0,13c4 <subFloat32Sigs+0x58>
    13bc:	34 06 00 01 	mvi r6,1
    13c0:	b8 c0 38 00 	mv r7,r6
        aExp = 1;
        bExp = 1;
    }
    if ( bSig < aSig ) goto aBigger;
    13c4:	54 85 00 10 	bgu r4,r5,1404 <subFloat32Sigs+0x98>
    if ( aSig < bSig ) goto bBigger;
    13c8:	54 a4 00 45 	bgu r5,r4,14dc <subFloat32Sigs+0x170>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    13cc:	78 01 00 00 	mvhi r1,0x0
    13d0:	38 21 2e 60 	ori r1,r1,0x2e60
    13d4:	28 22 00 00 	lw r2,(r1+0)
    13d8:	64 42 00 03 	cmpei r2,r2,3
    13dc:	3c 48 00 1f 	sli r8,r2,31
    13e0:	e0 00 00 0f 	bi 141c <subFloat32Sigs+0xb0>
    zSig = bSig - aSig;
    zExp = bExp;
    zSign ^= 1;
    goto normalizeRoundAndPack;
 aExpBigger:
    if ( aExp == 0xFF ) {
    13e4:	34 03 00 ff 	mvi r3,255
    13e8:	44 c3 00 11 	be r6,r3,142c <subFloat32Sigs+0xc0>
        if ( aSig ) return propagateFloat32NaN( a, b );
        return a;
    }
    if ( bExp == 0 ) {
    13ec:	5c e0 00 14 	bne r7,r0,143c <subFloat32Sigs+0xd0>
        --expDiff;
    13f0:	35 29 ff ff 	addi r9,r9,-1
    13f4:	78 08 40 00 	mvhi r8,0x4000
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
    13f8:	5d 27 00 15 	bne r9,r7,144c <subFloat32Sigs+0xe0>
    }
    else {
        bSig |= 0x40000000;
    }
    shift32RightJamming( bSig, expDiff, &bSig );
    aSig |= 0x40000000;
    13fc:	39 08 00 00 	ori r8,r8,0x0
    1400:	b8 88 20 00 	or r4,r4,r8
 aBigger:
    zSig = aSig - bSig;
    1404:	c8 85 18 00 	sub r3,r4,r5
    1408:	b8 c0 10 00 	mv r2,r6
    zExp = aExp;
 normalizeRoundAndPack:
    --zExp;
    return normalizeRoundAndPackFloat32( zSign, zExp, zSig );
    140c:	b9 40 08 00 	mv r1,r10
    1410:	34 42 ff ff 	addi r2,r2,-1
    1414:	fb ff fe 51 	calli d58 <normalizeRoundAndPackFloat32>
    1418:	b8 20 40 00 	mv r8,r1

}
    141c:	b9 00 08 00 	mv r1,r8
    1420:	2b 9d 00 04 	lw ra,(sp+4)
    1424:	37 9c 00 04 	addi sp,sp,4
    1428:	c3 a0 00 00 	ret
    zExp = bExp;
    zSign ^= 1;
    goto normalizeRoundAndPack;
 aExpBigger:
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, b );
    142c:	44 80 ff fc 	be r4,r0,141c <subFloat32Sigs+0xb0>
    1430:	fb ff fd b7 	calli b0c <propagateFloat32NaN>
    1434:	b8 20 40 00 	mv r8,r1
    1438:	e3 ff ff f9 	bi 141c <subFloat32Sigs+0xb0>
    }
    if ( bExp == 0 ) {
        --expDiff;
    }
    else {
        bSig |= 0x40000000;
    143c:	78 08 40 00 	mvhi r8,0x4000
    1440:	b9 00 08 00 	mv r1,r8
    1444:	38 21 00 00 	ori r1,r1,0x0
    1448:	b8 a1 28 00 	or r5,r5,r1
        z = a;
    }
    else if ( count < 32 ) {
    144c:	34 01 00 1f 	mvi r1,31
    1450:	49 21 00 07 	bg r9,r1,146c <subFloat32Sigs+0x100>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    1454:	c8 09 08 00 	sub r1,r0,r9
    1458:	bc a1 08 00 	sl r1,r5,r1
    145c:	80 a9 10 00 	sru r2,r5,r9
    1460:	7c 21 00 00 	cmpnei r1,r1,0
    1464:	b8 22 28 00 	or r5,r1,r2
    1468:	e3 ff ff e5 	bi 13fc <subFloat32Sigs+0x90>
    }
    else {
        z = ( a != 0 );
    146c:	7c a5 00 00 	cmpnei r5,r5,0
    1470:	e3 ff ff e3 	bi 13fc <subFloat32Sigs+0x90>
    aSig <<= 7;
    bSig <<= 7;
    if ( 0 < expDiff ) goto aExpBigger;
    if ( expDiff < 0 ) goto bExpBigger;
    if ( aExp == 0xFF ) {
        if ( aSig | bSig ) return propagateFloat32NaN( a, b );
    1474:	b8 a4 18 00 	or r3,r5,r4
    1478:	5c 60 ff ee 	bne r3,r0,1430 <subFloat32Sigs+0xc4>
    147c:	78 02 00 00 	mvhi r2,0x0
    1480:	38 42 2e 64 	ori r2,r2,0x2e64
    1484:	28 41 00 00 	lw r1,(r2+0)
    1488:	34 08 ff ff 	mvi r8,-1
    148c:	38 21 00 10 	ori r1,r1,0x10
    1490:	58 41 00 00 	sw (r2+0),r1
    1494:	e3 ff ff e2 	bi 141c <subFloat32Sigs+0xb0>
    }
    if ( bSig < aSig ) goto aBigger;
    if ( aSig < bSig ) goto bBigger;
    return packFloat32( float_rounding_mode == float_round_down, 0, 0 );
 bExpBigger:
    if ( bExp == 0xFF ) {
    1498:	34 03 00 ff 	mvi r3,255
    149c:	44 e3 00 17 	be r7,r3,14f8 <subFloat32Sigs+0x18c>
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign ^ 1, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
    14a0:	44 c0 00 13 	be r6,r0,14ec <subFloat32Sigs+0x180>
        ++expDiff;
    }
    else {
        aSig |= 0x40000000;
    14a4:	78 08 40 00 	mvhi r8,0x4000
    14a8:	b9 00 08 00 	mv r1,r8
    14ac:	38 21 00 00 	ori r1,r1,0x0
    14b0:	b8 81 20 00 	or r4,r4,r1
    }
    shift32RightJamming( aSig, - expDiff, &aSig );
    14b4:	c8 09 10 00 	sub r2,r0,r9
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
    14b8:	44 40 00 07 	be r2,r0,14d4 <subFloat32Sigs+0x168>
        z = a;
    }
    else if ( count < 32 ) {
    14bc:	34 01 00 1f 	mvi r1,31
    14c0:	48 41 00 15 	bg r2,r1,1514 <subFloat32Sigs+0x1a8>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    14c4:	bc 89 08 00 	sl r1,r4,r9
    14c8:	80 82 10 00 	sru r2,r4,r2
    14cc:	7c 21 00 00 	cmpnei r1,r1,0
    14d0:	b8 22 20 00 	or r4,r1,r2
    bSig |= 0x40000000;
    14d4:	39 08 00 00 	ori r8,r8,0x0
    14d8:	b8 a8 28 00 	or r5,r5,r8
 bBigger:
    zSig = bSig - aSig;
    14dc:	c8 a4 18 00 	sub r3,r5,r4
    zExp = bExp;
    zSign ^= 1;
    14e0:	19 4a 00 01 	xori r10,r10,0x1
    14e4:	b8 e0 10 00 	mv r2,r7
    14e8:	e3 ff ff c9 	bi 140c <subFloat32Sigs+0xa0>
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign ^ 1, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
        ++expDiff;
    14ec:	35 29 00 01 	addi r9,r9,1
    14f0:	78 08 40 00 	mvhi r8,0x4000
    14f4:	e3 ff ff f0 	bi 14b4 <subFloat32Sigs+0x148>
    if ( bSig < aSig ) goto aBigger;
    if ( aSig < bSig ) goto bBigger;
    return packFloat32( float_rounding_mode == float_round_down, 0, 0 );
 bExpBigger:
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    14f8:	5c a0 ff ce 	bne r5,r0,1430 <subFloat32Sigs+0xc4>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    14fc:	19 42 00 01 	xori r2,r10,0x1
    1500:	3c 42 00 1f 	sli r2,r2,31
    1504:	78 01 7f 80 	mvhi r1,0x7f80
    1508:	38 21 00 00 	ori r1,r1,0x0
    150c:	b4 41 40 00 	add r8,r2,r1
    1510:	e3 ff ff c3 	bi 141c <subFloat32Sigs+0xb0>
    }
    else {
        z = ( a != 0 );
    1514:	7c 84 00 00 	cmpnei r4,r4,0
    1518:	e3 ff ff ef 	bi 14d4 <subFloat32Sigs+0x168>

0000151c <float32_add>:
and `b'.  The operation is performed according to the IEC/IEEE Standard for
Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_add( float32 a, float32 b )
{
    151c:	37 9c ff fc 	addi sp,sp,-4
    1520:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    1524:	00 24 00 1f 	srui r4,r1,31
{
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
    1528:	00 43 00 1f 	srui r3,r2,31
    152c:	44 83 00 06 	be r4,r3,1544 <float32_add+0x28>
        return addFloat32Sigs( a, b, aSign );
    }
    else {
        return subFloat32Sigs( a, b, aSign );
    1530:	b8 80 18 00 	mv r3,r4
    1534:	fb ff ff 8e 	calli 136c <subFloat32Sigs>
    }

}
    1538:	2b 9d 00 04 	lw ra,(sp+4)
    153c:	37 9c 00 04 	addi sp,sp,4
    1540:	c3 a0 00 00 	ret
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
        return addFloat32Sigs( a, b, aSign );
    1544:	b8 80 18 00 	mv r3,r4
    1548:	fb ff ff 24 	calli 11d8 <addFloat32Sigs>
    }
    else {
        return subFloat32Sigs( a, b, aSign );
    }

}
    154c:	2b 9d 00 04 	lw ra,(sp+4)
    1550:	37 9c 00 04 	addi sp,sp,4
    1554:	c3 a0 00 00 	ret

00001558 <float32_sub>:
`a' and `b'.  The operation is performed according to the IEC/IEEE Standard
for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_sub( float32 a, float32 b )
{
    1558:	37 9c ff fc 	addi sp,sp,-4
    155c:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    1560:	00 24 00 1f 	srui r4,r1,31
{
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
    1564:	00 43 00 1f 	srui r3,r2,31
    1568:	44 83 00 06 	be r4,r3,1580 <float32_sub+0x28>
        return subFloat32Sigs( a, b, aSign );
    }
    else {
        return addFloat32Sigs( a, b, aSign );
    156c:	b8 80 18 00 	mv r3,r4
    1570:	fb ff ff 1a 	calli 11d8 <addFloat32Sigs>
    }

}
    1574:	2b 9d 00 04 	lw ra,(sp+4)
    1578:	37 9c 00 04 	addi sp,sp,4
    157c:	c3 a0 00 00 	ret
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
        return subFloat32Sigs( a, b, aSign );
    1580:	b8 80 18 00 	mv r3,r4
    1584:	fb ff ff 7a 	calli 136c <subFloat32Sigs>
    }
    else {
        return addFloat32Sigs( a, b, aSign );
    }

}
    1588:	2b 9d 00 04 	lw ra,(sp+4)
    158c:	37 9c 00 04 	addi sp,sp,4
    1590:	c3 a0 00 00 	ret

00001594 <float32_mul>:
`a' and `b'.  The operation is performed according to the IEC/IEEE Standard
for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_mul( float32 a, float32 b )
{
    1594:	37 9c ff f4 	addi sp,sp,-12
    1598:	5b 8b 00 0c 	sw (sp+12),r11
    159c:	5b 8c 00 08 	sw (sp+8),r12
    15a0:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    15a4:	00 24 00 17 	srui r4,r1,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    15a8:	78 03 00 7f 	mvhi r3,0x7f
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    15ac:	00 46 00 17 	srui r6,r2,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    15b0:	38 63 ff ff 	ori r3,r3,0xffff
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    15b4:	20 8a 00 ff 	andi r10,r4,0xff
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    15b8:	98 22 28 00 	xor r5,r1,r2
    if ( aExp == 0xFF ) {
    15bc:	34 09 00 ff 	mvi r9,255
`a' and `b'.  The operation is performed according to the IEC/IEEE Standard
for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_mul( float32 a, float32 b )
{
    15c0:	b8 20 38 00 	mv r7,r1
    15c4:	b8 40 40 00 	mv r8,r2
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    15c8:	a0 43 58 00 	and r11,r2,r3
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    15cc:	a0 c9 20 00 	and r4,r6,r9
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    15d0:	00 ac 00 1f 	srui r12,r5,31
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    15d4:	a0 23 e8 00 	and ra,r1,r3
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
    15d8:	45 49 00 61 	be r10,r9,175c <float32_mul+0x1c8>
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
    15dc:	44 89 00 51 	be r4,r9,1720 <float32_mul+0x18c>
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
    15e0:	5d 40 00 13 	bne r10,r0,162c <float32_mul+0x98>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    15e4:	3d 85 00 1f 	sli r5,r12,31
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
    15e8:	47 aa 00 48 	be ra,r10,1708 <float32_mul+0x174>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    15ec:	38 01 ff ff 	mvu r1,0xffff
    15f0:	50 3d 00 77 	bgeu r1,ra,17cc <float32_mul+0x238>
    15f4:	bb a0 18 00 	mv r3,ra
    15f8:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    15fc:	3c 63 00 08 	sli r3,r3,8
    1600:	34 45 ff f8 	addi r5,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1604:	00 63 00 18 	srui r3,r3,24
    1608:	78 01 00 00 	mvhi r1,0x0
    160c:	3c 63 00 02 	sli r3,r3,2
    1610:	38 21 29 f0 	ori r1,r1,0x29f0
    1614:	b4 23 08 00 	add r1,r1,r3
    1618:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    161c:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1620:	b4 a2 10 00 	add r2,r5,r2
    *zSigPtr = aSig<<shiftCount;
    1624:	bf a2 e8 00 	sl ra,ra,r2
    *zExpPtr = 1 - shiftCount;
    1628:	c8 22 50 00 	sub r10,r1,r2
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    if ( bExp == 0 ) {
    162c:	5c 80 00 13 	bne r4,r0,1678 <float32_mul+0xe4>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1630:	3d 85 00 1f 	sli r5,r12,31
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
    1634:	45 64 00 35 	be r11,r4,1708 <float32_mul+0x174>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    1638:	38 01 ff ff 	mvu r1,0xffff
    163c:	50 2b 00 6a 	bgeu r1,r11,17e4 <float32_mul+0x250>
    1640:	b9 60 18 00 	mv r3,r11
    1644:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    1648:	3c 63 00 08 	sli r3,r3,8
    164c:	34 44 ff f8 	addi r4,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1650:	00 63 00 18 	srui r3,r3,24
    1654:	78 01 00 00 	mvhi r1,0x0
    1658:	3c 63 00 02 	sli r3,r3,2
    165c:	38 21 29 f0 	ori r1,r1,0x29f0
    1660:	b4 23 08 00 	add r1,r1,r3
    1664:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    1668:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    166c:	b4 82 10 00 	add r2,r4,r2
    *zSigPtr = aSig<<shiftCount;
    1670:	bd 62 58 00 	sl r11,r11,r2
    *zExpPtr = 1 - shiftCount;
    1674:	c8 22 20 00 	sub r4,r1,r2
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    zExp = aExp + bExp - 0x7F;
    aSig = ( aSig | 0x00800000 )<<7;
    1678:	78 01 00 80 	mvhi r1,0x80
    167c:	38 21 00 00 	ori r1,r1,0x0
    bSig = ( bSig | 0x00800000 )<<8;
    1680:	b9 61 10 00 	or r2,r11,r1
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    zExp = aExp + bExp - 0x7F;
    aSig = ( aSig | 0x00800000 )<<7;
    1684:	bb a1 08 00 	or r1,ra,r1
    1688:	3c 21 00 07 	sli r1,r1,7
    bSig = ( bSig | 0x00800000 )<<8;
    168c:	3c 42 00 08 	sli r2,r2,8
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    1690:	00 3d 00 10 	srui ra,r1,16
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    1694:	00 4b 00 10 	srui r11,r2,16

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    1698:	20 29 ff ff 	andi r9,r1,0xffff
    169c:	20 48 ff ff 	andi r8,r2,0xffff
    zMiddleA = ( (bits32) aLow ) * bHigh;
    16a0:	89 69 18 00 	mul r3,r11,r9
    zMiddleB = ( (bits32) aHigh ) * bLow;
    16a4:	89 1d 10 00 	mul r2,r8,ra
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    zExp = aExp + bExp - 0x7F;
    16a8:	35 41 ff 81 	addi r1,r10,-127
    16ac:	b4 24 30 00 	add r6,r1,r4
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    16b0:	b4 62 08 00 	add r1,r3,r2
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    16b4:	54 41 00 36 	bgu r2,r1,178c <float32_mul+0x1f8>
    16b8:	34 07 00 00 	mvi r7,0

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    16bc:	89 09 18 00 	mul r3,r8,r9
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
    16c0:	3c 22 00 10 	sli r2,r1,16
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    16c4:	89 7d 20 00 	mul r4,r11,ra
    zMiddleA <<= 16;
    z1 += zMiddleA;
    16c8:	b4 43 18 00 	add r3,r2,r3
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    16cc:	00 21 00 10 	srui r1,r1,16
    16d0:	f4 43 10 00 	cmpgu r2,r2,r3
    16d4:	b4 24 08 00 	add r1,r1,r4
    16d8:	b4 22 08 00 	add r1,r1,r2
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    mul32To64( aSig, bSig, &zSig0, &zSig1 );
    zSig0 |= ( zSig1 != 0 );
    16dc:	7c 63 00 00 	cmpnei r3,r3,0
    16e0:	b4 27 08 00 	add r1,r1,r7
    16e4:	b8 23 18 00 	or r3,r1,r3
    if ( 0 <= (sbits32) ( zSig0<<1 ) ) {
    16e8:	b4 63 08 00 	add r1,r3,r3
    16ec:	48 01 00 03 	bg r0,r1,16f8 <float32_mul+0x164>
        zSig0 <<= 1;
        --zExp;
    16f0:	34 c6 ff ff 	addi r6,r6,-1
    16f4:	b8 20 18 00 	mv r3,r1
    }
    return roundAndPackFloat32( zSign, zExp, zSig0 );
    16f8:	b9 80 08 00 	mv r1,r12
    16fc:	b8 c0 10 00 	mv r2,r6
    1700:	fb ff fd 32 	calli bc8 <roundAndPackFloat32>
    1704:	b8 20 28 00 	mv r5,r1

}
    1708:	b8 a0 08 00 	mv r1,r5
    170c:	2b 9d 00 04 	lw ra,(sp+4)
    1710:	2b 8b 00 0c 	lw r11,(sp+12)
    1714:	2b 8c 00 08 	lw r12,(sp+8)
    1718:	37 9c 00 0c 	addi sp,sp,12
    171c:	c3 a0 00 00 	ret
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    1720:	5d 60 00 28 	bne r11,r0,17c0 <float32_mul+0x22c>
        if ( ( aExp | aSig ) == 0 ) {
    1724:	b9 5d 08 00 	or r1,r10,ra
    1728:	5c 2b 00 14 	bne r1,r11,1778 <float32_mul+0x1e4>
    172c:	78 02 00 00 	mvhi r2,0x0
    1730:	38 42 2e 64 	ori r2,r2,0x2e64
    1734:	28 41 00 00 	lw r1,(r2+0)
    1738:	34 05 ff ff 	mvi r5,-1
    173c:	38 21 00 10 	ori r1,r1,0x10
    1740:	58 41 00 00 	sw (r2+0),r1
        zSig0 <<= 1;
        --zExp;
    }
    return roundAndPackFloat32( zSign, zExp, zSig0 );

}
    1744:	b8 a0 08 00 	mv r1,r5
    1748:	2b 9d 00 04 	lw ra,(sp+4)
    174c:	2b 8b 00 0c 	lw r11,(sp+12)
    1750:	2b 8c 00 08 	lw r12,(sp+8)
    1754:	37 9c 00 0c 	addi sp,sp,12
    1758:	c3 a0 00 00 	ret
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig || ( ( bExp == 0xFF ) && bSig ) ) {
    175c:	5f a0 00 0f 	bne ra,r0,1798 <float32_mul+0x204>
    1760:	e4 89 10 00 	cmpe r2,r4,r9
    1764:	7d 61 00 00 	cmpnei r1,r11,0
    1768:	a0 41 10 00 	and r2,r2,r1
    176c:	5c 5d 00 0b 	bne r2,ra,1798 <float32_mul+0x204>
            return propagateFloat32NaN( a, b );
        }
        if ( ( bExp | bSig ) == 0 ) {
    1770:	b8 8b 08 00 	or r1,r4,r11
    1774:	44 22 ff ee 	be r1,r2,172c <float32_mul+0x198>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1778:	3d 82 00 1f 	sli r2,r12,31
    177c:	78 01 7f 80 	mvhi r1,0x7f80
    1780:	38 21 00 00 	ori r1,r1,0x0
    1784:	b4 41 28 00 	add r5,r2,r1
    1788:	e3 ff ff e0 	bi 1708 <float32_mul+0x174>
    178c:	78 07 00 01 	mvhi r7,0x1
    1790:	38 e7 00 00 	ori r7,r7,0x0
    1794:	e3 ff ff ca 	bi 16bc <float32_mul+0x128>
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig || ( ( bExp == 0xFF ) && bSig ) ) {
            return propagateFloat32NaN( a, b );
    1798:	b8 e0 08 00 	mv r1,r7
    179c:	b9 00 10 00 	mv r2,r8
    17a0:	fb ff fc db 	calli b0c <propagateFloat32NaN>
    17a4:	b8 20 28 00 	mv r5,r1
        zSig0 <<= 1;
        --zExp;
    }
    return roundAndPackFloat32( zSign, zExp, zSig0 );

}
    17a8:	b8 a0 08 00 	mv r1,r5
    17ac:	2b 9d 00 04 	lw ra,(sp+4)
    17b0:	2b 8b 00 0c 	lw r11,(sp+12)
    17b4:	2b 8c 00 08 	lw r12,(sp+8)
    17b8:	37 9c 00 0c 	addi sp,sp,12
    17bc:	c3 a0 00 00 	ret
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    17c0:	fb ff fc d3 	calli b0c <propagateFloat32NaN>
    17c4:	b8 20 28 00 	mv r5,r1
    17c8:	e3 ff ff d0 	bi 1708 <float32_mul+0x174>
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    17cc:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    17d0:	3f a3 00 10 	sli r3,ra,16
    }
    if ( a < 0x1000000 ) {
    17d4:	38 21 ff ff 	ori r1,r1,0xffff
    17d8:	50 23 00 09 	bgeu r1,r3,17fc <float32_mul+0x268>
    17dc:	34 05 00 08 	mvi r5,8
    17e0:	e3 ff ff 89 	bi 1604 <float32_mul+0x70>
    17e4:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    17e8:	3d 63 00 10 	sli r3,r11,16
    }
    if ( a < 0x1000000 ) {
    17ec:	38 21 ff ff 	ori r1,r1,0xffff
    17f0:	50 23 00 05 	bgeu r1,r3,1804 <float32_mul+0x270>
    17f4:	34 04 00 08 	mvi r4,8
    17f8:	e3 ff ff 96 	bi 1650 <float32_mul+0xbc>
    17fc:	34 02 00 18 	mvi r2,24
    1800:	e3 ff ff 7f 	bi 15fc <float32_mul+0x68>
    1804:	34 02 00 18 	mvi r2,24
    1808:	e3 ff ff 90 	bi 1648 <float32_mul+0xb4>

0000180c <float32_div>:
by the corresponding value `b'.  The operation is performed according to
the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_div( float32 a, float32 b )
{
    180c:	37 9c ff ec 	addi sp,sp,-20
    1810:	5b 8b 00 14 	sw (sp+20),r11
    1814:	5b 8c 00 10 	sw (sp+16),r12
    1818:	5b 8d 00 0c 	sw (sp+12),r13
    181c:	5b 8e 00 08 	sw (sp+8),r14
    1820:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1824:	00 26 00 17 	srui r6,r1,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1828:	78 03 00 7f 	mvhi r3,0x7f
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    182c:	00 47 00 17 	srui r7,r2,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1830:	38 63 ff ff 	ori r3,r3,0xffff
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    1834:	98 22 40 00 	xor r8,r1,r2
    if ( aExp == 0xFF ) {
    1838:	34 09 00 ff 	mvi r9,255
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    183c:	20 c6 00 ff 	andi r6,r6,0xff
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1840:	a0 43 50 00 	and r10,r2,r3
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1844:	a0 e9 38 00 	and r7,r7,r9
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    1848:	01 0e 00 1f 	srui r14,r8,31
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    184c:	a0 23 28 00 	and r5,r1,r3
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
    1850:	44 c9 00 73 	be r6,r9,1a1c <float32_div+0x210>
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
    1854:	44 e9 00 58 	be r7,r9,19b4 <float32_div+0x1a8>
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign, 0, 0 );
    }
    if ( bExp == 0 ) {
    1858:	5c e0 00 12 	bne r7,r0,18a0 <float32_div+0x94>
        if ( bSig == 0 ) {
    185c:	45 47 00 7e 	be r10,r7,1a54 <float32_div+0x248>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    1860:	38 01 ff ff 	mvu r1,0xffff
    1864:	50 2a 00 9a 	bgeu r1,r10,1acc <float32_div+0x2c0>
    1868:	b9 40 18 00 	mv r3,r10
    186c:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    1870:	3c 63 00 08 	sli r3,r3,8
    1874:	34 44 ff f8 	addi r4,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1878:	00 63 00 18 	srui r3,r3,24
    187c:	78 01 00 00 	mvhi r1,0x0
    1880:	3c 63 00 02 	sli r3,r3,2
    1884:	38 21 29 f0 	ori r1,r1,0x29f0
    1888:	b4 23 08 00 	add r1,r1,r3
    188c:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    1890:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1894:	b4 82 10 00 	add r2,r4,r2
    *zSigPtr = aSig<<shiftCount;
    1898:	bd 42 50 00 	sl r10,r10,r2
    *zExpPtr = 1 - shiftCount;
    189c:	c8 22 38 00 	sub r7,r1,r2
            float_raise( float_flag_divbyzero );
            return packFloat32( zSign, 0xFF, 0 );
        }
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    if ( aExp == 0 ) {
    18a0:	5c c0 00 13 	bne r6,r0,18ec <float32_div+0xe0>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    18a4:	3d c4 00 1f 	sli r4,r14,31
            return packFloat32( zSign, 0xFF, 0 );
        }
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
    18a8:	44 a6 00 45 	be r5,r6,19bc <float32_div+0x1b0>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    18ac:	38 01 ff ff 	mvu r1,0xffff
    18b0:	50 25 00 8d 	bgeu r1,r5,1ae4 <float32_div+0x2d8>
    18b4:	b8 a0 18 00 	mv r3,r5
    18b8:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    18bc:	3c 63 00 08 	sli r3,r3,8
    18c0:	34 44 ff f8 	addi r4,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    18c4:	00 63 00 18 	srui r3,r3,24
    18c8:	78 01 00 00 	mvhi r1,0x0
    18cc:	3c 63 00 02 	sli r3,r3,2
    18d0:	38 21 29 f0 	ori r1,r1,0x29f0
    18d4:	b4 23 08 00 	add r1,r1,r3
    18d8:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    18dc:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    18e0:	b4 82 10 00 	add r2,r4,r2
    *zSigPtr = aSig<<shiftCount;
    18e4:	bc a2 28 00 	sl r5,r5,r2
    *zExpPtr = 1 - shiftCount;
    18e8:	c8 22 30 00 	sub r6,r1,r2
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = aExp - bExp + 0x7D;
    aSig = ( aSig | 0x00800000 )<<7;
    18ec:	78 01 00 80 	mvhi r1,0x80
    18f0:	38 21 00 00 	ori r1,r1,0x0
    18f4:	b8 a1 10 00 	or r2,r5,r1
    18f8:	3c 4c 00 07 	sli r12,r2,7
    bSig = ( bSig | 0x00800000 )<<8;
    18fc:	b9 41 08 00 	or r1,r10,r1
    1900:	3c 2b 00 08 	sli r11,r1,8
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = aExp - bExp + 0x7D;
    1904:	c8 c7 10 00 	sub r2,r6,r7
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    if ( bSig <= ( aSig + aSig ) ) {
    1908:	b5 8c 08 00 	add r1,r12,r12
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = aExp - bExp + 0x7D;
    190c:	34 4d 00 7d 	addi r13,r2,125
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    if ( bSig <= ( aSig + aSig ) ) {
    1910:	55 61 00 03 	bgu r11,r1,191c <float32_div+0x110>
        aSig >>= 1;
    1914:	01 8c 00 01 	srui r12,r12,1
        ++zExp;
    1918:	35 ad 00 01 	addi r13,r13,1
    }
    zSig = estimateDiv64To32( aSig, 0, bSig );
    191c:	34 02 00 00 	mvi r2,0
    1920:	b9 80 08 00 	mv r1,r12
    1924:	b9 60 18 00 	mv r3,r11
    1928:	fb ff fc 0c 	calli 958 <estimateDiv64To32>
    192c:	b8 20 38 00 	mv r7,r1
    if ( ( zSig & 0x3F ) <= 2 ) {
    1930:	20 22 00 3f 	andi r2,r1,0x3f
    1934:	34 01 00 02 	mvi r1,2
    1938:	54 41 00 2c 	bgu r2,r1,19e8 <float32_div+0x1dc>
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    193c:	00 e9 00 10 	srui r9,r7,16
    zMiddleB = ( (bits32) aHigh ) * bLow;
    1940:	01 68 00 10 	srui r8,r11,16

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    1944:	21 64 ff ff 	andi r4,r11,0xffff
    1948:	20 e3 ff ff 	andi r3,r7,0xffff
    zMiddleA = ( (bits32) aLow ) * bHigh;
    194c:	89 24 10 00 	mul r2,r9,r4
    zMiddleB = ( (bits32) aHigh ) * bLow;
    1950:	88 68 08 00 	mul r1,r3,r8
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    1954:	b4 41 28 00 	add r5,r2,r1
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1958:	54 25 00 5a 	bgu r1,r5,1ac0 <float32_div+0x2b4>
    195c:	34 06 00 00 	mvi r6,0

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    1960:	88 64 18 00 	mul r3,r3,r4
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
    1964:	3c a2 00 10 	sli r2,r5,16
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1968:	89 28 08 00 	mul r1,r9,r8
    zMiddleA <<= 16;
    z1 += zMiddleA;
    196c:	b4 43 18 00 	add r3,r2,r3
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1970:	00 a5 00 10 	srui r5,r5,16
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    1974:	7c 64 00 00 	cmpnei r4,r3,0
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1978:	c9 81 08 00 	sub r1,r12,r1
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    197c:	f4 43 10 00 	cmpgu r2,r2,r3
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1980:	c8 25 08 00 	sub r1,r1,r5
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    1984:	c8 24 08 00 	sub r1,r1,r4
    1988:	c8 22 08 00 	sub r1,r1,r2
    198c:	c8 26 10 00 	sub r2,r1,r6
INLINE void
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    1990:	c8 03 18 00 	sub r3,r0,r3
        mul32To64( bSig, zSig, &term0, &term1 );
        sub64( aSig, 0, term0, term1, &rem0, &rem1 );
        while ( (sbits32) rem0 < 0 ) {
    1994:	4c 40 00 13 	bge r2,r0,19e0 <float32_div+0x1d4>
 add64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{
    bits32 z1;

    z1 = a1 + b1;
    1998:	b4 6b 20 00 	add r4,r3,r11
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
    199c:	f4 64 08 00 	cmpgu r1,r3,r4
            --zSig;
    19a0:	34 e7 ff ff 	addi r7,r7,-1
    19a4:	b4 41 10 00 	add r2,r2,r1
    }
    zSig = estimateDiv64To32( aSig, 0, bSig );
    if ( ( zSig & 0x3F ) <= 2 ) {
        mul32To64( bSig, zSig, &term0, &term1 );
        sub64( aSig, 0, term0, term1, &rem0, &rem1 );
        while ( (sbits32) rem0 < 0 ) {
    19a8:	b8 80 18 00 	mv r3,r4
    19ac:	4c 40 00 0c 	bge r2,r0,19dc <float32_div+0x1d0>
    19b0:	e3 ff ff fa 	bi 1998 <float32_div+0x18c>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    19b4:	3d c4 00 1f 	sli r4,r14,31
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    19b8:	5d 40 00 38 	bne r10,r0,1a98 <float32_div+0x28c>
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    19bc:	b8 80 08 00 	mv r1,r4
    19c0:	2b 9d 00 04 	lw ra,(sp+4)
    19c4:	2b 8b 00 14 	lw r11,(sp+20)
    19c8:	2b 8c 00 10 	lw r12,(sp+16)
    19cc:	2b 8d 00 0c 	lw r13,(sp+12)
    19d0:	2b 8e 00 08 	lw r14,(sp+8)
    19d4:	37 9c 00 14 	addi sp,sp,20
    19d8:	c3 a0 00 00 	ret
    }
    zSig = estimateDiv64To32( aSig, 0, bSig );
    if ( ( zSig & 0x3F ) <= 2 ) {
        mul32To64( bSig, zSig, &term0, &term1 );
        sub64( aSig, 0, term0, term1, &rem0, &rem1 );
        while ( (sbits32) rem0 < 0 ) {
    19dc:	b8 80 18 00 	mv r3,r4
            --zSig;
            add64( rem0, rem1, 0, bSig, &rem0, &rem1 );
        }
        zSig |= ( rem1 != 0 );
    19e0:	7c 61 00 00 	cmpnei r1,r3,0
    19e4:	b8 e1 38 00 	or r7,r7,r1
    }
    return roundAndPackFloat32( zSign, zExp, zSig );
    19e8:	b9 c0 08 00 	mv r1,r14
    19ec:	b9 a0 10 00 	mv r2,r13
    19f0:	b8 e0 18 00 	mv r3,r7
    19f4:	fb ff fc 75 	calli bc8 <roundAndPackFloat32>
    19f8:	b8 20 20 00 	mv r4,r1

}
    19fc:	b8 80 08 00 	mv r1,r4
    1a00:	2b 9d 00 04 	lw ra,(sp+4)
    1a04:	2b 8b 00 14 	lw r11,(sp+20)
    1a08:	2b 8c 00 10 	lw r12,(sp+16)
    1a0c:	2b 8d 00 0c 	lw r13,(sp+12)
    1a10:	2b 8e 00 08 	lw r14,(sp+8)
    1a14:	37 9c 00 14 	addi sp,sp,20
    1a18:	c3 a0 00 00 	ret
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, b );
    1a1c:	5c a0 00 1f 	bne r5,r0,1a98 <float32_div+0x28c>
        if ( bExp == 0xFF ) {
    1a20:	44 e6 00 1d 	be r7,r6,1a94 <float32_div+0x288>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1a24:	3d c2 00 1f 	sli r2,r14,31
    1a28:	78 01 7f 80 	mvhi r1,0x7f80
    1a2c:	38 21 00 00 	ori r1,r1,0x0
    1a30:	b4 41 20 00 	add r4,r2,r1
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    1a34:	b8 80 08 00 	mv r1,r4
    1a38:	2b 9d 00 04 	lw ra,(sp+4)
    1a3c:	2b 8b 00 14 	lw r11,(sp+20)
    1a40:	2b 8c 00 10 	lw r12,(sp+16)
    1a44:	2b 8d 00 0c 	lw r13,(sp+12)
    1a48:	2b 8e 00 08 	lw r14,(sp+8)
    1a4c:	37 9c 00 14 	addi sp,sp,20
    1a50:	c3 a0 00 00 	ret
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign, 0, 0 );
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) {
            if ( ( aExp | aSig ) == 0 ) {
    1a54:	b8 c5 08 00 	or r1,r6,r5
    1a58:	5c 2a 00 29 	bne r1,r10,1afc <float32_div+0x2f0>
    1a5c:	78 02 00 00 	mvhi r2,0x0
    1a60:	38 42 2e 64 	ori r2,r2,0x2e64
    1a64:	28 41 00 00 	lw r1,(r2+0)
    1a68:	34 04 ff ff 	mvi r4,-1
    1a6c:	38 21 00 10 	ori r1,r1,0x10
    1a70:	58 41 00 00 	sw (r2+0),r1
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    1a74:	b8 80 08 00 	mv r1,r4
    1a78:	2b 9d 00 04 	lw ra,(sp+4)
    1a7c:	2b 8b 00 14 	lw r11,(sp+20)
    1a80:	2b 8c 00 10 	lw r12,(sp+16)
    1a84:	2b 8d 00 0c 	lw r13,(sp+12)
    1a88:	2b 8e 00 08 	lw r14,(sp+8)
    1a8c:	37 9c 00 14 	addi sp,sp,20
    1a90:	c3 a0 00 00 	ret
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, b );
        if ( bExp == 0xFF ) {
            if ( bSig ) return propagateFloat32NaN( a, b );
    1a94:	45 40 ff f2 	be r10,r0,1a5c <float32_div+0x250>
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    1a98:	fb ff fc 1d 	calli b0c <propagateFloat32NaN>
    1a9c:	b8 20 20 00 	mv r4,r1
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    1aa0:	b8 80 08 00 	mv r1,r4
    1aa4:	2b 9d 00 04 	lw ra,(sp+4)
    1aa8:	2b 8b 00 14 	lw r11,(sp+20)
    1aac:	2b 8c 00 10 	lw r12,(sp+16)
    1ab0:	2b 8d 00 0c 	lw r13,(sp+12)
    1ab4:	2b 8e 00 08 	lw r14,(sp+8)
    1ab8:	37 9c 00 14 	addi sp,sp,20
    1abc:	c3 a0 00 00 	ret
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1ac0:	78 06 00 01 	mvhi r6,0x1
    1ac4:	38 c6 00 00 	ori r6,r6,0x0
    1ac8:	e3 ff ff a6 	bi 1960 <float32_div+0x154>
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    1acc:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    1ad0:	3d 43 00 10 	sli r3,r10,16
    }
    if ( a < 0x1000000 ) {
    1ad4:	38 21 ff ff 	ori r1,r1,0xffff
    1ad8:	50 23 00 13 	bgeu r1,r3,1b24 <float32_div+0x318>
    1adc:	34 04 00 08 	mvi r4,8
    1ae0:	e3 ff ff 66 	bi 1878 <float32_div+0x6c>
    1ae4:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    1ae8:	3c a3 00 10 	sli r3,r5,16
    }
    if ( a < 0x1000000 ) {
    1aec:	38 21 ff ff 	ori r1,r1,0xffff
    1af0:	50 23 00 0f 	bgeu r1,r3,1b2c <float32_div+0x320>
    1af4:	34 04 00 08 	mvi r4,8
    1af8:	e3 ff ff 73 	bi 18c4 <float32_div+0xb8>
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) {
            if ( ( aExp | aSig ) == 0 ) {
                float_raise( float_flag_invalid );
                return float32_default_nan;
    1afc:	78 03 00 00 	mvhi r3,0x0
    1b00:	38 63 2e 64 	ori r3,r3,0x2e64
    1b04:	28 62 00 00 	lw r2,(r3+0)
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1b08:	3d c4 00 1f 	sli r4,r14,31
    1b0c:	78 01 7f 80 	mvhi r1,0x7f80
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) {
            if ( ( aExp | aSig ) == 0 ) {
                float_raise( float_flag_invalid );
                return float32_default_nan;
    1b10:	38 42 00 02 	ori r2,r2,0x2
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1b14:	38 21 00 00 	ori r1,r1,0x0
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) {
            if ( ( aExp | aSig ) == 0 ) {
                float_raise( float_flag_invalid );
                return float32_default_nan;
    1b18:	58 62 00 00 	sw (r3+0),r2
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1b1c:	b4 81 20 00 	add r4,r4,r1
    1b20:	e3 ff ff a7 	bi 19bc <float32_div+0x1b0>
    1b24:	34 02 00 18 	mvi r2,24
    1b28:	e3 ff ff 52 	bi 1870 <float32_div+0x64>
    1b2c:	34 02 00 18 	mvi r2,24
    1b30:	e3 ff ff 63 	bi 18bc <float32_div+0xb0>

00001b34 <float32_rem>:
with respect to the corresponding value `b'.  The operation is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_rem( float32 a, float32 b )
{
    1b34:	37 9c ff d8 	addi sp,sp,-40
    1b38:	5b 8b 00 28 	sw (sp+40),r11
    1b3c:	5b 8c 00 24 	sw (sp+36),r12
    1b40:	5b 8d 00 20 	sw (sp+32),r13
    1b44:	5b 8e 00 1c 	sw (sp+28),r14
    1b48:	5b 8f 00 18 	sw (sp+24),r15
    1b4c:	5b 90 00 14 	sw (sp+20),r16
    1b50:	5b 91 00 10 	sw (sp+16),r17
    1b54:	5b 92 00 0c 	sw (sp+12),r18
    1b58:	5b 93 00 08 	sw (sp+8),r19
    1b5c:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1b60:	00 23 00 17 	srui r3,r1,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1b64:	78 04 00 7f 	mvhi r4,0x7f
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1b68:	00 45 00 17 	srui r5,r2,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1b6c:	38 84 ff ff 	ori r4,r4,0xffff
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1b70:	20 67 00 ff 	andi r7,r3,0xff
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    if ( aExp == 0xFF ) {
    1b74:	34 03 00 ff 	mvi r3,255
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1b78:	a0 44 40 00 	and r8,r2,r4
with respect to the corresponding value `b'.  The operation is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_rem( float32 a, float32 b )
{
    1b7c:	b8 20 80 00 	mv r16,r1
    1b80:	b8 40 30 00 	mv r6,r2
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1b84:	a0 a3 88 00 	and r17,r5,r3
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1b88:	a0 24 20 00 	and r4,r1,r4
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    if ( aExp == 0xFF ) {
    1b8c:	44 e3 00 82 	be r7,r3,1d94 <float32_rem+0x260>
            return propagateFloat32NaN( a, b );
        }
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( bExp == 0xFF ) {
    1b90:	46 23 00 16 	be r17,r3,1be8 <float32_rem+0xb4>
        if ( bSig ) return propagateFloat32NaN( a, b );
        return a;
    }
    if ( bExp == 0 ) {
    1b94:	5e 20 00 29 	bne r17,r0,1c38 <float32_rem+0x104>
        if ( bSig == 0 ) {
    1b98:	5d 11 00 18 	bne r8,r17,1bf8 <float32_rem+0xc4>
    1b9c:	78 02 00 00 	mvhi r2,0x0
    1ba0:	38 42 2e 64 	ori r2,r2,0x2e64
    1ba4:	28 41 00 00 	lw r1,(r2+0)
    1ba8:	34 10 ff ff 	mvi r16,-1
    1bac:	38 21 00 10 	ori r1,r1,0x10
    1bb0:	58 41 00 00 	sw (r2+0),r1
    }
    zSign = ( (sbits32) aSig < 0 );
    if ( zSign ) aSig = - aSig;
    return normalizeRoundAndPackFloat32( aSign ^ zSign, bExp, aSig );

}
    1bb4:	ba 00 08 00 	mv r1,r16
    1bb8:	2b 9d 00 04 	lw ra,(sp+4)
    1bbc:	2b 8b 00 28 	lw r11,(sp+40)
    1bc0:	2b 8c 00 24 	lw r12,(sp+36)
    1bc4:	2b 8d 00 20 	lw r13,(sp+32)
    1bc8:	2b 8e 00 1c 	lw r14,(sp+28)
    1bcc:	2b 8f 00 18 	lw r15,(sp+24)
    1bd0:	2b 90 00 14 	lw r16,(sp+20)
    1bd4:	2b 91 00 10 	lw r17,(sp+16)
    1bd8:	2b 92 00 0c 	lw r18,(sp+12)
    1bdc:	2b 93 00 08 	lw r19,(sp+8)
    1be0:	37 9c 00 28 	addi sp,sp,40
    1be4:	c3 a0 00 00 	ret
        }
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    1be8:	45 00 ff f3 	be r8,r0,1bb4 <float32_rem+0x80>
    1bec:	fb ff fb c8 	calli b0c <propagateFloat32NaN>
    1bf0:	b8 20 80 00 	mv r16,r1
    1bf4:	e3 ff ff f0 	bi 1bb4 <float32_rem+0x80>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    1bf8:	38 01 ff ff 	mvu r1,0xffff
    1bfc:	50 28 00 8c 	bgeu r1,r8,1e2c <float32_rem+0x2f8>
    1c00:	b9 00 18 00 	mv r3,r8
    1c04:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    1c08:	3c 63 00 08 	sli r3,r3,8
    1c0c:	34 45 ff f8 	addi r5,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1c10:	00 63 00 18 	srui r3,r3,24
    1c14:	78 01 00 00 	mvhi r1,0x0
    1c18:	3c 63 00 02 	sli r3,r3,2
    1c1c:	38 21 29 f0 	ori r1,r1,0x29f0
    1c20:	b4 23 08 00 	add r1,r1,r3
    1c24:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    1c28:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1c2c:	b4 a2 10 00 	add r2,r5,r2
    *zSigPtr = aSig<<shiftCount;
    1c30:	bd 02 40 00 	sl r8,r8,r2
    *zExpPtr = 1 - shiftCount;
    1c34:	c8 22 88 00 	sub r17,r1,r2
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    if ( aExp == 0 ) {
    1c38:	5c e0 00 12 	bne r7,r0,1c80 <float32_rem+0x14c>
        if ( aSig == 0 ) return a;
    1c3c:	44 87 ff de 	be r4,r7,1bb4 <float32_rem+0x80>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    1c40:	38 01 ff ff 	mvu r1,0xffff
    1c44:	50 24 00 74 	bgeu r1,r4,1e14 <float32_rem+0x2e0>
    1c48:	b8 80 18 00 	mv r3,r4
    1c4c:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    1c50:	3c 63 00 08 	sli r3,r3,8
    1c54:	34 45 ff f8 	addi r5,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1c58:	00 63 00 18 	srui r3,r3,24
    1c5c:	78 01 00 00 	mvhi r1,0x0
    1c60:	3c 63 00 02 	sli r3,r3,2
    1c64:	38 21 29 f0 	ori r1,r1,0x29f0
    1c68:	b4 23 08 00 	add r1,r1,r3
    1c6c:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    1c70:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1c74:	b4 a2 10 00 	add r2,r5,r2
    *zSigPtr = aSig<<shiftCount;
    1c78:	bc 82 20 00 	sl r4,r4,r2
    *zExpPtr = 1 - shiftCount;
    1c7c:	c8 22 38 00 	sub r7,r1,r2
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return a;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    expDiff = aExp - bExp;
    aSig = ( aSig | 0x00800000 )<<8;
    1c80:	78 02 00 80 	mvhi r2,0x80
    1c84:	b8 40 08 00 	mv r1,r2
    1c88:	38 21 00 00 	ori r1,r1,0x0
    1c8c:	b8 81 08 00 	or r1,r4,r1
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return a;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    expDiff = aExp - bExp;
    1c90:	c8 f1 98 00 	sub r19,r7,r17
    aSig = ( aSig | 0x00800000 )<<8;
    1c94:	3c 2c 00 08 	sli r12,r1,8
    bSig = ( bSig | 0x00800000 )<<8;
    if ( expDiff < 0 ) {
    1c98:	4e 60 00 04 	bge r19,r0,1ca8 <float32_rem+0x174>
        if ( expDiff < -1 ) return a;
    1c9c:	34 01 ff ff 	mvi r1,-1
    1ca0:	5e 61 ff c5 	bne r19,r1,1bb4 <float32_rem+0x80>
        aSig >>= 1;
    1ca4:	01 8c 00 01 	srui r12,r12,1
        if ( aSig == 0 ) return a;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    expDiff = aExp - bExp;
    aSig = ( aSig | 0x00800000 )<<8;
    bSig = ( bSig | 0x00800000 )<<8;
    1ca8:	38 42 00 00 	ori r2,r2,0x0
    1cac:	b9 02 08 00 	or r1,r8,r2
    1cb0:	3c 2d 00 08 	sli r13,r1,8
    if ( expDiff < 0 ) {
        if ( expDiff < -1 ) return a;
        aSig >>= 1;
    }
    q = ( bSig <= aSig );
    1cb4:	f1 8d 28 00 	cmpgeu r5,r12,r13
    if ( q ) aSig -= bSig;
    1cb8:	44 a0 00 02 	be r5,r0,1cc0 <float32_rem+0x18c>
    1cbc:	c9 8d 60 00 	sub r12,r12,r13
    expDiff -= 32;
    1cc0:	36 6f ff e0 	addi r15,r19,-32
    while ( 0 < expDiff ) {
    1cc4:	01 ae 00 02 	srui r14,r13,2
    1cc8:	b9 e0 58 00 	mv r11,r15
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
    1ccc:	34 12 00 02 	mvi r18,2
        aSig >>= 1;
    }
    q = ( bSig <= aSig );
    if ( q ) aSig -= bSig;
    expDiff -= 32;
    while ( 0 < expDiff ) {
    1cd0:	49 e0 00 02 	bg r15,r0,1cd8 <float32_rem+0x1a4>
    1cd4:	e0 00 00 14 	bi 1d24 <float32_rem+0x1f0>
        q = estimateDiv64To32( aSig, 0, bSig );
    1cd8:	b9 80 08 00 	mv r1,r12
    1cdc:	34 02 00 00 	mvi r2,0
    1ce0:	b9 a0 18 00 	mv r3,r13
    1ce4:	fb ff fb 1d 	calli 958 <estimateDiv64To32>
        q = ( 2 < q ) ? q - 2 : 0;
    1ce8:	34 25 ff fe 	addi r5,r1,-2
    1cec:	89 c5 10 00 	mul r2,r14,r5
    1cf0:	34 0c 00 00 	mvi r12,0
    1cf4:	54 32 00 26 	bgu r1,r18,1d8c <float32_rem+0x258>
    1cf8:	b9 80 28 00 	mv r5,r12
        aSig = - ( ( bSig>>2 ) * q );
        expDiff -= 30;
    1cfc:	35 6b ff e2 	addi r11,r11,-30
        aSig >>= 1;
    }
    q = ( bSig <= aSig );
    if ( q ) aSig -= bSig;
    expDiff -= 32;
    while ( 0 < expDiff ) {
    1d00:	49 60 ff f6 	bg r11,r0,1cd8 <float32_rem+0x1a4>
with respect to the corresponding value `b'.  The operation is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_rem( float32 a, float32 b )
{
    1d04:	34 02 00 1e 	mvi r2,30
    1d08:	36 61 ff df 	addi r1,r19,-33
    1d0c:	8c 22 08 00 	divu r1,r1,r2
    1d10:	35 e3 ff e2 	addi r3,r15,-30
    1d14:	3c 22 00 05 	sli r2,r1,5
    1d18:	b4 21 08 00 	add r1,r1,r1
    1d1c:	c8 22 08 00 	sub r1,r1,r2
    1d20:	b4 61 78 00 	add r15,r3,r1
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
        aSig = - ( ( bSig>>2 ) * q );
        expDiff -= 30;
    }
    expDiff += 32;
    1d24:	35 eb 00 20 	addi r11,r15,32
        q >>= 32 - expDiff;
        bSig >>= 2;
        aSig = ( ( aSig>>1 )<<( expDiff - 1 ) ) - bSig * q;
    }
    else {
        aSig >>= 2;
    1d28:	01 83 00 02 	srui r3,r12,2
        q = ( 2 < q ) ? q - 2 : 0;
        aSig = - ( ( bSig>>2 ) * q );
        expDiff -= 30;
    }
    expDiff += 32;
    if ( 0 < expDiff ) {
    1d2c:	4c 0b 00 0e 	bge r0,r11,1d64 <float32_rem+0x230>
        q = estimateDiv64To32( aSig, 0, bSig );
    1d30:	34 02 00 00 	mvi r2,0
    1d34:	b9 a0 18 00 	mv r3,r13
    1d38:	b9 80 08 00 	mv r1,r12
    1d3c:	fb ff fb 07 	calli 958 <estimateDiv64To32>
    1d40:	b8 20 10 00 	mv r2,r1
        q = ( 2 < q ) ? q - 2 : 0;
    1d44:	34 01 00 02 	mvi r1,2
    1d48:	54 41 00 2e 	bgu r2,r1,1e00 <float32_rem+0x2cc>
    1d4c:	34 05 00 00 	mvi r5,0
    1d50:	b8 a0 18 00 	mv r3,r5
        q >>= 32 - expDiff;
        bSig >>= 2;
        aSig = ( ( aSig>>1 )<<( expDiff - 1 ) ) - bSig * q;
    1d54:	01 81 00 01 	srui r1,r12,1
    1d58:	35 62 ff ff 	addi r2,r11,-1
    1d5c:	bc 22 08 00 	sl r1,r1,r2
    1d60:	c8 23 18 00 	sub r3,r1,r3
    }
    else {
        aSig >>= 2;
    1d64:	c8 0e 30 00 	sub r6,r0,r14
    1d68:	c8 6e 10 00 	sub r2,r3,r14
        bSig >>= 2;
    }
    do {
        alternateASig = aSig;
        ++q;
    1d6c:	b8 40 38 00 	mv r7,r2
    1d70:	b4 46 10 00 	add r2,r2,r6
        aSig -= bSig;
    } while ( 0 <= (sbits32) aSig );
    1d74:	b4 4e 08 00 	add r1,r2,r14
        aSig >>= 2;
        bSig >>= 2;
    }
    do {
        alternateASig = aSig;
        ++q;
    1d78:	34 a5 00 01 	addi r5,r5,1
    1d7c:	b4 c3 20 00 	add r4,r6,r3
        aSig -= bSig;
    } while ( 0 <= (sbits32) aSig );
    1d80:	48 01 00 0f 	bg r0,r1,1dbc <float32_rem+0x288>
    1d84:	b8 80 18 00 	mv r3,r4
    1d88:	e3 ff ff f9 	bi 1d6c <float32_rem+0x238>
    q = ( bSig <= aSig );
    if ( q ) aSig -= bSig;
    expDiff -= 32;
    while ( 0 < expDiff ) {
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
    1d8c:	c8 02 60 00 	sub r12,r0,r2
    1d90:	e3 ff ff db 	bi 1cfc <float32_rem+0x1c8>
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    if ( aExp == 0xFF ) {
        if ( aSig || ( ( bExp == 0xFF ) && bSig ) ) {
    1d94:	5c 80 00 05 	bne r4,r0,1da8 <float32_rem+0x274>
    1d98:	e6 23 08 00 	cmpe r1,r17,r3
    1d9c:	7d 02 00 00 	cmpnei r2,r8,0
    1da0:	a0 22 08 00 	and r1,r1,r2
    1da4:	44 24 ff 7e 	be r1,r4,1b9c <float32_rem+0x68>
            return propagateFloat32NaN( a, b );
    1da8:	ba 00 08 00 	mv r1,r16
    1dac:	b8 c0 10 00 	mv r2,r6
    1db0:	fb ff fb 57 	calli b0c <propagateFloat32NaN>
    1db4:	b8 20 80 00 	mv r16,r1
    1db8:	e3 ff ff 7f 	bi 1bb4 <float32_rem+0x80>
    do {
        alternateASig = aSig;
        ++q;
        aSig -= bSig;
    } while ( 0 <= (sbits32) aSig );
    sigMean = aSig + alternateASig;
    1dbc:	b4 64 30 00 	add r6,r3,r4
    if ( ( sigMean < 0 ) || ( ( sigMean == 0 ) && ( q & 1 ) ) ) {
    1dc0:	48 06 00 04 	bg r0,r6,1dd0 <float32_rem+0x29c>
    1dc4:	5c c0 00 0d 	bne r6,r0,1df8 <float32_rem+0x2c4>
    1dc8:	20 a1 00 01 	andi r1,r5,0x1
    1dcc:	44 26 00 0b 	be r1,r6,1df8 <float32_rem+0x2c4>
    1dd0:	b8 60 38 00 	mv r7,r3
        aSig = alternateASig;
    }
    zSign = ( (sbits32) aSig < 0 );
    1dd4:	00 e4 00 1f 	srui r4,r7,31
    if ( zSign ) aSig = - aSig;
    1dd8:	44 80 00 02 	be r4,r0,1de0 <float32_rem+0x2ac>
    1ddc:	c8 03 18 00 	sub r3,r0,r3
    return normalizeRoundAndPackFloat32( aSign ^ zSign, bExp, aSig );
    1de0:	02 01 00 1f 	srui r1,r16,31
    1de4:	ba 20 10 00 	mv r2,r17
    1de8:	98 81 08 00 	xor r1,r4,r1
    1dec:	fb ff fb db 	calli d58 <normalizeRoundAndPackFloat32>
    1df0:	b8 20 80 00 	mv r16,r1
    1df4:	e3 ff ff 70 	bi 1bb4 <float32_rem+0x80>
        alternateASig = aSig;
        ++q;
        aSig -= bSig;
    } while ( 0 <= (sbits32) aSig );
    sigMean = aSig + alternateASig;
    if ( ( sigMean < 0 ) || ( ( sigMean == 0 ) && ( q & 1 ) ) ) {
    1df8:	b8 80 18 00 	mv r3,r4
    1dfc:	e3 ff ff f6 	bi 1dd4 <float32_rem+0x2a0>
        expDiff -= 30;
    }
    expDiff += 32;
    if ( 0 < expDiff ) {
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
    1e00:	34 42 ff fe 	addi r2,r2,-2
    1e04:	c8 0b 08 00 	sub r1,r0,r11
    1e08:	80 41 28 00 	sru r5,r2,r1
    1e0c:	88 ae 18 00 	mul r3,r5,r14
    1e10:	e3 ff ff d1 	bi 1d54 <float32_rem+0x220>
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    1e14:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    1e18:	3c 83 00 10 	sli r3,r4,16
    }
    if ( a < 0x1000000 ) {
    1e1c:	38 21 ff ff 	ori r1,r1,0xffff
    1e20:	50 23 00 09 	bgeu r1,r3,1e44 <float32_rem+0x310>
    1e24:	34 05 00 08 	mvi r5,8
    1e28:	e3 ff ff 8c 	bi 1c58 <float32_rem+0x124>
    1e2c:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    1e30:	3d 03 00 10 	sli r3,r8,16
    }
    if ( a < 0x1000000 ) {
    1e34:	38 21 ff ff 	ori r1,r1,0xffff
    1e38:	50 23 00 05 	bgeu r1,r3,1e4c <float32_rem+0x318>
    1e3c:	34 05 00 08 	mvi r5,8
    1e40:	e3 ff ff 74 	bi 1c10 <float32_rem+0xdc>
    1e44:	34 02 00 18 	mvi r2,24
    1e48:	e3 ff ff 82 	bi 1c50 <float32_rem+0x11c>
    1e4c:	34 02 00 18 	mvi r2,24
    1e50:	e3 ff ff 6e 	bi 1c08 <float32_rem+0xd4>

00001e54 <float32_sqrt>:
The operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_sqrt( float32 a )
{
    1e54:	37 9c ff ec 	addi sp,sp,-20
    1e58:	5b 8b 00 14 	sw (sp+20),r11
    1e5c:	5b 8c 00 10 	sw (sp+16),r12
    1e60:	5b 8d 00 0c 	sw (sp+12),r13
    1e64:	5b 8e 00 08 	sw (sp+8),r14
    1e68:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1e6c:	00 22 00 17 	srui r2,r1,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1e70:	78 03 00 7f 	mvhi r3,0x7f
    1e74:	38 63 ff ff 	ori r3,r3,0xffff
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1e78:	20 4c 00 ff 	andi r12,r2,0xff
    bits32 term0, term1;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
    1e7c:	34 02 00 ff 	mvi r2,255
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1e80:	a0 23 28 00 	and r5,r1,r3
The operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_sqrt( float32 a )
{
    1e84:	b8 20 20 00 	mv r4,r1
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    1e88:	00 23 00 1f 	srui r3,r1,31
    bits32 term0, term1;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
    1e8c:	45 82 00 55 	be r12,r2,1fe0 <float32_sqrt+0x18c>
        if ( aSig ) return propagateFloat32NaN( a, 0 );
        if ( ! aSign ) return a;
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( aSign ) {
    1e90:	44 60 00 11 	be r3,r0,1ed4 <float32_sqrt+0x80>
        if ( ( aExp | aSig ) == 0 ) return a;
    1e94:	b9 85 08 00 	or r1,r12,r5
    1e98:	44 20 00 07 	be r1,r0,1eb4 <float32_sqrt+0x60>
    1e9c:	78 02 00 00 	mvhi r2,0x0
    1ea0:	38 42 2e 64 	ori r2,r2,0x2e64
    1ea4:	28 41 00 00 	lw r1,(r2+0)
    1ea8:	34 04 ff ff 	mvi r4,-1
    1eac:	38 21 00 10 	ori r1,r1,0x10
    1eb0:	58 41 00 00 	sw (r2+0),r1
        }
    }
    shift32RightJamming( zSig, 1, &zSig );
    return roundAndPackFloat32( 0, zExp, zSig );

}
    1eb4:	b8 80 08 00 	mv r1,r4
    1eb8:	2b 9d 00 04 	lw ra,(sp+4)
    1ebc:	2b 8b 00 14 	lw r11,(sp+20)
    1ec0:	2b 8c 00 10 	lw r12,(sp+16)
    1ec4:	2b 8d 00 0c 	lw r13,(sp+12)
    1ec8:	2b 8e 00 08 	lw r14,(sp+8)
    1ecc:	37 9c 00 14 	addi sp,sp,20
    1ed0:	c3 a0 00 00 	ret
    if ( aSign ) {
        if ( ( aExp | aSig ) == 0 ) return a;
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( aExp == 0 ) {
    1ed4:	5d 83 00 13 	bne r12,r3,1f20 <float32_sqrt+0xcc>
        if ( aSig == 0 ) return 0;
    1ed8:	b8 a0 20 00 	mv r4,r5
    1edc:	44 ac ff f6 	be r5,r12,1eb4 <float32_sqrt+0x60>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    1ee0:	38 01 ff ff 	mvu r1,0xffff
    1ee4:	50 25 00 86 	bgeu r1,r5,20fc <float32_sqrt+0x2a8>
    1ee8:	b8 a0 18 00 	mv r3,r5
    1eec:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    1ef0:	3c 63 00 08 	sli r3,r3,8
    1ef4:	34 44 ff f8 	addi r4,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1ef8:	00 63 00 18 	srui r3,r3,24
    1efc:	78 01 00 00 	mvhi r1,0x0
    1f00:	3c 63 00 02 	sli r3,r3,2
    1f04:	38 21 29 f0 	ori r1,r1,0x29f0
    1f08:	b4 23 08 00 	add r1,r1,r3
    1f0c:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    1f10:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1f14:	b4 82 10 00 	add r2,r4,r2
    *zSigPtr = aSig<<shiftCount;
    1f18:	bc a2 28 00 	sl r5,r5,r2
    *zExpPtr = 1 - shiftCount;
    1f1c:	c8 22 60 00 	sub r12,r1,r2
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return 0;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = ( ( aExp - 0x7F )>>1 ) + 0x7E;
    aSig = ( aSig | 0x00800000 )<<8;
    1f20:	78 01 00 80 	mvhi r1,0x80
    1f24:	38 21 00 00 	ori r1,r1,0x0
    1f28:	b8 a1 08 00 	or r1,r5,r1
    1f2c:	3c 2d 00 08 	sli r13,r1,8
    };
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    if ( aExp & 1 ) {
    1f30:	21 8e 00 01 	andi r14,r12,0x1
        0x0200, 0x0179, 0x0109, 0x00AF, 0x0068, 0x0034, 0x0012, 0x0002
    };
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    1f34:	01 a1 00 1b 	srui r1,r13,27
    1f38:	20 23 00 0f 	andi r3,r1,0xf
    if ( aExp & 1 ) {
    1f3c:	5d c0 00 2c 	bne r14,r0,1fec <float32_sqrt+0x198>
        z = 0x4000 + ( a>>17 ) - sqrtOddAdjustments[ index ];
        z = ( ( a / z )<<14 ) + ( z<<15 );
        a >>= 1;
    }
    else {
        z = 0x8000 + ( a>>17 ) - sqrtEvenAdjustments[ index ];
    1f40:	78 01 00 00 	mvhi r1,0x0
    1f44:	b4 63 10 00 	add r2,r3,r3
    1f48:	38 21 2d f0 	ori r1,r1,0x2df0
    1f4c:	b4 22 08 00 	add r1,r1,r2
    1f50:	2c 23 00 00 	lhu r3,(r1+0)
    1f54:	01 a2 00 11 	srui r2,r13,17
    1f58:	38 01 80 00 	mvu r1,0x8000
    1f5c:	b4 41 10 00 	add r2,r2,r1
    1f60:	c8 43 10 00 	sub r2,r2,r3
        z = a / z + z;
    1f64:	8d a2 08 00 	divu r1,r13,r2
        z = ( 0x20000 <= z ) ? 0xFFFF8000 : ( z<<15 );
    1f68:	78 03 00 01 	mvhi r3,0x1
        z = ( ( a / z )<<14 ) + ( z<<15 );
        a >>= 1;
    }
    else {
        z = 0x8000 + ( a>>17 ) - sqrtEvenAdjustments[ index ];
        z = a / z + z;
    1f6c:	b4 22 08 00 	add r1,r1,r2
        z = ( 0x20000 <= z ) ? 0xFFFF8000 : ( z<<15 );
    1f70:	38 63 ff ff 	ori r3,r3,0xffff
    1f74:	3c 2b 00 0f 	sli r11,r1,15
    1f78:	50 61 00 02 	bgeu r3,r1,1f80 <float32_sqrt+0x12c>
    1f7c:	34 0b 80 00 	mvi r11,-32768
        if ( z <= a ) return (bits32) ( ( (sbits32) a )>>1 );
    1f80:	b9 a0 20 00 	mv r4,r13
    1f84:	55 6d 00 27 	bgu r11,r13,2020 <float32_sqrt+0x1cc>
    1f88:	15 a1 00 01 	sri r1,r13,1
    zSig = estimateSqrt32( aExp, aSig ) + 2;
    1f8c:	34 26 00 02 	addi r6,r1,2
    if ( ( zSig & 0x7F ) <= 5 ) {
    1f90:	20 c2 00 7f 	andi r2,r6,0x7f
    1f94:	34 01 00 05 	mvi r1,5
    1f98:	50 22 00 2a 	bgeu r1,r2,2040 <float32_sqrt+0x1ec>
    1f9c:	00 c2 00 01 	srui r2,r6,1
    1fa0:	20 c1 00 01 	andi r1,r6,0x1
    1fa4:	b8 22 18 00 	or r3,r1,r2
            }
            zSig |= ( ( rem0 | rem1 ) != 0 );
        }
    }
    shift32RightJamming( zSig, 1, &zSig );
    return roundAndPackFloat32( 0, zExp, zSig );
    1fa8:	35 82 ff 81 	addi r2,r12,-127
    1fac:	14 42 00 01 	sri r2,r2,1
    1fb0:	34 01 00 00 	mvi r1,0
    1fb4:	34 42 00 7e 	addi r2,r2,126
    1fb8:	fb ff fb 04 	calli bc8 <roundAndPackFloat32>
    1fbc:	b8 20 20 00 	mv r4,r1

}
    1fc0:	b8 80 08 00 	mv r1,r4
    1fc4:	2b 9d 00 04 	lw ra,(sp+4)
    1fc8:	2b 8b 00 14 	lw r11,(sp+20)
    1fcc:	2b 8c 00 10 	lw r12,(sp+16)
    1fd0:	2b 8d 00 0c 	lw r13,(sp+12)
    1fd4:	2b 8e 00 08 	lw r14,(sp+8)
    1fd8:	37 9c 00 14 	addi sp,sp,20
    1fdc:	c3 a0 00 00 	ret

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, 0 );
    1fe0:	5c a0 00 43 	bne r5,r0,20ec <float32_sqrt+0x298>
        if ( ! aSign ) return a;
    1fe4:	5c 65 ff ae 	bne r3,r5,1e9c <float32_sqrt+0x48>
    1fe8:	e3 ff ff b3 	bi 1eb4 <float32_sqrt+0x60>
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    if ( aExp & 1 ) {
        z = 0x4000 + ( a>>17 ) - sqrtOddAdjustments[ index ];
    1fec:	78 02 00 00 	mvhi r2,0x0
    1ff0:	b4 63 08 00 	add r1,r3,r3
    1ff4:	38 42 2e 10 	ori r2,r2,0x2e10
    1ff8:	b4 41 10 00 	add r2,r2,r1
    1ffc:	2c 43 00 00 	lhu r3,(r2+0)
    2000:	01 a1 00 11 	srui r1,r13,17
        z = ( ( a / z )<<14 ) + ( z<<15 );
        a >>= 1;
    2004:	01 a4 00 01 	srui r4,r13,1
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    if ( aExp & 1 ) {
        z = 0x4000 + ( a>>17 ) - sqrtOddAdjustments[ index ];
    2008:	34 21 40 00 	addi r1,r1,16384
    200c:	c8 23 08 00 	sub r1,r1,r3
        z = ( ( a / z )<<14 ) + ( z<<15 );
    2010:	8d a1 10 00 	divu r2,r13,r1
    2014:	3c 21 00 0f 	sli r1,r1,15
    2018:	3c 42 00 0e 	sli r2,r2,14
    201c:	b4 41 58 00 	add r11,r2,r1
        z = 0x8000 + ( a>>17 ) - sqrtEvenAdjustments[ index ];
        z = a / z + z;
        z = ( 0x20000 <= z ) ? 0xFFFF8000 : ( z<<15 );
        if ( z <= a ) return (bits32) ( ( (sbits32) a )>>1 );
    }
    return ( ( estimateDiv64To32( a, 0, z ) )>>1 ) + ( z>>1 );
    2020:	34 02 00 00 	mvi r2,0
    2024:	b8 80 08 00 	mv r1,r4
    2028:	b9 60 18 00 	mv r3,r11
    202c:	fb ff fa 4b 	calli 958 <estimateDiv64To32>
    2030:	00 21 00 01 	srui r1,r1,1
    2034:	01 62 00 01 	srui r2,r11,1
    2038:	b4 41 08 00 	add r1,r2,r1
    203c:	e3 ff ff d4 	bi 1f8c <float32_sqrt+0x138>
    }
    zExp = ( ( aExp - 0x7F )>>1 ) + 0x7E;
    aSig = ( aSig | 0x00800000 )<<8;
    zSig = estimateSqrt32( aExp, aSig ) + 2;
    if ( ( zSig & 0x7F ) <= 5 ) {
        if ( zSig < 2 ) {
    2040:	34 01 00 01 	mvi r1,1
    2044:	54 c1 00 04 	bgu r6,r1,2054 <float32_sqrt+0x200>
    2048:	78 03 7f ff 	mvhi r3,0x7fff
    204c:	38 63 ff ff 	ori r3,r3,0xffff
    2050:	e3 ff ff d6 	bi 1fa8 <float32_sqrt+0x154>
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    2054:	00 c3 00 10 	srui r3,r6,16

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    2058:	20 c4 ff ff 	andi r4,r6,0xffff
    zMiddleA = ( (bits32) aLow ) * bHigh;
    205c:	88 64 08 00 	mul r1,r3,r4
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    2060:	b4 21 28 00 	add r5,r1,r1
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    2064:	54 25 00 2c 	bgu r1,r5,2114 <float32_sqrt+0x2c0>
    2068:	34 07 00 00 	mvi r7,0

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    206c:	88 84 20 00 	mul r4,r4,r4
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
    2070:	3c a2 00 10 	sli r2,r5,16
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    2074:	88 63 18 00 	mul r3,r3,r3
    2078:	81 ae 08 00 	sru r1,r13,r14
    zMiddleA <<= 16;
    z1 += zMiddleA;
    207c:	b4 44 20 00 	add r4,r2,r4
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    2080:	00 a5 00 10 	srui r5,r5,16
    2084:	c8 23 08 00 	sub r1,r1,r3
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    2088:	f4 44 10 00 	cmpgu r2,r2,r4
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    208c:	c8 25 08 00 	sub r1,r1,r5
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    2090:	7c 83 00 00 	cmpnei r3,r4,0
    2094:	c8 22 08 00 	sub r1,r1,r2
    2098:	c8 23 08 00 	sub r1,r1,r3
    209c:	c8 27 28 00 	sub r5,r1,r7
INLINE void
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    20a0:	c8 04 18 00 	sub r3,r0,r4
        }
        else {
            aSig >>= aExp & 1;
            mul32To64( zSig, zSig, &term0, &term1 );
            sub64( aSig, 0, term0, term1, &rem0, &rem1 );
            while ( (sbits32) rem0 < 0 ) {
    20a4:	4c a0 00 0b 	bge r5,r0,20d0 <float32_sqrt+0x27c>
                --zSig;
    20a8:	34 c6 ff ff 	addi r6,r6,-1
 add64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{
    bits32 z1;

    z1 = a1 + b1;
    20ac:	b4 c6 08 00 	add r1,r6,r6
    20b0:	38 21 00 01 	ori r1,r1,0x1
        }
        else {
            aSig >>= aExp & 1;
            mul32To64( zSig, zSig, &term0, &term1 );
            sub64( aSig, 0, term0, term1, &rem0, &rem1 );
            while ( (sbits32) rem0 < 0 ) {
    20b4:	b8 60 10 00 	mv r2,r3
    20b8:	b4 23 18 00 	add r3,r1,r3
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
    20bc:	f4 43 10 00 	cmpgu r2,r2,r3
    20c0:	00 c1 00 1f 	srui r1,r6,31
    20c4:	b4 22 08 00 	add r1,r1,r2
    20c8:	b4 a1 28 00 	add r5,r5,r1
    20cc:	48 05 ff f7 	bg r0,r5,20a8 <float32_sqrt+0x254>
                --zSig;
                shortShift64Left( 0, zSig, 1, &term0, &term1 );
                term1 |= 1;
                add64( rem0, rem1, term0, term1, &rem0, &rem1 );
            }
            zSig |= ( ( rem0 | rem1 ) != 0 );
    20d0:	b8 a3 08 00 	or r1,r5,r3
    20d4:	7c 21 00 00 	cmpnei r1,r1,0
    20d8:	b8 26 08 00 	or r1,r1,r6
    20dc:	00 22 00 01 	srui r2,r1,1
    20e0:	20 21 00 01 	andi r1,r1,0x1
    20e4:	b8 22 18 00 	or r3,r1,r2
    20e8:	e3 ff ff b0 	bi 1fa8 <float32_sqrt+0x154>

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, 0 );
    20ec:	34 02 00 00 	mvi r2,0
    20f0:	fb ff fa 87 	calli b0c <propagateFloat32NaN>
    20f4:	b8 20 20 00 	mv r4,r1
    20f8:	e3 ff ff 6f 	bi 1eb4 <float32_sqrt+0x60>
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    20fc:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    2100:	3c a3 00 10 	sli r3,r5,16
    }
    if ( a < 0x1000000 ) {
    2104:	38 21 ff ff 	ori r1,r1,0xffff
    2108:	50 23 00 06 	bgeu r1,r3,2120 <float32_sqrt+0x2cc>
    210c:	34 04 00 08 	mvi r4,8
    2110:	e3 ff ff 7a 	bi 1ef8 <float32_sqrt+0xa4>
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    2114:	78 07 00 01 	mvhi r7,0x1
    2118:	38 e7 00 00 	ori r7,r7,0x0
    211c:	e3 ff ff d4 	bi 206c <float32_sqrt+0x218>
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    2120:	34 02 00 18 	mvi r2,24
    2124:	e3 ff ff 73 	bi 1ef0 <float32_sqrt+0x9c>

00002128 <float32_eq>:
corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_eq( float32 a, float32 b )
{
    2128:	b8 20 20 00 	mv r4,r1

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    212c:	00 21 00 17 	srui r1,r1,23
corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_eq( float32 a, float32 b )
{
    2130:	b8 40 28 00 	mv r5,r2

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2134:	20 21 00 ff 	andi r1,r1,0xff
    2138:	34 02 00 ff 	mvi r2,255
    213c:	44 22 00 0c 	be r1,r2,216c <float32_eq+0x44>
    2140:	00 a1 00 17 	srui r1,r5,23
    2144:	34 02 00 ff 	mvi r2,255
    2148:	20 21 00 ff 	andi r1,r1,0xff
    214c:	44 22 00 16 	be r1,r2,21a4 <float32_eq+0x7c>
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );
    2150:	34 03 00 01 	mvi r3,1
    2154:	44 85 00 04 	be r4,r5,2164 <float32_eq+0x3c>
    2158:	b8 a4 08 00 	or r1,r5,r4
    215c:	b4 21 08 00 	add r1,r1,r1
    2160:	64 23 00 00 	cmpei r3,r1,0

}
    2164:	b8 60 08 00 	mv r1,r3
    2168:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_eq( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    216c:	78 01 00 7f 	mvhi r1,0x7f
    2170:	38 21 ff ff 	ori r1,r1,0xffff
    2174:	a0 81 08 00 	and r1,r4,r1
    2178:	44 20 ff f2 	be r1,r0,2140 <float32_eq+0x18>
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    217c:	00 81 00 16 	srui r1,r4,22
    2180:	34 02 01 fe 	mvi r2,510
    2184:	20 21 01 ff 	andi r1,r1,0x1ff
    2188:	44 22 00 0f 	be r1,r2,21c4 <float32_eq+0x9c>
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );
    218c:	00 a1 00 16 	srui r1,r5,22
    2190:	34 02 01 fe 	mvi r2,510
    2194:	20 21 01 ff 	andi r1,r1,0x1ff
    2198:	44 22 00 17 	be r1,r2,21f4 <float32_eq+0xcc>
    219c:	34 03 00 00 	mvi r3,0
    21a0:	e3 ff ff f1 	bi 2164 <float32_eq+0x3c>
-------------------------------------------------------------------------------
*/
flag float32_eq( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    21a4:	78 01 00 7f 	mvhi r1,0x7f
    21a8:	38 21 ff ff 	ori r1,r1,0xffff
    21ac:	a0 a1 08 00 	and r1,r5,r1
    21b0:	44 20 ff e8 	be r1,r0,2150 <float32_eq+0x28>
    21b4:	00 81 00 16 	srui r1,r4,22
    21b8:	34 02 01 fe 	mvi r2,510
    21bc:	20 21 01 ff 	andi r1,r1,0x1ff
    21c0:	5c 22 ff f3 	bne r1,r2,218c <float32_eq+0x64>
    21c4:	78 01 00 3f 	mvhi r1,0x3f
    21c8:	38 21 ff ff 	ori r1,r1,0xffff
    21cc:	a0 81 08 00 	and r1,r4,r1
    21d0:	44 20 ff ef 	be r1,r0,218c <float32_eq+0x64>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    21d4:	78 02 00 00 	mvhi r2,0x0
    21d8:	38 42 2e 64 	ori r2,r2,0x2e64
    21dc:	28 41 00 00 	lw r1,(r2+0)
    21e0:	34 03 00 00 	mvi r3,0
    21e4:	38 21 00 10 	ori r1,r1,0x10
    21e8:	58 41 00 00 	sw (r2+0),r1
        }
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );

}
    21ec:	b8 60 08 00 	mv r1,r3
    21f0:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    21f4:	78 01 00 3f 	mvhi r1,0x3f
    21f8:	38 21 ff ff 	ori r1,r1,0xffff
    21fc:	a0 a1 08 00 	and r1,r5,r1
    2200:	5c 20 ff f5 	bne r1,r0,21d4 <float32_eq+0xac>
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );
    2204:	34 03 00 00 	mvi r3,0
    2208:	e3 ff ff d7 	bi 2164 <float32_eq+0x3c>

0000220c <float32_le>:
performed according to the IEC/IEEE Standard for Binary Floating-point
Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_le( float32 a, float32 b )
{
    220c:	b8 20 28 00 	mv r5,r1
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2210:	00 21 00 17 	srui r1,r1,23
performed according to the IEC/IEEE Standard for Binary Floating-point
Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_le( float32 a, float32 b )
{
    2214:	b8 40 20 00 	mv r4,r2
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2218:	20 21 00 ff 	andi r1,r1,0xff
    221c:	34 02 00 ff 	mvi r2,255
    2220:	44 22 00 14 	be r1,r2,2270 <float32_le+0x64>
    2224:	00 81 00 17 	srui r1,r4,23
    2228:	34 02 00 ff 	mvi r2,255
    222c:	20 21 00 ff 	andi r1,r1,0xff
    2230:	44 22 00 1c 	be r1,r2,22a0 <float32_le+0x94>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    2234:	00 a2 00 1f 	srui r2,r5,31
        float_raise( float_flag_invalid );
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    2238:	00 81 00 1f 	srui r1,r4,31
    223c:	44 41 00 07 	be r2,r1,2258 <float32_le+0x4c>
    2240:	5c 40 00 09 	bne r2,r0,2264 <float32_le+0x58>
    2244:	b8 85 08 00 	or r1,r4,r5
    2248:	b4 21 08 00 	add r1,r1,r1
    224c:	64 23 00 00 	cmpei r3,r1,0
    return ( a == b ) || ( aSign ^ ( a < b ) );

}
    2250:	b8 60 08 00 	mv r1,r3
    2254:	c3 a0 00 00 	ret
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );
    2258:	f4 85 08 00 	cmpgu r1,r4,r5
    225c:	fc 22 18 00 	cmpne r3,r1,r2
    2260:	5c a4 ff fc 	bne r5,r4,2250 <float32_le+0x44>
    2264:	34 03 00 01 	mvi r3,1

}
    2268:	b8 60 08 00 	mv r1,r3
    226c:	c3 a0 00 00 	ret
*/
flag float32_le( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2270:	78 01 00 7f 	mvhi r1,0x7f
    2274:	38 21 ff ff 	ori r1,r1,0xffff
    2278:	a0 a1 08 00 	and r1,r5,r1
    227c:	44 20 ff ea 	be r1,r0,2224 <float32_le+0x18>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    2280:	78 02 00 00 	mvhi r2,0x0
    2284:	38 42 2e 64 	ori r2,r2,0x2e64
    2288:	28 41 00 00 	lw r1,(r2+0)
    228c:	34 03 00 00 	mvi r3,0
    2290:	38 21 00 10 	ori r1,r1,0x10
    2294:	58 41 00 00 	sw (r2+0),r1
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );

}
    2298:	b8 60 08 00 	mv r1,r3
    229c:	c3 a0 00 00 	ret
*/
flag float32_le( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    22a0:	78 01 00 7f 	mvhi r1,0x7f
    22a4:	38 21 ff ff 	ori r1,r1,0xffff
    22a8:	a0 81 08 00 	and r1,r4,r1
    22ac:	44 20 ff e2 	be r1,r0,2234 <float32_le+0x28>
    22b0:	78 02 00 00 	mvhi r2,0x0
    22b4:	38 42 2e 64 	ori r2,r2,0x2e64
    22b8:	28 41 00 00 	lw r1,(r2+0)
    22bc:	34 03 00 00 	mvi r3,0
    22c0:	38 21 00 10 	ori r1,r1,0x10
    22c4:	58 41 00 00 	sw (r2+0),r1
    22c8:	e3 ff ff f4 	bi 2298 <float32_le+0x8c>

000022cc <float32_lt>:
the corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt( float32 a, float32 b )
{
    22cc:	b8 20 28 00 	mv r5,r1
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    22d0:	00 21 00 17 	srui r1,r1,23
the corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt( float32 a, float32 b )
{
    22d4:	b8 40 20 00 	mv r4,r2
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    22d8:	20 21 00 ff 	andi r1,r1,0xff
    22dc:	34 02 00 ff 	mvi r2,255
    22e0:	44 22 00 11 	be r1,r2,2324 <float32_lt+0x58>
    22e4:	00 81 00 17 	srui r1,r4,23
    22e8:	34 02 00 ff 	mvi r2,255
    22ec:	20 21 00 ff 	andi r1,r1,0xff
    22f0:	44 22 00 19 	be r1,r2,2354 <float32_lt+0x88>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    22f4:	00 a2 00 1f 	srui r2,r5,31
        float_raise( float_flag_invalid );
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    22f8:	00 81 00 1f 	srui r1,r4,31
    22fc:	44 41 00 1d 	be r2,r1,2370 <float32_lt+0xa4>
    2300:	5c 40 00 04 	bne r2,r0,2310 <float32_lt+0x44>
    return ( a != b ) && ( aSign ^ ( a < b ) );
    2304:	34 03 00 00 	mvi r3,0

}
    2308:	b8 60 08 00 	mv r1,r3
    230c:	c3 a0 00 00 	ret
        float_raise( float_flag_invalid );
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    2310:	b8 85 08 00 	or r1,r4,r5
    2314:	b4 21 08 00 	add r1,r1,r1
    2318:	7c 23 00 00 	cmpnei r3,r1,0
    return ( a != b ) && ( aSign ^ ( a < b ) );

}
    231c:	b8 60 08 00 	mv r1,r3
    2320:	c3 a0 00 00 	ret
*/
flag float32_lt( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2324:	78 01 00 7f 	mvhi r1,0x7f
    2328:	38 21 ff ff 	ori r1,r1,0xffff
    232c:	a0 a1 08 00 	and r1,r5,r1
    2330:	44 20 ff ed 	be r1,r0,22e4 <float32_lt+0x18>
    2334:	78 02 00 00 	mvhi r2,0x0
    2338:	38 42 2e 64 	ori r2,r2,0x2e64
    233c:	28 41 00 00 	lw r1,(r2+0)
    2340:	34 03 00 00 	mvi r3,0
    2344:	38 21 00 10 	ori r1,r1,0x10
    2348:	58 41 00 00 	sw (r2+0),r1
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    return ( a != b ) && ( aSign ^ ( a < b ) );

}
    234c:	b8 60 08 00 	mv r1,r3
    2350:	c3 a0 00 00 	ret
*/
flag float32_lt( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2354:	78 01 00 7f 	mvhi r1,0x7f
    2358:	38 21 ff ff 	ori r1,r1,0xffff
    235c:	a0 81 08 00 	and r1,r4,r1
    2360:	5c 20 ff f5 	bne r1,r0,2334 <float32_lt+0x68>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    2364:	00 a2 00 1f 	srui r2,r5,31
        float_raise( float_flag_invalid );
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    2368:	00 81 00 1f 	srui r1,r4,31
    236c:	5c 41 ff e5 	bne r2,r1,2300 <float32_lt+0x34>
    return ( a != b ) && ( aSign ^ ( a < b ) );
    2370:	f4 85 08 00 	cmpgu r1,r4,r5
    2374:	fc 22 18 00 	cmpne r3,r1,r2
    2378:	44 a4 ff e3 	be r5,r4,2304 <float32_lt+0x38>

}
    237c:	b8 60 08 00 	mv r1,r3
    2380:	c3 a0 00 00 	ret

00002384 <float32_eq_signaling>:
if either operand is a NaN.  Otherwise, the comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_eq_signaling( float32 a, float32 b )
{
    2384:	b8 20 28 00 	mv r5,r1

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2388:	00 21 00 17 	srui r1,r1,23
if either operand is a NaN.  Otherwise, the comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_eq_signaling( float32 a, float32 b )
{
    238c:	b8 40 20 00 	mv r4,r2

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2390:	20 21 00 ff 	andi r1,r1,0xff
    2394:	34 02 00 ff 	mvi r2,255
    2398:	44 22 00 0c 	be r1,r2,23c8 <float32_eq_signaling+0x44>
    239c:	00 81 00 17 	srui r1,r4,23
    23a0:	34 02 00 ff 	mvi r2,255
    23a4:	20 21 00 ff 	andi r1,r1,0xff
    23a8:	44 22 00 14 	be r1,r2,23f8 <float32_eq_signaling+0x74>
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        float_raise( float_flag_invalid );
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );
    23ac:	34 03 00 01 	mvi r3,1
    23b0:	44 a4 00 04 	be r5,r4,23c0 <float32_eq_signaling+0x3c>
    23b4:	b8 85 08 00 	or r1,r4,r5
    23b8:	b4 21 08 00 	add r1,r1,r1
    23bc:	64 23 00 00 	cmpei r3,r1,0

}
    23c0:	b8 60 08 00 	mv r1,r3
    23c4:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_eq_signaling( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    23c8:	78 01 00 7f 	mvhi r1,0x7f
    23cc:	38 21 ff ff 	ori r1,r1,0xffff
    23d0:	a0 a1 08 00 	and r1,r5,r1
    23d4:	44 20 ff f2 	be r1,r0,239c <float32_eq_signaling+0x18>
    23d8:	78 02 00 00 	mvhi r2,0x0
    23dc:	38 42 2e 64 	ori r2,r2,0x2e64
    23e0:	28 41 00 00 	lw r1,(r2+0)
    23e4:	34 03 00 00 	mvi r3,0
    23e8:	38 21 00 10 	ori r1,r1,0x10
    23ec:	58 41 00 00 	sw (r2+0),r1
        float_raise( float_flag_invalid );
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );

}
    23f0:	b8 60 08 00 	mv r1,r3
    23f4:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_eq_signaling( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    23f8:	78 01 00 7f 	mvhi r1,0x7f
    23fc:	38 21 ff ff 	ori r1,r1,0xffff
    2400:	a0 81 08 00 	and r1,r4,r1
    2404:	44 20 ff ea 	be r1,r0,23ac <float32_eq_signaling+0x28>
    2408:	78 02 00 00 	mvhi r2,0x0
    240c:	38 42 2e 64 	ori r2,r2,0x2e64
    2410:	28 41 00 00 	lw r1,(r2+0)
    2414:	34 03 00 00 	mvi r3,0
    2418:	38 21 00 10 	ori r1,r1,0x10
    241c:	58 41 00 00 	sw (r2+0),r1
    2420:	e3 ff ff f4 	bi 23f0 <float32_eq_signaling+0x6c>

00002424 <float32_le_quiet>:
cause an exception.  Otherwise, the comparison is performed according to the
IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_le_quiet( float32 a, float32 b )
{
    2424:	b8 20 18 00 	mv r3,r1
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2428:	00 21 00 17 	srui r1,r1,23
cause an exception.  Otherwise, the comparison is performed according to the
IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_le_quiet( float32 a, float32 b )
{
    242c:	b8 40 28 00 	mv r5,r2
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2430:	20 21 00 ff 	andi r1,r1,0xff
    2434:	34 02 00 ff 	mvi r2,255
    2438:	44 22 00 14 	be r1,r2,2488 <float32_le_quiet+0x64>
    243c:	00 a1 00 17 	srui r1,r5,23
    2440:	34 02 00 ff 	mvi r2,255
    2444:	20 21 00 ff 	andi r1,r1,0xff
    2448:	44 22 00 1f 	be r1,r2,24c4 <float32_le_quiet+0xa0>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    244c:	00 62 00 1f 	srui r2,r3,31
        }
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    2450:	00 a1 00 1f 	srui r1,r5,31
    2454:	44 41 00 07 	be r2,r1,2470 <float32_le_quiet+0x4c>
    2458:	5c 40 00 09 	bne r2,r0,247c <float32_le_quiet+0x58>
    245c:	b8 a3 08 00 	or r1,r5,r3
    2460:	b4 21 08 00 	add r1,r1,r1
    2464:	64 24 00 00 	cmpei r4,r1,0
    return ( a == b ) || ( aSign ^ ( a < b ) );

}
    2468:	b8 80 08 00 	mv r1,r4
    246c:	c3 a0 00 00 	ret
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );
    2470:	f4 a3 08 00 	cmpgu r1,r5,r3
    2474:	fc 22 20 00 	cmpne r4,r1,r2
    2478:	5c 65 ff fc 	bne r3,r5,2468 <float32_le_quiet+0x44>
    247c:	34 04 00 01 	mvi r4,1

}
    2480:	b8 80 08 00 	mv r1,r4
    2484:	c3 a0 00 00 	ret
*/
flag float32_le_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2488:	78 01 00 7f 	mvhi r1,0x7f
    248c:	38 21 ff ff 	ori r1,r1,0xffff
    2490:	a0 61 08 00 	and r1,r3,r1
    2494:	44 20 ff ea 	be r1,r0,243c <float32_le_quiet+0x18>
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    2498:	00 61 00 16 	srui r1,r3,22
    249c:	34 02 01 fe 	mvi r2,510
    24a0:	20 21 01 ff 	andi r1,r1,0x1ff
    24a4:	44 22 00 10 	be r1,r2,24e4 <float32_le_quiet+0xc0>
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );
    24a8:	00 a1 00 16 	srui r1,r5,22
    24ac:	34 02 01 fe 	mvi r2,510
    24b0:	20 21 01 ff 	andi r1,r1,0x1ff
    24b4:	44 22 00 18 	be r1,r2,2514 <float32_le_quiet+0xf0>
    24b8:	34 04 00 00 	mvi r4,0

}
    24bc:	b8 80 08 00 	mv r1,r4
    24c0:	c3 a0 00 00 	ret
*/
flag float32_le_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    24c4:	78 01 00 7f 	mvhi r1,0x7f
    24c8:	38 21 ff ff 	ori r1,r1,0xffff
    24cc:	a0 a1 08 00 	and r1,r5,r1
    24d0:	44 20 ff df 	be r1,r0,244c <float32_le_quiet+0x28>
    24d4:	00 61 00 16 	srui r1,r3,22
    24d8:	34 02 01 fe 	mvi r2,510
    24dc:	20 21 01 ff 	andi r1,r1,0x1ff
    24e0:	5c 22 ff f2 	bne r1,r2,24a8 <float32_le_quiet+0x84>
    24e4:	78 01 00 3f 	mvhi r1,0x3f
    24e8:	38 21 ff ff 	ori r1,r1,0xffff
    24ec:	a0 61 08 00 	and r1,r3,r1
    24f0:	44 20 ff ee 	be r1,r0,24a8 <float32_le_quiet+0x84>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    24f4:	78 02 00 00 	mvhi r2,0x0
    24f8:	38 42 2e 64 	ori r2,r2,0x2e64
    24fc:	28 41 00 00 	lw r1,(r2+0)
    2500:	34 04 00 00 	mvi r4,0
    2504:	38 21 00 10 	ori r1,r1,0x10
    2508:	58 41 00 00 	sw (r2+0),r1
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );

}
    250c:	b8 80 08 00 	mv r1,r4
    2510:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    2514:	78 01 00 3f 	mvhi r1,0x3f
    2518:	38 21 ff ff 	ori r1,r1,0xffff
    251c:	a0 a1 08 00 	and r1,r5,r1
    2520:	5c 20 ff f5 	bne r1,r0,24f4 <float32_le_quiet+0xd0>
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );
    2524:	34 04 00 00 	mvi r4,0
    2528:	e3 ff ff e5 	bi 24bc <float32_le_quiet+0x98>

0000252c <float32_lt_quiet>:
exception.  Otherwise, the comparison is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt_quiet( float32 a, float32 b )
{
    252c:	b8 20 20 00 	mv r4,r1
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2530:	00 21 00 17 	srui r1,r1,23
exception.  Otherwise, the comparison is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt_quiet( float32 a, float32 b )
{
    2534:	b8 40 28 00 	mv r5,r2
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2538:	20 21 00 ff 	andi r1,r1,0xff
    253c:	34 02 00 ff 	mvi r2,255
    2540:	44 22 00 14 	be r1,r2,2590 <float32_lt_quiet+0x64>
    2544:	00 a1 00 17 	srui r1,r5,23
    2548:	34 02 00 ff 	mvi r2,255
    254c:	20 21 00 ff 	andi r1,r1,0xff
    2550:	44 22 00 28 	be r1,r2,25f0 <float32_lt_quiet+0xc4>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    2554:	00 82 00 1f 	srui r2,r4,31
        }
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    2558:	00 a1 00 1f 	srui r1,r5,31
    255c:	44 41 00 07 	be r2,r1,2578 <float32_lt_quiet+0x4c>
    2560:	44 40 00 09 	be r2,r0,2584 <float32_lt_quiet+0x58>
    2564:	b8 a4 08 00 	or r1,r5,r4
    2568:	b4 21 08 00 	add r1,r1,r1
    256c:	7c 23 00 00 	cmpnei r3,r1,0
    return ( a != b ) && ( aSign ^ ( a < b ) );

}
    2570:	b8 60 08 00 	mv r1,r3
    2574:	c3 a0 00 00 	ret
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    return ( a != b ) && ( aSign ^ ( a < b ) );
    2578:	f4 a4 08 00 	cmpgu r1,r5,r4
    257c:	fc 22 18 00 	cmpne r3,r1,r2
    2580:	5c 85 ff fc 	bne r4,r5,2570 <float32_lt_quiet+0x44>
    2584:	34 03 00 00 	mvi r3,0

}
    2588:	b8 60 08 00 	mv r1,r3
    258c:	c3 a0 00 00 	ret
*/
flag float32_lt_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2590:	78 01 00 7f 	mvhi r1,0x7f
    2594:	38 21 ff ff 	ori r1,r1,0xffff
    2598:	a0 81 08 00 	and r1,r4,r1
    259c:	44 20 ff ea 	be r1,r0,2544 <float32_lt_quiet+0x18>
    25a0:	00 81 00 16 	srui r1,r4,22
    25a4:	34 02 01 fe 	mvi r2,510
    25a8:	20 21 01 ff 	andi r1,r1,0x1ff
    25ac:	44 22 00 19 	be r1,r2,2610 <float32_lt_quiet+0xe4>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    25b0:	00 a1 00 16 	srui r1,r5,22
    25b4:	34 02 01 fe 	mvi r2,510
    25b8:	20 21 01 ff 	andi r1,r1,0x1ff
    25bc:	5c 22 ff f2 	bne r1,r2,2584 <float32_lt_quiet+0x58>
    25c0:	78 01 00 3f 	mvhi r1,0x3f
    25c4:	38 21 ff ff 	ori r1,r1,0xffff
    25c8:	a0 a1 08 00 	and r1,r5,r1
    25cc:	44 20 ff ee 	be r1,r0,2584 <float32_lt_quiet+0x58>
    25d0:	78 02 00 00 	mvhi r2,0x0
    25d4:	38 42 2e 64 	ori r2,r2,0x2e64
    25d8:	28 41 00 00 	lw r1,(r2+0)
    25dc:	34 03 00 00 	mvi r3,0
    25e0:	38 21 00 10 	ori r1,r1,0x10
    25e4:	58 41 00 00 	sw (r2+0),r1
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    return ( a != b ) && ( aSign ^ ( a < b ) );

}
    25e8:	b8 60 08 00 	mv r1,r3
    25ec:	c3 a0 00 00 	ret
*/
flag float32_lt_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    25f0:	78 01 00 7f 	mvhi r1,0x7f
    25f4:	38 21 ff ff 	ori r1,r1,0xffff
    25f8:	a0 a1 08 00 	and r1,r5,r1
    25fc:	44 20 ff d6 	be r1,r0,2554 <float32_lt_quiet+0x28>
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    2600:	00 81 00 16 	srui r1,r4,22
    2604:	34 02 01 fe 	mvi r2,510
    2608:	20 21 01 ff 	andi r1,r1,0x1ff
    260c:	5c 22 ff e9 	bne r1,r2,25b0 <float32_lt_quiet+0x84>
    2610:	78 01 00 3f 	mvhi r1,0x3f
    2614:	38 21 ff ff 	ori r1,r1,0xffff
    2618:	a0 81 08 00 	and r1,r4,r1
    261c:	44 20 ff e5 	be r1,r0,25b0 <float32_lt_quiet+0x84>
    2620:	e3 ff ff ec 	bi 25d0 <float32_lt_quiet+0xa4>

00002624 <float32_abs>:
-------------------------------------------------------------------------------
This is an abs function
-------------------------------------------------------------------------------
*/
float32 float32_abs(float32 a)
{
    2624:	37 9c ff fc 	addi sp,sp,-4
    2628:	5b 9d 00 04 	sw (sp+4),ra
    262c:	b8 20 10 00 	mv r2,r1
	if ( extractFloat32Sign( a )){
    2630:	4c 20 00 05 	bge r1,r0,2644 <float32_abs+0x20>
	return float32_mul( a, 0xBF800000 ) ;
    2634:	78 02 bf 80 	mvhi r2,0xbf80
    2638:	38 42 00 00 	ori r2,r2,0x0
    263c:	fb ff fb d6 	calli 1594 <float32_mul>
    2640:	b8 20 10 00 	mv r2,r1
	}
	else {
	return a;
	}
}
    2644:	b8 40 08 00 	mv r1,r2
    2648:	2b 9d 00 04 	lw ra,(sp+4)
    264c:	37 9c 00 04 	addi sp,sp,4
    2650:	c3 a0 00 00 	ret

00002654 <float32_artan>:
That formula was taken from equation 7
http://www.iro.umontreal.ca/~mignotte/IFT2425/Documents/EfficientApproximationArctgFunction.pdf
-------------------------------------------------------------------------------
*/
float32 float32_artan( float32 x )
{
    2654:	37 9c ff f8 	addi sp,sp,-8
    2658:	5b 8b 00 08 	sw (sp+8),r11
    265c:	5b 9d 00 04 	sw (sp+4),ra
    2660:	b8 20 58 00 	mv r11,r1
return	float32_mul(x,float32_add(0x3F490FD8,float32_mul(0x3E8BC6A8,float32_sub(0x3F800000,float32_abs(x)))));
    2664:	fb ff ff f0 	calli 2624 <float32_abs>
    2668:	b8 20 10 00 	mv r2,r1
    266c:	78 01 3f 80 	mvhi r1,0x3f80
    2670:	38 21 00 00 	ori r1,r1,0x0
    2674:	fb ff fb b9 	calli 1558 <float32_sub>
    2678:	b8 20 10 00 	mv r2,r1
    267c:	78 01 3e 8b 	mvhi r1,0x3e8b
    2680:	38 21 c6 a8 	ori r1,r1,0xc6a8
    2684:	fb ff fb c4 	calli 1594 <float32_mul>
    2688:	b8 20 10 00 	mv r2,r1
    268c:	78 01 3f 49 	mvhi r1,0x3f49
    2690:	38 21 0f d8 	ori r1,r1,0xfd8
    2694:	fb ff fb a2 	calli 151c <float32_add>
    2698:	b8 20 10 00 	mv r2,r1
    269c:	b9 60 08 00 	mv r1,r11
    26a0:	fb ff fb bd 	calli 1594 <float32_mul>
}
    26a4:	2b 9d 00 04 	lw ra,(sp+4)
    26a8:	2b 8b 00 08 	lw r11,(sp+8)
    26ac:	37 9c 00 08 	addi sp,sp,8
    26b0:	c3 a0 00 00 	ret

000026b4 <float32_pow2>:
-------------------------------------------------------------------------------
This is the square function
-------------------------------------------------------------------------------
*/
float32 float32_pow2( float32 a)
{
    26b4:	37 9c ff fc 	addi sp,sp,-4
    26b8:	5b 9d 00 04 	sw (sp+4),ra
	return float32_mul(a,a);
    26bc:	b8 20 10 00 	mv r2,r1
    26c0:	fb ff fb b5 	calli 1594 <float32_mul>
}
    26c4:	2b 9d 00 04 	lw ra,(sp+4)
    26c8:	37 9c 00 04 	addi sp,sp,4
    26cc:	c3 a0 00 00 	ret

000026d0 <float32_filterKom>:
// - oldAngle: 	Previous measured angle
// - AGy:		Gyroscope angle
// - AAc:		Accelerometer angle
// - dt:		time
//-----------------------------------------------------------------------
float32 float32_filterKom(float32 oldAngle, float32 AGy, float32 AAc, float32 dt){
    26d0:	37 9c ff f0 	addi sp,sp,-16
    26d4:	5b 8b 00 10 	sw (sp+16),r11
    26d8:	5b 8c 00 0c 	sw (sp+12),r12
    26dc:	5b 8d 00 08 	sw (sp+8),r13
    26e0:	5b 9d 00 04 	sw (sp+4),ra
    26e4:	b8 40 58 00 	mv r11,r2
	//Filter: newAngle= 0.98 *(oldAngle + AGy * dt) + 0.02 * AAc
	dt = float32_mul(dt, 0x322BCC77); //0,00000001
    26e8:	78 02 32 2b 	mvhi r2,0x322b
// - oldAngle: 	Previous measured angle
// - AGy:		Gyroscope angle
// - AAc:		Accelerometer angle
// - dt:		time
//-----------------------------------------------------------------------
float32 float32_filterKom(float32 oldAngle, float32 AGy, float32 AAc, float32 dt){
    26ec:	b8 20 60 00 	mv r12,r1
	//Filter: newAngle= 0.98 *(oldAngle + AGy * dt) + 0.02 * AAc
	dt = float32_mul(dt, 0x322BCC77); //0,00000001
    26f0:	38 42 cc 77 	ori r2,r2,0xcc77
    26f4:	b8 80 08 00 	mv r1,r4
// - oldAngle: 	Previous measured angle
// - AGy:		Gyroscope angle
// - AAc:		Accelerometer angle
// - dt:		time
//-----------------------------------------------------------------------
float32 float32_filterKom(float32 oldAngle, float32 AGy, float32 AAc, float32 dt){
    26f8:	b8 60 68 00 	mv r13,r3
	//Filter: newAngle= 0.98 *(oldAngle + AGy * dt) + 0.02 * AAc
	dt = float32_mul(dt, 0x322BCC77); //0,00000001
    26fc:	fb ff fb a6 	calli 1594 <float32_mul>
    2700:	b8 20 10 00 	mv r2,r1
	float32 newAngle = float32_mul(AGy, dt);
    2704:	b9 60 08 00 	mv r1,r11
    2708:	fb ff fb a3 	calli 1594 <float32_mul>
	newAngle = float32_add(newAngle, oldAngle);
    270c:	b9 80 10 00 	mv r2,r12
    2710:	fb ff fb 83 	calli 151c <float32_add>
	newAngle = float32_mul(newAngle, alfa);
    2714:	78 02 3f 4c 	mvhi r2,0x3f4c
    2718:	38 42 cc cd 	ori r2,r2,0xcccd
    271c:	fb ff fb 9e 	calli 1594 <float32_mul>
	float32 temp = float32_mul(AAc, beta);
    2720:	78 02 3e 4c 	mvhi r2,0x3e4c
float32 float32_filterKom(float32 oldAngle, float32 AGy, float32 AAc, float32 dt){
	//Filter: newAngle= 0.98 *(oldAngle + AGy * dt) + 0.02 * AAc
	dt = float32_mul(dt, 0x322BCC77); //0,00000001
	float32 newAngle = float32_mul(AGy, dt);
	newAngle = float32_add(newAngle, oldAngle);
	newAngle = float32_mul(newAngle, alfa);
    2724:	b8 20 58 00 	mv r11,r1
	float32 temp = float32_mul(AAc, beta);
    2728:	38 42 cc cd 	ori r2,r2,0xcccd
    272c:	b9 a0 08 00 	mv r1,r13
    2730:	fb ff fb 99 	calli 1594 <float32_mul>
    2734:	b8 20 10 00 	mv r2,r1
	return float32_add(newAngle, temp);
    2738:	b9 60 08 00 	mv r1,r11
    273c:	fb ff fb 78 	calli 151c <float32_add>
}
    2740:	2b 9d 00 04 	lw ra,(sp+4)
    2744:	2b 8b 00 10 	lw r11,(sp+16)
    2748:	2b 8c 00 0c 	lw r12,(sp+12)
    274c:	2b 8d 00 08 	lw r13,(sp+8)
    2750:	37 9c 00 10 	addi sp,sp,16
    2754:	c3 a0 00 00 	ret

00002758 <agWriteByte>:
{
	return I2CreadByte(agAddress, subAddress);
}

void agWriteByte(uint8_t subAddress,uint8_t data)
{
    2758:	37 9c ff fc 	addi sp,sp,-4
    275c:	5b 9d 00 04 	sw (sp+4),ra
    2760:	20 21 00 ff 	andi r1,r1,0xff
    2764:	20 42 00 ff 	andi r2,r2,0xff
	I2CwriteByte(agAddress, subAddress, data);
    2768:	b8 40 18 00 	mv r3,r2
    276c:	b8 20 10 00 	mv r2,r1
    2770:	34 01 00 6a 	mvi r1,106
    2774:	fb ff f8 10 	calli 7b4 <I2CwriteByte>
}
    2778:	2b 9d 00 04 	lw ra,(sp+4)
    277c:	37 9c 00 04 	addi sp,sp,4
    2780:	c3 a0 00 00 	ret

00002784 <initGyro>:

void initGyro()
{
    2784:	37 9c ff fc 	addi sp,sp,-4
    2788:	5b 9d 00 04 	sw (sp+4),ra
	return I2CreadByte(agAddress, subAddress);
}

void agWriteByte(uint8_t subAddress,uint8_t data)
{
	I2CwriteByte(agAddress, subAddress, data);
    278c:	34 01 00 6a 	mvi r1,106
    2790:	34 02 00 10 	mvi r2,16
    2794:	34 03 00 c0 	mvi r3,192
    2798:	fb ff f8 07 	calli 7b4 <I2CwriteByte>
	agWriteByte(CTRL_REG2_G, ag_ctrl2_Default );

// TERCER REGISTRO
// Se dejara el valor por defecto
	agWriteByte(CTRL_REG3_G, ag_ctrl3_Default );
}
    279c:	34 01 00 6a 	mvi r1,106
    27a0:	34 02 00 11 	mvi r2,17
    27a4:	34 03 00 00 	mvi r3,0
    27a8:	fb ff f8 03 	calli 7b4 <I2CwriteByte>
    27ac:	34 01 00 6a 	mvi r1,106
    27b0:	34 02 00 12 	mvi r2,18
    27b4:	34 03 00 00 	mvi r3,0
    27b8:	fb ff f7 ff 	calli 7b4 <I2CwriteByte>
    27bc:	2b 9d 00 04 	lw ra,(sp+4)
    27c0:	37 9c 00 04 	addi sp,sp,4
    27c4:	c3 a0 00 00 	ret

000027c8 <agReadByte>:
{
	return I2CreadByte(mAddress, subAddress);
}

uint8_t agReadByte(uint8_t subAddress)
{
    27c8:	37 9c ff fc 	addi sp,sp,-4
    27cc:	5b 9d 00 04 	sw (sp+4),ra
    27d0:	20 21 00 ff 	andi r1,r1,0xff
	return I2CreadByte(agAddress, subAddress);
    27d4:	b8 20 10 00 	mv r2,r1
    27d8:	34 01 00 6a 	mvi r1,106
    27dc:	fb ff f7 6f 	calli 598 <I2CreadByte>
}
    27e0:	2b 9d 00 04 	lw ra,(sp+4)
    27e4:	37 9c 00 04 	addi sp,sp,4
    27e8:	c3 a0 00 00 	ret

000027ec <mReadByte>:
#include "LSM9DS1.h"
#include "soc-hw.h"

uint8_t mReadByte(uint8_t subAddress)
{
    27ec:	37 9c ff fc 	addi sp,sp,-4
    27f0:	5b 9d 00 04 	sw (sp+4),ra
    27f4:	20 21 00 ff 	andi r1,r1,0xff
	return I2CreadByte(mAddress, subAddress);
    27f8:	b8 20 10 00 	mv r2,r1
    27fc:	34 01 00 1c 	mvi r1,28
    2800:	fb ff f7 66 	calli 598 <I2CreadByte>
}
    2804:	2b 9d 00 04 	lw ra,(sp+4)
    2808:	37 9c 00 04 	addi sp,sp,4
    280c:	c3 a0 00 00 	ret

00002810 <MPLReadBytes>:
{
	I2CwriteByte(MPL3115A2_ADDRESS, subAddress, data);
}

void MPLReadBytes(uint8_t subaddress, int *dest, uint8_t count)
{
    2810:	37 9c ff fc 	addi sp,sp,-4
    2814:	5b 9d 00 04 	sw (sp+4),ra
    2818:	b8 40 28 00 	mv r5,r2
    281c:	20 21 00 ff 	andi r1,r1,0xff
    2820:	20 64 00 ff 	andi r4,r3,0xff
	I2CreadBytes(MPL3115A2_ADDRESS, subaddress, dest, count);
    2824:	b8 20 10 00 	mv r2,r1
    2828:	b8 a0 18 00 	mv r3,r5
    282c:	34 01 00 60 	mvi r1,96
    2830:	fb ff f7 96 	calli 688 <I2CreadBytes>
}
    2834:	2b 9d 00 04 	lw ra,(sp+4)
    2838:	37 9c 00 04 	addi sp,sp,4
    283c:	c3 a0 00 00 	ret

00002840 <MPLWriteByte>:
{
	return I2CreadByte(MPL3115A2_ADDRESS, subAddress);
}

void MPLWriteByte(uint8_t subAddress,uint8_t data)
{
    2840:	37 9c ff fc 	addi sp,sp,-4
    2844:	5b 9d 00 04 	sw (sp+4),ra
    2848:	20 21 00 ff 	andi r1,r1,0xff
    284c:	20 42 00 ff 	andi r2,r2,0xff
	I2CwriteByte(MPL3115A2_ADDRESS, subAddress, data);
    2850:	b8 40 18 00 	mv r3,r2
    2854:	b8 20 10 00 	mv r2,r1
    2858:	34 01 00 60 	mvi r1,96
    285c:	fb ff f7 d6 	calli 7b4 <I2CwriteByte>
}
    2860:	2b 9d 00 04 	lw ra,(sp+4)
    2864:	37 9c 00 04 	addi sp,sp,4
    2868:	c3 a0 00 00 	ret

0000286c <MPLBegin>:
/*!
    INICIALIZAR EL MODULO
*/
/**************************************************************************/

void MPLBegin(){
    286c:	37 9c ff fc 	addi sp,sp,-4
    2870:	5b 9d 00 04 	sw (sp+4),ra
	return I2CreadByte(MPL3115A2_ADDRESS, subAddress);
}

void MPLWriteByte(uint8_t subAddress,uint8_t data)
{
	I2CwriteByte(MPL3115A2_ADDRESS, subAddress, data);
    2874:	34 01 00 60 	mvi r1,96
    2878:	34 02 00 26 	mvi r2,38
    287c:	34 03 00 b8 	mvi r3,184
    2880:	fb ff f7 cd 	calli 7b4 <I2CwriteByte>

	MPLWriteByte(MPL3115A2_PT_DATA_CFG,
		MPL3115A2_PT_DATA_CFG_TDEFE |
		MPL3115A2_PT_DATA_CFG_PDEFE |
		MPL3115A2_PT_DATA_CFG_DREM);
}
    2884:	34 01 00 60 	mvi r1,96
    2888:	34 02 00 13 	mvi r2,19
    288c:	34 03 00 07 	mvi r3,7
    2890:	fb ff f7 c9 	calli 7b4 <I2CwriteByte>
    2894:	2b 9d 00 04 	lw ra,(sp+4)
    2898:	37 9c 00 04 	addi sp,sp,4
    289c:	c3 a0 00 00 	ret

000028a0 <MPLReadByte>:
    DECLARACION DE FUNCIONES DE LECTURA Y ESCRITURA I2C
*/
/**************************************************************************/

uint8_t MPLReadByte(uint8_t subAddress)
{
    28a0:	37 9c ff fc 	addi sp,sp,-4
    28a4:	5b 9d 00 04 	sw (sp+4),ra
    28a8:	20 21 00 ff 	andi r1,r1,0xff
	return I2CreadByte(MPL3115A2_ADDRESS, subAddress);
    28ac:	b8 20 10 00 	mv r2,r1
    28b0:	34 01 00 60 	mvi r1,96
    28b4:	fb ff f7 39 	calli 598 <I2CreadByte>
}
    28b8:	2b 9d 00 04 	lw ra,(sp+4)
    28bc:	37 9c 00 04 	addi sp,sp,4
    28c0:	c3 a0 00 00 	ret

000028c4 <MPLgetAltitude>:
		MPL3115A2_PT_DATA_CFG_TDEFE |
		MPL3115A2_PT_DATA_CFG_PDEFE |
		MPL3115A2_PT_DATA_CFG_DREM);
}

void MPLgetAltitude(){
    28c4:	37 9c ff f4 	addi sp,sp,-12
    28c8:	5b 8b 00 0c 	sw (sp+12),r11
    28cc:	5b 8c 00 08 	sw (sp+8),r12
    28d0:	5b 9d 00 04 	sw (sp+4),ra
	return I2CreadByte(MPL3115A2_ADDRESS, subAddress);
}

void MPLWriteByte(uint8_t subAddress,uint8_t data)
{
	I2CwriteByte(MPL3115A2_ADDRESS, subAddress, data);
    28d4:	34 01 00 60 	mvi r1,96
    28d8:	34 02 00 26 	mvi r2,38
    28dc:	34 03 00 b9 	mvi r3,185
    28e0:	fb ff f7 b5 	calli 7b4 <I2CwriteByte>
    sta = MPLReadByte(MPL3115A2_REGISTER_STATUS);
    //gpio0->oe  = 0x000000ff;
    //gpio0->out = 0xBB;
    //gpio0->out = sta;
    //gpio0->out = sta & 0x04;    
    uart_putstr("NNNN");
    28e4:	78 0c 00 00 	mvhi r12,0x0
*/
/**************************************************************************/

uint8_t MPLReadByte(uint8_t subAddress)
{
	return I2CreadByte(MPL3115A2_ADDRESS, subAddress);
    28e8:	34 02 00 00 	mvi r2,0
    28ec:	34 01 00 60 	mvi r1,96
    28f0:	fb ff f7 2a 	calli 598 <I2CreadByte>
    28f4:	b8 20 58 00 	mv r11,r1
    sta = MPLReadByte(MPL3115A2_REGISTER_STATUS);
    //gpio0->oe  = 0x000000ff;
    //gpio0->out = 0xBB;
    //gpio0->out = sta;
    //gpio0->out = sta & 0x04;    
    uart_putstr("NNNN");
    28f8:	b9 80 08 00 	mv r1,r12
    28fc:	38 21 2e 30 	ori r1,r1,0x2e30
    2900:	fb ff f6 d6 	calli 458 <uart_putstr>
    nsleep(20);
    2904:	34 01 00 14 	mvi r1,20
		MPL3115A2_CTRL_REG1_OS128 |
		MPL3115A2_CTRL_REG1_ALT);

  uint8_t sta = 0;
//  while (sta & MPL3115A2_REGISTER_STATUS_PDR) {
  while (! (sta & 0x04)) {
    2908:	21 6b 00 04 	andi r11,r11,0x4
    //gpio0->oe  = 0x000000ff;
    //gpio0->out = 0xBB;
    //gpio0->out = sta;
    //gpio0->out = sta & 0x04;    
    uart_putstr("NNNN");
    nsleep(20);
    290c:	fb ff f6 96 	calli 364 <nsleep>
		MPL3115A2_CTRL_REG1_OS128 |
		MPL3115A2_CTRL_REG1_ALT);

  uint8_t sta = 0;
//  while (sta & MPL3115A2_REGISTER_STATUS_PDR) {
  while (! (sta & 0x04)) {
    2910:	45 60 ff f6 	be r11,r0,28e8 <MPLgetAltitude+0x24>
	I2CwriteByte(MPL3115A2_ADDRESS, subAddress, data);
}

void MPLReadBytes(uint8_t subaddress, int *dest, uint8_t count)
{
	I2CreadBytes(MPL3115A2_ADDRESS, subaddress, dest, count);
    2914:	78 03 00 00 	mvhi r3,0x0
    2918:	38 63 2e 6c 	ori r3,r3,0x2e6c
    291c:	34 02 00 01 	mvi r2,1
    2920:	34 04 00 03 	mvi r4,3
    2924:	34 01 00 60 	mvi r1,96
    2928:	fb ff f7 58 	calli 688 <I2CreadBytes>
	gpio0->out = temp[2];*/

// Prueba lectura tamaño


   nsleep(20);
    292c:	34 01 00 14 	mvi r1,20
    2930:	fb ff f6 8d 	calli 364 <nsleep>
   uart_putstr("SSSS");
    2934:	78 01 00 00 	mvhi r1,0x0
    2938:	38 21 2e 38 	ori r1,r1,0x2e38
   uart_putchar(temp[0]);
    293c:	78 0b 00 00 	mvhi r11,0x0
    2940:	39 6b 2e 6c 	ori r11,r11,0x2e6c

// Prueba lectura tamaño


   nsleep(20);
   uart_putstr("SSSS");
    2944:	fb ff f6 c5 	calli 458 <uart_putstr>
   uart_putchar(temp[0]);
    2948:	29 61 00 00 	lw r1,(r11+0)
    294c:	20 21 00 ff 	andi r1,r1,0xff
    2950:	fb ff f6 b9 	calli 434 <uart_putchar>
   uart_putchar(temp[0]);
    2954:	29 61 00 00 	lw r1,(r11+0)
    2958:	20 21 00 ff 	andi r1,r1,0xff
    295c:	fb ff f6 b6 	calli 434 <uart_putchar>
   uart_putchar(temp[0]);
    2960:	29 61 00 00 	lw r1,(r11+0)
    2964:	20 21 00 ff 	andi r1,r1,0xff
    2968:	fb ff f6 b3 	calli 434 <uart_putchar>

   nsleep(20);
    296c:	34 01 00 14 	mvi r1,20
    2970:	fb ff f6 7d 	calli 364 <nsleep>
   uart_putstr("SSSS");
    2974:	78 01 00 00 	mvhi r1,0x0
    2978:	38 21 2e 38 	ori r1,r1,0x2e38
    297c:	fb ff f6 b7 	calli 458 <uart_putstr>
   uart_putchar(temp[1]);
    2980:	29 61 00 04 	lw r1,(r11+4)
    2984:	20 21 00 ff 	andi r1,r1,0xff
    2988:	fb ff f6 ab 	calli 434 <uart_putchar>
   uart_putchar(temp[1]);
    298c:	29 61 00 04 	lw r1,(r11+4)
    2990:	20 21 00 ff 	andi r1,r1,0xff
    2994:	fb ff f6 a8 	calli 434 <uart_putchar>
   uart_putchar(temp[1]);
    2998:	29 61 00 04 	lw r1,(r11+4)
    299c:	20 21 00 ff 	andi r1,r1,0xff
    29a0:	fb ff f6 a5 	calli 434 <uart_putchar>

   nsleep(20);
    29a4:	34 01 00 14 	mvi r1,20
    29a8:	fb ff f6 6f 	calli 364 <nsleep>
   uart_putstr("SSSS");
    29ac:	78 01 00 00 	mvhi r1,0x0
    29b0:	38 21 2e 38 	ori r1,r1,0x2e38
    29b4:	fb ff f6 a9 	calli 458 <uart_putstr>
   uart_putchar(temp[2]);
    29b8:	29 61 00 08 	lw r1,(r11+8)
    29bc:	20 21 00 ff 	andi r1,r1,0xff
    29c0:	fb ff f6 9d 	calli 434 <uart_putchar>
   uart_putchar(temp[2]);
    29c4:	29 61 00 08 	lw r1,(r11+8)
    29c8:	20 21 00 ff 	andi r1,r1,0xff
    29cc:	fb ff f6 9a 	calli 434 <uart_putchar>
   uart_putchar(temp[2]);
    29d0:	29 61 00 08 	lw r1,(r11+8)
    29d4:	20 21 00 ff 	andi r1,r1,0xff
    29d8:	fb ff f6 97 	calli 434 <uart_putchar>

}
    29dc:	2b 9d 00 04 	lw ra,(sp+4)
    29e0:	2b 8b 00 0c 	lw r11,(sp+12)
    29e4:	2b 8c 00 08 	lw r12,(sp+8)
    29e8:	37 9c 00 0c 	addi sp,sp,12
    29ec:	c3 a0 00 00 	ret
