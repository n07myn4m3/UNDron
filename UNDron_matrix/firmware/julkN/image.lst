
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b08  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000500  00003b08  00003b08  00003b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000025  00004008  00004008  0000405c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000000bc  00004030  00004030  00004081  2**2
                  ALLOC
  4 .debug_abbrev 00000b64  00000000  00000000  00004081  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003a3e  00000000  00000000  00004be5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00003802  00000000  00000000  00008623  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000007d0  00000000  00000000  0000be28  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000981  00000000  00000000  0000c5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000000c0  00000000  00000000  0000cf79  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d98  00000000  00000000  0000d039  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000006c  00000000  00000000  0000ddd1  2**0
                  CONTENTS, READONLY
 12 .debug_loc    00002a36  00000000  00000000  0000de3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c28  00000000  00000000  00010873  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <_ftext>:
       0:	98 00 00 00 	xor r0,r0,r0
       4:	d0 00 00 00 	wcsr IE,r0
       8:	78 01 00 00 	mvhi r1,0x0
       c:	38 21 00 00 	ori r1,r1,0x0
      10:	d0 e1 00 00 	wcsr EBA,r1
      14:	f8 00 00 3b 	calli 100 <_crt0>
      18:	34 00 00 00 	nop
      1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
      20:	34 00 00 00 	nop
      24:	34 00 00 00 	nop
      28:	34 00 00 00 	nop
      2c:	34 00 00 00 	nop
      30:	34 00 00 00 	nop
      34:	34 00 00 00 	nop
      38:	34 00 00 00 	nop
      3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
      40:	34 00 00 00 	nop
      44:	34 00 00 00 	nop
      48:	34 00 00 00 	nop
      4c:	34 00 00 00 	nop
      50:	34 00 00 00 	nop
      54:	34 00 00 00 	nop
      58:	34 00 00 00 	nop
      5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
      60:	34 00 00 00 	nop
      64:	34 00 00 00 	nop
      68:	34 00 00 00 	nop
      6c:	34 00 00 00 	nop
      70:	34 00 00 00 	nop
      74:	34 00 00 00 	nop
      78:	34 00 00 00 	nop
      7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
      80:	34 00 00 00 	nop
      84:	34 00 00 00 	nop
      88:	34 00 00 00 	nop
      8c:	34 00 00 00 	nop
      90:	34 00 00 00 	nop
      94:	34 00 00 00 	nop
      98:	34 00 00 00 	nop
      9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
      a0:	34 00 00 00 	nop
      a4:	34 00 00 00 	nop
      a8:	34 00 00 00 	nop
      ac:	34 00 00 00 	nop
      b0:	34 00 00 00 	nop
      b4:	34 00 00 00 	nop
      b8:	34 00 00 00 	nop
      bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
      c0:	5b 9d 00 00 	sw (sp+0),ra
      c4:	f8 00 00 2b 	calli 170 <_save_all>
      c8:	90 40 08 00 	rcsr r1,IP
      cc:	f8 00 00 8e 	calli 304 <irq_handler>
      d0:	78 01 ff ff 	mvhi r1,0xffff
      d4:	38 21 ff ff 	ori r1,r1,0xffff
      d8:	d0 41 00 00 	wcsr IP,r1
      dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
      e0:	34 00 00 00 	nop
      e4:	34 00 00 00 	nop
      e8:	34 00 00 00 	nop
      ec:	34 00 00 00 	nop
      f0:	34 00 00 00 	nop
      f4:	34 00 00 00 	nop
      f8:	34 00 00 00 	nop
      fc:	34 00 00 00 	nop

00000100 <_crt0>:
     100:	78 1c 00 00 	mvhi sp,0x0
     104:	3b 9c 7f fc 	ori sp,sp,0x7ffc
     108:	78 1a 00 00 	mvhi gp,0x0
     10c:	3b 5a 40 30 	ori gp,gp,0x4030
     110:	78 01 00 00 	mvhi r1,0x0
     114:	38 21 40 30 	ori r1,r1,0x4030
     118:	78 03 00 00 	mvhi r3,0x0
     11c:	38 63 40 ec 	ori r3,r3,0x40ec

00000120 <.clearBSS>:
     120:	44 23 00 04 	be r1,r3,130 <.callMain>
     124:	58 20 00 00 	sw (r1+0),r0
     128:	34 21 00 04 	addi r1,r1,4
     12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
     130:	34 01 00 00 	mvi r1,0
     134:	34 02 00 00 	mvi r2,0
     138:	34 03 00 00 	mvi r3,0
     13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
     140:	34 01 00 01 	mvi r1,1
     144:	d0 01 00 00 	wcsr IE,r1
     148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
     14c:	34 01 00 00 	mvi r1,0
     150:	d0 01 00 00 	wcsr IE,r1
     154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
     158:	d0 21 00 00 	wcsr IM,r1
     15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
     160:	90 20 08 00 	rcsr r1,IM
     164:	c3 a0 00 00 	ret

00000168 <jump>:
     168:	c0 20 00 00 	b r1

0000016c <halt>:
     16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
     170:	37 9c ff 80 	addi sp,sp,-128
     174:	5b 81 00 04 	sw (sp+4),r1
     178:	5b 82 00 08 	sw (sp+8),r2
     17c:	5b 83 00 0c 	sw (sp+12),r3
     180:	5b 84 00 10 	sw (sp+16),r4
     184:	5b 85 00 14 	sw (sp+20),r5
     188:	5b 86 00 18 	sw (sp+24),r6
     18c:	5b 87 00 1c 	sw (sp+28),r7
     190:	5b 88 00 20 	sw (sp+32),r8
     194:	5b 89 00 24 	sw (sp+36),r9
     198:	5b 8a 00 28 	sw (sp+40),r10
     19c:	5b 9e 00 78 	sw (sp+120),ea
     1a0:	5b 9f 00 7c 	sw (sp+124),ba
     1a4:	2b 81 00 80 	lw r1,(sp+128)
     1a8:	5b 81 00 74 	sw (sp+116),r1
     1ac:	bb 80 08 00 	mv r1,sp
     1b0:	34 21 00 80 	addi r1,r1,128
     1b4:	5b 81 00 70 	sw (sp+112),r1
     1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
     1bc:	2b 81 00 04 	lw r1,(sp+4)
     1c0:	2b 82 00 08 	lw r2,(sp+8)
     1c4:	2b 83 00 0c 	lw r3,(sp+12)
     1c8:	2b 84 00 10 	lw r4,(sp+16)
     1cc:	2b 85 00 14 	lw r5,(sp+20)
     1d0:	2b 86 00 18 	lw r6,(sp+24)
     1d4:	2b 87 00 1c 	lw r7,(sp+28)
     1d8:	2b 88 00 20 	lw r8,(sp+32)
     1dc:	2b 89 00 24 	lw r9,(sp+36)
     1e0:	2b 8a 00 28 	lw r10,(sp+40)
     1e4:	2b 9d 00 74 	lw ra,(sp+116)
     1e8:	2b 9e 00 78 	lw ea,(sp+120)
     1ec:	2b 9f 00 7c 	lw ba,(sp+124)
     1f0:	2b 9c 00 70 	lw sp,(sp+112)
     1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
     1f8:	bb 80 08 00 	mv r1,sp
     1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
     200:	bb 40 08 00 	mv r1,gp
     204:	c3 a0 00 00 	ret

00000208 <main>:
#include "MPL3115A2.h"
//Antenas
#include "nrf24.h"
#include "nRF24L01.h"

int main(){
     208:	37 9c ff dc 	addi sp,sp,-36
     20c:	5b 8b 00 24 	sw (sp+36),r11
     210:	5b 8c 00 20 	sw (sp+32),r12
     214:	5b 8d 00 1c 	sw (sp+28),r13
     218:	5b 8e 00 18 	sw (sp+24),r14
     21c:	5b 8f 00 14 	sw (sp+20),r15
     220:	5b 90 00 10 	sw (sp+16),r16
     224:	5b 91 00 0c 	sw (sp+12),r17
     228:	5b 92 00 08 	sw (sp+8),r18
     22c:	5b 9d 00 04 	sw (sp+4),ra



		nrf24_begin();
		msleep(100);
		setAutoAck(true);
     230:	34 0e 00 01 	mvi r14,1
		enableDynamicAckPayloads();
		//PTX
		//stopTransmission();
		//openPipe0_tx(pipe);
		//PRX
		openpipe_rx(1,pipe);
     234:	78 0d 00 00 	mvhi r13,0x0
		startRx_mode();
		setRetries(15, 15);


			uart_putstr("\nLa transmision va a iniciar");
     238:	78 0c 00 00 	mvhi r12,0x0
			if ( available() == 1) {
				writeAckPayload( 1, data, 5 );
     23c:	78 0f 00 00 	mvhi r15,0x0
				uart_putstr("\nEL dato enviado es: ");
     240:	78 11 00 00 	mvhi r17,0x0
				uart_putstr((char*)data);
				read_payload( data_receive, sizeof(data_receive) );
				uart_putstr("\nEl archivo recibido es : ");
     244:	78 12 00 00 	mvhi r18,0x0
				uart_putstr("\nEL mensaje recibo es : ");
     248:	78 10 00 00 	mvhi r16,0x0
     24c:	e0 00 00 03 	bi 258 <main+0x50>
				uart_putstr((char*)data_receive);
		  }
			msleep(100);
     250:	34 01 00 64 	mvi r1,100
     254:	f8 00 00 91 	calli 498 <msleep>
 Prueba antenas
---------------------------------------------------------------------------*/



		nrf24_begin();
     258:	f8 00 0d 9b 	calli 38c4 <nrf24_begin>
		msleep(100);
     25c:	34 01 00 64 	mvi r1,100
     260:	f8 00 00 8e 	calli 498 <msleep>
		setAutoAck(true);
     264:	34 01 00 01 	mvi r1,1
     268:	f8 00 0c 09 	calli 328c <setAutoAck>
		enableDynamicAckPayloads();
     26c:	f8 00 0c 95 	calli 34c0 <enableDynamicAckPayloads>
		//PTX
		//stopTransmission();
		//openPipe0_tx(pipe);
		//PRX
		openpipe_rx(1,pipe);
     270:	b9 a0 10 00 	mv r2,r13
     274:	38 42 3b 78 	ori r2,r2,0x3b78
     278:	34 01 00 01 	mvi r1,1
     27c:	f8 00 0c bb 	calli 3568 <openpipe_rx>
		startRx_mode();
     280:	f8 00 0d 51 	calli 37c4 <startRx_mode>
		setRetries(15, 15);
     284:	34 01 00 0f 	mvi r1,15
     288:	b8 20 10 00 	mv r2,r1
     28c:	f8 00 0c 2f 	calli 3348 <setRetries>


			uart_putstr("\nLa transmision va a iniciar");
     290:	b9 80 08 00 	mv r1,r12
     294:	38 21 3b 08 	ori r1,r1,0x3b08
     298:	f8 00 00 fa 	calli 680 <uart_putstr>
			if ( available() == 1) {
     29c:	f8 00 0c 77 	calli 3478 <available>
     2a0:	5c 2e ff ec 	bne r1,r14,250 <main+0x48>
				writeAckPayload( 1, data, 5 );
     2a4:	b9 e0 10 00 	mv r2,r15
     2a8:	34 03 00 05 	mvi r3,5
     2ac:	38 42 40 08 	ori r2,r2,0x4008
     2b0:	f8 00 0b 88 	calli 30d0 <writeAckPayload>
				uart_putstr("\nEL dato enviado es: ");
     2b4:	ba 20 08 00 	mv r1,r17
     2b8:	38 21 3b 28 	ori r1,r1,0x3b28
     2bc:	f8 00 00 f1 	calli 680 <uart_putstr>
				uart_putstr((char*)data);
     2c0:	b9 e0 08 00 	mv r1,r15
     2c4:	38 21 40 08 	ori r1,r1,0x4008
     2c8:	f8 00 00 ee 	calli 680 <uart_putstr>
				read_payload( data_receive, sizeof(data_receive) );
     2cc:	34 0b 00 00 	mvi r11,0
     2d0:	34 02 00 04 	mvi r2,4
     2d4:	b9 60 08 00 	mv r1,r11
     2d8:	f8 00 0b 47 	calli 2ff4 <read_payload>
				uart_putstr("\nEl archivo recibido es : ");
     2dc:	ba 40 08 00 	mv r1,r18
     2e0:	38 21 3b 40 	ori r1,r1,0x3b40
     2e4:	f8 00 00 e7 	calli 680 <uart_putstr>
				uart_putstr("\nEL mensaje recibo es : ");
     2e8:	ba 00 08 00 	mv r1,r16
     2ec:	38 21 3b 5c 	ori r1,r1,0x3b5c
     2f0:	f8 00 00 e4 	calli 680 <uart_putstr>
				uart_putstr((char*)data_receive);
     2f4:	b9 60 08 00 	mv r1,r11
     2f8:	f8 00 00 e2 	calli 680 <uart_putstr>
     2fc:	e3 ff ff d5 	bi 250 <main+0x48>

00000300 <isr_null>:
void tic_isr();
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
     300:	c3 a0 00 00 	ret

00000304 <irq_handler>:
}

void irq_handler(uint32_t pending)
{
     304:	37 9c ff f0 	addi sp,sp,-16
     308:	5b 8b 00 10 	sw (sp+16),r11
     30c:	5b 8c 00 0c 	sw (sp+12),r12
     310:	5b 8d 00 08 	sw (sp+8),r13
     314:	5b 9d 00 04 	sw (sp+4),ra
     318:	78 0b 00 00 	mvhi r11,0x0
     31c:	39 6b 40 60 	ori r11,r11,0x4060
     320:	b8 20 60 00 	mv r12,r1
     324:	35 6d 00 80 	addi r13,r11,128
     328:	e0 00 00 03 	bi 334 <irq_handler+0x30>
    int i;

    for(i=0; i<32; i++) {
        if (pending & 0x01) (*isr_table[i])();
     32c:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
    int i;

    for(i=0; i<32; i++) {
     330:	45 6d 00 08 	be r11,r13,350 <irq_handler+0x4c>
        if (pending & 0x01) (*isr_table[i])();
     334:	21 81 00 01 	andi r1,r12,0x1
        pending >>= 1;
     338:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
    int i;

    for(i=0; i<32; i++) {
        if (pending & 0x01) (*isr_table[i])();
     33c:	44 20 ff fc 	be r1,r0,32c <irq_handler+0x28>
     340:	29 61 00 00 	lw r1,(r11+0)
     344:	35 6b 00 04 	addi r11,r11,4
     348:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
    int i;

    for(i=0; i<32; i++) {
     34c:	5d 6d ff fa 	bne r11,r13,334 <irq_handler+0x30>
        if (pending & 0x01) (*isr_table[i])();
        pending >>= 1;
    }
}
     350:	2b 9d 00 04 	lw ra,(sp+4)
     354:	2b 8b 00 10 	lw r11,(sp+16)
     358:	2b 8c 00 0c 	lw r12,(sp+12)
     35c:	2b 8d 00 08 	lw r13,(sp+8)
     360:	37 9c 00 10 	addi sp,sp,16
     364:	c3 a0 00 00 	ret

00000368 <isr_init>:

void isr_init()
{
     368:	78 01 00 00 	mvhi r1,0x0
     36c:	38 21 40 60 	ori r1,r1,0x4060
     370:	78 02 00 00 	mvhi r2,0x0
     374:	38 42 03 00 	ori r2,r2,0x300
     378:	34 23 00 80 	addi r3,r1,128
    int i;
    for(i=0; i<32; i++)
        isr_table[i] = &isr_null;
     37c:	58 22 00 00 	sw (r1+0),r2
     380:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
    int i;
    for(i=0; i<32; i++)
     384:	5c 23 ff fe 	bne r1,r3,37c <isr_init+0x14>
        isr_table[i] = &isr_null;
}
     388:	c3 a0 00 00 	ret

0000038c <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
     38c:	3c 21 00 02 	sli r1,r1,2
     390:	78 03 00 00 	mvhi r3,0x0
     394:	38 63 40 60 	ori r3,r3,0x4060
     398:	b4 61 18 00 	add r3,r3,r1
     39c:	58 62 00 00 	sw (r3+0),r2
    isr_table[irq] = isr;
}
     3a0:	c3 a0 00 00 	ret

000003a4 <isr_unregister>:

void isr_unregister(int irq)
{
     3a4:	3c 21 00 02 	sli r1,r1,2
     3a8:	78 03 00 00 	mvhi r3,0x0
     3ac:	38 63 40 60 	ori r3,r3,0x4060
     3b0:	78 02 00 00 	mvhi r2,0x0
     3b4:	b4 61 18 00 	add r3,r3,r1
     3b8:	38 42 03 00 	ori r2,r2,0x300
     3bc:	58 62 00 00 	sw (r3+0),r2
    isr_table[irq] = &isr_null;
}
     3c0:	c3 a0 00 00 	ret

000003c4 <gpio_init_write>:
 */
static uint8_t output;
static uint8_t addrs;

void gpio_init_write(void)
{
     3c4:	78 01 00 00 	mvhi r1,0x0
     3c8:	38 21 40 18 	ori r1,r1,0x4018
     3cc:	28 24 00 00 	lw r4,(r1+0)
	addrs = 0xff;
     3d0:	78 02 00 00 	mvhi r2,0x0
     3d4:	38 42 40 35 	ori r2,r2,0x4035
     3d8:	34 01 ff ff 	mvi r1,-1
     3dc:	30 41 00 00 	sb (r2+0),r1
	gpio0->oe = addrs;
     3e0:	34 03 00 ff 	mvi r3,255
     3e4:	58 83 00 18 	sw (r4+24),r3
}
     3e8:	c3 a0 00 00 	ret

000003ec <digitalWrite>:

void digitalWrite(uint8_t data, uint8_t mode)
{
     3ec:	20 24 00 ff 	andi r4,r1,0xff
     3f0:	20 42 00 ff 	andi r2,r2,0xff
	if(mode==TRUE){
     3f4:	34 01 00 01 	mvi r1,1
     3f8:	44 41 00 0c 	be r2,r1,428 <digitalWrite+0x3c>
    output |= data;
		} else {
		output &= ~data;
     3fc:	78 01 00 00 	mvhi r1,0x0
     400:	38 21 40 34 	ori r1,r1,0x4034
     404:	40 23 00 00 	lbu r3,(r1+0)
     408:	a4 80 10 00 	not r2,r4
     40c:	a0 43 10 00 	and r2,r2,r3
     410:	30 22 00 00 	sb (r1+0),r2
	}
	gpio0->out = data; 
     414:	78 01 00 00 	mvhi r1,0x0
     418:	38 21 40 18 	ori r1,r1,0x4018
     41c:	28 22 00 00 	lw r2,(r1+0)
     420:	58 44 00 14 	sw (r2+20),r4
}
     424:	c3 a0 00 00 	ret
}

void digitalWrite(uint8_t data, uint8_t mode)
{
	if(mode==TRUE){
    output |= data;
     428:	78 02 00 00 	mvhi r2,0x0
     42c:	38 42 40 34 	ori r2,r2,0x4034
     430:	40 41 00 00 	lbu r1,(r2+0)
     434:	b8 81 08 00 	or r1,r4,r1
     438:	30 41 00 00 	sb (r2+0),r1
		} else {
		output &= ~data;
	}
	gpio0->out = data; 
     43c:	78 01 00 00 	mvhi r1,0x0
     440:	38 21 40 18 	ori r1,r1,0x4018
     444:	28 22 00 00 	lw r2,(r1+0)
     448:	58 44 00 14 	sw (r2+20),r4
}
     44c:	c3 a0 00 00 	ret

00000450 <read_gpio>:


uint8_t read_gpio(void)
{
     450:	78 01 00 00 	mvhi r1,0x0
     454:	38 21 40 18 	ori r1,r1,0x4018
     458:	28 22 00 00 	lw r2,(r1+0)
     45c:	28 41 00 10 	lw r1,(r2+16)
	uint8_t data;
	data = gpio0-> in;
	return data;
}
     460:	20 21 00 ff 	andi r1,r1,0xff
     464:	c3 a0 00 00 	ret

00000468 <step_sleep>:
uint32_t tic_msec;



void step_sleep(uint32_t step)
{
     468:	78 02 00 00 	mvhi r2,0x0
     46c:	38 42 40 14 	ori r2,r2,0x4014
     470:	28 43 00 00 	lw r3,(r2+0)
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = step;
    timer0->counter1 = 0;
    timer0->tcr1 = TIMER_EN;
     474:	34 02 00 08 	mvi r2,8
void step_sleep(uint32_t step)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = step;
     478:	58 61 00 10 	sw (r3+16),r1
    timer0->counter1 = 0;
     47c:	34 01 00 00 	mvi r1,0
     480:	58 61 00 14 	sw (r3+20),r1
    timer0->tcr1 = TIMER_EN;
     484:	58 62 00 0c 	sw (r3+12),r2

    do {
        //halt();
         tcr = timer0->tcr1;
     488:	28 61 00 0c 	lw r1,(r3+12)
     } while ( ! (tcr & TIMER_TRIG) );
     48c:	20 21 00 01 	andi r1,r1,0x1
     490:	44 20 ff fe 	be r1,r0,488 <step_sleep+0x20>
	
}
     494:	c3 a0 00 00 	ret

00000498 <msleep>:



void msleep(uint32_t msec)
{
     498:	78 02 00 00 	mvhi r2,0x0
     49c:	38 42 40 14 	ori r2,r2,0x4014
     4a0:	38 03 c3 50 	mvu r3,0xc350
     4a4:	88 23 08 00 	mul r1,r1,r3
     4a8:	28 43 00 00 	lw r3,(r2+0)
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000)*msec;
    timer0->counter1 = 0;
    timer0->tcr1 = TIMER_EN;
     4ac:	34 02 00 08 	mvi r2,8
void msleep(uint32_t msec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000)*msec;
     4b0:	58 61 00 10 	sw (r3+16),r1
    timer0->counter1 = 0;
     4b4:	34 01 00 00 	mvi r1,0
     4b8:	58 61 00 14 	sw (r3+20),r1
    timer0->tcr1 = TIMER_EN;
     4bc:	58 62 00 0c 	sw (r3+12),r2

    do {
        //halt();
         tcr = timer0->tcr1;
     4c0:	28 61 00 0c 	lw r1,(r3+12)
     } while ( ! (tcr & TIMER_TRIG) );
     4c4:	20 21 00 01 	andi r1,r1,0x1
     4c8:	44 20 ff fe 	be r1,r0,4c0 <msleep+0x28>
}
     4cc:	c3 a0 00 00 	ret

000004d0 <nsleep>:

void nsleep(uint32_t nsec)
{
     4d0:	78 02 00 00 	mvhi r2,0x0
     4d4:	38 42 40 14 	ori r2,r2,0x4014
     4d8:	28 43 00 00 	lw r3,(r2+0)
     4dc:	08 21 00 32 	muli r1,r1,50
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
    timer0->counter1 = 0;
    timer0->tcr1 = TIMER_EN;
     4e0:	34 02 00 08 	mvi r2,8
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     4e4:	58 61 00 10 	sw (r3+16),r1
    timer0->counter1 = 0;
     4e8:	34 01 00 00 	mvi r1,0
     4ec:	58 61 00 14 	sw (r3+20),r1
    timer0->tcr1 = TIMER_EN;
     4f0:	58 62 00 0c 	sw (r3+12),r2

    do {
        //halt();
         tcr = timer0->tcr1;
     4f4:	28 61 00 0c 	lw r1,(r3+12)
     } while ( ! (tcr & TIMER_TRIG) );
     4f8:	20 21 00 01 	andi r1,r1,0x1
     4fc:	44 20 ff fe 	be r1,r0,4f4 <nsleep+0x24>
}
     500:	c3 a0 00 00 	ret

00000504 <tic_isr>:

void tic_isr()
{
     504:	78 03 00 00 	mvhi r3,0x0
     508:	38 63 40 e0 	ori r3,r3,0x40e0
     50c:	28 62 00 00 	lw r2,(r3+0)
    tic_msec++;
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     510:	78 01 00 00 	mvhi r1,0x0
     514:	38 21 40 14 	ori r1,r1,0x4014
     518:	28 24 00 00 	lw r4,(r1+0)
     } while ( ! (tcr & TIMER_TRIG) );
}

void tic_isr()
{
    tic_msec++;
     51c:	34 42 00 01 	addi r2,r2,1
     520:	58 62 00 00 	sw (r3+0),r2
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     524:	34 01 00 0e 	mvi r1,14
     528:	58 81 00 00 	sw (r4+0),r1
}
     52c:	c3 a0 00 00 	ret

00000530 <tic_init>:

void tic_init()
{
     530:	78 01 00 00 	mvhi r1,0x0
     534:	38 21 40 14 	ori r1,r1,0x4014
     538:	28 24 00 00 	lw r4,(r1+0)
    tic_msec = 0;
     53c:	78 02 00 00 	mvhi r2,0x0
     540:	38 42 40 e0 	ori r2,r2,0x40e0
     544:	34 05 00 00 	mvi r5,0
     548:	58 45 00 00 	sw (r2+0),r5

    // Setup timer0.0
    timer0->compare0 = (FCPU/10000);
     54c:	34 01 13 88 	mvi r1,5000
     550:	58 81 00 04 	sw (r4+4),r1
        isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
    isr_table[irq] = isr;
     554:	78 03 00 00 	mvhi r3,0x0
     558:	78 02 00 00 	mvhi r2,0x0
{
    tic_msec = 0;

    // Setup timer0.0
    timer0->compare0 = (FCPU/10000);
    timer0->counter0 = 0;
     55c:	58 85 00 08 	sw (r4+8),r5
        isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
    isr_table[irq] = isr;
     560:	38 63 40 60 	ori r3,r3,0x4060
     564:	38 42 05 04 	ori r2,r2,0x504
    tic_msec = 0;

    // Setup timer0.0
    timer0->compare0 = (FCPU/10000);
    timer0->counter0 = 0;
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     568:	34 01 00 0e 	mvi r1,14
     56c:	58 81 00 00 	sw (r4+0),r1
        isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
    isr_table[irq] = isr;
     570:	58 62 00 04 	sw (r3+4),r2
    timer0->compare0 = (FCPU/10000);
    timer0->counter0 = 0;
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

    isr_register(1, &tic_isr);
}
     574:	c3 a0 00 00 	ret

00000578 <time_happened_millis>:




uint8_t time_happened_millis(uint32_t millis)
{
     578:	78 02 00 00 	mvhi r2,0x0
     57c:	38 42 40 14 	ori r2,r2,0x4014
     580:	28 42 00 00 	lw r2,(r2+0)
     584:	b8 20 30 00 	mv r6,r1
    uint32_t tcr;
		
		tcr =timer0->tcr0;
		if(! (tcr & TIMER_EN)){
     588:	34 03 00 00 	mvi r3,0

uint8_t time_happened_millis(uint32_t millis)
{
    uint32_t tcr;
		
		tcr =timer0->tcr0;
     58c:	28 41 00 00 	lw r1,(r2+0)
		if(! (tcr & TIMER_EN)){
     590:	20 24 00 08 	andi r4,r1,0x8
     594:	5c 83 00 0b 	bne r4,r3,5c0 <time_happened_millis+0x48>
		  // Use timer0.1
			if(tcr & TIMER_TRIG){
     598:	20 25 00 01 	andi r5,r1,0x1
     59c:	34 03 00 01 	mvi r3,1
     5a0:	5c a4 00 08 	bne r5,r4,5c0 <time_happened_millis+0x48>
				return 1;
			}else{ 
		  timer0->compare0 = (FCPU/1000)*millis;
     5a4:	38 01 c3 50 	mvu r1,0xc350
     5a8:	88 c1 08 00 	mul r1,r6,r1
		  timer0->counter0 = 0;
		  timer0->tcr0 = TIMER_EN;	
     5ac:	b8 a0 18 00 	mv r3,r5
		if(! (tcr & TIMER_EN)){
		  // Use timer0.1
			if(tcr & TIMER_TRIG){
				return 1;
			}else{ 
		  timer0->compare0 = (FCPU/1000)*millis;
     5b0:	58 41 00 04 	sw (r2+4),r1
		  timer0->counter0 = 0;
     5b4:	58 45 00 08 	sw (r2+8),r5
		  timer0->tcr0 = TIMER_EN;	
     5b8:	34 01 00 08 	mvi r1,8
     5bc:	58 41 00 00 	sw (r2+0),r1
			return 0;
			}
		}else{
			return 0;			
		}		
}
     5c0:	b8 60 08 00 	mv r1,r3
     5c4:	c3 a0 00 00 	ret

000005c8 <init_watch>:


void init_watch(void){
     5c8:	78 01 00 00 	mvhi r1,0x0
     5cc:	38 21 40 14 	ori r1,r1,0x4014
     5d0:	28 23 00 00 	lw r3,(r1+0)
     5d4:	34 02 00 00 	mvi r2,0
     5d8:	58 62 00 00 	sw (r3+0),r2
	timer0->tcr0=0x00;
}
     5dc:	c3 a0 00 00 	ret

000005e0 <time_happened_micro>:


uint8_t time_happened_micro(uint32_t micros)
{
     5e0:	78 02 00 00 	mvhi r2,0x0
     5e4:	38 42 40 14 	ori r2,r2,0x4014
     5e8:	28 42 00 00 	lw r2,(r2+0)
    uint32_t tcr;
		static uint32_t time;
		time = micros;
     5ec:	78 03 00 00 	mvhi r3,0x0
     5f0:	38 63 40 30 	ori r3,r3,0x4030
     5f4:	58 61 00 00 	sw (r3+0),r1
		tcr =timer0->tcr0;
     5f8:	28 44 00 00 	lw r4,(r2+0)
		if(! (tcr & TIMER_EN)){
     5fc:	34 03 00 00 	mvi r3,0
     600:	20 85 00 08 	andi r5,r4,0x8
     604:	5c a3 00 0a 	bne r5,r3,62c <time_happened_micro+0x4c>
		  // Use timer0.1
			if(tcr & TIMER_TRIG){
     608:	20 84 00 01 	andi r4,r4,0x1
     60c:	34 03 00 01 	mvi r3,1
     610:	5c 85 00 07 	bne r4,r5,62c <time_happened_micro+0x4c>
				return 1;
			}else{ 
				timer0->compare0 = (FCPU/1000000)*time;
     614:	08 21 00 32 	muli r1,r1,50
				timer0->counter0 = 0;
				timer0->tcr0 = TIMER_EN;	
     618:	b8 80 18 00 	mv r3,r4
		if(! (tcr & TIMER_EN)){
		  // Use timer0.1
			if(tcr & TIMER_TRIG){
				return 1;
			}else{ 
				timer0->compare0 = (FCPU/1000000)*time;
     61c:	58 41 00 04 	sw (r2+4),r1
				timer0->counter0 = 0;
     620:	58 44 00 08 	sw (r2+8),r4
				timer0->tcr0 = TIMER_EN;	
     624:	34 01 00 08 	mvi r1,8
     628:	58 41 00 00 	sw (r2+0),r1
				return 0;
			}
		}else{
			return 0;			
		}		
}
     62c:	b8 60 08 00 	mv r1,r3
     630:	c3 a0 00 00 	ret

00000634 <uart_init>:

/***************************************************************************
 * UART Functions
 */
void uart_init()
{
     634:	c3 a0 00 00 	ret

00000638 <uart_getchar>:
    // Setup Divisor register (Fclk / Baud)
    //uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
     638:	78 01 00 00 	mvhi r1,0x0
     63c:	38 21 40 10 	ori r1,r1,0x4010
     640:	28 22 00 00 	lw r2,(r1+0)
     644:	28 41 00 00 	lw r1,(r2+0)
     648:	20 21 00 01 	andi r1,r1,0x1
     64c:	44 20 ff fe 	be r1,r0,644 <uart_getchar+0xc>
    while (! (uart0->ucr & UART_DR)) ;
    return uart0->rxtx;
     650:	28 41 00 04 	lw r1,(r2+4)
}
     654:	20 21 00 ff 	andi r1,r1,0xff
     658:	c3 a0 00 00 	ret

0000065c <uart_putchar>:

void uart_putchar(char c)
{
     65c:	78 02 00 00 	mvhi r2,0x0
     660:	38 42 40 10 	ori r2,r2,0x4010
     664:	28 42 00 00 	lw r2,(r2+0)
     668:	20 23 00 ff 	andi r3,r1,0xff
    while (uart0->ucr & UART_BUSY) ;
     66c:	28 41 00 00 	lw r1,(r2+0)
     670:	20 21 00 10 	andi r1,r1,0x10
     674:	5c 20 ff fe 	bne r1,r0,66c <uart_putchar+0x10>
    uart0->rxtx = c;
     678:	58 43 00 04 	sw (r2+4),r3
}
     67c:	c3 a0 00 00 	ret

00000680 <uart_putstr>:

void uart_putstr(char *str)
{
     680:	40 24 00 00 	lbu r4,(r1+0)
     684:	b8 20 18 00 	mv r3,r1
    char *c = str;
    while(*c) {
     688:	44 80 00 0b 	be r4,r0,6b4 <uart_putstr+0x34>
    return uart0->rxtx;
}

void uart_putchar(char c)
{
    while (uart0->ucr & UART_BUSY) ;
     68c:	78 01 00 00 	mvhi r1,0x0
     690:	38 21 40 10 	ori r1,r1,0x4010
     694:	28 22 00 00 	lw r2,(r1+0)
     698:	28 41 00 00 	lw r1,(r2+0)
     69c:	20 21 00 10 	andi r1,r1,0x10
     6a0:	5c 20 ff fe 	bne r1,r0,698 <uart_putstr+0x18>
    uart0->rxtx = c;
     6a4:	58 44 00 04 	sw (r2+4),r4
void uart_putstr(char *str)
{
    char *c = str;
    while(*c) {
        uart_putchar(*c);
        c++;
     6a8:	34 63 00 01 	addi r3,r3,1
}

void uart_putstr(char *str)
{
    char *c = str;
    while(*c) {
     6ac:	40 64 00 00 	lbu r4,(r3+0)
     6b0:	5c 81 ff fa 	bne r4,r1,698 <uart_putstr+0x18>
     6b4:	c3 a0 00 00 	ret

000006b8 <i2c_putdata>:
 */

	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
     6b8:	78 02 00 00 	mvhi r2,0x0
     6bc:	38 42 40 24 	ori r2,r2,0x4024
     6c0:	28 44 00 00 	lw r4,(r2+0)
	  data = c;
     6c4:	78 03 00 00 	mvhi r3,0x0
 */

	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
     6c8:	20 21 00 ff 	andi r1,r1,0xff
	  data = c;
     6cc:	38 63 40 36 	ori r3,r3,0x4036
     6d0:	30 61 00 00 	sb (r3+0),r1
		while ((i2c0->ucr & !I2C_BUSY));
     6d4:	28 82 00 00 	lw r2,(r4+0)
		i2c0->wxrx = data;
     6d8:	58 81 00 04 	sw (r4+4),r1
	}
     6dc:	c3 a0 00 00 	ret

000006e0 <i2c_putrwaddr>:
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
     6e0:	78 03 00 00 	mvhi r3,0x0
     6e4:	20 21 00 ff 	andi r1,r1,0xff
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     6e8:	38 63 40 24 	ori r3,r3,0x4024
     6ec:	28 64 00 00 	lw r4,(r3+0)
     6f0:	3c 21 00 07 	sli r1,r1,7
		while ((i2c0->ucr & !I2C_BUSY));
		i2c0->wxrx = data;
	}
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
     6f4:	20 42 00 ff 	andi r2,r2,0xff
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     6f8:	b8 41 10 00 	or r2,r2,r1
     6fc:	58 82 00 08 	sw (r4+8),r2
	}
     700:	c3 a0 00 00 	ret

00000704 <i2c_putdatas>:
    //----------------------------------------------------------------
	void i2c_putdatas(char *str)	
	{
     704:	40 22 00 00 	lbu r2,(r1+0)
     708:	b8 20 20 00 	mv r4,r1
		char *c= str;
		while (*c) {
     70c:	44 40 00 0e 	be r2,r0,744 <i2c_putdatas+0x40>
	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
		while ((i2c0->ucr & !I2C_BUSY));
     710:	78 01 00 00 	mvhi r1,0x0
     714:	38 21 40 24 	ori r1,r1,0x4024
     718:	28 23 00 00 	lw r3,(r1+0)
     71c:	b8 80 08 00 	mv r1,r4
		i2c0->wxrx = data;
     720:	b8 40 20 00 	mv r4,r2
	void i2c_putdatas(char *str)	
	{
		char *c= str;
		while (*c) {
			i2c_putdata(*c);
		c++;
     724:	34 21 00 01 	addi r1,r1,1
	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
		while ((i2c0->ucr & !I2C_BUSY));
     728:	28 62 00 00 	lw r2,(r3+0)
		i2c0->wxrx = data;
     72c:	58 64 00 04 	sw (r3+4),r4
	}
    //----------------------------------------------------------------
	void i2c_putdatas(char *str)	
	{
		char *c= str;
		while (*c) {
     730:	40 22 00 00 	lbu r2,(r1+0)
     734:	5c 40 ff fb 	bne r2,r0,720 <i2c_putdatas+0x1c>
     738:	78 01 00 00 	mvhi r1,0x0
     73c:	38 21 40 36 	ori r1,r1,0x4036
     740:	30 24 00 00 	sb (r1+0),r4
     744:	c3 a0 00 00 	ret

00000748 <i2c_init>:
		c++;
		}
	}
    //----------------------------------------------------------------
	void i2c_init()
	{
     748:	78 01 00 00 	mvhi r1,0x0
     74c:	38 21 40 24 	ori r1,r1,0x4024
     750:	28 23 00 00 	lw r3,(r1+0)
     754:	34 02 00 08 	mvi r2,8
     758:	58 62 00 00 	sw (r3+0),r2
	 i2c0->ucr = I2C_ENA;  
	}
     75c:	c3 a0 00 00 	ret

00000760 <i2c_sleep>:
    //----------------------------------------------------------------
	void i2c_sleep()
	{
     760:	78 01 00 00 	mvhi r1,0x0
     764:	38 21 40 24 	ori r1,r1,0x4024
     768:	28 23 00 00 	lw r3,(r1+0)
     76c:	28 62 00 00 	lw r2,(r3+0)
     770:	20 42 00 01 	andi r2,r2,0x1
     774:	44 40 00 06 	be r2,r0,78c <i2c_sleep+0x2c>
		while((i2c0->ucr & I2C_BUSY))
		i2c0->ucr = 0x00;
     778:	34 02 00 00 	mvi r2,0
     77c:	58 62 00 00 	sw (r3+0),r2
	 i2c0->ucr = I2C_ENA;  
	}
    //----------------------------------------------------------------
	void i2c_sleep()
	{
		while((i2c0->ucr & I2C_BUSY))
     780:	28 61 00 00 	lw r1,(r3+0)
     784:	20 21 00 01 	andi r1,r1,0x1
     788:	5c 20 ff fd 	bne r1,r0,77c <i2c_sleep+0x1c>
     78c:	c3 a0 00 00 	ret

00000790 <i2c_getdata>:
		i2c0->ucr = 0x00;
	}
    //----------------------------------------------------------------
	uint8_t i2c_getdata()
	{
     790:	78 01 00 00 	mvhi r1,0x0
     794:	38 21 40 24 	ori r1,r1,0x4024
     798:	28 22 00 00 	lw r2,(r1+0)
     79c:	28 41 00 00 	lw r1,(r2+0)
     7a0:	20 21 00 01 	andi r1,r1,0x1
     7a4:	44 20 00 04 	be r1,r0,7b4 <i2c_getdata+0x24>
     7a8:	28 41 00 00 	lw r1,(r2+0)
     7ac:	20 21 00 02 	andi r1,r1,0x2
     7b0:	44 20 ff fb 	be r1,r0,79c <i2c_getdata+0xc>
		while ( (i2c0->ucr & I2C_BUSY) && (!(i2c0->ucr & I2C_ERROR)));
		return i2c0-> wxrx;
     7b4:	28 41 00 04 	lw r1,(r2+4)
	}
     7b8:	20 21 00 ff 	andi r1,r1,0xff
     7bc:	c3 a0 00 00 	ret

000007c0 <I2CreadByte>:
    //----------------------------------------------------------------
    uint8_t I2CreadByte(uint8_t address, uint8_t subaddress)
    {
     7c0:	78 03 00 00 	mvhi r3,0x0
     7c4:	38 63 40 24 	ori r3,r3,0x4024
     7c8:	28 65 00 00 	lw r5,(r3+0)
     7cc:	20 26 00 ff 	andi r6,r1,0xff

	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
     7d0:	78 01 00 00 	mvhi r1,0x0
		i2c0->wxrx = data;
	}
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     7d4:	58 a6 00 08 	sw (r5+8),r6
		while ( (i2c0->ucr & I2C_BUSY) && (!(i2c0->ucr & I2C_ERROR)));
		return i2c0-> wxrx;
	}
    //----------------------------------------------------------------
    uint8_t I2CreadByte(uint8_t address, uint8_t subaddress)
    {
     7d8:	20 42 00 ff 	andi r2,r2,0xff

	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
     7dc:	38 21 40 36 	ori r1,r1,0x4036
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     7e0:	78 03 00 00 	mvhi r3,0x0

	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
     7e4:	30 22 00 00 	sb (r1+0),r2
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     7e8:	38 63 40 14 	ori r3,r3,0x4014
	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
		while ((i2c0->ucr & !I2C_BUSY));
     7ec:	28 a1 00 00 	lw r1,(r5+0)
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     7f0:	28 64 00 00 	lw r4,(r3+0)
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
		while ((i2c0->ucr & !I2C_BUSY));
		i2c0->wxrx = data;
     7f4:	58 a2 00 04 	sw (r5+4),r2
		}
	}
    //----------------------------------------------------------------
	void i2c_init()
	{
	 i2c0->ucr = I2C_ENA;  
     7f8:	34 03 00 08 	mvi r3,8
     7fc:	58 a3 00 00 	sw (r5+0),r3
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     800:	34 01 03 e8 	mvi r1,1000
     804:	58 81 00 10 	sw (r4+16),r1
    timer0->counter1 = 0;
     808:	34 02 00 00 	mvi r2,0
     80c:	58 82 00 14 	sw (r4+20),r2
    timer0->tcr1 = TIMER_EN;
     810:	58 83 00 0c 	sw (r4+12),r3

    do {
        //halt();
         tcr = timer0->tcr1;
     814:	28 81 00 0c 	lw r1,(r4+12)
     } while ( ! (tcr & TIMER_TRIG) );
     818:	20 21 00 01 	andi r1,r1,0x1
     81c:	44 20 ff fe 	be r1,r0,814 <I2CreadByte+0x54>
		  //Indicar la direccion interna que se desea leer    
      i2c_putrwaddr (I2C_WRITE, address);
      i2c_putdata(subaddress);
      i2c_init(); 
      nsleep(20);
	  i2c0->ucr = 0x00;
     820:	34 01 00 00 	mvi r1,0
     824:	58 a1 00 00 	sw (r5+0),r1
		  //Pausa para que el esclavo procese la orden
      while((i2c0->ucr & I2C_BUSY));
     828:	28 a1 00 00 	lw r1,(r5+0)
     82c:	20 22 00 01 	andi r2,r1,0x1
     830:	5c 40 ff fe 	bne r2,r0,828 <I2CreadByte+0x68>
void msleep(uint32_t msec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000)*msec;
     834:	38 01 c3 50 	mvu r1,0xc350
     838:	58 81 00 10 	sw (r4+16),r1
    timer0->counter1 = 0;
     83c:	58 82 00 14 	sw (r4+20),r2
    timer0->tcr1 = TIMER_EN;
     840:	34 01 00 08 	mvi r1,8
     844:	58 81 00 0c 	sw (r4+12),r1

    do {
        //halt();
         tcr = timer0->tcr1;
     848:	28 81 00 0c 	lw r1,(r4+12)
     } while ( ! (tcr & TIMER_TRIG) );
     84c:	20 21 00 01 	andi r1,r1,0x1
     850:	44 20 ff fe 	be r1,r0,848 <I2CreadByte+0x88>
		i2c0->wxrx = data;
	}
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     854:	38 c1 00 80 	ori r1,r6,0x80
     858:	58 a1 00 08 	sw (r5+8),r1
		}
	}
    //----------------------------------------------------------------
	void i2c_init()
	{
	 i2c0->ucr = I2C_ENA;  
     85c:	34 03 00 08 	mvi r3,8
     860:	58 a3 00 00 	sw (r5+0),r3
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     864:	34 02 03 e8 	mvi r2,1000
     868:	58 82 00 10 	sw (r4+16),r2
    timer0->counter1 = 0;
     86c:	34 01 00 00 	mvi r1,0
     870:	58 81 00 14 	sw (r4+20),r1
    timer0->tcr1 = TIMER_EN;
     874:	58 83 00 0c 	sw (r4+12),r3

    do {
        //halt();
         tcr = timer0->tcr1;
     878:	28 81 00 0c 	lw r1,(r4+12)
     } while ( ! (tcr & TIMER_TRIG) );
     87c:	20 21 00 01 	andi r1,r1,0x1
     880:	44 20 ff fe 	be r1,r0,878 <I2CreadByte+0xb8>
		  //gpio0->out = 0x65;
		  //Lectura de la informacion otorgada por el esclavo
      i2c_putrwaddr(I2C_READ, address);
      i2c_init();  
      nsleep(20);
      i2c0->ucr = 0x00;
     884:	34 01 00 00 	mvi r1,0
     888:	58 a1 00 00 	sw (r5+0),r1
	  while ( (i2c0->ucr & I2C_BUSY) && (!(i2c0->ucr & I2C_ERROR)));
     88c:	28 a1 00 00 	lw r1,(r5+0)
     890:	20 21 00 01 	andi r1,r1,0x1
     894:	44 20 00 04 	be r1,r0,8a4 <I2CreadByte+0xe4>
     898:	28 a1 00 00 	lw r1,(r5+0)
     89c:	20 21 00 02 	andi r1,r1,0x2
     8a0:	44 20 ff fb 	be r1,r0,88c <I2CreadByte+0xcc>
		  //gpio0->oe  = 0x000000ff;
		  //gpio0->out = 0x66;
	  return i2c0-> wxrx;     
     8a4:	28 a1 00 04 	lw r1,(r5+4)
    }
     8a8:	20 21 00 ff 	andi r1,r1,0xff
     8ac:	c3 a0 00 00 	ret

000008b0 <I2CreadBytes>:
    //----------------------------------------------------------------
    void I2CreadBytes(uint8_t address, uint8_t subaddress, int *dest, uint8_t count)
    {
     8b0:	37 9c ff fc 	addi sp,sp,-4
     8b4:	5b 8b 00 04 	sw (sp+4),r11
		i2c0->wxrx = data;
	}
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     8b8:	78 05 00 00 	mvhi r5,0x0
     8bc:	38 a5 40 24 	ori r5,r5,0x4024
     8c0:	28 a7 00 00 	lw r7,(r5+0)
		  //gpio0->out = 0x66;
	  return i2c0-> wxrx;     
    }
    //----------------------------------------------------------------
    void I2CreadBytes(uint8_t address, uint8_t subaddress, int *dest, uint8_t count)
    {
     8c4:	20 28 00 ff 	andi r8,r1,0xff

	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
     8c8:	78 01 00 00 	mvhi r1,0x0
		i2c0->wxrx = data;
	}
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     8cc:	58 e8 00 08 	sw (r7+8),r8
		  //gpio0->out = 0x66;
	  return i2c0-> wxrx;     
    }
    //----------------------------------------------------------------
    void I2CreadBytes(uint8_t address, uint8_t subaddress, int *dest, uint8_t count)
    {
     8d0:	20 42 00 ff 	andi r2,r2,0xff

	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
     8d4:	38 21 40 36 	ori r1,r1,0x4036
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     8d8:	78 05 00 00 	mvhi r5,0x0

	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
     8dc:	30 22 00 00 	sb (r1+0),r2
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     8e0:	38 a5 40 14 	ori r5,r5,0x4014
	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
		while ((i2c0->ucr & !I2C_BUSY));
     8e4:	28 e1 00 00 	lw r1,(r7+0)
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     8e8:	28 a6 00 00 	lw r6,(r5+0)
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
		while ((i2c0->ucr & !I2C_BUSY));
		i2c0->wxrx = data;
     8ec:	58 e2 00 04 	sw (r7+4),r2
		}
	}
    //----------------------------------------------------------------
	void i2c_init()
	{
	 i2c0->ucr = I2C_ENA;  
     8f0:	34 05 00 08 	mvi r5,8
     8f4:	58 e5 00 00 	sw (r7+0),r5
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     8f8:	34 01 03 e8 	mvi r1,1000
     8fc:	58 c1 00 10 	sw (r6+16),r1
    timer0->counter1 = 0;
     900:	34 02 00 00 	mvi r2,0
     904:	58 c2 00 14 	sw (r6+20),r2
    timer0->tcr1 = TIMER_EN;
     908:	58 c5 00 0c 	sw (r6+12),r5
		  //gpio0->out = 0x66;
	  return i2c0-> wxrx;     
    }
    //----------------------------------------------------------------
    void I2CreadBytes(uint8_t address, uint8_t subaddress, int *dest, uint8_t count)
    {
     90c:	20 84 00 ff 	andi r4,r4,0xff
    timer0->counter1 = 0;
    timer0->tcr1 = TIMER_EN;

    do {
        //halt();
         tcr = timer0->tcr1;
     910:	28 c1 00 0c 	lw r1,(r6+12)
     } while ( ! (tcr & TIMER_TRIG) );
     914:	20 21 00 01 	andi r1,r1,0x1
     918:	44 20 ff fe 	be r1,r0,910 <I2CreadBytes+0x60>
    {
		i2c_putrwaddr (I2C_WRITE, address);
		i2c_putdata(subaddress);
		i2c_init(); 
		nsleep(20);
		i2c0->ucr = 0x00;
     91c:	34 01 00 00 	mvi r1,0
     920:	58 e1 00 00 	sw (r7+0),r1
		  //Pausa para que el esclavo procese la orden
		while((i2c0->ucr & I2C_BUSY));
     924:	28 e1 00 00 	lw r1,(r7+0)
     928:	20 22 00 01 	andi r2,r1,0x1
     92c:	5c 40 ff fe 	bne r2,r0,924 <I2CreadBytes+0x74>
void msleep(uint32_t msec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000)*msec;
     930:	38 01 c3 50 	mvu r1,0xc350
     934:	58 c1 00 10 	sw (r6+16),r1
    timer0->counter1 = 0;
     938:	58 c2 00 14 	sw (r6+20),r2
    timer0->tcr1 = TIMER_EN;
     93c:	34 01 00 08 	mvi r1,8
     940:	58 c1 00 0c 	sw (r6+12),r1

    do {
        //halt();
         tcr = timer0->tcr1;
     944:	28 c1 00 0c 	lw r1,(r6+12)
     } while ( ! (tcr & TIMER_TRIG) );
     948:	20 21 00 01 	andi r1,r1,0x1
     94c:	44 20 ff fe 	be r1,r0,944 <I2CreadBytes+0x94>
		i2c0->wxrx = data;
	}
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     950:	39 01 00 80 	ori r1,r8,0x80
     954:	58 e1 00 08 	sw (r7+8),r1
		}
	}
    //----------------------------------------------------------------
	void i2c_init()
	{
	 i2c0->ucr = I2C_ENA;  
     958:	34 01 00 08 	mvi r1,8
     95c:	58 e1 00 00 	sw (r7+0),r1
		  //Lectura de la informacion otorgada por el esclavo
		i2c_putrwaddr(I2C_READ, address);
		i2c_init();  
		//-------------------------------------
      uint8_t i;
		for (i=0; i<count;)
     960:	44 80 00 19 	be r4,r0,9c4 <I2CreadBytes+0x114>
     964:	34 05 00 00 	mvi r5,0
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
    timer0->counter1 = 0;
    timer0->tcr1 = TIMER_EN;
     968:	b8 20 58 00 	mv r11,r1
		  //Lectura de la informacion otorgada por el esclavo
		i2c_putrwaddr(I2C_READ, address);
		i2c_init();  
		//-------------------------------------
      uint8_t i;
		for (i=0; i<count;)
     96c:	34 88 ff ff 	addi r8,r4,-1
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     970:	34 0a 03 e8 	mvi r10,1000
    timer0->counter1 = 0;
     974:	b8 a0 48 00 	mv r9,r5
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     978:	58 ca 00 10 	sw (r6+16),r10
    timer0->counter1 = 0;
     97c:	58 c9 00 14 	sw (r6+20),r9
    timer0->tcr1 = TIMER_EN;
     980:	58 cb 00 0c 	sw (r6+12),r11

    do {
        //halt();
         tcr = timer0->tcr1;
     984:	28 c1 00 0c 	lw r1,(r6+12)
     } while ( ! (tcr & TIMER_TRIG) );
     988:	20 21 00 01 	andi r1,r1,0x1
     98c:	44 20 ff fe 	be r1,r0,984 <I2CreadBytes+0xd4>
		//-------------------------------------
      uint8_t i;
		for (i=0; i<count;)
		{
			nsleep(20);
         if (i==count-1) i2c0->ucr = 0x00;
     990:	44 a8 00 10 	be r5,r8,9d0 <I2CreadBytes+0x120>

			while ( (i2c0->ucr & I2C_BUSY) && (!(i2c0->ucr & I2C_ERROR)));
     994:	28 e1 00 00 	lw r1,(r7+0)
     998:	20 21 00 01 	andi r1,r1,0x1
     99c:	44 20 00 04 	be r1,r0,9ac <I2CreadBytes+0xfc>
     9a0:	28 e1 00 00 	lw r1,(r7+0)
     9a4:	20 21 00 02 	andi r1,r1,0x2
     9a8:	44 20 ff fb 	be r1,r0,994 <I2CreadBytes+0xe4>
            dest[i++] = i2c0-> wxrx;
     9ac:	28 e1 00 04 	lw r1,(r7+4)
     9b0:	34 a5 00 01 	addi r5,r5,1
		  //Lectura de la informacion otorgada por el esclavo
		i2c_putrwaddr(I2C_READ, address);
		i2c_init();  
		//-------------------------------------
      uint8_t i;
		for (i=0; i<count;)
     9b4:	20 a2 00 ff 	andi r2,r5,0xff
		{
			nsleep(20);
         if (i==count-1) i2c0->ucr = 0x00;

			while ( (i2c0->ucr & I2C_BUSY) && (!(i2c0->ucr & I2C_ERROR)));
            dest[i++] = i2c0-> wxrx;
     9b8:	58 61 00 00 	sw (r3+0),r1
     9bc:	34 63 00 04 	addi r3,r3,4
		  //Lectura de la informacion otorgada por el esclavo
		i2c_putrwaddr(I2C_READ, address);
		i2c_init();  
		//-------------------------------------
      uint8_t i;
		for (i=0; i<count;)
     9c0:	54 82 ff ee 	bgu r4,r2,978 <I2CreadBytes+0xc8>

			while ( (i2c0->ucr & I2C_BUSY) && (!(i2c0->ucr & I2C_ERROR)));
            dest[i++] = i2c0-> wxrx;
		}
		//-------------------------------------
    }
     9c4:	2b 8b 00 04 	lw r11,(sp+4)
     9c8:	37 9c 00 04 	addi sp,sp,4
     9cc:	c3 a0 00 00 	ret
		//-------------------------------------
      uint8_t i;
		for (i=0; i<count;)
		{
			nsleep(20);
         if (i==count-1) i2c0->ucr = 0x00;
     9d0:	34 01 00 00 	mvi r1,0
     9d4:	58 e1 00 00 	sw (r7+0),r1
     9d8:	e3 ff ff ef 	bi 994 <I2CreadBytes+0xe4>

000009dc <I2CwriteByte>:
		}
		//-------------------------------------
    }
    //----------------------------------------------------------------
	void I2CwriteByte(uint8_t address, uint8_t subaddress, uint8_t data)
    {
     9dc:	78 04 00 00 	mvhi r4,0x0
     9e0:	38 84 40 24 	ori r4,r4,0x4024
     9e4:	28 86 00 00 	lw r6,(r4+0)
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     9e8:	78 05 00 00 	mvhi r5,0x0
		}
		//-------------------------------------
    }
    //----------------------------------------------------------------
	void I2CwriteByte(uint8_t address, uint8_t subaddress, uint8_t data)
    {
     9ec:	20 21 00 ff 	andi r1,r1,0xff
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     9f0:	38 a5 40 14 	ori r5,r5,0x4014
		i2c0->wxrx = data;
	}
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     9f4:	58 c1 00 08 	sw (r6+8),r1
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     9f8:	28 a5 00 00 	lw r5,(r5+0)
		}
		//-------------------------------------
    }
    //----------------------------------------------------------------
	void I2CwriteByte(uint8_t address, uint8_t subaddress, uint8_t data)
    {
     9fc:	20 42 00 ff 	andi r2,r2,0xff
      i2c_putrwaddr (I2C_WRITE, address);
      i2c0->wxrx = subaddress;
     a00:	58 c2 00 04 	sw (r6+4),r2
		}
	}
    //----------------------------------------------------------------
	void i2c_init()
	{
	 i2c0->ucr = I2C_ENA;  
     a04:	34 04 00 08 	mvi r4,8
     a08:	58 c4 00 00 	sw (r6+0),r4
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     a0c:	34 01 03 e8 	mvi r1,1000
     a10:	58 a1 00 10 	sw (r5+16),r1
    timer0->counter1 = 0;
     a14:	34 02 00 00 	mvi r2,0
     a18:	58 a2 00 14 	sw (r5+20),r2
    timer0->tcr1 = TIMER_EN;
     a1c:	58 a4 00 0c 	sw (r5+12),r4
		}
		//-------------------------------------
    }
    //----------------------------------------------------------------
	void I2CwriteByte(uint8_t address, uint8_t subaddress, uint8_t data)
    {
     a20:	20 63 00 ff 	andi r3,r3,0xff
    timer0->counter1 = 0;
    timer0->tcr1 = TIMER_EN;

    do {
        //halt();
         tcr = timer0->tcr1;
     a24:	28 a1 00 0c 	lw r1,(r5+12)
     } while ( ! (tcr & TIMER_TRIG) );
     a28:	20 21 00 01 	andi r1,r1,0x1
     a2c:	44 20 ff fe 	be r1,r0,a24 <I2CwriteByte+0x48>
      i2c_putrwaddr (I2C_WRITE, address);
      i2c0->wxrx = subaddress;
      i2c_init();
      nsleep(20);
	  //Para verificar cuando se valida la condicion
      while((i2c0->ucr & I2C_BUSY));
     a30:	28 c1 00 00 	lw r1,(r6+0)
     a34:	20 22 00 01 	andi r2,r1,0x1
     a38:	5c 40 ff fe 	bne r2,r0,a30 <I2CwriteByte+0x54>
	   //gpio0->oe  = 0x000000ff;
	   //gpio0->out = 0xAA;
      i2c0->wxrx = data;
     a3c:	58 c3 00 04 	sw (r6+4),r3
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     a40:	34 01 03 e8 	mvi r1,1000
     a44:	58 a1 00 10 	sw (r5+16),r1
    timer0->counter1 = 0;
     a48:	58 a2 00 14 	sw (r5+20),r2
    timer0->tcr1 = TIMER_EN;
     a4c:	34 01 00 08 	mvi r1,8
     a50:	58 a1 00 0c 	sw (r5+12),r1

    do {
        //halt();
         tcr = timer0->tcr1;
     a54:	28 a1 00 0c 	lw r1,(r5+12)
     } while ( ! (tcr & TIMER_TRIG) );
     a58:	20 21 00 01 	andi r1,r1,0x1
     a5c:	44 20 ff fe 	be r1,r0,a54 <I2CwriteByte+0x78>
      while((i2c0->ucr & I2C_BUSY));
	   //gpio0->oe  = 0x000000ff;
	   //gpio0->out = 0xAA;
      i2c0->wxrx = data;
      nsleep(20);
	  i2c0->ucr = 0x00;
     a60:	34 01 00 00 	mvi r1,0
     a64:	58 c1 00 00 	sw (r6+0),r1
      while((i2c0->ucr & I2C_BUSY));
     a68:	28 c1 00 00 	lw r1,(r6+0)
     a6c:	20 21 00 01 	andi r1,r1,0x1
     a70:	5c 20 ff fe 	bne r1,r0,a68 <I2CwriteByte+0x8c>
    }
     a74:	c3 a0 00 00 	ret

00000a78 <everloop_putdata_1>:

/***************************************************************************
 * everloop functions
 */
	void everloop_putdata_1(uint8_t data1)
	{
     a78:	78 02 00 00 	mvhi r2,0x0
     a7c:	38 42 40 20 	ori r2,r2,0x4020
     a80:	28 43 00 00 	lw r3,(r2+0)
     a84:	20 21 00 ff 	andi r1,r1,0xff
	  everloop0->prueba_1 = data1;
     a88:	30 61 00 00 	sb (r3+0),r1
	}
     a8c:	c3 a0 00 00 	ret

00000a90 <everloop_putdata_2>:

	void everloop_putdata_2(uint8_t data2)
	{
     a90:	78 02 00 00 	mvhi r2,0x0
     a94:	38 42 40 20 	ori r2,r2,0x4020
     a98:	28 43 00 00 	lw r3,(r2+0)
     a9c:	20 21 00 ff 	andi r1,r1,0xff
	  everloop0->prueba_2 = data2;
     aa0:	30 61 00 01 	sb (r3+1),r1
	}
     aa4:	c3 a0 00 00 	ret

00000aa8 <everloop_putdata_3>:

	void everloop_putdata_3(uint8_t data3)
	{
     aa8:	78 02 00 00 	mvhi r2,0x0
     aac:	38 42 40 20 	ori r2,r2,0x4020
     ab0:	28 43 00 00 	lw r3,(r2+0)
     ab4:	20 21 00 ff 	andi r1,r1,0xff
	  everloop0->prueba_3 = data3;
     ab8:	30 61 00 02 	sb (r3+2),r1
	}
     abc:	c3 a0 00 00 	ret

00000ac0 <spi_init>:
/***************************************************************************
 * SPI Functions
 */
		//---------------------------------------------------------------------
	void spi_init()
	{
     ac0:	78 01 00 00 	mvhi r1,0x0
     ac4:	38 21 40 1c 	ori r1,r1,0x401c
     ac8:	28 23 00 00 	lw r3,(r1+0)
     acc:	34 02 00 04 	mvi r2,4
		spi0-> ucr = SPI_ENA;
		//nsleep(1); //Valido para cuando la frecuencia del reloj del spi es bastante rapida
		spi0-> ucr = !SPI_ENA;
     ad0:	34 01 00 00 	mvi r1,0
 * SPI Functions
 */
		//---------------------------------------------------------------------
	void spi_init()
	{
		spi0-> ucr = SPI_ENA;
     ad4:	58 62 00 00 	sw (r3+0),r2
		//nsleep(1); //Valido para cuando la frecuencia del reloj del spi es bastante rapida
		spi0-> ucr = !SPI_ENA;
     ad8:	58 61 00 00 	sw (r3+0),r1
	}
     adc:	c3 a0 00 00 	ret

00000ae0 <spi_getchar>:
		//---------------------------------------------------------------------
	uint8_t spi_getchar()
	{   
     ae0:	78 01 00 00 	mvhi r1,0x0
     ae4:	38 21 40 1c 	ori r1,r1,0x401c
     ae8:	28 22 00 00 	lw r2,(r1+0)
     aec:	28 41 00 00 	lw r1,(r2+0)
     af0:	20 21 00 01 	andi r1,r1,0x1
     af4:	5c 20 ff fe 	bne r1,r0,aec <spi_getchar+0xc>
		  while (spi0->ucr & SPI_BUSY) ;
		  return spi0->rxtx;
     af8:	28 41 00 04 	lw r1,(r2+4)
	}
     afc:	20 21 00 ff 	andi r1,r1,0xff
     b00:	c3 a0 00 00 	ret

00000b04 <spi_not_ena>:
		//---------------------------------------------------------------------
	void spi_not_ena()
	{
     b04:	78 01 00 00 	mvhi r1,0x0
     b08:	38 21 40 1c 	ori r1,r1,0x401c
     b0c:	28 23 00 00 	lw r3,(r1+0)
     b10:	34 02 00 00 	mvi r2,0
     b14:	58 62 00 00 	sw (r3+0),r2
		spi0->ucr = !SPI_ENA;
	}
     b18:	c3 a0 00 00 	ret

00000b1c <spi_sleep>:
		//---------------------------------------------------------------------
	void spi_sleep()
	{
     b1c:	78 01 00 00 	mvhi r1,0x0
     b20:	38 21 40 1c 	ori r1,r1,0x401c
     b24:	28 22 00 00 	lw r2,(r1+0)
     b28:	28 41 00 00 	lw r1,(r2+0)
     b2c:	20 21 00 01 	andi r1,r1,0x1
     b30:	5c 20 ff fe 	bne r1,r0,b28 <spi_sleep+0xc>
		while ((spi0->ucr & SPI_BUSY));
		spi0->ucr = 0x00;
     b34:	58 41 00 00 	sw (r2+0),r1
	}
     b38:	c3 a0 00 00 	ret

00000b3c <spi_continue>:
		//---------------------------------------------------------------------
	void spi_continue(uint8_t a)
	{
     b3c:	20 23 00 ff 	andi r3,r1,0xff
		if(a) {
     b40:	5c 60 00 06 	bne r3,r0,b58 <spi_continue+0x1c>
		spi0->ucr = SPI_CONT;
		}
		else {
		spi0->ucr = !SPI_CONT;
     b44:	78 01 00 00 	mvhi r1,0x0
     b48:	38 21 40 1c 	ori r1,r1,0x401c
     b4c:	28 22 00 00 	lw r2,(r1+0)
     b50:	58 43 00 00 	sw (r2+0),r3
     b54:	c3 a0 00 00 	ret
	}
		//---------------------------------------------------------------------
	void spi_continue(uint8_t a)
	{
		if(a) {
		spi0->ucr = SPI_CONT;
     b58:	78 01 00 00 	mvhi r1,0x0
     b5c:	38 21 40 1c 	ori r1,r1,0x401c
     b60:	28 23 00 00 	lw r3,(r1+0)
     b64:	34 02 00 08 	mvi r2,8
     b68:	58 62 00 00 	sw (r3+0),r2
     b6c:	c3 a0 00 00 	ret

00000b70 <spi_cont_d>:
		spi0->ucr = !SPI_CONT;
		}
	}
		//---------------------------------------------------------------------
	void spi_cont_d(char data)
	{
     b70:	78 02 00 00 	mvhi r2,0x0
     b74:	38 42 40 1c 	ori r2,r2,0x401c
     b78:	28 43 00 00 	lw r3,(r2+0)
     b7c:	34 02 00 08 	mvi r2,8
     b80:	20 21 00 ff 	andi r1,r1,0xff
		spi0->ucr = SPI_CONT;
     b84:	58 62 00 00 	sw (r3+0),r2
		spi0->rxtx = data;
     b88:	58 61 00 04 	sw (r3+4),r1
	}
     b8c:	c3 a0 00 00 	ret

00000b90 <spi_putchar>:
		//---------------------------------------------------------------------
	void spi_putchar(char c)
	{
     b90:	78 02 00 00 	mvhi r2,0x0
     b94:	38 42 40 1c 	ori r2,r2,0x401c
     b98:	28 42 00 00 	lw r2,(r2+0)
     b9c:	20 23 00 ff 	andi r3,r1,0xff
		  while (spi0->ucr & SPI_BUSY) ;
     ba0:	28 41 00 00 	lw r1,(r2+0)
     ba4:	20 21 00 01 	andi r1,r1,0x1
     ba8:	5c 20 ff fe 	bne r1,r0,ba0 <spi_putchar+0x10>
		  spi0->rxtx = c;
     bac:	58 43 00 04 	sw (r2+4),r3
	}
     bb0:	c3 a0 00 00 	ret

00000bb4 <spi_putstr>:
		//---------------------------------------------------------------------
	void spi_putstr(char *str)
	{
     bb4:	b8 20 10 00 	mv r2,r1
		  char *c = str;
		  while(*c) {
     bb8:	40 21 00 00 	lbu r1,(r1+0)
     bbc:	44 20 00 0f 	be r1,r0,bf8 <spi_putstr+0x44>
	}
		//---------------------------------------------------------------------
	void spi_continue(uint8_t a)
	{
		if(a) {
		spi0->ucr = SPI_CONT;
     bc0:	78 01 00 00 	mvhi r1,0x0
     bc4:	38 21 40 1c 	ori r1,r1,0x401c
     bc8:	28 23 00 00 	lw r3,(r1+0)
     bcc:	b8 40 20 00 	mv r4,r2
     bd0:	34 06 00 08 	mvi r6,8
     bd4:	58 66 00 00 	sw (r3+0),r6
	void spi_putstr(char *str)
	{
		  char *c = str;
		  while(*c) {
					spi_continue(0x01);
		      spi_putchar(*c);
     bd8:	40 85 00 00 	lbu r5,(r4+0)
		spi0->rxtx = data;
	}
		//---------------------------------------------------------------------
	void spi_putchar(char c)
	{
		  while (spi0->ucr & SPI_BUSY) ;
     bdc:	28 61 00 00 	lw r1,(r3+0)
     be0:	20 22 00 01 	andi r2,r1,0x1
     be4:	5c 40 ff fe 	bne r2,r0,bdc <spi_putstr+0x28>
		  spi0->rxtx = c;
     be8:	58 65 00 04 	sw (r3+4),r5
	{
		  char *c = str;
		  while(*c) {
					spi_continue(0x01);
		      spi_putchar(*c);
		      c++;
     bec:	34 84 00 01 	addi r4,r4,1
	}
		//---------------------------------------------------------------------
	void spi_putstr(char *str)
	{
		  char *c = str;
		  while(*c) {
     bf0:	40 81 00 00 	lbu r1,(r4+0)
     bf4:	5c 22 ff f8 	bne r1,r2,bd4 <spi_putstr+0x20>
     bf8:	c3 a0 00 00 	ret

00000bfc <setmotor1>:
/***************************************************************************
 * PWM Functions
 */
    //----------------------------------------------------------------
	uint8_t setmotor1(uint8_t bit)
	{
     bfc:	78 02 00 00 	mvhi r2,0x0
     c00:	38 42 40 28 	ori r2,r2,0x4028
     c04:	28 44 00 00 	lw r4,(r2+0)
     c08:	20 23 00 ff 	andi r3,r1,0xff
		uint8_t val0=bit;
		pwm0->duty_m1=val0;
		return val0;
	
	}
     c0c:	b8 60 08 00 	mv r1,r3
 */
    //----------------------------------------------------------------
	uint8_t setmotor1(uint8_t bit)
	{
		uint8_t val0=bit;
		pwm0->duty_m1=val0;
     c10:	58 83 00 04 	sw (r4+4),r3
		return val0;
	
	}
     c14:	c3 a0 00 00 	ret

00000c18 <setmotor2>:
    //----------------------------------------------------------------
	uint8_t setmotor2(uint8_t bit)
	{
     c18:	78 02 00 00 	mvhi r2,0x0
     c1c:	38 42 40 28 	ori r2,r2,0x4028
     c20:	28 44 00 00 	lw r4,(r2+0)
     c24:	20 23 00 ff 	andi r3,r1,0xff
		uint8_t val0=bit;
		pwm0-> duty_m2=val0;
		return val0;
	}
     c28:	b8 60 08 00 	mv r1,r3
	}
    //----------------------------------------------------------------
	uint8_t setmotor2(uint8_t bit)
	{
		uint8_t val0=bit;
		pwm0-> duty_m2=val0;
     c2c:	58 83 00 08 	sw (r4+8),r3
		return val0;
	}
     c30:	c3 a0 00 00 	ret

00000c34 <setmotor3>:
    //----------------------------------------------------------------
	uint8_t setmotor3(uint8_t bit)
	{
     c34:	78 02 00 00 	mvhi r2,0x0
     c38:	38 42 40 28 	ori r2,r2,0x4028
     c3c:	28 44 00 00 	lw r4,(r2+0)
     c40:	20 23 00 ff 	andi r3,r1,0xff
		uint8_t val0=bit;
		pwm0-> duty_m3=val0;
		return val0;
	}
     c44:	b8 60 08 00 	mv r1,r3
	}
    //----------------------------------------------------------------
	uint8_t setmotor3(uint8_t bit)
	{
		uint8_t val0=bit;
		pwm0-> duty_m3=val0;
     c48:	58 83 00 0c 	sw (r4+12),r3
		return val0;
	}
     c4c:	c3 a0 00 00 	ret

00000c50 <setmotor4>:
    //----------------------------------------------------------------
	uint8_t setmotor4(uint8_t bit)
	{
     c50:	78 02 00 00 	mvhi r2,0x0
     c54:	38 42 40 28 	ori r2,r2,0x4028
     c58:	28 44 00 00 	lw r4,(r2+0)
     c5c:	20 23 00 ff 	andi r3,r1,0xff
		uint8_t val0=bit;
		pwm0-> duty_m4=val0;
		return val0;
	}
     c60:	b8 60 08 00 	mv r1,r3
	}
    //----------------------------------------------------------------
	uint8_t setmotor4(uint8_t bit)
	{
		uint8_t val0=bit;
		pwm0-> duty_m4=val0;
     c64:	58 83 00 10 	sw (r4+16),r3
		return val0;
	}
     c68:	c3 a0 00 00 	ret

00000c6c <pwm_init>:
    //----------------------------------------------------------------
	void pwm_init(void)
	{
     c6c:	78 01 00 00 	mvhi r1,0x0
     c70:	38 21 40 28 	ori r1,r1,0x4028
     c74:	28 23 00 00 	lw r3,(r1+0)
     c78:	34 02 00 01 	mvi r2,1
     c7c:	58 62 00 00 	sw (r3+0),r2
			pwm0->enable=TRUE;
	}
     c80:	c3 a0 00 00 	ret

00000c84 <set_pwm>:
    //----------------------------------------------------------------
	void set_pwm(uint8_t state)
	{
     c84:	20 23 00 ff 	andi r3,r1,0xff
		if(state == HIGH){
     c88:	34 01 00 01 	mvi r1,1
     c8c:	44 61 00 07 	be r3,r1,ca8 <set_pwm+0x24>
			pwm0->enable=TRUE;
		}else if(state ==LOW){
     c90:	5c 60 00 05 	bne r3,r0,ca4 <set_pwm+0x20>
			pwm0->enable=FALSE;
     c94:	78 01 00 00 	mvhi r1,0x0
     c98:	38 21 40 28 	ori r1,r1,0x4028
     c9c:	28 22 00 00 	lw r2,(r1+0)
     ca0:	58 43 00 00 	sw (r2+0),r3
     ca4:	c3 a0 00 00 	ret
	}
    //----------------------------------------------------------------
	void set_pwm(uint8_t state)
	{
		if(state == HIGH){
			pwm0->enable=TRUE;
     ca8:	78 01 00 00 	mvhi r1,0x0
     cac:	38 21 40 28 	ori r1,r1,0x4028
     cb0:	28 22 00 00 	lw r2,(r1+0)
     cb4:	58 43 00 00 	sw (r2+0),r3
     cb8:	c3 a0 00 00 	ret

00000cbc <estimateDiv64To32>:
the exact quotient q is larger than 32 bits, the maximum positive 32-bit
unsigned integer is returned.
-------------------------------------------------------------------------------
*/
static bits32 estimateDiv64To32( bits32 a0, bits32 a1, bits32 b )
{
     cbc:	37 9c ff f0 	addi sp,sp,-16
     cc0:	5b 8b 00 10 	sw (sp+16),r11
     cc4:	5b 8c 00 0c 	sw (sp+12),r12
     cc8:	5b 8d 00 08 	sw (sp+8),r13
     ccc:	5b 8e 00 04 	sw (sp+4),r14
     cd0:	b8 20 38 00 	mv r7,r1
     cd4:	b8 60 60 00 	mv r12,r3
     cd8:	b8 40 68 00 	mv r13,r2
    bits32 b0, b1;
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
     cdc:	54 61 00 08 	bgu r3,r1,cfc <estimateDiv64To32+0x40>
     ce0:	34 01 ff ff 	mvi r1,-1
    }
    rem0 = ( rem0<<16 ) | ( rem1>>16 );
    z |= ( b0<<16 <= rem0 ) ? 0xFFFF : rem0 / b0;
    return z;

}
     ce4:	2b 8b 00 10 	lw r11,(sp+16)
     ce8:	2b 8c 00 0c 	lw r12,(sp+12)
     cec:	2b 8d 00 08 	lw r13,(sp+8)
     cf0:	2b 8e 00 04 	lw r14,(sp+4)
     cf4:	37 9c 00 10 	addi sp,sp,16
     cf8:	c3 a0 00 00 	ret
    bits32 b0, b1;
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
     cfc:	00 69 00 10 	srui r9,r3,16
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
     d00:	3d 2e 00 10 	sli r14,r9,16
     d04:	55 c1 00 2f 	bgu r14,r1,dc0 <estimateDiv64To32+0x104>
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
     d08:	20 61 ff ff 	andi r1,r3,0xffff
     d0c:	3c 22 00 10 	sli r2,r1,16
     d10:	34 0b 00 00 	mvi r11,0
     d14:	78 08 ff ff 	mvhi r8,0xffff
     d18:	c8 41 28 00 	sub r5,r2,r1
     d1c:	39 08 00 00 	ori r8,r8,0x0
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
     d20:	21 2a ff ff 	andi r10,r9,0xffff
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
     d24:	b9 60 20 00 	mv r4,r11
     d28:	38 06 ff ff 	mvu r6,0xffff
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
     d2c:	3c a2 00 10 	sli r2,r5,16
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
     d30:	89 46 08 00 	mul r1,r10,r6
    zMiddleA <<= 16;
    z1 += zMiddleA;
     d34:	b4 44 18 00 	add r3,r2,r4
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
     d38:	00 a5 00 10 	srui r5,r5,16
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
     d3c:	f4 43 10 00 	cmpgu r2,r2,r3
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
     d40:	c8 e1 08 00 	sub r1,r7,r1
     d44:	c8 25 08 00 	sub r1,r1,r5
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
     d48:	f4 6d 20 00 	cmpgu r4,r3,r13
     d4c:	c8 22 08 00 	sub r1,r1,r2
     d50:	c8 24 08 00 	sub r1,r1,r4
     d54:	c8 2b 28 00 	sub r5,r1,r11
INLINE void
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
     d58:	c9 a3 10 00 	sub r2,r13,r3
    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    mul32To64( b, z, &term0, &term1 );
    sub64( a0, a1, term0, term1, &rem0, &rem1 );
    while ( ( (sbits32) rem0 ) < 0 ) {
     d5c:	4c a0 00 0d 	bge r5,r0,d90 <estimateDiv64To32+0xd4>
     d60:	78 07 ff ff 	mvhi r7,0xffff
     d64:	3d 83 00 10 	sli r3,r12,16
        z -= 0x10000;
     d68:	38 e7 00 00 	ori r7,r7,0x0
 add64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{
    bits32 z1;

    z1 = a1 + b1;
     d6c:	b4 43 30 00 	add r6,r2,r3
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
     d70:	f4 46 08 00 	cmpgu r1,r2,r6
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    mul32To64( b, z, &term0, &term1 );
    sub64( a0, a1, term0, term1, &rem0, &rem1 );
    while ( ( (sbits32) rem0 ) < 0 ) {
        z -= 0x10000;
     d74:	b5 07 40 00 	add r8,r8,r7
{
    bits32 z1;

    z1 = a1 + b1;
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
     d78:	b4 29 08 00 	add r1,r1,r9
     d7c:	b4 a1 28 00 	add r5,r5,r1
    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    mul32To64( b, z, &term0, &term1 );
    sub64( a0, a1, term0, term1, &rem0, &rem1 );
    while ( ( (sbits32) rem0 ) < 0 ) {
     d80:	b8 c0 10 00 	mv r2,r6
     d84:	4c a0 00 02 	bge r5,r0,d8c <estimateDiv64To32+0xd0>
     d88:	e3 ff ff f9 	bi d6c <estimateDiv64To32+0xb0>
     d8c:	b8 c0 10 00 	mv r2,r6
        z -= 0x10000;
        b1 = b<<16;
        add64( rem0, rem1, b0, b1, &rem0, &rem1 );
    }
    rem0 = ( rem0<<16 ) | ( rem1>>16 );
     d90:	00 42 00 10 	srui r2,r2,16
     d94:	3c a1 00 10 	sli r1,r5,16
     d98:	b8 41 08 00 	or r1,r2,r1
    z |= ( b0<<16 <= rem0 ) ? 0xFFFF : rem0 / b0;
     d9c:	55 c1 00 19 	bgu r14,r1,e00 <estimateDiv64To32+0x144>
     da0:	38 01 ff ff 	mvu r1,0xffff
     da4:	b8 28 08 00 	or r1,r1,r8
    return z;

}
     da8:	2b 8b 00 10 	lw r11,(sp+16)
     dac:	2b 8c 00 0c 	lw r12,(sp+12)
     db0:	2b 8d 00 08 	lw r13,(sp+8)
     db4:	2b 8e 00 04 	lw r14,(sp+4)
     db8:	37 9c 00 10 	addi sp,sp,16
     dbc:	c3 a0 00 00 	ret
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
     dc0:	8c 29 08 00 	divu r1,r1,r9
     dc4:	20 64 ff ff 	andi r4,r3,0xffff
     dc8:	3c 28 00 10 	sli r8,r1,16
     dcc:	21 2a ff ff 	andi r10,r9,0xffff
     dd0:	01 06 00 10 	srui r6,r8,16
     dd4:	21 01 ff ff 	andi r1,r8,0xffff
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
     dd8:	88 86 10 00 	mul r2,r4,r6
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
     ddc:	88 2a 18 00 	mul r3,r1,r10
     de0:	88 24 20 00 	mul r4,r1,r4
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
     de4:	b4 43 28 00 	add r5,r2,r3
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
     de8:	54 65 00 03 	bgu r3,r5,df4 <estimateDiv64To32+0x138>
     dec:	34 0b 00 00 	mvi r11,0
     df0:	e3 ff ff cf 	bi d2c <estimateDiv64To32+0x70>
     df4:	78 0b 00 01 	mvhi r11,0x1
     df8:	39 6b 00 00 	ori r11,r11,0x0
     dfc:	e3 ff ff cc 	bi d2c <estimateDiv64To32+0x70>
        z -= 0x10000;
        b1 = b<<16;
        add64( rem0, rem1, b0, b1, &rem0, &rem1 );
    }
    rem0 = ( rem0<<16 ) | ( rem1>>16 );
    z |= ( b0<<16 <= rem0 ) ? 0xFFFF : rem0 / b0;
     e00:	8c 29 08 00 	divu r1,r1,r9
     e04:	b8 28 08 00 	or r1,r1,r8
     e08:	e3 ff ff e8 	bi da8 <estimateDiv64To32+0xec>

00000e0c <float_raise>:
substitute a result value.  If traps are not implemented, this routine
should be simply `float_exception_flags |= flags;'.
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{
     e0c:	78 02 00 00 	mvhi r2,0x0
     e10:	38 42 40 3c 	ori r2,r2,0x403c
     e14:	28 43 00 00 	lw r3,(r2+0)
     e18:	b8 23 08 00 	or r1,r1,r3
     e1c:	58 41 00 00 	sw (r2+0),r1

    float_exception_flags |= flags;

}
     e20:	c3 a0 00 00 	ret

00000e24 <float32_is_nan>:
Returns 1 if the single-precision floating-point value `a' is a NaN;
otherwise returns 0.
-------------------------------------------------------------------------------
*/
flag float32_is_nan( float32 a )
{
     e24:	78 02 ff 00 	mvhi r2,0xff00
     e28:	38 42 00 00 	ori r2,r2,0x0
     e2c:	b4 21 08 00 	add r1,r1,r1

    return ( 0xFF000000 < (bits32) ( a<<1 ) );

}
     e30:	f4 22 08 00 	cmpgu r1,r1,r2
     e34:	c3 a0 00 00 	ret

00000e38 <float32_is_signaling_nan>:
Returns 1 if the single-precision floating-point value `a' is a signaling
NaN; otherwise returns 0.
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{
     e38:	b8 20 20 00 	mv r4,r1

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     e3c:	00 21 00 16 	srui r1,r1,22
     e40:	34 02 01 fe 	mvi r2,510
     e44:	20 21 01 ff 	andi r1,r1,0x1ff
     e48:	34 03 00 00 	mvi r3,0
     e4c:	44 22 00 03 	be r1,r2,e58 <float32_is_signaling_nan+0x20>

}
     e50:	b8 60 08 00 	mv r1,r3
     e54:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     e58:	78 01 00 3f 	mvhi r1,0x3f
     e5c:	38 21 ff ff 	ori r1,r1,0xffff
     e60:	a0 81 08 00 	and r1,r4,r1
     e64:	7c 23 00 00 	cmpnei r3,r1,0

}
     e68:	b8 60 08 00 	mv r1,r3
     e6c:	c3 a0 00 00 	ret

00000e70 <propagateFloat32NaN>:
is a NaN, and returns the appropriate NaN result.  If either `a' or `b' is a
signaling NaN, the invalid exception is raised.
-------------------------------------------------------------------------------
*/
static float32 propagateFloat32NaN( float32 a, float32 b )
{
     e70:	00 23 00 16 	srui r3,r1,22
     e74:	b8 20 30 00 	mv r6,r1
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     e78:	20 63 01 ff 	andi r3,r3,0x1ff
     e7c:	34 01 01 fe 	mvi r1,510
is a NaN, and returns the appropriate NaN result.  If either `a' or `b' is a
signaling NaN, the invalid exception is raised.
-------------------------------------------------------------------------------
*/
static float32 propagateFloat32NaN( float32 a, float32 b )
{
     e80:	b8 40 20 00 	mv r4,r2
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     e84:	34 07 00 00 	mvi r7,0
     e88:	44 61 00 24 	be r3,r1,f18 <propagateFloat32NaN+0xa8>
    aIsNaN = float32_is_nan( a );
    aIsSignalingNaN = float32_is_signaling_nan( a );
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
    b |= 0x00400000;
     e8c:	00 81 00 16 	srui r1,r4,22
     e90:	34 02 01 fe 	mvi r2,510
     e94:	20 21 01 ff 	andi r1,r1,0x1ff
     e98:	34 03 00 00 	mvi r3,0
     e9c:	44 22 00 1a 	be r1,r2,f04 <propagateFloat32NaN+0x94>
     ea0:	78 05 00 40 	mvhi r5,0x40
     ea4:	b8 a0 08 00 	mv r1,r5
    if ( aIsSignalingNaN | bIsSignalingNaN ) float_raise( float_flag_invalid );
     ea8:	b8 67 10 00 	or r2,r3,r7
    aIsNaN = float32_is_nan( a );
    aIsSignalingNaN = float32_is_signaling_nan( a );
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
    b |= 0x00400000;
     eac:	38 21 00 00 	ori r1,r1,0x0
     eb0:	b8 81 18 00 	or r3,r4,r1
    if ( aIsSignalingNaN | bIsSignalingNaN ) float_raise( float_flag_invalid );
     eb4:	44 40 00 06 	be r2,r0,ecc <propagateFloat32NaN+0x5c>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
     eb8:	78 02 00 00 	mvhi r2,0x0
     ebc:	38 42 40 3c 	ori r2,r2,0x403c
     ec0:	28 41 00 00 	lw r1,(r2+0)
     ec4:	38 21 00 10 	ori r1,r1,0x10
     ec8:	58 41 00 00 	sw (r2+0),r1
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
    b |= 0x00400000;
    if ( aIsSignalingNaN | bIsSignalingNaN ) float_raise( float_flag_invalid );
    if ( aIsNaN ) {
     ecc:	78 02 ff 00 	mvhi r2,0xff00
     ed0:	38 42 00 00 	ori r2,r2,0x0
     ed4:	b4 c6 08 00 	add r1,r6,r6
     ed8:	50 41 00 05 	bgeu r2,r1,eec <propagateFloat32NaN+0x7c>
        return ( aIsSignalingNaN & bIsNaN ) ? b : a;
     edc:	b4 84 08 00 	add r1,r4,r4
     ee0:	f4 22 08 00 	cmpgu r1,r1,r2
     ee4:	a0 e1 08 00 	and r1,r7,r1
     ee8:	44 20 00 03 	be r1,r0,ef4 <propagateFloat32NaN+0x84>
    }
    else {
        return b;
    }

}
     eec:	b8 60 08 00 	mv r1,r3
     ef0:	c3 a0 00 00 	ret

    aIsNaN = float32_is_nan( a );
    aIsSignalingNaN = float32_is_signaling_nan( a );
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
     ef4:	38 a5 00 00 	ori r5,r5,0x0
     ef8:	b8 c5 18 00 	or r3,r6,r5
    }
    else {
        return b;
    }

}
     efc:	b8 60 08 00 	mv r1,r3
     f00:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     f04:	78 01 00 3f 	mvhi r1,0x3f
     f08:	38 21 ff ff 	ori r1,r1,0xffff
     f0c:	a0 81 08 00 	and r1,r4,r1
     f10:	7c 23 00 00 	cmpnei r3,r1,0
     f14:	e3 ff ff e3 	bi ea0 <propagateFloat32NaN+0x30>
     f18:	78 01 00 3f 	mvhi r1,0x3f
     f1c:	38 21 ff ff 	ori r1,r1,0xffff
     f20:	a0 c1 08 00 	and r1,r6,r1
     f24:	7c 27 00 00 	cmpnei r7,r1,0
     f28:	e3 ff ff d9 	bi e8c <propagateFloat32NaN+0x1c>

00000f2c <roundAndPackFloat32>:
The handling of underflow and overflow follows the IEC/IEEE Standard for
Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 roundAndPackFloat32( flag zSign, int16 zExp, bits32 zSig )
{
     f2c:	78 04 00 00 	mvhi r4,0x0
     f30:	38 84 40 38 	ori r4,r4,0x4038
     f34:	28 84 00 00 	lw r4,(r4+0)
     f38:	b8 20 48 00 	mv r9,r1
     f3c:	b8 40 30 00 	mv r6,r2
    flag roundNearestEven;
    int8 roundIncrement, roundBits;
    flag isTiny;

    roundingMode = float_rounding_mode;
    roundNearestEven = roundingMode == float_round_nearest_even;
     f40:	64 88 00 00 	cmpei r8,r4,0
The handling of underflow and overflow follows the IEC/IEEE Standard for
Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 roundAndPackFloat32( flag zSign, int16 zExp, bits32 zSig )
{
     f44:	b8 60 38 00 	mv r7,r3
    flag isTiny;

    roundingMode = float_rounding_mode;
    roundNearestEven = roundingMode == float_round_nearest_even;
    roundIncrement = 0x40;
    if ( ! roundNearestEven ) {
     f48:	34 05 00 40 	mvi r5,64
     f4c:	5d 00 00 07 	bne r8,r0,f68 <roundAndPackFloat32+0x3c>
        if ( roundingMode == float_round_to_zero ) {
     f50:	34 01 00 01 	mvi r1,1
     f54:	44 81 00 37 	be r4,r1,1030 <roundAndPackFloat32+0x104>
            roundIncrement = 0;
        }
        else {
            roundIncrement = 0x7F;
            if ( zSign ) {
     f58:	45 28 00 34 	be r9,r8,1028 <roundAndPackFloat32+0xfc>
                if ( roundingMode == float_round_up ) roundIncrement = 0;
     f5c:	34 01 00 02 	mvi r1,2
     f60:	44 81 00 34 	be r4,r1,1030 <roundAndPackFloat32+0x104>
            }
            else {
                if ( roundingMode == float_round_down ) roundIncrement = 0;
     f64:	34 05 00 7f 	mvi r5,127
            }
        }
    }
    roundBits = zSig & 0x7F;
    if ( 0xFD <= (bits16) zExp ) {
     f68:	20 c2 ff ff 	andi r2,r6,0xffff
     f6c:	34 01 00 fc 	mvi r1,252
            else {
                if ( roundingMode == float_round_down ) roundIncrement = 0;
            }
        }
    }
    roundBits = zSig & 0x7F;
     f70:	20 e3 00 7f 	andi r3,r7,0x7f
     f74:	b4 a7 20 00 	add r4,r5,r7
    if ( 0xFD <= (bits16) zExp ) {
     f78:	50 22 00 05 	bgeu r1,r2,f8c <roundAndPackFloat32+0x60>
        if (    ( 0xFD < zExp )
     f7c:	34 01 00 fd 	mvi r1,253
     f80:	48 c1 00 1e 	bg r6,r1,ff8 <roundAndPackFloat32+0xcc>
     f84:	44 c1 00 1c 	be r6,r1,ff4 <roundAndPackFloat32+0xc8>
                  && ( (sbits32) ( zSig + roundIncrement ) < 0 ) )
           ) {
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
        }
        if ( zExp < 0 ) {
     f88:	48 06 00 2c 	bg r0,r6,1038 <roundAndPackFloat32+0x10c>
            zExp = 0;
            roundBits = zSig & 0x7F;
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
        }
    }
    if ( roundBits ) float_exception_flags |= float_flag_inexact;
     f8c:	5c 60 00 0d 	bne r3,r0,fc0 <roundAndPackFloat32+0x94>
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
     f90:	64 61 00 40 	cmpei r1,r3,64
     f94:	00 82 00 07 	srui r2,r4,7
     f98:	a0 28 08 00 	and r1,r1,r8
     f9c:	a4 20 08 00 	not r1,r1
     fa0:	a0 22 10 00 	and r2,r1,r2
    if ( zSig == 0 ) zExp = 0;
     fa4:	3c c3 00 17 	sli r3,r6,23
     fa8:	5c 40 00 02 	bne r2,r0,fb0 <roundAndPackFloat32+0x84>
     fac:	b8 40 18 00 	mv r3,r2
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
     fb0:	3d 21 00 1f 	sli r1,r9,31
     fb4:	b4 41 08 00 	add r1,r2,r1
     fb8:	b4 23 08 00 	add r1,r1,r3
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
    if ( zSig == 0 ) zExp = 0;
    return packFloat32( zSign, zExp, zSig );

}
     fbc:	c3 a0 00 00 	ret
     fc0:	78 02 00 00 	mvhi r2,0x0
     fc4:	38 42 40 3c 	ori r2,r2,0x403c
            zExp = 0;
            roundBits = zSig & 0x7F;
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
        }
    }
    if ( roundBits ) float_exception_flags |= float_flag_inexact;
     fc8:	28 41 00 00 	lw r1,(r2+0)
     fcc:	38 21 00 01 	ori r1,r1,0x1
     fd0:	58 41 00 00 	sw (r2+0),r1
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
     fd4:	64 61 00 40 	cmpei r1,r3,64
     fd8:	00 82 00 07 	srui r2,r4,7
     fdc:	a0 28 08 00 	and r1,r1,r8
     fe0:	a4 20 08 00 	not r1,r1
     fe4:	a0 22 10 00 	and r2,r1,r2
    if ( zSig == 0 ) zExp = 0;
     fe8:	3c c3 00 17 	sli r3,r6,23
     fec:	5c 40 ff f1 	bne r2,r0,fb0 <roundAndPackFloat32+0x84>
     ff0:	e3 ff ff ef 	bi fac <roundAndPackFloat32+0x80>
            }
        }
    }
    roundBits = zSig & 0x7F;
    if ( 0xFD <= (bits16) zExp ) {
        if (    ( 0xFD < zExp )
     ff4:	4c 80 ff e6 	bge r4,r0,f8c <roundAndPackFloat32+0x60>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
     ff8:	78 04 00 00 	mvhi r4,0x0
     ffc:	38 84 40 3c 	ori r4,r4,0x403c
    1000:	28 82 00 00 	lw r2,(r4+0)
             || (    ( zExp == 0xFD )
                  && ( (sbits32) ( zSig + roundIncrement ) < 0 ) )
           ) {
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
    1004:	3d 23 00 1f 	sli r3,r9,31
    1008:	78 01 7f 80 	mvhi r1,0x7f80
    100c:	38 21 00 00 	ori r1,r1,0x0
    1010:	64 a5 00 00 	cmpei r5,r5,0
    1014:	b4 61 18 00 	add r3,r3,r1
    1018:	38 42 00 09 	ori r2,r2,0x9
    101c:	58 82 00 00 	sw (r4+0),r2
    1020:	c8 65 08 00 	sub r1,r3,r5
    1024:	c3 a0 00 00 	ret
            roundIncrement = 0x7F;
            if ( zSign ) {
                if ( roundingMode == float_round_up ) roundIncrement = 0;
            }
            else {
                if ( roundingMode == float_round_down ) roundIncrement = 0;
    1028:	34 01 00 03 	mvi r1,3
    102c:	5c 81 ff ce 	bne r4,r1,f64 <roundAndPackFloat32+0x38>
    1030:	34 05 00 00 	mvi r5,0
    1034:	e3 ff ff cd 	bi f68 <roundAndPackFloat32+0x3c>
           ) {
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
        }
        if ( zExp < 0 ) {
            isTiny =
    1038:	78 01 00 00 	mvhi r1,0x0
    103c:	38 21 40 40 	ori r1,r1,0x4040
    1040:	28 22 00 00 	lw r2,(r1+0)
    1044:	34 03 ff ff 	mvi r3,-1
    1048:	e8 66 18 00 	cmpg r3,r3,r6
    104c:	64 42 00 01 	cmpei r2,r2,1
    1050:	34 0a 00 01 	mvi r10,1
    1054:	b8 43 10 00 	or r2,r2,r3
    1058:	5c 40 00 02 	bne r2,r0,1060 <roundAndPackFloat32+0x134>
    105c:	6c 8a 00 00 	cmpgei r10,r4,0
                   ( float_detect_tininess == float_tininess_before_rounding )
                || ( zExp < -1 )
                || ( zSig + roundIncrement < 0x80000000 );
            shift32RightJamming( zSig, - zExp, &zSig );
    1060:	c8 06 10 00 	sub r2,r0,r6
    bits32 z;

    if ( count == 0 ) {
        z = a;
    }
    else if ( count < 32 ) {
    1064:	34 01 00 1f 	mvi r1,31
    1068:	48 41 00 06 	bg r2,r1,1080 <roundAndPackFloat32+0x154>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    106c:	bc e6 08 00 	sl r1,r7,r6
    1070:	80 e2 10 00 	sru r2,r7,r2
    1074:	7c 21 00 00 	cmpnei r1,r1,0
    1078:	b8 22 38 00 	or r7,r1,r2
    107c:	e0 00 00 02 	bi 1084 <roundAndPackFloat32+0x158>
    }
    else {
        z = ( a != 0 );
    1080:	7c e7 00 00 	cmpnei r7,r7,0
            zExp = 0;
            roundBits = zSig & 0x7F;
    1084:	20 e3 00 7f 	andi r3,r7,0x7f
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
    1088:	7c 61 00 00 	cmpnei r1,r3,0
    108c:	b4 a7 20 00 	add r4,r5,r7
    1090:	a1 41 08 00 	and r1,r10,r1
    1094:	b8 20 30 00 	mv r6,r1
    1098:	44 20 ff bd 	be r1,r0,f8c <roundAndPackFloat32+0x60>
    109c:	78 02 00 00 	mvhi r2,0x0
    10a0:	38 42 40 3c 	ori r2,r2,0x403c
    10a4:	28 41 00 00 	lw r1,(r2+0)
    10a8:	b4 a7 20 00 	add r4,r5,r7
    10ac:	34 06 00 00 	mvi r6,0
    10b0:	38 21 00 04 	ori r1,r1,0x4
    10b4:	58 41 00 00 	sw (r2+0),r1
    10b8:	e3 ff ff c4 	bi fc8 <roundAndPackFloat32+0x9c>

000010bc <normalizeRoundAndPackFloat32>:
point exponent.
-------------------------------------------------------------------------------
*/
static float32
 normalizeRoundAndPackFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    10bc:	37 9c ff fc 	addi sp,sp,-4
    10c0:	5b 9d 00 04 	sw (sp+4),ra
    10c4:	b8 20 30 00 	mv r6,r1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    10c8:	38 01 ff ff 	mvu r1,0xffff
    10cc:	b8 40 38 00 	mv r7,r2
    10d0:	b8 60 28 00 	mv r5,r3
        shiftCount += 16;
        a <<= 16;
    10d4:	3c 62 00 10 	sli r2,r3,16
    10d8:	34 04 00 10 	mvi r4,16
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    10dc:	50 23 00 03 	bgeu r1,r3,10e8 <normalizeRoundAndPackFloat32+0x2c>
    10e0:	b8 60 10 00 	mv r2,r3
    10e4:	34 04 00 00 	mvi r4,0
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    10e8:	78 01 00 ff 	mvhi r1,0xff
    10ec:	38 21 ff ff 	ori r1,r1,0xffff
    10f0:	54 41 00 03 	bgu r2,r1,10fc <normalizeRoundAndPackFloat32+0x40>
        shiftCount += 8;
        a <<= 8;
    10f4:	3c 42 00 08 	sli r2,r2,8
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
    10f8:	34 84 00 08 	addi r4,r4,8
    int8 shiftCount;
	
    shiftCount = countLeadingZeros32( zSig ) - 1;
    10fc:	00 42 00 18 	srui r2,r2,24
    1100:	78 01 00 00 	mvhi r1,0x0
    1104:	3c 42 00 02 	sli r2,r2,2
    1108:	38 21 3b 80 	ori r1,r1,0x3b80
    110c:	b4 22 08 00 	add r1,r1,r2
    1110:	28 23 00 00 	lw r3,(r1+0)
    1114:	34 82 ff ff 	addi r2,r4,-1
    return roundAndPackFloat32( zSign, zExp - shiftCount, zSig<<shiftCount );
    1118:	b8 c0 08 00 	mv r1,r6
static float32
 normalizeRoundAndPackFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    int8 shiftCount;
	
    shiftCount = countLeadingZeros32( zSig ) - 1;
    111c:	b4 43 10 00 	add r2,r2,r3
    return roundAndPackFloat32( zSign, zExp - shiftCount, zSig<<shiftCount );
    1120:	bc a2 18 00 	sl r3,r5,r2
    1124:	c8 e2 10 00 	sub r2,r7,r2
    1128:	fb ff ff 81 	calli f2c <roundAndPackFloat32>

}
    112c:	2b 9d 00 04 	lw ra,(sp+4)
    1130:	37 9c 00 04 	addi sp,sp,4
    1134:	c3 a0 00 00 	ret

00001138 <int32_to_float32>:
the single-precision floating-point format.  The conversion is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 int32_to_float32( int32 a )
{
    1138:	37 9c ff fc 	addi sp,sp,-4
    113c:	5b 9d 00 04 	sw (sp+4),ra
    1140:	b8 20 18 00 	mv r3,r1
    flag zSign;

    if ( a == 0 ) return 0;
    1144:	44 60 00 09 	be r3,r0,1168 <int32_to_float32+0x30>
    if ( a == 0x80000000 ) return packFloat32( 1, 0x9E, 0 );
    1148:	78 01 80 00 	mvhi r1,0x8000
    114c:	38 21 00 00 	ori r1,r1,0x0
    1150:	44 61 00 09 	be r3,r1,1174 <int32_to_float32+0x3c>
    zSign = ( a < 0 );
    1154:	00 61 00 1f 	srui r1,r3,31
    return normalizeRoundAndPackFloat32( zSign, 0x9C, zSign ? - a : a );
    1158:	44 20 00 02 	be r1,r0,1160 <int32_to_float32+0x28>
    115c:	c8 03 18 00 	sub r3,r0,r3
    1160:	34 02 00 9c 	mvi r2,156
    1164:	fb ff ff d6 	calli 10bc <normalizeRoundAndPackFloat32>

}
    1168:	2b 9d 00 04 	lw ra,(sp+4)
    116c:	37 9c 00 04 	addi sp,sp,4
    1170:	c3 a0 00 00 	ret
float32 int32_to_float32( int32 a )
{
    flag zSign;

    if ( a == 0 ) return 0;
    if ( a == 0x80000000 ) return packFloat32( 1, 0x9E, 0 );
    1174:	78 01 cf 00 	mvhi r1,0xcf00
    1178:	38 21 00 00 	ori r1,r1,0x0
    zSign = ( a < 0 );
    return normalizeRoundAndPackFloat32( zSign, 0x9C, zSign ? - a : a );

}
    117c:	2b 9d 00 04 	lw ra,(sp+4)
    1180:	37 9c 00 04 	addi sp,sp,4
    1184:	c3 a0 00 00 	ret

00001188 <float32_to_int32>:
positive integer is returned.  Otherwise, if the conversion overflows, the
largest integer with the same sign as `a' is returned.
-------------------------------------------------------------------------------
*/
int32 float32_to_int32( float32 a )
{
    1188:	00 22 00 17 	srui r2,r1,23
    118c:	b8 20 18 00 	mv r3,r1
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1190:	20 45 00 ff 	andi r5,r2,0xff
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1194:	78 01 00 7f 	mvhi r1,0x7f
    1198:	38 21 ff ff 	ori r1,r1,0xffff
    int8 roundingMode;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x96;
    119c:	34 a4 ff 6a 	addi r4,r5,-150
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    11a0:	a0 61 30 00 	and r6,r3,r1
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    11a4:	00 67 00 1f 	srui r7,r3,31

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x96;
    if ( 0 <= shiftCount ) {
    11a8:	48 04 00 1c 	bg r0,r4,1218 <float32_to_int32+0x90>
        if ( 0x9E <= aExp ) {
    11ac:	34 01 00 9d 	mvi r1,157
    11b0:	4c 25 00 12 	bge r1,r5,11f8 <float32_to_int32+0x70>
            if ( a == 0xCF000000 ) return 0x80000000;
    11b4:	78 01 cf 00 	mvhi r1,0xcf00
    11b8:	38 21 00 00 	ori r1,r1,0x0
    11bc:	44 61 00 40 	be r3,r1,12bc <float32_to_int32+0x134>
    11c0:	78 02 00 00 	mvhi r2,0x0
    11c4:	38 42 40 3c 	ori r2,r2,0x403c
    11c8:	28 41 00 00 	lw r1,(r2+0)
    11cc:	38 21 00 10 	ori r1,r1,0x10
    11d0:	58 41 00 00 	sw (r2+0),r1
            float_raise( float_flag_invalid );
            if ( ! aSign || ( ( aExp == 0xFF ) && aSig ) ) return 0x7FFFFFFF;
    11d4:	44 e0 00 05 	be r7,r0,11e8 <float32_to_int32+0x60>
    11d8:	64 a1 00 ff 	cmpei r1,r5,255
    11dc:	7c c2 00 00 	cmpnei r2,r6,0
    11e0:	a0 22 08 00 	and r1,r1,r2
    11e4:	44 20 00 36 	be r1,r0,12bc <float32_to_int32+0x134>
            if ( aSign ) {
                z += ( roundingMode == float_round_down ) & zExtra;
                z = - z;
            }
            else {
                z += ( roundingMode == float_round_up ) & zExtra;
    11e8:	78 03 7f ff 	mvhi r3,0x7fff
    11ec:	38 63 ff ff 	ori r3,r3,0xffff
            }
        }
    }
    return z;

}
    11f0:	b8 60 08 00 	mv r1,r3
    11f4:	c3 a0 00 00 	ret
            if ( a == 0xCF000000 ) return 0x80000000;
            float_raise( float_flag_invalid );
            if ( ! aSign || ( ( aExp == 0xFF ) && aSig ) ) return 0x7FFFFFFF;
            return 0x80000000;
        }
        z = ( aSig | 0x00800000 )<<shiftCount;
    11f8:	78 01 00 80 	mvhi r1,0x80
    11fc:	38 21 00 00 	ori r1,r1,0x0
    1200:	b8 c1 08 00 	or r1,r6,r1
    1204:	bc 24 18 00 	sl r3,r1,r4
        if ( aSign ) z = - z;
    1208:	44 e0 ff fa 	be r7,r0,11f0 <float32_to_int32+0x68>
        if ( roundingMode == float_round_nearest_even ) {
            if ( (sbits32) zExtra < 0 ) {
                ++z;
                if ( (bits32) ( zExtra<<1 ) == 0 ) z &= ~1;
            }
            if ( aSign ) z = - z;
    120c:	c8 03 18 00 	sub r3,r0,r3
            }
        }
    }
    return z;

}
    1210:	b8 60 08 00 	mv r1,r3
    1214:	c3 a0 00 00 	ret
        }
        z = ( aSig | 0x00800000 )<<shiftCount;
        if ( aSign ) z = - z;
    }
    else {
        if ( aExp < 0x7E ) {
    1218:	34 01 00 7d 	mvi r1,125
    121c:	48 a1 00 16 	bg r5,r1,1274 <float32_to_int32+0xec>
            zExtra = aExp | aSig;
    1220:	b8 a6 20 00 	or r4,r5,r6
    1224:	34 03 00 00 	mvi r3,0
        else {
            aSig |= 0x00800000;
            zExtra = aSig<<( shiftCount & 31 );
            z = aSig>>( - shiftCount );
        }
        if ( zExtra ) float_exception_flags |= float_flag_inexact;
    1228:	44 80 00 06 	be r4,r0,1240 <float32_to_int32+0xb8>
    122c:	78 02 00 00 	mvhi r2,0x0
    1230:	38 42 40 3c 	ori r2,r2,0x403c
    1234:	28 41 00 00 	lw r1,(r2+0)
    1238:	38 21 00 01 	ori r1,r1,0x1
    123c:	58 41 00 00 	sw (r2+0),r1
        roundingMode = float_rounding_mode;
    1240:	78 01 00 00 	mvhi r1,0x0
    1244:	38 21 40 38 	ori r1,r1,0x4038
    1248:	28 21 00 00 	lw r1,(r1+0)
        if ( roundingMode == float_round_nearest_even ) {
    124c:	5c 20 00 11 	bne r1,r0,1290 <float32_to_int32+0x108>
            if ( (sbits32) zExtra < 0 ) {
    1250:	4c 81 00 06 	bge r4,r1,1268 <float32_to_int32+0xe0>
                ++z;
                if ( (bits32) ( zExtra<<1 ) == 0 ) z &= ~1;
    1254:	b4 84 08 00 	add r1,r4,r4
        }
        if ( zExtra ) float_exception_flags |= float_flag_inexact;
        roundingMode = float_rounding_mode;
        if ( roundingMode == float_round_nearest_even ) {
            if ( (sbits32) zExtra < 0 ) {
                ++z;
    1258:	34 63 00 01 	addi r3,r3,1
                if ( (bits32) ( zExtra<<1 ) == 0 ) z &= ~1;
    125c:	5c 20 00 03 	bne r1,r0,1268 <float32_to_int32+0xe0>
    1260:	34 01 ff fe 	mvi r1,-2
    1264:	a0 61 18 00 	and r3,r3,r1
            }
            if ( aSign ) z = - z;
    1268:	44 e0 ff e2 	be r7,r0,11f0 <float32_to_int32+0x68>
    126c:	c8 03 18 00 	sub r3,r0,r3
    1270:	e3 ff ff e8 	bi 1210 <float32_to_int32+0x88>
        if ( aExp < 0x7E ) {
            zExtra = aExp | aSig;
            z = 0;
        }
        else {
            aSig |= 0x00800000;
    1274:	78 01 00 80 	mvhi r1,0x80
    1278:	38 21 00 00 	ori r1,r1,0x0
    127c:	b8 c1 08 00 	or r1,r6,r1
            zExtra = aSig<<( shiftCount & 31 );
            z = aSig>>( - shiftCount );
    1280:	c8 04 10 00 	sub r2,r0,r4
    1284:	80 22 18 00 	sru r3,r1,r2
            zExtra = aExp | aSig;
            z = 0;
        }
        else {
            aSig |= 0x00800000;
            zExtra = aSig<<( shiftCount & 31 );
    1288:	bc 24 20 00 	sl r4,r1,r4
    128c:	e3 ff ff e7 	bi 1228 <float32_to_int32+0xa0>
                if ( (bits32) ( zExtra<<1 ) == 0 ) z &= ~1;
            }
            if ( aSign ) z = - z;
        }
        else {
            zExtra = ( zExtra != 0 );
    1290:	7c 82 00 00 	cmpnei r2,r4,0
            if ( aSign ) {
    1294:	44 e0 00 06 	be r7,r0,12ac <float32_to_int32+0x124>
                z += ( roundingMode == float_round_down ) & zExtra;
    1298:	64 21 00 03 	cmpei r1,r1,3
    129c:	a0 41 08 00 	and r1,r2,r1
    12a0:	b4 23 08 00 	add r1,r1,r3
                z = - z;
    12a4:	c8 01 18 00 	sub r3,r0,r1
    12a8:	e3 ff ff d2 	bi 11f0 <float32_to_int32+0x68>
            }
            else {
                z += ( roundingMode == float_round_up ) & zExtra;
    12ac:	64 21 00 02 	cmpei r1,r1,2
    12b0:	a0 41 08 00 	and r1,r2,r1
    12b4:	b4 23 18 00 	add r3,r1,r3
    12b8:	e3 ff ff ce 	bi 11f0 <float32_to_int32+0x68>
    shiftCount = aExp - 0x96;
    if ( 0 <= shiftCount ) {
        if ( 0x9E <= aExp ) {
            if ( a == 0xCF000000 ) return 0x80000000;
            float_raise( float_flag_invalid );
            if ( ! aSign || ( ( aExp == 0xFF ) && aSig ) ) return 0x7FFFFFFF;
    12bc:	78 03 80 00 	mvhi r3,0x8000
    12c0:	38 63 00 00 	ori r3,r3,0x0
    12c4:	e3 ff ff cb 	bi 11f0 <float32_to_int32+0x68>

000012c8 <float32_to_int32_round_to_zero>:
conversion overflows, the largest integer with the same sign as `a' is
returned.
-------------------------------------------------------------------------------
*/
int32 float32_to_int32_round_to_zero( float32 a )
{
    12c8:	00 22 00 17 	srui r2,r1,23
    12cc:	b8 20 18 00 	mv r3,r1
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    12d0:	20 45 00 ff 	andi r5,r2,0xff
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    12d4:	78 01 00 7f 	mvhi r1,0x7f
    12d8:	38 21 ff ff 	ori r1,r1,0xffff
    int32 z;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x9E;
    12dc:	34 a4 ff 62 	addi r4,r5,-158
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    12e0:	a0 61 30 00 	and r6,r3,r1
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    12e4:	00 67 00 1f 	srui r7,r3,31

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x9E;
    if ( 0 <= shiftCount ) {
    12e8:	48 04 00 11 	bg r0,r4,132c <float32_to_int32_round_to_zero+0x64>
        if ( a == 0xCF000000 ) return 0x80000000;
    12ec:	78 01 cf 00 	mvhi r1,0xcf00
    12f0:	38 21 00 00 	ori r1,r1,0x0
    12f4:	44 61 00 0b 	be r3,r1,1320 <float32_to_int32_round_to_zero+0x58>
    12f8:	78 02 00 00 	mvhi r2,0x0
    12fc:	38 42 40 3c 	ori r2,r2,0x403c
    1300:	28 41 00 00 	lw r1,(r2+0)
    1304:	38 21 00 10 	ori r1,r1,0x10
    1308:	58 41 00 00 	sw (r2+0),r1
        float_raise( float_flag_invalid );
        if ( ! aSign || ( ( aExp == 0xFF ) && aSig ) ) return 0x7FFFFFFF;
    130c:	44 e0 00 26 	be r7,r0,13a4 <float32_to_int32_round_to_zero+0xdc>
    1310:	64 a1 00 ff 	cmpei r1,r5,255
    1314:	7c c2 00 00 	cmpnei r2,r6,0
    1318:	a0 22 08 00 	and r1,r1,r2
    131c:	5c 20 00 22 	bne r1,r0,13a4 <float32_to_int32_round_to_zero+0xdc>
    1320:	78 04 80 00 	mvhi r4,0x8000
    1324:	38 84 00 00 	ori r4,r4,0x0
    1328:	e0 00 00 0c 	bi 1358 <float32_to_int32_round_to_zero+0x90>
        return 0x80000000;
    }
    else if ( aExp <= 0x7E ) {
    132c:	34 01 00 7e 	mvi r1,126
    1330:	48 a1 00 0c 	bg r5,r1,1360 <float32_to_int32_round_to_zero+0x98>
        if ( aExp | aSig ) float_exception_flags |= float_flag_inexact;
    1334:	b8 a6 08 00 	or r1,r5,r6
    1338:	b8 20 20 00 	mv r4,r1
    133c:	44 20 00 07 	be r1,r0,1358 <float32_to_int32_round_to_zero+0x90>
    1340:	78 02 00 00 	mvhi r2,0x0
    1344:	38 42 40 3c 	ori r2,r2,0x403c
    1348:	28 41 00 00 	lw r1,(r2+0)
    134c:	34 04 00 00 	mvi r4,0
    1350:	38 21 00 01 	ori r1,r1,0x1
    1354:	58 41 00 00 	sw (r2+0),r1
    if ( (bits32) ( aSig<<( shiftCount & 31 ) ) ) {
        float_exception_flags |= float_flag_inexact;
    }
    return aSign ? - z : z;

}
    1358:	b8 80 08 00 	mv r1,r4
    135c:	c3 a0 00 00 	ret
    }
    else if ( aExp <= 0x7E ) {
        if ( aExp | aSig ) float_exception_flags |= float_flag_inexact;
        return 0;
    }
    aSig = ( aSig | 0x00800000 )<<8;
    1360:	78 01 00 80 	mvhi r1,0x80
    1364:	38 21 00 00 	ori r1,r1,0x0
    1368:	b8 c1 08 00 	or r1,r6,r1
    136c:	3c 21 00 08 	sli r1,r1,8
    z = aSig>>( - shiftCount );
    1370:	c8 04 10 00 	sub r2,r0,r4
    if ( (bits32) ( aSig<<( shiftCount & 31 ) ) ) {
    1374:	bc 24 18 00 	sl r3,r1,r4
    else if ( aExp <= 0x7E ) {
        if ( aExp | aSig ) float_exception_flags |= float_flag_inexact;
        return 0;
    }
    aSig = ( aSig | 0x00800000 )<<8;
    z = aSig>>( - shiftCount );
    1378:	80 22 20 00 	sru r4,r1,r2
    if ( (bits32) ( aSig<<( shiftCount & 31 ) ) ) {
    137c:	44 60 00 06 	be r3,r0,1394 <float32_to_int32_round_to_zero+0xcc>
        float_exception_flags |= float_flag_inexact;
    1380:	78 02 00 00 	mvhi r2,0x0
    1384:	38 42 40 3c 	ori r2,r2,0x403c
    1388:	28 41 00 00 	lw r1,(r2+0)
    138c:	38 21 00 01 	ori r1,r1,0x1
    1390:	58 41 00 00 	sw (r2+0),r1
    }
    return aSign ? - z : z;
    1394:	44 e0 ff f1 	be r7,r0,1358 <float32_to_int32_round_to_zero+0x90>
    1398:	c8 04 20 00 	sub r4,r0,r4

}
    139c:	b8 80 08 00 	mv r1,r4
    13a0:	c3 a0 00 00 	ret
    aSig = ( aSig | 0x00800000 )<<8;
    z = aSig>>( - shiftCount );
    if ( (bits32) ( aSig<<( shiftCount & 31 ) ) ) {
        float_exception_flags |= float_flag_inexact;
    }
    return aSign ? - z : z;
    13a4:	78 04 7f ff 	mvhi r4,0x7fff
    13a8:	38 84 ff ff 	ori r4,r4,0xffff
    13ac:	e3 ff ff eb 	bi 1358 <float32_to_int32_round_to_zero+0x90>

000013b0 <float32_round_to_int>:
operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_round_to_int( float32 a )
{
    13b0:	37 9c ff fc 	addi sp,sp,-4
    13b4:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    13b8:	00 22 00 17 	srui r2,r1,23
    bits32 lastBitMask, roundBitsMask;
    int8 roundingMode;
    float32 z;

    aExp = extractFloat32Exp( a );
    if ( 0x96 <= aExp ) {
    13bc:	34 03 00 95 	mvi r3,149
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    13c0:	20 44 00 ff 	andi r4,r2,0xff
operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_round_to_int( float32 a )
{
    13c4:	b8 20 28 00 	mv r5,r1
    bits32 lastBitMask, roundBitsMask;
    int8 roundingMode;
    float32 z;

    aExp = extractFloat32Exp( a );
    if ( 0x96 <= aExp ) {
    13c8:	4c 64 00 07 	bge r3,r4,13e4 <float32_round_to_int+0x34>
        if ( ( aExp == 0xFF ) && extractFloat32Frac( a ) ) {
    13cc:	34 02 00 ff 	mvi r2,255
    13d0:	44 82 00 34 	be r4,r2,14a0 <float32_round_to_int+0xf0>
    }
    z &= ~ roundBitsMask;
    if ( z != a ) float_exception_flags |= float_flag_inexact;
    return z;

}
    13d4:	b8 a0 08 00 	mv r1,r5
    13d8:	2b 9d 00 04 	lw ra,(sp+4)
    13dc:	37 9c 00 04 	addi sp,sp,4
    13e0:	c3 a0 00 00 	ret
        if ( ( aExp == 0xFF ) && extractFloat32Frac( a ) ) {
            return propagateFloat32NaN( a, a );
        }
        return a;
    }
    if ( aExp <= 0x7E ) {
    13e4:	34 07 00 7e 	mvi r7,126
    13e8:	48 87 00 13 	bg r4,r7,1434 <float32_round_to_int+0x84>
        if ( (bits32) ( a<<1 ) == 0 ) return a;
    13ec:	b4 21 08 00 	add r1,r1,r1
    13f0:	44 20 ff f9 	be r1,r0,13d4 <float32_round_to_int+0x24>
        float_exception_flags |= float_flag_inexact;
    13f4:	78 03 00 00 	mvhi r3,0x0
    13f8:	38 63 40 3c 	ori r3,r3,0x403c
    13fc:	28 62 00 00 	lw r2,(r3+0)
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
    1400:	78 01 00 00 	mvhi r1,0x0
    1404:	38 21 40 38 	ori r1,r1,0x4038
    1408:	28 26 00 00 	lw r6,(r1+0)
        }
        return a;
    }
    if ( aExp <= 0x7E ) {
        if ( (bits32) ( a<<1 ) == 0 ) return a;
        float_exception_flags |= float_flag_inexact;
    140c:	38 42 00 01 	ori r2,r2,0x1
    1410:	58 62 00 00 	sw (r3+0),r2
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
    1414:	34 01 00 02 	mvi r1,2
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    1418:	00 a2 00 1f 	srui r2,r5,31
    }
    if ( aExp <= 0x7E ) {
        if ( (bits32) ( a<<1 ) == 0 ) return a;
        float_exception_flags |= float_flag_inexact;
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
    141c:	44 c1 00 41 	be r6,r1,1520 <float32_round_to_int+0x170>
    1420:	34 01 00 03 	mvi r1,3
    1424:	44 c1 00 3a 	be r6,r1,150c <float32_round_to_int+0x15c>
    1428:	44 c0 00 2f 	be r6,r0,14e4 <float32_round_to_int+0x134>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    142c:	3c 45 00 1f 	sli r5,r2,31
    1430:	e3 ff ff e9 	bi 13d4 <float32_round_to_int+0x24>
    }
    lastBitMask = 1;
    lastBitMask <<= 0x96 - aExp;
    roundBitsMask = lastBitMask - 1;
    z = a;
    roundingMode = float_rounding_mode;
    1434:	78 01 00 00 	mvhi r1,0x0
    1438:	38 21 40 38 	ori r1,r1,0x4038
            return aSign ? 0x80000000 : 0x3F800000;
        }
        return packFloat32( aSign, 0, 0 );
    }
    lastBitMask = 1;
    lastBitMask <<= 0x96 - aExp;
    143c:	34 02 00 96 	mvi r2,150
    1440:	c8 44 10 00 	sub r2,r2,r4
    roundBitsMask = lastBitMask - 1;
    z = a;
    roundingMode = float_rounding_mode;
    1444:	28 24 00 00 	lw r4,(r1+0)
            return aSign ? 0x80000000 : 0x3F800000;
        }
        return packFloat32( aSign, 0, 0 );
    }
    lastBitMask = 1;
    lastBitMask <<= 0x96 - aExp;
    1448:	34 01 00 01 	mvi r1,1
    144c:	bc 22 18 00 	sl r3,r1,r2
    roundBitsMask = lastBitMask - 1;
    1450:	34 67 ff ff 	addi r7,r3,-1
    z = a;
    roundingMode = float_rounding_mode;
    if ( roundingMode == float_round_nearest_even ) {
    1454:	44 80 00 1b 	be r4,r0,14c0 <float32_round_to_int+0x110>
        z += lastBitMask>>1;
        if ( ( z & roundBitsMask ) == 0 ) z &= ~ lastBitMask;
    }
    else if ( roundingMode != float_round_to_zero ) {
    1458:	44 81 00 21 	be r4,r1,14dc <float32_round_to_int+0x12c>
        if ( extractFloat32Sign( z ) ^ ( roundingMode == float_round_up ) ) {
    145c:	64 82 00 02 	cmpei r2,r4,2
    1460:	00 a1 00 1f 	srui r1,r5,31
            z += roundBitsMask;
    1464:	b4 e5 30 00 	add r6,r7,r5
    if ( roundingMode == float_round_nearest_even ) {
        z += lastBitMask>>1;
        if ( ( z & roundBitsMask ) == 0 ) z &= ~ lastBitMask;
    }
    else if ( roundingMode != float_round_to_zero ) {
        if ( extractFloat32Sign( z ) ^ ( roundingMode == float_round_up ) ) {
    1468:	44 41 00 1d 	be r2,r1,14dc <float32_round_to_int+0x12c>
            z += roundBitsMask;
        }
    }
    z &= ~ roundBitsMask;
    146c:	a4 e0 08 00 	not r1,r7
    1470:	a0 c1 18 00 	and r3,r6,r1
    if ( z != a ) float_exception_flags |= float_flag_inexact;
    1474:	44 65 ff d8 	be r3,r5,13d4 <float32_round_to_int+0x24>
    1478:	78 02 00 00 	mvhi r2,0x0
    147c:	38 42 40 3c 	ori r2,r2,0x403c
    1480:	28 41 00 00 	lw r1,(r2+0)
    1484:	b8 60 28 00 	mv r5,r3
    1488:	38 21 00 01 	ori r1,r1,0x1
    148c:	58 41 00 00 	sw (r2+0),r1
    return z;

}
    1490:	b8 a0 08 00 	mv r1,r5
    1494:	2b 9d 00 04 	lw ra,(sp+4)
    1498:	37 9c 00 04 	addi sp,sp,4
    149c:	c3 a0 00 00 	ret
    int8 roundingMode;
    float32 z;

    aExp = extractFloat32Exp( a );
    if ( 0x96 <= aExp ) {
        if ( ( aExp == 0xFF ) && extractFloat32Frac( a ) ) {
    14a0:	78 02 00 7f 	mvhi r2,0x7f
    14a4:	38 42 ff ff 	ori r2,r2,0xffff
    14a8:	a0 22 10 00 	and r2,r1,r2
    14ac:	44 40 ff ca 	be r2,r0,13d4 <float32_round_to_int+0x24>
            return propagateFloat32NaN( a, a );
    14b0:	b8 20 10 00 	mv r2,r1
    14b4:	fb ff fe 6f 	calli e70 <propagateFloat32NaN>
    14b8:	b8 20 28 00 	mv r5,r1
    14bc:	e3 ff ff c6 	bi 13d4 <float32_round_to_int+0x24>
    lastBitMask <<= 0x96 - aExp;
    roundBitsMask = lastBitMask - 1;
    z = a;
    roundingMode = float_rounding_mode;
    if ( roundingMode == float_round_nearest_even ) {
        z += lastBitMask>>1;
    14c0:	80 61 08 00 	sru r1,r3,r1
    14c4:	b4 25 30 00 	add r6,r1,r5
        if ( ( z & roundBitsMask ) == 0 ) z &= ~ lastBitMask;
    14c8:	a0 c7 10 00 	and r2,r6,r7
    14cc:	5c 44 ff e8 	bne r2,r4,146c <float32_round_to_int+0xbc>
    14d0:	a4 60 08 00 	not r1,r3
    14d4:	a0 c1 30 00 	and r6,r6,r1
    14d8:	e3 ff ff e5 	bi 146c <float32_round_to_int+0xbc>
    }
    else if ( roundingMode != float_round_to_zero ) {
        if ( extractFloat32Sign( z ) ^ ( roundingMode == float_round_up ) ) {
            z += roundBitsMask;
    14dc:	b8 a0 30 00 	mv r6,r5
    14e0:	e3 ff ff e3 	bi 146c <float32_round_to_int+0xbc>
        if ( (bits32) ( a<<1 ) == 0 ) return a;
        float_exception_flags |= float_flag_inexact;
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
         case float_round_nearest_even:
            if ( ( aExp == 0x7E ) && extractFloat32Frac( a ) ) {
    14e4:	5c 87 ff d2 	bne r4,r7,142c <float32_round_to_int+0x7c>
    14e8:	78 01 00 7f 	mvhi r1,0x7f
    14ec:	38 21 ff ff 	ori r1,r1,0xffff
    14f0:	a0 a1 08 00 	and r1,r5,r1
    14f4:	44 20 ff ce 	be r1,r0,142c <float32_round_to_int+0x7c>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    14f8:	3c 42 00 1f 	sli r2,r2,31
    14fc:	78 01 3f 80 	mvhi r1,0x3f80
    1500:	38 21 00 00 	ori r1,r1,0x0
    1504:	b4 41 28 00 	add r5,r2,r1
    1508:	e3 ff ff b3 	bi 13d4 <float32_round_to_int+0x24>
            if ( ( aExp == 0x7E ) && extractFloat32Frac( a ) ) {
                return packFloat32( aSign, 0x7F, 0 );
            }
            break;
         case float_round_down:
            return aSign ? 0xBF800000 : 0;
    150c:	b8 40 28 00 	mv r5,r2
    1510:	44 40 ff b1 	be r2,r0,13d4 <float32_round_to_int+0x24>
    1514:	78 05 bf 80 	mvhi r5,0xbf80
    1518:	38 a5 00 00 	ori r5,r5,0x0
    151c:	e3 ff ff ae 	bi 13d4 <float32_round_to_int+0x24>
         case float_round_up:
            return aSign ? 0x80000000 : 0x3F800000;
    1520:	5c 40 00 04 	bne r2,r0,1530 <float32_round_to_int+0x180>
    1524:	78 05 3f 80 	mvhi r5,0x3f80
    1528:	38 a5 00 00 	ori r5,r5,0x0
    152c:	e3 ff ff aa 	bi 13d4 <float32_round_to_int+0x24>
    1530:	78 05 80 00 	mvhi r5,0x8000
    1534:	38 a5 00 00 	ori r5,r5,0x0
    1538:	e3 ff ff a7 	bi 13d4 <float32_round_to_int+0x24>

0000153c <addFloat32Sigs>:
addition is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 addFloat32Sigs( float32 a, float32 b, flag zSign )
{
    153c:	37 9c ff fc 	addi sp,sp,-4
    1540:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1544:	00 26 00 17 	srui r6,r1,23
    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 6;
    1548:	00 47 00 17 	srui r7,r2,23
    154c:	78 04 00 7f 	mvhi r4,0x7f
    1550:	38 84 ff ff 	ori r4,r4,0xffff
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1554:	20 c6 00 ff 	andi r6,r6,0xff
    1558:	20 e7 00 ff 	andi r7,r7,0xff
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 6;
    bSig <<= 6;
    155c:	a0 44 28 00 	and r5,r2,r4

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    1560:	c8 c7 48 00 	sub r9,r6,r7
    aSig <<= 6;
    1564:	a0 24 20 00 	and r4,r1,r4
    1568:	3c 8a 00 06 	sli r10,r4,6
addition is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 addFloat32Sigs( float32 a, float32 b, flag zSign )
{
    156c:	b8 20 40 00 	mv r8,r1
    1570:	b8 60 e8 00 	mv ra,r3
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 6;
    bSig <<= 6;
    1574:	3c a4 00 06 	sli r4,r5,6
    if ( 0 < expDiff ) {
    1578:	4c 09 00 1b 	bge r0,r9,15e4 <addFloat32Sigs+0xa8>
        if ( aExp == 0xFF ) {
    157c:	34 03 00 ff 	mvi r3,255
    1580:	44 c3 00 15 	be r6,r3,15d4 <addFloat32Sigs+0x98>
            if ( aSig ) return propagateFloat32NaN( a, b );
            return a;
        }
        if ( bExp == 0 ) {
    1584:	5c e0 00 21 	bne r7,r0,1608 <addFloat32Sigs+0xcc>
            --expDiff;
    1588:	35 29 ff ff 	addi r9,r9,-1
    158c:	78 08 20 00 	mvhi r8,0x2000
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
    1590:	5d 27 00 22 	bne r9,r7,1618 <addFloat32Sigs+0xdc>
    1594:	78 08 20 00 	mvhi r8,0x2000
        zSig = 0x40000000 + aSig + bSig;
        zExp = aExp;
        goto roundAndPack;
    }
    aSig |= 0x20000000;
    zSig = ( aSig + bSig )<<1;
    1598:	39 08 00 00 	ori r8,r8,0x0
    159c:	b9 48 08 00 	or r1,r10,r8
    15a0:	b4 24 18 00 	add r3,r1,r4
    15a4:	b4 63 08 00 	add r1,r3,r3
    --zExp;
    if ( (sbits32) zSig < 0 ) {
    15a8:	48 01 00 03 	bg r0,r1,15b4 <addFloat32Sigs+0x78>
        zExp = aExp;
        goto roundAndPack;
    }
    aSig |= 0x20000000;
    zSig = ( aSig + bSig )<<1;
    --zExp;
    15ac:	34 c6 ff ff 	addi r6,r6,-1
    15b0:	b8 20 18 00 	mv r3,r1
    if ( (sbits32) zSig < 0 ) {
        zSig = aSig + bSig;
        ++zExp;
    }
 roundAndPack:
    return roundAndPackFloat32( zSign, zExp, zSig );
    15b4:	bb a0 08 00 	mv r1,ra
    15b8:	b8 c0 10 00 	mv r2,r6
    15bc:	fb ff fe 5c 	calli f2c <roundAndPackFloat32>
    15c0:	b8 20 40 00 	mv r8,r1

}
    15c4:	b9 00 08 00 	mv r1,r8
    15c8:	2b 9d 00 04 	lw ra,(sp+4)
    15cc:	37 9c 00 04 	addi sp,sp,4
    15d0:	c3 a0 00 00 	ret
    expDiff = aExp - bExp;
    aSig <<= 6;
    bSig <<= 6;
    if ( 0 < expDiff ) {
        if ( aExp == 0xFF ) {
            if ( aSig ) return propagateFloat32NaN( a, b );
    15d4:	45 40 ff fc 	be r10,r0,15c4 <addFloat32Sigs+0x88>
        shift32RightJamming( aSig, - expDiff, &aSig );
        zExp = bExp;
    }
    else {
        if ( aExp == 0xFF ) {
            if ( aSig | bSig ) return propagateFloat32NaN( a, b );
    15d8:	fb ff fe 26 	calli e70 <propagateFloat32NaN>
    15dc:	b8 20 40 00 	mv r8,r1
    15e0:	e3 ff ff f9 	bi 15c4 <addFloat32Sigs+0x88>
            bSig |= 0x20000000;
        }
        shift32RightJamming( bSig, expDiff, &bSig );
        zExp = aExp;
    }
    else if ( expDiff < 0 ) {
    15e4:	5d 20 00 1a 	bne r9,r0,164c <addFloat32Sigs+0x110>
        }
        shift32RightJamming( aSig, - expDiff, &aSig );
        zExp = bExp;
    }
    else {
        if ( aExp == 0xFF ) {
    15e8:	34 03 00 ff 	mvi r3,255
    15ec:	44 c3 00 15 	be r6,r3,1640 <addFloat32Sigs+0x104>
            if ( aSig | bSig ) return propagateFloat32NaN( a, b );
            return a;
        }
        if ( aExp == 0 ) return packFloat32( zSign, 0, ( aSig + bSig )>>6 );
    15f0:	44 c0 00 28 	be r6,r0,1690 <addFloat32Sigs+0x154>
        zSig = 0x40000000 + aSig + bSig;
    15f4:	78 01 40 00 	mvhi r1,0x4000
    15f8:	38 21 00 00 	ori r1,r1,0x0
    15fc:	b5 41 08 00 	add r1,r10,r1
    1600:	b4 24 18 00 	add r3,r1,r4
    1604:	e3 ff ff ec 	bi 15b4 <addFloat32Sigs+0x78>
        }
        if ( bExp == 0 ) {
            --expDiff;
        }
        else {
            bSig |= 0x20000000;
    1608:	78 08 20 00 	mvhi r8,0x2000
    160c:	b9 00 08 00 	mv r1,r8
    1610:	38 21 00 00 	ori r1,r1,0x0
    1614:	b8 81 20 00 	or r4,r4,r1
        z = a;
    }
    else if ( count < 32 ) {
    1618:	34 01 00 1f 	mvi r1,31
    161c:	49 21 00 07 	bg r9,r1,1638 <addFloat32Sigs+0xfc>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    1620:	c8 09 08 00 	sub r1,r0,r9
    1624:	bc 81 08 00 	sl r1,r4,r1
    1628:	80 89 10 00 	sru r2,r4,r9
    162c:	7c 21 00 00 	cmpnei r1,r1,0
    1630:	b8 22 20 00 	or r4,r1,r2
    1634:	e3 ff ff d9 	bi 1598 <addFloat32Sigs+0x5c>
    }
    else {
        z = ( a != 0 );
    1638:	7c 84 00 00 	cmpnei r4,r4,0
    163c:	e3 ff ff d7 	bi 1598 <addFloat32Sigs+0x5c>
        shift32RightJamming( aSig, - expDiff, &aSig );
        zExp = bExp;
    }
    else {
        if ( aExp == 0xFF ) {
            if ( aSig | bSig ) return propagateFloat32NaN( a, b );
    1640:	b8 8a 18 00 	or r3,r4,r10
    1644:	44 60 ff e0 	be r3,r0,15c4 <addFloat32Sigs+0x88>
    1648:	e3 ff ff e4 	bi 15d8 <addFloat32Sigs+0x9c>
        }
        shift32RightJamming( bSig, expDiff, &bSig );
        zExp = aExp;
    }
    else if ( expDiff < 0 ) {
        if ( bExp == 0xFF ) {
    164c:	34 03 00 ff 	mvi r3,255
    1650:	44 e3 00 18 	be r7,r3,16b0 <addFloat32Sigs+0x174>
            if ( bSig ) return propagateFloat32NaN( a, b );
            return packFloat32( zSign, 0xFF, 0 );
        }
        if ( aExp == 0 ) {
    1654:	44 c0 00 14 	be r6,r0,16a4 <addFloat32Sigs+0x168>
            ++expDiff;
        }
        else {
            aSig |= 0x20000000;
    1658:	78 08 20 00 	mvhi r8,0x2000
    165c:	b9 00 08 00 	mv r1,r8
    1660:	38 21 00 00 	ori r1,r1,0x0
    1664:	b9 41 50 00 	or r10,r10,r1
        }
        shift32RightJamming( aSig, - expDiff, &aSig );
    1668:	c8 09 10 00 	sub r2,r0,r9
            return a;
        }
        if ( aExp == 0 ) return packFloat32( zSign, 0, ( aSig + bSig )>>6 );
        zSig = 0x40000000 + aSig + bSig;
        zExp = aExp;
        goto roundAndPack;
    166c:	b8 e0 30 00 	mv r6,r7
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
    1670:	44 40 ff ca 	be r2,r0,1598 <addFloat32Sigs+0x5c>
        z = a;
    }
    else if ( count < 32 ) {
    1674:	34 01 00 1f 	mvi r1,31
    1678:	48 41 00 14 	bg r2,r1,16c8 <addFloat32Sigs+0x18c>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    167c:	bd 49 08 00 	sl r1,r10,r9
    1680:	81 42 10 00 	sru r2,r10,r2
    1684:	7c 21 00 00 	cmpnei r1,r1,0
    1688:	b8 22 50 00 	or r10,r1,r2
    168c:	e3 ff ff c3 	bi 1598 <addFloat32Sigs+0x5c>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1690:	b4 8a 08 00 	add r1,r4,r10
    1694:	00 21 00 06 	srui r1,r1,6
    1698:	3f a2 00 1f 	sli r2,ra,31
    169c:	b4 22 40 00 	add r8,r1,r2
    16a0:	e3 ff ff c9 	bi 15c4 <addFloat32Sigs+0x88>
        if ( bExp == 0xFF ) {
            if ( bSig ) return propagateFloat32NaN( a, b );
            return packFloat32( zSign, 0xFF, 0 );
        }
        if ( aExp == 0 ) {
            ++expDiff;
    16a4:	35 29 00 01 	addi r9,r9,1
    16a8:	78 08 20 00 	mvhi r8,0x2000
    16ac:	e3 ff ff ef 	bi 1668 <addFloat32Sigs+0x12c>
        shift32RightJamming( bSig, expDiff, &bSig );
        zExp = aExp;
    }
    else if ( expDiff < 0 ) {
        if ( bExp == 0xFF ) {
            if ( bSig ) return propagateFloat32NaN( a, b );
    16b0:	5c 80 ff ca 	bne r4,r0,15d8 <addFloat32Sigs+0x9c>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    16b4:	3f a2 00 1f 	sli r2,ra,31
    16b8:	78 01 7f 80 	mvhi r1,0x7f80
    16bc:	38 21 00 00 	ori r1,r1,0x0
    16c0:	b4 41 40 00 	add r8,r2,r1
    16c4:	e3 ff ff c0 	bi 15c4 <addFloat32Sigs+0x88>
    }
    else {
        z = ( a != 0 );
    16c8:	7d 4a 00 00 	cmpnei r10,r10,0
    16cc:	e3 ff ff b3 	bi 1598 <addFloat32Sigs+0x5c>

000016d0 <subFloat32Sigs>:
result is a NaN.  The subtraction is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 subFloat32Sigs( float32 a, float32 b, flag zSign )
{
    16d0:	37 9c ff fc 	addi sp,sp,-4
    16d4:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    16d8:	00 26 00 17 	srui r6,r1,23
    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 7;
    16dc:	00 47 00 17 	srui r7,r2,23
    16e0:	78 04 00 7f 	mvhi r4,0x7f
    16e4:	38 84 ff ff 	ori r4,r4,0xffff
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    16e8:	20 c6 00 ff 	andi r6,r6,0xff
    16ec:	20 e7 00 ff 	andi r7,r7,0xff
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 7;
    bSig <<= 7;
    16f0:	a0 44 28 00 	and r5,r2,r4

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    16f4:	c8 c7 48 00 	sub r9,r6,r7
    aSig <<= 7;
    16f8:	a0 24 20 00 	and r4,r1,r4
result is a NaN.  The subtraction is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 subFloat32Sigs( float32 a, float32 b, flag zSign )
{
    16fc:	b8 20 40 00 	mv r8,r1
    1700:	b8 60 50 00 	mv r10,r3
    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 7;
    1704:	3c 84 00 07 	sli r4,r4,7
    bSig <<= 7;
    1708:	3c a5 00 07 	sli r5,r5,7
    if ( 0 < expDiff ) goto aExpBigger;
    170c:	49 20 00 0f 	bg r9,r0,1748 <subFloat32Sigs+0x78>
    if ( expDiff < 0 ) goto bExpBigger;
    1710:	5d 20 00 3b 	bne r9,r0,17fc <subFloat32Sigs+0x12c>
    if ( aExp == 0xFF ) {
    1714:	34 03 00 ff 	mvi r3,255
    1718:	44 c3 00 30 	be r6,r3,17d8 <subFloat32Sigs+0x108>
        if ( aSig | bSig ) return propagateFloat32NaN( a, b );
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( aExp == 0 ) {
    171c:	5c c0 00 03 	bne r6,r0,1728 <subFloat32Sigs+0x58>
    1720:	34 06 00 01 	mvi r6,1
    1724:	b8 c0 38 00 	mv r7,r6
        aExp = 1;
        bExp = 1;
    }
    if ( bSig < aSig ) goto aBigger;
    1728:	54 85 00 10 	bgu r4,r5,1768 <subFloat32Sigs+0x98>
    if ( aSig < bSig ) goto bBigger;
    172c:	54 a4 00 45 	bgu r5,r4,1840 <subFloat32Sigs+0x170>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1730:	78 01 00 00 	mvhi r1,0x0
    1734:	38 21 40 38 	ori r1,r1,0x4038
    1738:	28 22 00 00 	lw r2,(r1+0)
    173c:	64 42 00 03 	cmpei r2,r2,3
    1740:	3c 48 00 1f 	sli r8,r2,31
    1744:	e0 00 00 0f 	bi 1780 <subFloat32Sigs+0xb0>
    zSig = bSig - aSig;
    zExp = bExp;
    zSign ^= 1;
    goto normalizeRoundAndPack;
 aExpBigger:
    if ( aExp == 0xFF ) {
    1748:	34 03 00 ff 	mvi r3,255
    174c:	44 c3 00 11 	be r6,r3,1790 <subFloat32Sigs+0xc0>
        if ( aSig ) return propagateFloat32NaN( a, b );
        return a;
    }
    if ( bExp == 0 ) {
    1750:	5c e0 00 14 	bne r7,r0,17a0 <subFloat32Sigs+0xd0>
        --expDiff;
    1754:	35 29 ff ff 	addi r9,r9,-1
    1758:	78 08 40 00 	mvhi r8,0x4000
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
    175c:	5d 27 00 15 	bne r9,r7,17b0 <subFloat32Sigs+0xe0>
    }
    else {
        bSig |= 0x40000000;
    }
    shift32RightJamming( bSig, expDiff, &bSig );
    aSig |= 0x40000000;
    1760:	39 08 00 00 	ori r8,r8,0x0
    1764:	b8 88 20 00 	or r4,r4,r8
 aBigger:
    zSig = aSig - bSig;
    1768:	c8 85 18 00 	sub r3,r4,r5
    176c:	b8 c0 10 00 	mv r2,r6
    zExp = aExp;
 normalizeRoundAndPack:
    --zExp;
    return normalizeRoundAndPackFloat32( zSign, zExp, zSig );
    1770:	b9 40 08 00 	mv r1,r10
    1774:	34 42 ff ff 	addi r2,r2,-1
    1778:	fb ff fe 51 	calli 10bc <normalizeRoundAndPackFloat32>
    177c:	b8 20 40 00 	mv r8,r1

}
    1780:	b9 00 08 00 	mv r1,r8
    1784:	2b 9d 00 04 	lw ra,(sp+4)
    1788:	37 9c 00 04 	addi sp,sp,4
    178c:	c3 a0 00 00 	ret
    zExp = bExp;
    zSign ^= 1;
    goto normalizeRoundAndPack;
 aExpBigger:
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, b );
    1790:	44 80 ff fc 	be r4,r0,1780 <subFloat32Sigs+0xb0>
    1794:	fb ff fd b7 	calli e70 <propagateFloat32NaN>
    1798:	b8 20 40 00 	mv r8,r1
    179c:	e3 ff ff f9 	bi 1780 <subFloat32Sigs+0xb0>
    }
    if ( bExp == 0 ) {
        --expDiff;
    }
    else {
        bSig |= 0x40000000;
    17a0:	78 08 40 00 	mvhi r8,0x4000
    17a4:	b9 00 08 00 	mv r1,r8
    17a8:	38 21 00 00 	ori r1,r1,0x0
    17ac:	b8 a1 28 00 	or r5,r5,r1
        z = a;
    }
    else if ( count < 32 ) {
    17b0:	34 01 00 1f 	mvi r1,31
    17b4:	49 21 00 07 	bg r9,r1,17d0 <subFloat32Sigs+0x100>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    17b8:	c8 09 08 00 	sub r1,r0,r9
    17bc:	bc a1 08 00 	sl r1,r5,r1
    17c0:	80 a9 10 00 	sru r2,r5,r9
    17c4:	7c 21 00 00 	cmpnei r1,r1,0
    17c8:	b8 22 28 00 	or r5,r1,r2
    17cc:	e3 ff ff e5 	bi 1760 <subFloat32Sigs+0x90>
    }
    else {
        z = ( a != 0 );
    17d0:	7c a5 00 00 	cmpnei r5,r5,0
    17d4:	e3 ff ff e3 	bi 1760 <subFloat32Sigs+0x90>
    aSig <<= 7;
    bSig <<= 7;
    if ( 0 < expDiff ) goto aExpBigger;
    if ( expDiff < 0 ) goto bExpBigger;
    if ( aExp == 0xFF ) {
        if ( aSig | bSig ) return propagateFloat32NaN( a, b );
    17d8:	b8 a4 18 00 	or r3,r5,r4
    17dc:	5c 60 ff ee 	bne r3,r0,1794 <subFloat32Sigs+0xc4>
    17e0:	78 02 00 00 	mvhi r2,0x0
    17e4:	38 42 40 3c 	ori r2,r2,0x403c
    17e8:	28 41 00 00 	lw r1,(r2+0)
    17ec:	34 08 ff ff 	mvi r8,-1
    17f0:	38 21 00 10 	ori r1,r1,0x10
    17f4:	58 41 00 00 	sw (r2+0),r1
    17f8:	e3 ff ff e2 	bi 1780 <subFloat32Sigs+0xb0>
    }
    if ( bSig < aSig ) goto aBigger;
    if ( aSig < bSig ) goto bBigger;
    return packFloat32( float_rounding_mode == float_round_down, 0, 0 );
 bExpBigger:
    if ( bExp == 0xFF ) {
    17fc:	34 03 00 ff 	mvi r3,255
    1800:	44 e3 00 17 	be r7,r3,185c <subFloat32Sigs+0x18c>
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign ^ 1, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
    1804:	44 c0 00 13 	be r6,r0,1850 <subFloat32Sigs+0x180>
        ++expDiff;
    }
    else {
        aSig |= 0x40000000;
    1808:	78 08 40 00 	mvhi r8,0x4000
    180c:	b9 00 08 00 	mv r1,r8
    1810:	38 21 00 00 	ori r1,r1,0x0
    1814:	b8 81 20 00 	or r4,r4,r1
    }
    shift32RightJamming( aSig, - expDiff, &aSig );
    1818:	c8 09 10 00 	sub r2,r0,r9
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
    181c:	44 40 00 07 	be r2,r0,1838 <subFloat32Sigs+0x168>
        z = a;
    }
    else if ( count < 32 ) {
    1820:	34 01 00 1f 	mvi r1,31
    1824:	48 41 00 15 	bg r2,r1,1878 <subFloat32Sigs+0x1a8>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    1828:	bc 89 08 00 	sl r1,r4,r9
    182c:	80 82 10 00 	sru r2,r4,r2
    1830:	7c 21 00 00 	cmpnei r1,r1,0
    1834:	b8 22 20 00 	or r4,r1,r2
    bSig |= 0x40000000;
    1838:	39 08 00 00 	ori r8,r8,0x0
    183c:	b8 a8 28 00 	or r5,r5,r8
 bBigger:
    zSig = bSig - aSig;
    1840:	c8 a4 18 00 	sub r3,r5,r4
    zExp = bExp;
    zSign ^= 1;
    1844:	19 4a 00 01 	xori r10,r10,0x1
    1848:	b8 e0 10 00 	mv r2,r7
    184c:	e3 ff ff c9 	bi 1770 <subFloat32Sigs+0xa0>
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign ^ 1, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
        ++expDiff;
    1850:	35 29 00 01 	addi r9,r9,1
    1854:	78 08 40 00 	mvhi r8,0x4000
    1858:	e3 ff ff f0 	bi 1818 <subFloat32Sigs+0x148>
    if ( bSig < aSig ) goto aBigger;
    if ( aSig < bSig ) goto bBigger;
    return packFloat32( float_rounding_mode == float_round_down, 0, 0 );
 bExpBigger:
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    185c:	5c a0 ff ce 	bne r5,r0,1794 <subFloat32Sigs+0xc4>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1860:	19 42 00 01 	xori r2,r10,0x1
    1864:	3c 42 00 1f 	sli r2,r2,31
    1868:	78 01 7f 80 	mvhi r1,0x7f80
    186c:	38 21 00 00 	ori r1,r1,0x0
    1870:	b4 41 40 00 	add r8,r2,r1
    1874:	e3 ff ff c3 	bi 1780 <subFloat32Sigs+0xb0>
    }
    else {
        z = ( a != 0 );
    1878:	7c 84 00 00 	cmpnei r4,r4,0
    187c:	e3 ff ff ef 	bi 1838 <subFloat32Sigs+0x168>

00001880 <float32_add>:
and `b'.  The operation is performed according to the IEC/IEEE Standard for
Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_add( float32 a, float32 b )
{
    1880:	37 9c ff fc 	addi sp,sp,-4
    1884:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    1888:	00 24 00 1f 	srui r4,r1,31
{
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
    188c:	00 43 00 1f 	srui r3,r2,31
    1890:	44 83 00 06 	be r4,r3,18a8 <float32_add+0x28>
        return addFloat32Sigs( a, b, aSign );
    }
    else {
        return subFloat32Sigs( a, b, aSign );
    1894:	b8 80 18 00 	mv r3,r4
    1898:	fb ff ff 8e 	calli 16d0 <subFloat32Sigs>
    }

}
    189c:	2b 9d 00 04 	lw ra,(sp+4)
    18a0:	37 9c 00 04 	addi sp,sp,4
    18a4:	c3 a0 00 00 	ret
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
        return addFloat32Sigs( a, b, aSign );
    18a8:	b8 80 18 00 	mv r3,r4
    18ac:	fb ff ff 24 	calli 153c <addFloat32Sigs>
    }
    else {
        return subFloat32Sigs( a, b, aSign );
    }

}
    18b0:	2b 9d 00 04 	lw ra,(sp+4)
    18b4:	37 9c 00 04 	addi sp,sp,4
    18b8:	c3 a0 00 00 	ret

000018bc <float32_sub>:
`a' and `b'.  The operation is performed according to the IEC/IEEE Standard
for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_sub( float32 a, float32 b )
{
    18bc:	37 9c ff fc 	addi sp,sp,-4
    18c0:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    18c4:	00 24 00 1f 	srui r4,r1,31
{
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
    18c8:	00 43 00 1f 	srui r3,r2,31
    18cc:	44 83 00 06 	be r4,r3,18e4 <float32_sub+0x28>
        return subFloat32Sigs( a, b, aSign );
    }
    else {
        return addFloat32Sigs( a, b, aSign );
    18d0:	b8 80 18 00 	mv r3,r4
    18d4:	fb ff ff 1a 	calli 153c <addFloat32Sigs>
    }

}
    18d8:	2b 9d 00 04 	lw ra,(sp+4)
    18dc:	37 9c 00 04 	addi sp,sp,4
    18e0:	c3 a0 00 00 	ret
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
        return subFloat32Sigs( a, b, aSign );
    18e4:	b8 80 18 00 	mv r3,r4
    18e8:	fb ff ff 7a 	calli 16d0 <subFloat32Sigs>
    }
    else {
        return addFloat32Sigs( a, b, aSign );
    }

}
    18ec:	2b 9d 00 04 	lw ra,(sp+4)
    18f0:	37 9c 00 04 	addi sp,sp,4
    18f4:	c3 a0 00 00 	ret

000018f8 <float32_mul>:
`a' and `b'.  The operation is performed according to the IEC/IEEE Standard
for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_mul( float32 a, float32 b )
{
    18f8:	37 9c ff f4 	addi sp,sp,-12
    18fc:	5b 8b 00 0c 	sw (sp+12),r11
    1900:	5b 8c 00 08 	sw (sp+8),r12
    1904:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1908:	00 24 00 17 	srui r4,r1,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    190c:	78 03 00 7f 	mvhi r3,0x7f
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1910:	00 46 00 17 	srui r6,r2,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1914:	38 63 ff ff 	ori r3,r3,0xffff
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1918:	20 8a 00 ff 	andi r10,r4,0xff
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    191c:	98 22 28 00 	xor r5,r1,r2
    if ( aExp == 0xFF ) {
    1920:	34 09 00 ff 	mvi r9,255
`a' and `b'.  The operation is performed according to the IEC/IEEE Standard
for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_mul( float32 a, float32 b )
{
    1924:	b8 20 38 00 	mv r7,r1
    1928:	b8 40 40 00 	mv r8,r2
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    192c:	a0 43 58 00 	and r11,r2,r3
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1930:	a0 c9 20 00 	and r4,r6,r9
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    1934:	00 ac 00 1f 	srui r12,r5,31
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1938:	a0 23 e8 00 	and ra,r1,r3
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
    193c:	45 49 00 61 	be r10,r9,1ac0 <float32_mul+0x1c8>
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
    1940:	44 89 00 51 	be r4,r9,1a84 <float32_mul+0x18c>
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
    1944:	5d 40 00 13 	bne r10,r0,1990 <float32_mul+0x98>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1948:	3d 85 00 1f 	sli r5,r12,31
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
    194c:	47 aa 00 48 	be ra,r10,1a6c <float32_mul+0x174>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    1950:	38 01 ff ff 	mvu r1,0xffff
    1954:	50 3d 00 77 	bgeu r1,ra,1b30 <float32_mul+0x238>
    1958:	bb a0 18 00 	mv r3,ra
    195c:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    1960:	3c 63 00 08 	sli r3,r3,8
    1964:	34 45 ff f8 	addi r5,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1968:	00 63 00 18 	srui r3,r3,24
    196c:	78 01 00 00 	mvhi r1,0x0
    1970:	3c 63 00 02 	sli r3,r3,2
    1974:	38 21 3b 80 	ori r1,r1,0x3b80
    1978:	b4 23 08 00 	add r1,r1,r3
    197c:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    1980:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1984:	b4 a2 10 00 	add r2,r5,r2
    *zSigPtr = aSig<<shiftCount;
    1988:	bf a2 e8 00 	sl ra,ra,r2
    *zExpPtr = 1 - shiftCount;
    198c:	c8 22 50 00 	sub r10,r1,r2
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    if ( bExp == 0 ) {
    1990:	5c 80 00 13 	bne r4,r0,19dc <float32_mul+0xe4>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1994:	3d 85 00 1f 	sli r5,r12,31
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
    1998:	45 64 00 35 	be r11,r4,1a6c <float32_mul+0x174>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    199c:	38 01 ff ff 	mvu r1,0xffff
    19a0:	50 2b 00 6a 	bgeu r1,r11,1b48 <float32_mul+0x250>
    19a4:	b9 60 18 00 	mv r3,r11
    19a8:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    19ac:	3c 63 00 08 	sli r3,r3,8
    19b0:	34 44 ff f8 	addi r4,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    19b4:	00 63 00 18 	srui r3,r3,24
    19b8:	78 01 00 00 	mvhi r1,0x0
    19bc:	3c 63 00 02 	sli r3,r3,2
    19c0:	38 21 3b 80 	ori r1,r1,0x3b80
    19c4:	b4 23 08 00 	add r1,r1,r3
    19c8:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    19cc:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    19d0:	b4 82 10 00 	add r2,r4,r2
    *zSigPtr = aSig<<shiftCount;
    19d4:	bd 62 58 00 	sl r11,r11,r2
    *zExpPtr = 1 - shiftCount;
    19d8:	c8 22 20 00 	sub r4,r1,r2
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    zExp = aExp + bExp - 0x7F;
    aSig = ( aSig | 0x00800000 )<<7;
    19dc:	78 01 00 80 	mvhi r1,0x80
    19e0:	38 21 00 00 	ori r1,r1,0x0
    bSig = ( bSig | 0x00800000 )<<8;
    19e4:	b9 61 10 00 	or r2,r11,r1
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    zExp = aExp + bExp - 0x7F;
    aSig = ( aSig | 0x00800000 )<<7;
    19e8:	bb a1 08 00 	or r1,ra,r1
    19ec:	3c 21 00 07 	sli r1,r1,7
    bSig = ( bSig | 0x00800000 )<<8;
    19f0:	3c 42 00 08 	sli r2,r2,8
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    19f4:	00 3d 00 10 	srui ra,r1,16
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    19f8:	00 4b 00 10 	srui r11,r2,16

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    19fc:	20 29 ff ff 	andi r9,r1,0xffff
    1a00:	20 48 ff ff 	andi r8,r2,0xffff
    zMiddleA = ( (bits32) aLow ) * bHigh;
    1a04:	89 69 18 00 	mul r3,r11,r9
    zMiddleB = ( (bits32) aHigh ) * bLow;
    1a08:	89 1d 10 00 	mul r2,r8,ra
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    zExp = aExp + bExp - 0x7F;
    1a0c:	35 41 ff 81 	addi r1,r10,-127
    1a10:	b4 24 30 00 	add r6,r1,r4
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    1a14:	b4 62 08 00 	add r1,r3,r2
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1a18:	54 41 00 36 	bgu r2,r1,1af0 <float32_mul+0x1f8>
    1a1c:	34 07 00 00 	mvi r7,0

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    1a20:	89 09 18 00 	mul r3,r8,r9
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
    1a24:	3c 22 00 10 	sli r2,r1,16
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1a28:	89 7d 20 00 	mul r4,r11,ra
    zMiddleA <<= 16;
    z1 += zMiddleA;
    1a2c:	b4 43 18 00 	add r3,r2,r3
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1a30:	00 21 00 10 	srui r1,r1,16
    1a34:	f4 43 10 00 	cmpgu r2,r2,r3
    1a38:	b4 24 08 00 	add r1,r1,r4
    1a3c:	b4 22 08 00 	add r1,r1,r2
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    mul32To64( aSig, bSig, &zSig0, &zSig1 );
    zSig0 |= ( zSig1 != 0 );
    1a40:	7c 63 00 00 	cmpnei r3,r3,0
    1a44:	b4 27 08 00 	add r1,r1,r7
    1a48:	b8 23 18 00 	or r3,r1,r3
    if ( 0 <= (sbits32) ( zSig0<<1 ) ) {
    1a4c:	b4 63 08 00 	add r1,r3,r3
    1a50:	48 01 00 03 	bg r0,r1,1a5c <float32_mul+0x164>
        zSig0 <<= 1;
        --zExp;
    1a54:	34 c6 ff ff 	addi r6,r6,-1
    1a58:	b8 20 18 00 	mv r3,r1
    }
    return roundAndPackFloat32( zSign, zExp, zSig0 );
    1a5c:	b9 80 08 00 	mv r1,r12
    1a60:	b8 c0 10 00 	mv r2,r6
    1a64:	fb ff fd 32 	calli f2c <roundAndPackFloat32>
    1a68:	b8 20 28 00 	mv r5,r1

}
    1a6c:	b8 a0 08 00 	mv r1,r5
    1a70:	2b 9d 00 04 	lw ra,(sp+4)
    1a74:	2b 8b 00 0c 	lw r11,(sp+12)
    1a78:	2b 8c 00 08 	lw r12,(sp+8)
    1a7c:	37 9c 00 0c 	addi sp,sp,12
    1a80:	c3 a0 00 00 	ret
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    1a84:	5d 60 00 28 	bne r11,r0,1b24 <float32_mul+0x22c>
        if ( ( aExp | aSig ) == 0 ) {
    1a88:	b9 5d 08 00 	or r1,r10,ra
    1a8c:	5c 2b 00 14 	bne r1,r11,1adc <float32_mul+0x1e4>
    1a90:	78 02 00 00 	mvhi r2,0x0
    1a94:	38 42 40 3c 	ori r2,r2,0x403c
    1a98:	28 41 00 00 	lw r1,(r2+0)
    1a9c:	34 05 ff ff 	mvi r5,-1
    1aa0:	38 21 00 10 	ori r1,r1,0x10
    1aa4:	58 41 00 00 	sw (r2+0),r1
        zSig0 <<= 1;
        --zExp;
    }
    return roundAndPackFloat32( zSign, zExp, zSig0 );

}
    1aa8:	b8 a0 08 00 	mv r1,r5
    1aac:	2b 9d 00 04 	lw ra,(sp+4)
    1ab0:	2b 8b 00 0c 	lw r11,(sp+12)
    1ab4:	2b 8c 00 08 	lw r12,(sp+8)
    1ab8:	37 9c 00 0c 	addi sp,sp,12
    1abc:	c3 a0 00 00 	ret
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig || ( ( bExp == 0xFF ) && bSig ) ) {
    1ac0:	5f a0 00 0f 	bne ra,r0,1afc <float32_mul+0x204>
    1ac4:	e4 89 10 00 	cmpe r2,r4,r9
    1ac8:	7d 61 00 00 	cmpnei r1,r11,0
    1acc:	a0 41 10 00 	and r2,r2,r1
    1ad0:	5c 5d 00 0b 	bne r2,ra,1afc <float32_mul+0x204>
            return propagateFloat32NaN( a, b );
        }
        if ( ( bExp | bSig ) == 0 ) {
    1ad4:	b8 8b 08 00 	or r1,r4,r11
    1ad8:	44 22 ff ee 	be r1,r2,1a90 <float32_mul+0x198>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1adc:	3d 82 00 1f 	sli r2,r12,31
    1ae0:	78 01 7f 80 	mvhi r1,0x7f80
    1ae4:	38 21 00 00 	ori r1,r1,0x0
    1ae8:	b4 41 28 00 	add r5,r2,r1
    1aec:	e3 ff ff e0 	bi 1a6c <float32_mul+0x174>
    1af0:	78 07 00 01 	mvhi r7,0x1
    1af4:	38 e7 00 00 	ori r7,r7,0x0
    1af8:	e3 ff ff ca 	bi 1a20 <float32_mul+0x128>
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig || ( ( bExp == 0xFF ) && bSig ) ) {
            return propagateFloat32NaN( a, b );
    1afc:	b8 e0 08 00 	mv r1,r7
    1b00:	b9 00 10 00 	mv r2,r8
    1b04:	fb ff fc db 	calli e70 <propagateFloat32NaN>
    1b08:	b8 20 28 00 	mv r5,r1
        zSig0 <<= 1;
        --zExp;
    }
    return roundAndPackFloat32( zSign, zExp, zSig0 );

}
    1b0c:	b8 a0 08 00 	mv r1,r5
    1b10:	2b 9d 00 04 	lw ra,(sp+4)
    1b14:	2b 8b 00 0c 	lw r11,(sp+12)
    1b18:	2b 8c 00 08 	lw r12,(sp+8)
    1b1c:	37 9c 00 0c 	addi sp,sp,12
    1b20:	c3 a0 00 00 	ret
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    1b24:	fb ff fc d3 	calli e70 <propagateFloat32NaN>
    1b28:	b8 20 28 00 	mv r5,r1
    1b2c:	e3 ff ff d0 	bi 1a6c <float32_mul+0x174>
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    1b30:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    1b34:	3f a3 00 10 	sli r3,ra,16
    }
    if ( a < 0x1000000 ) {
    1b38:	38 21 ff ff 	ori r1,r1,0xffff
    1b3c:	50 23 00 09 	bgeu r1,r3,1b60 <float32_mul+0x268>
    1b40:	34 05 00 08 	mvi r5,8
    1b44:	e3 ff ff 89 	bi 1968 <float32_mul+0x70>
    1b48:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    1b4c:	3d 63 00 10 	sli r3,r11,16
    }
    if ( a < 0x1000000 ) {
    1b50:	38 21 ff ff 	ori r1,r1,0xffff
    1b54:	50 23 00 05 	bgeu r1,r3,1b68 <float32_mul+0x270>
    1b58:	34 04 00 08 	mvi r4,8
    1b5c:	e3 ff ff 96 	bi 19b4 <float32_mul+0xbc>
    1b60:	34 02 00 18 	mvi r2,24
    1b64:	e3 ff ff 7f 	bi 1960 <float32_mul+0x68>
    1b68:	34 02 00 18 	mvi r2,24
    1b6c:	e3 ff ff 90 	bi 19ac <float32_mul+0xb4>

00001b70 <float32_div>:
by the corresponding value `b'.  The operation is performed according to
the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_div( float32 a, float32 b )
{
    1b70:	37 9c ff ec 	addi sp,sp,-20
    1b74:	5b 8b 00 14 	sw (sp+20),r11
    1b78:	5b 8c 00 10 	sw (sp+16),r12
    1b7c:	5b 8d 00 0c 	sw (sp+12),r13
    1b80:	5b 8e 00 08 	sw (sp+8),r14
    1b84:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1b88:	00 26 00 17 	srui r6,r1,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1b8c:	78 03 00 7f 	mvhi r3,0x7f
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1b90:	00 47 00 17 	srui r7,r2,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1b94:	38 63 ff ff 	ori r3,r3,0xffff
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    1b98:	98 22 40 00 	xor r8,r1,r2
    if ( aExp == 0xFF ) {
    1b9c:	34 09 00 ff 	mvi r9,255
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1ba0:	20 c6 00 ff 	andi r6,r6,0xff
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1ba4:	a0 43 50 00 	and r10,r2,r3
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1ba8:	a0 e9 38 00 	and r7,r7,r9
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    1bac:	01 0e 00 1f 	srui r14,r8,31
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1bb0:	a0 23 28 00 	and r5,r1,r3
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
    1bb4:	44 c9 00 73 	be r6,r9,1d80 <float32_div+0x210>
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
    1bb8:	44 e9 00 58 	be r7,r9,1d18 <float32_div+0x1a8>
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign, 0, 0 );
    }
    if ( bExp == 0 ) {
    1bbc:	5c e0 00 12 	bne r7,r0,1c04 <float32_div+0x94>
        if ( bSig == 0 ) {
    1bc0:	45 47 00 7e 	be r10,r7,1db8 <float32_div+0x248>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    1bc4:	38 01 ff ff 	mvu r1,0xffff
    1bc8:	50 2a 00 9a 	bgeu r1,r10,1e30 <float32_div+0x2c0>
    1bcc:	b9 40 18 00 	mv r3,r10
    1bd0:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    1bd4:	3c 63 00 08 	sli r3,r3,8
    1bd8:	34 44 ff f8 	addi r4,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1bdc:	00 63 00 18 	srui r3,r3,24
    1be0:	78 01 00 00 	mvhi r1,0x0
    1be4:	3c 63 00 02 	sli r3,r3,2
    1be8:	38 21 3b 80 	ori r1,r1,0x3b80
    1bec:	b4 23 08 00 	add r1,r1,r3
    1bf0:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    1bf4:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1bf8:	b4 82 10 00 	add r2,r4,r2
    *zSigPtr = aSig<<shiftCount;
    1bfc:	bd 42 50 00 	sl r10,r10,r2
    *zExpPtr = 1 - shiftCount;
    1c00:	c8 22 38 00 	sub r7,r1,r2
            float_raise( float_flag_divbyzero );
            return packFloat32( zSign, 0xFF, 0 );
        }
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    if ( aExp == 0 ) {
    1c04:	5c c0 00 13 	bne r6,r0,1c50 <float32_div+0xe0>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1c08:	3d c4 00 1f 	sli r4,r14,31
            return packFloat32( zSign, 0xFF, 0 );
        }
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
    1c0c:	44 a6 00 45 	be r5,r6,1d20 <float32_div+0x1b0>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    1c10:	38 01 ff ff 	mvu r1,0xffff
    1c14:	50 25 00 8d 	bgeu r1,r5,1e48 <float32_div+0x2d8>
    1c18:	b8 a0 18 00 	mv r3,r5
    1c1c:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    1c20:	3c 63 00 08 	sli r3,r3,8
    1c24:	34 44 ff f8 	addi r4,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1c28:	00 63 00 18 	srui r3,r3,24
    1c2c:	78 01 00 00 	mvhi r1,0x0
    1c30:	3c 63 00 02 	sli r3,r3,2
    1c34:	38 21 3b 80 	ori r1,r1,0x3b80
    1c38:	b4 23 08 00 	add r1,r1,r3
    1c3c:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    1c40:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1c44:	b4 82 10 00 	add r2,r4,r2
    *zSigPtr = aSig<<shiftCount;
    1c48:	bc a2 28 00 	sl r5,r5,r2
    *zExpPtr = 1 - shiftCount;
    1c4c:	c8 22 30 00 	sub r6,r1,r2
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = aExp - bExp + 0x7D;
    aSig = ( aSig | 0x00800000 )<<7;
    1c50:	78 01 00 80 	mvhi r1,0x80
    1c54:	38 21 00 00 	ori r1,r1,0x0
    1c58:	b8 a1 10 00 	or r2,r5,r1
    1c5c:	3c 4c 00 07 	sli r12,r2,7
    bSig = ( bSig | 0x00800000 )<<8;
    1c60:	b9 41 08 00 	or r1,r10,r1
    1c64:	3c 2b 00 08 	sli r11,r1,8
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = aExp - bExp + 0x7D;
    1c68:	c8 c7 10 00 	sub r2,r6,r7
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    if ( bSig <= ( aSig + aSig ) ) {
    1c6c:	b5 8c 08 00 	add r1,r12,r12
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = aExp - bExp + 0x7D;
    1c70:	34 4d 00 7d 	addi r13,r2,125
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    if ( bSig <= ( aSig + aSig ) ) {
    1c74:	55 61 00 03 	bgu r11,r1,1c80 <float32_div+0x110>
        aSig >>= 1;
    1c78:	01 8c 00 01 	srui r12,r12,1
        ++zExp;
    1c7c:	35 ad 00 01 	addi r13,r13,1
    }
    zSig = estimateDiv64To32( aSig, 0, bSig );
    1c80:	34 02 00 00 	mvi r2,0
    1c84:	b9 80 08 00 	mv r1,r12
    1c88:	b9 60 18 00 	mv r3,r11
    1c8c:	fb ff fc 0c 	calli cbc <estimateDiv64To32>
    1c90:	b8 20 38 00 	mv r7,r1
    if ( ( zSig & 0x3F ) <= 2 ) {
    1c94:	20 22 00 3f 	andi r2,r1,0x3f
    1c98:	34 01 00 02 	mvi r1,2
    1c9c:	54 41 00 2c 	bgu r2,r1,1d4c <float32_div+0x1dc>
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    1ca0:	00 e9 00 10 	srui r9,r7,16
    zMiddleB = ( (bits32) aHigh ) * bLow;
    1ca4:	01 68 00 10 	srui r8,r11,16

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    1ca8:	21 64 ff ff 	andi r4,r11,0xffff
    1cac:	20 e3 ff ff 	andi r3,r7,0xffff
    zMiddleA = ( (bits32) aLow ) * bHigh;
    1cb0:	89 24 10 00 	mul r2,r9,r4
    zMiddleB = ( (bits32) aHigh ) * bLow;
    1cb4:	88 68 08 00 	mul r1,r3,r8
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    1cb8:	b4 41 28 00 	add r5,r2,r1
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1cbc:	54 25 00 5a 	bgu r1,r5,1e24 <float32_div+0x2b4>
    1cc0:	34 06 00 00 	mvi r6,0

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    1cc4:	88 64 18 00 	mul r3,r3,r4
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
    1cc8:	3c a2 00 10 	sli r2,r5,16
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1ccc:	89 28 08 00 	mul r1,r9,r8
    zMiddleA <<= 16;
    z1 += zMiddleA;
    1cd0:	b4 43 18 00 	add r3,r2,r3
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1cd4:	00 a5 00 10 	srui r5,r5,16
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    1cd8:	7c 64 00 00 	cmpnei r4,r3,0
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1cdc:	c9 81 08 00 	sub r1,r12,r1
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    1ce0:	f4 43 10 00 	cmpgu r2,r2,r3
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1ce4:	c8 25 08 00 	sub r1,r1,r5
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    1ce8:	c8 24 08 00 	sub r1,r1,r4
    1cec:	c8 22 08 00 	sub r1,r1,r2
    1cf0:	c8 26 10 00 	sub r2,r1,r6
INLINE void
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    1cf4:	c8 03 18 00 	sub r3,r0,r3
        mul32To64( bSig, zSig, &term0, &term1 );
        sub64( aSig, 0, term0, term1, &rem0, &rem1 );
        while ( (sbits32) rem0 < 0 ) {
    1cf8:	4c 40 00 13 	bge r2,r0,1d44 <float32_div+0x1d4>
 add64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{
    bits32 z1;

    z1 = a1 + b1;
    1cfc:	b4 6b 20 00 	add r4,r3,r11
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
    1d00:	f4 64 08 00 	cmpgu r1,r3,r4
            --zSig;
    1d04:	34 e7 ff ff 	addi r7,r7,-1
    1d08:	b4 41 10 00 	add r2,r2,r1
    }
    zSig = estimateDiv64To32( aSig, 0, bSig );
    if ( ( zSig & 0x3F ) <= 2 ) {
        mul32To64( bSig, zSig, &term0, &term1 );
        sub64( aSig, 0, term0, term1, &rem0, &rem1 );
        while ( (sbits32) rem0 < 0 ) {
    1d0c:	b8 80 18 00 	mv r3,r4
    1d10:	4c 40 00 0c 	bge r2,r0,1d40 <float32_div+0x1d0>
    1d14:	e3 ff ff fa 	bi 1cfc <float32_div+0x18c>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1d18:	3d c4 00 1f 	sli r4,r14,31
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    1d1c:	5d 40 00 38 	bne r10,r0,1dfc <float32_div+0x28c>
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    1d20:	b8 80 08 00 	mv r1,r4
    1d24:	2b 9d 00 04 	lw ra,(sp+4)
    1d28:	2b 8b 00 14 	lw r11,(sp+20)
    1d2c:	2b 8c 00 10 	lw r12,(sp+16)
    1d30:	2b 8d 00 0c 	lw r13,(sp+12)
    1d34:	2b 8e 00 08 	lw r14,(sp+8)
    1d38:	37 9c 00 14 	addi sp,sp,20
    1d3c:	c3 a0 00 00 	ret
    }
    zSig = estimateDiv64To32( aSig, 0, bSig );
    if ( ( zSig & 0x3F ) <= 2 ) {
        mul32To64( bSig, zSig, &term0, &term1 );
        sub64( aSig, 0, term0, term1, &rem0, &rem1 );
        while ( (sbits32) rem0 < 0 ) {
    1d40:	b8 80 18 00 	mv r3,r4
            --zSig;
            add64( rem0, rem1, 0, bSig, &rem0, &rem1 );
        }
        zSig |= ( rem1 != 0 );
    1d44:	7c 61 00 00 	cmpnei r1,r3,0
    1d48:	b8 e1 38 00 	or r7,r7,r1
    }
    return roundAndPackFloat32( zSign, zExp, zSig );
    1d4c:	b9 c0 08 00 	mv r1,r14
    1d50:	b9 a0 10 00 	mv r2,r13
    1d54:	b8 e0 18 00 	mv r3,r7
    1d58:	fb ff fc 75 	calli f2c <roundAndPackFloat32>
    1d5c:	b8 20 20 00 	mv r4,r1

}
    1d60:	b8 80 08 00 	mv r1,r4
    1d64:	2b 9d 00 04 	lw ra,(sp+4)
    1d68:	2b 8b 00 14 	lw r11,(sp+20)
    1d6c:	2b 8c 00 10 	lw r12,(sp+16)
    1d70:	2b 8d 00 0c 	lw r13,(sp+12)
    1d74:	2b 8e 00 08 	lw r14,(sp+8)
    1d78:	37 9c 00 14 	addi sp,sp,20
    1d7c:	c3 a0 00 00 	ret
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, b );
    1d80:	5c a0 00 1f 	bne r5,r0,1dfc <float32_div+0x28c>
        if ( bExp == 0xFF ) {
    1d84:	44 e6 00 1d 	be r7,r6,1df8 <float32_div+0x288>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1d88:	3d c2 00 1f 	sli r2,r14,31
    1d8c:	78 01 7f 80 	mvhi r1,0x7f80
    1d90:	38 21 00 00 	ori r1,r1,0x0
    1d94:	b4 41 20 00 	add r4,r2,r1
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    1d98:	b8 80 08 00 	mv r1,r4
    1d9c:	2b 9d 00 04 	lw ra,(sp+4)
    1da0:	2b 8b 00 14 	lw r11,(sp+20)
    1da4:	2b 8c 00 10 	lw r12,(sp+16)
    1da8:	2b 8d 00 0c 	lw r13,(sp+12)
    1dac:	2b 8e 00 08 	lw r14,(sp+8)
    1db0:	37 9c 00 14 	addi sp,sp,20
    1db4:	c3 a0 00 00 	ret
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign, 0, 0 );
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) {
            if ( ( aExp | aSig ) == 0 ) {
    1db8:	b8 c5 08 00 	or r1,r6,r5
    1dbc:	5c 2a 00 29 	bne r1,r10,1e60 <float32_div+0x2f0>
    1dc0:	78 02 00 00 	mvhi r2,0x0
    1dc4:	38 42 40 3c 	ori r2,r2,0x403c
    1dc8:	28 41 00 00 	lw r1,(r2+0)
    1dcc:	34 04 ff ff 	mvi r4,-1
    1dd0:	38 21 00 10 	ori r1,r1,0x10
    1dd4:	58 41 00 00 	sw (r2+0),r1
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    1dd8:	b8 80 08 00 	mv r1,r4
    1ddc:	2b 9d 00 04 	lw ra,(sp+4)
    1de0:	2b 8b 00 14 	lw r11,(sp+20)
    1de4:	2b 8c 00 10 	lw r12,(sp+16)
    1de8:	2b 8d 00 0c 	lw r13,(sp+12)
    1dec:	2b 8e 00 08 	lw r14,(sp+8)
    1df0:	37 9c 00 14 	addi sp,sp,20
    1df4:	c3 a0 00 00 	ret
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, b );
        if ( bExp == 0xFF ) {
            if ( bSig ) return propagateFloat32NaN( a, b );
    1df8:	45 40 ff f2 	be r10,r0,1dc0 <float32_div+0x250>
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    1dfc:	fb ff fc 1d 	calli e70 <propagateFloat32NaN>
    1e00:	b8 20 20 00 	mv r4,r1
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    1e04:	b8 80 08 00 	mv r1,r4
    1e08:	2b 9d 00 04 	lw ra,(sp+4)
    1e0c:	2b 8b 00 14 	lw r11,(sp+20)
    1e10:	2b 8c 00 10 	lw r12,(sp+16)
    1e14:	2b 8d 00 0c 	lw r13,(sp+12)
    1e18:	2b 8e 00 08 	lw r14,(sp+8)
    1e1c:	37 9c 00 14 	addi sp,sp,20
    1e20:	c3 a0 00 00 	ret
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1e24:	78 06 00 01 	mvhi r6,0x1
    1e28:	38 c6 00 00 	ori r6,r6,0x0
    1e2c:	e3 ff ff a6 	bi 1cc4 <float32_div+0x154>
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    1e30:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    1e34:	3d 43 00 10 	sli r3,r10,16
    }
    if ( a < 0x1000000 ) {
    1e38:	38 21 ff ff 	ori r1,r1,0xffff
    1e3c:	50 23 00 13 	bgeu r1,r3,1e88 <float32_div+0x318>
    1e40:	34 04 00 08 	mvi r4,8
    1e44:	e3 ff ff 66 	bi 1bdc <float32_div+0x6c>
    1e48:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    1e4c:	3c a3 00 10 	sli r3,r5,16
    }
    if ( a < 0x1000000 ) {
    1e50:	38 21 ff ff 	ori r1,r1,0xffff
    1e54:	50 23 00 0f 	bgeu r1,r3,1e90 <float32_div+0x320>
    1e58:	34 04 00 08 	mvi r4,8
    1e5c:	e3 ff ff 73 	bi 1c28 <float32_div+0xb8>
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) {
            if ( ( aExp | aSig ) == 0 ) {
                float_raise( float_flag_invalid );
                return float32_default_nan;
    1e60:	78 03 00 00 	mvhi r3,0x0
    1e64:	38 63 40 3c 	ori r3,r3,0x403c
    1e68:	28 62 00 00 	lw r2,(r3+0)
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1e6c:	3d c4 00 1f 	sli r4,r14,31
    1e70:	78 01 7f 80 	mvhi r1,0x7f80
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) {
            if ( ( aExp | aSig ) == 0 ) {
                float_raise( float_flag_invalid );
                return float32_default_nan;
    1e74:	38 42 00 02 	ori r2,r2,0x2
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1e78:	38 21 00 00 	ori r1,r1,0x0
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) {
            if ( ( aExp | aSig ) == 0 ) {
                float_raise( float_flag_invalid );
                return float32_default_nan;
    1e7c:	58 62 00 00 	sw (r3+0),r2
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1e80:	b4 81 20 00 	add r4,r4,r1
    1e84:	e3 ff ff a7 	bi 1d20 <float32_div+0x1b0>
    1e88:	34 02 00 18 	mvi r2,24
    1e8c:	e3 ff ff 52 	bi 1bd4 <float32_div+0x64>
    1e90:	34 02 00 18 	mvi r2,24
    1e94:	e3 ff ff 63 	bi 1c20 <float32_div+0xb0>

00001e98 <float32_rem>:
with respect to the corresponding value `b'.  The operation is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_rem( float32 a, float32 b )
{
    1e98:	37 9c ff d8 	addi sp,sp,-40
    1e9c:	5b 8b 00 28 	sw (sp+40),r11
    1ea0:	5b 8c 00 24 	sw (sp+36),r12
    1ea4:	5b 8d 00 20 	sw (sp+32),r13
    1ea8:	5b 8e 00 1c 	sw (sp+28),r14
    1eac:	5b 8f 00 18 	sw (sp+24),r15
    1eb0:	5b 90 00 14 	sw (sp+20),r16
    1eb4:	5b 91 00 10 	sw (sp+16),r17
    1eb8:	5b 92 00 0c 	sw (sp+12),r18
    1ebc:	5b 93 00 08 	sw (sp+8),r19
    1ec0:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1ec4:	00 23 00 17 	srui r3,r1,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1ec8:	78 04 00 7f 	mvhi r4,0x7f
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1ecc:	00 45 00 17 	srui r5,r2,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1ed0:	38 84 ff ff 	ori r4,r4,0xffff
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1ed4:	20 67 00 ff 	andi r7,r3,0xff
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    if ( aExp == 0xFF ) {
    1ed8:	34 03 00 ff 	mvi r3,255
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1edc:	a0 44 40 00 	and r8,r2,r4
with respect to the corresponding value `b'.  The operation is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_rem( float32 a, float32 b )
{
    1ee0:	b8 20 80 00 	mv r16,r1
    1ee4:	b8 40 30 00 	mv r6,r2
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1ee8:	a0 a3 88 00 	and r17,r5,r3
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1eec:	a0 24 20 00 	and r4,r1,r4
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    if ( aExp == 0xFF ) {
    1ef0:	44 e3 00 82 	be r7,r3,20f8 <float32_rem+0x260>
            return propagateFloat32NaN( a, b );
        }
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( bExp == 0xFF ) {
    1ef4:	46 23 00 16 	be r17,r3,1f4c <float32_rem+0xb4>
        if ( bSig ) return propagateFloat32NaN( a, b );
        return a;
    }
    if ( bExp == 0 ) {
    1ef8:	5e 20 00 29 	bne r17,r0,1f9c <float32_rem+0x104>
        if ( bSig == 0 ) {
    1efc:	5d 11 00 18 	bne r8,r17,1f5c <float32_rem+0xc4>
    1f00:	78 02 00 00 	mvhi r2,0x0
    1f04:	38 42 40 3c 	ori r2,r2,0x403c
    1f08:	28 41 00 00 	lw r1,(r2+0)
    1f0c:	34 10 ff ff 	mvi r16,-1
    1f10:	38 21 00 10 	ori r1,r1,0x10
    1f14:	58 41 00 00 	sw (r2+0),r1
    }
    zSign = ( (sbits32) aSig < 0 );
    if ( zSign ) aSig = - aSig;
    return normalizeRoundAndPackFloat32( aSign ^ zSign, bExp, aSig );

}
    1f18:	ba 00 08 00 	mv r1,r16
    1f1c:	2b 9d 00 04 	lw ra,(sp+4)
    1f20:	2b 8b 00 28 	lw r11,(sp+40)
    1f24:	2b 8c 00 24 	lw r12,(sp+36)
    1f28:	2b 8d 00 20 	lw r13,(sp+32)
    1f2c:	2b 8e 00 1c 	lw r14,(sp+28)
    1f30:	2b 8f 00 18 	lw r15,(sp+24)
    1f34:	2b 90 00 14 	lw r16,(sp+20)
    1f38:	2b 91 00 10 	lw r17,(sp+16)
    1f3c:	2b 92 00 0c 	lw r18,(sp+12)
    1f40:	2b 93 00 08 	lw r19,(sp+8)
    1f44:	37 9c 00 28 	addi sp,sp,40
    1f48:	c3 a0 00 00 	ret
        }
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    1f4c:	45 00 ff f3 	be r8,r0,1f18 <float32_rem+0x80>
    1f50:	fb ff fb c8 	calli e70 <propagateFloat32NaN>
    1f54:	b8 20 80 00 	mv r16,r1
    1f58:	e3 ff ff f0 	bi 1f18 <float32_rem+0x80>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    1f5c:	38 01 ff ff 	mvu r1,0xffff
    1f60:	50 28 00 8c 	bgeu r1,r8,2190 <float32_rem+0x2f8>
    1f64:	b9 00 18 00 	mv r3,r8
    1f68:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    1f6c:	3c 63 00 08 	sli r3,r3,8
    1f70:	34 45 ff f8 	addi r5,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1f74:	00 63 00 18 	srui r3,r3,24
    1f78:	78 01 00 00 	mvhi r1,0x0
    1f7c:	3c 63 00 02 	sli r3,r3,2
    1f80:	38 21 3b 80 	ori r1,r1,0x3b80
    1f84:	b4 23 08 00 	add r1,r1,r3
    1f88:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    1f8c:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1f90:	b4 a2 10 00 	add r2,r5,r2
    *zSigPtr = aSig<<shiftCount;
    1f94:	bd 02 40 00 	sl r8,r8,r2
    *zExpPtr = 1 - shiftCount;
    1f98:	c8 22 88 00 	sub r17,r1,r2
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    if ( aExp == 0 ) {
    1f9c:	5c e0 00 12 	bne r7,r0,1fe4 <float32_rem+0x14c>
        if ( aSig == 0 ) return a;
    1fa0:	44 87 ff de 	be r4,r7,1f18 <float32_rem+0x80>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    1fa4:	38 01 ff ff 	mvu r1,0xffff
    1fa8:	50 24 00 74 	bgeu r1,r4,2178 <float32_rem+0x2e0>
    1fac:	b8 80 18 00 	mv r3,r4
    1fb0:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    1fb4:	3c 63 00 08 	sli r3,r3,8
    1fb8:	34 45 ff f8 	addi r5,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1fbc:	00 63 00 18 	srui r3,r3,24
    1fc0:	78 01 00 00 	mvhi r1,0x0
    1fc4:	3c 63 00 02 	sli r3,r3,2
    1fc8:	38 21 3b 80 	ori r1,r1,0x3b80
    1fcc:	b4 23 08 00 	add r1,r1,r3
    1fd0:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    1fd4:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1fd8:	b4 a2 10 00 	add r2,r5,r2
    *zSigPtr = aSig<<shiftCount;
    1fdc:	bc 82 20 00 	sl r4,r4,r2
    *zExpPtr = 1 - shiftCount;
    1fe0:	c8 22 38 00 	sub r7,r1,r2
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return a;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    expDiff = aExp - bExp;
    aSig = ( aSig | 0x00800000 )<<8;
    1fe4:	78 02 00 80 	mvhi r2,0x80
    1fe8:	b8 40 08 00 	mv r1,r2
    1fec:	38 21 00 00 	ori r1,r1,0x0
    1ff0:	b8 81 08 00 	or r1,r4,r1
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return a;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    expDiff = aExp - bExp;
    1ff4:	c8 f1 98 00 	sub r19,r7,r17
    aSig = ( aSig | 0x00800000 )<<8;
    1ff8:	3c 2c 00 08 	sli r12,r1,8
    bSig = ( bSig | 0x00800000 )<<8;
    if ( expDiff < 0 ) {
    1ffc:	4e 60 00 04 	bge r19,r0,200c <float32_rem+0x174>
        if ( expDiff < -1 ) return a;
    2000:	34 01 ff ff 	mvi r1,-1
    2004:	5e 61 ff c5 	bne r19,r1,1f18 <float32_rem+0x80>
        aSig >>= 1;
    2008:	01 8c 00 01 	srui r12,r12,1
        if ( aSig == 0 ) return a;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    expDiff = aExp - bExp;
    aSig = ( aSig | 0x00800000 )<<8;
    bSig = ( bSig | 0x00800000 )<<8;
    200c:	38 42 00 00 	ori r2,r2,0x0
    2010:	b9 02 08 00 	or r1,r8,r2
    2014:	3c 2d 00 08 	sli r13,r1,8
    if ( expDiff < 0 ) {
        if ( expDiff < -1 ) return a;
        aSig >>= 1;
    }
    q = ( bSig <= aSig );
    2018:	f1 8d 28 00 	cmpgeu r5,r12,r13
    if ( q ) aSig -= bSig;
    201c:	44 a0 00 02 	be r5,r0,2024 <float32_rem+0x18c>
    2020:	c9 8d 60 00 	sub r12,r12,r13
    expDiff -= 32;
    2024:	36 6f ff e0 	addi r15,r19,-32
    while ( 0 < expDiff ) {
    2028:	01 ae 00 02 	srui r14,r13,2
    202c:	b9 e0 58 00 	mv r11,r15
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
    2030:	34 12 00 02 	mvi r18,2
        aSig >>= 1;
    }
    q = ( bSig <= aSig );
    if ( q ) aSig -= bSig;
    expDiff -= 32;
    while ( 0 < expDiff ) {
    2034:	49 e0 00 02 	bg r15,r0,203c <float32_rem+0x1a4>
    2038:	e0 00 00 14 	bi 2088 <float32_rem+0x1f0>
        q = estimateDiv64To32( aSig, 0, bSig );
    203c:	b9 80 08 00 	mv r1,r12
    2040:	34 02 00 00 	mvi r2,0
    2044:	b9 a0 18 00 	mv r3,r13
    2048:	fb ff fb 1d 	calli cbc <estimateDiv64To32>
        q = ( 2 < q ) ? q - 2 : 0;
    204c:	34 25 ff fe 	addi r5,r1,-2
    2050:	89 c5 10 00 	mul r2,r14,r5
    2054:	34 0c 00 00 	mvi r12,0
    2058:	54 32 00 26 	bgu r1,r18,20f0 <float32_rem+0x258>
    205c:	b9 80 28 00 	mv r5,r12
        aSig = - ( ( bSig>>2 ) * q );
        expDiff -= 30;
    2060:	35 6b ff e2 	addi r11,r11,-30
        aSig >>= 1;
    }
    q = ( bSig <= aSig );
    if ( q ) aSig -= bSig;
    expDiff -= 32;
    while ( 0 < expDiff ) {
    2064:	49 60 ff f6 	bg r11,r0,203c <float32_rem+0x1a4>
with respect to the corresponding value `b'.  The operation is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_rem( float32 a, float32 b )
{
    2068:	34 02 00 1e 	mvi r2,30
    206c:	36 61 ff df 	addi r1,r19,-33
    2070:	8c 22 08 00 	divu r1,r1,r2
    2074:	35 e3 ff e2 	addi r3,r15,-30
    2078:	3c 22 00 05 	sli r2,r1,5
    207c:	b4 21 08 00 	add r1,r1,r1
    2080:	c8 22 08 00 	sub r1,r1,r2
    2084:	b4 61 78 00 	add r15,r3,r1
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
        aSig = - ( ( bSig>>2 ) * q );
        expDiff -= 30;
    }
    expDiff += 32;
    2088:	35 eb 00 20 	addi r11,r15,32
        q >>= 32 - expDiff;
        bSig >>= 2;
        aSig = ( ( aSig>>1 )<<( expDiff - 1 ) ) - bSig * q;
    }
    else {
        aSig >>= 2;
    208c:	01 83 00 02 	srui r3,r12,2
        q = ( 2 < q ) ? q - 2 : 0;
        aSig = - ( ( bSig>>2 ) * q );
        expDiff -= 30;
    }
    expDiff += 32;
    if ( 0 < expDiff ) {
    2090:	4c 0b 00 0e 	bge r0,r11,20c8 <float32_rem+0x230>
        q = estimateDiv64To32( aSig, 0, bSig );
    2094:	34 02 00 00 	mvi r2,0
    2098:	b9 a0 18 00 	mv r3,r13
    209c:	b9 80 08 00 	mv r1,r12
    20a0:	fb ff fb 07 	calli cbc <estimateDiv64To32>
    20a4:	b8 20 10 00 	mv r2,r1
        q = ( 2 < q ) ? q - 2 : 0;
    20a8:	34 01 00 02 	mvi r1,2
    20ac:	54 41 00 2e 	bgu r2,r1,2164 <float32_rem+0x2cc>
    20b0:	34 05 00 00 	mvi r5,0
    20b4:	b8 a0 18 00 	mv r3,r5
        q >>= 32 - expDiff;
        bSig >>= 2;
        aSig = ( ( aSig>>1 )<<( expDiff - 1 ) ) - bSig * q;
    20b8:	01 81 00 01 	srui r1,r12,1
    20bc:	35 62 ff ff 	addi r2,r11,-1
    20c0:	bc 22 08 00 	sl r1,r1,r2
    20c4:	c8 23 18 00 	sub r3,r1,r3
    }
    else {
        aSig >>= 2;
    20c8:	c8 0e 30 00 	sub r6,r0,r14
    20cc:	c8 6e 10 00 	sub r2,r3,r14
        bSig >>= 2;
    }
    do {
        alternateASig = aSig;
        ++q;
    20d0:	b8 40 38 00 	mv r7,r2
    20d4:	b4 46 10 00 	add r2,r2,r6
        aSig -= bSig;
    } while ( 0 <= (sbits32) aSig );
    20d8:	b4 4e 08 00 	add r1,r2,r14
        aSig >>= 2;
        bSig >>= 2;
    }
    do {
        alternateASig = aSig;
        ++q;
    20dc:	34 a5 00 01 	addi r5,r5,1
    20e0:	b4 c3 20 00 	add r4,r6,r3
        aSig -= bSig;
    } while ( 0 <= (sbits32) aSig );
    20e4:	48 01 00 0f 	bg r0,r1,2120 <float32_rem+0x288>
    20e8:	b8 80 18 00 	mv r3,r4
    20ec:	e3 ff ff f9 	bi 20d0 <float32_rem+0x238>
    q = ( bSig <= aSig );
    if ( q ) aSig -= bSig;
    expDiff -= 32;
    while ( 0 < expDiff ) {
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
    20f0:	c8 02 60 00 	sub r12,r0,r2
    20f4:	e3 ff ff db 	bi 2060 <float32_rem+0x1c8>
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    if ( aExp == 0xFF ) {
        if ( aSig || ( ( bExp == 0xFF ) && bSig ) ) {
    20f8:	5c 80 00 05 	bne r4,r0,210c <float32_rem+0x274>
    20fc:	e6 23 08 00 	cmpe r1,r17,r3
    2100:	7d 02 00 00 	cmpnei r2,r8,0
    2104:	a0 22 08 00 	and r1,r1,r2
    2108:	44 24 ff 7e 	be r1,r4,1f00 <float32_rem+0x68>
            return propagateFloat32NaN( a, b );
    210c:	ba 00 08 00 	mv r1,r16
    2110:	b8 c0 10 00 	mv r2,r6
    2114:	fb ff fb 57 	calli e70 <propagateFloat32NaN>
    2118:	b8 20 80 00 	mv r16,r1
    211c:	e3 ff ff 7f 	bi 1f18 <float32_rem+0x80>
    do {
        alternateASig = aSig;
        ++q;
        aSig -= bSig;
    } while ( 0 <= (sbits32) aSig );
    sigMean = aSig + alternateASig;
    2120:	b4 64 30 00 	add r6,r3,r4
    if ( ( sigMean < 0 ) || ( ( sigMean == 0 ) && ( q & 1 ) ) ) {
    2124:	48 06 00 04 	bg r0,r6,2134 <float32_rem+0x29c>
    2128:	5c c0 00 0d 	bne r6,r0,215c <float32_rem+0x2c4>
    212c:	20 a1 00 01 	andi r1,r5,0x1
    2130:	44 26 00 0b 	be r1,r6,215c <float32_rem+0x2c4>
    2134:	b8 60 38 00 	mv r7,r3
        aSig = alternateASig;
    }
    zSign = ( (sbits32) aSig < 0 );
    2138:	00 e4 00 1f 	srui r4,r7,31
    if ( zSign ) aSig = - aSig;
    213c:	44 80 00 02 	be r4,r0,2144 <float32_rem+0x2ac>
    2140:	c8 03 18 00 	sub r3,r0,r3
    return normalizeRoundAndPackFloat32( aSign ^ zSign, bExp, aSig );
    2144:	02 01 00 1f 	srui r1,r16,31
    2148:	ba 20 10 00 	mv r2,r17
    214c:	98 81 08 00 	xor r1,r4,r1
    2150:	fb ff fb db 	calli 10bc <normalizeRoundAndPackFloat32>
    2154:	b8 20 80 00 	mv r16,r1
    2158:	e3 ff ff 70 	bi 1f18 <float32_rem+0x80>
        alternateASig = aSig;
        ++q;
        aSig -= bSig;
    } while ( 0 <= (sbits32) aSig );
    sigMean = aSig + alternateASig;
    if ( ( sigMean < 0 ) || ( ( sigMean == 0 ) && ( q & 1 ) ) ) {
    215c:	b8 80 18 00 	mv r3,r4
    2160:	e3 ff ff f6 	bi 2138 <float32_rem+0x2a0>
        expDiff -= 30;
    }
    expDiff += 32;
    if ( 0 < expDiff ) {
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
    2164:	34 42 ff fe 	addi r2,r2,-2
    2168:	c8 0b 08 00 	sub r1,r0,r11
    216c:	80 41 28 00 	sru r5,r2,r1
    2170:	88 ae 18 00 	mul r3,r5,r14
    2174:	e3 ff ff d1 	bi 20b8 <float32_rem+0x220>
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    2178:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    217c:	3c 83 00 10 	sli r3,r4,16
    }
    if ( a < 0x1000000 ) {
    2180:	38 21 ff ff 	ori r1,r1,0xffff
    2184:	50 23 00 09 	bgeu r1,r3,21a8 <float32_rem+0x310>
    2188:	34 05 00 08 	mvi r5,8
    218c:	e3 ff ff 8c 	bi 1fbc <float32_rem+0x124>
    2190:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    2194:	3d 03 00 10 	sli r3,r8,16
    }
    if ( a < 0x1000000 ) {
    2198:	38 21 ff ff 	ori r1,r1,0xffff
    219c:	50 23 00 05 	bgeu r1,r3,21b0 <float32_rem+0x318>
    21a0:	34 05 00 08 	mvi r5,8
    21a4:	e3 ff ff 74 	bi 1f74 <float32_rem+0xdc>
    21a8:	34 02 00 18 	mvi r2,24
    21ac:	e3 ff ff 82 	bi 1fb4 <float32_rem+0x11c>
    21b0:	34 02 00 18 	mvi r2,24
    21b4:	e3 ff ff 6e 	bi 1f6c <float32_rem+0xd4>

000021b8 <float32_sqrt>:
The operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_sqrt( float32 a )
{
    21b8:	37 9c ff ec 	addi sp,sp,-20
    21bc:	5b 8b 00 14 	sw (sp+20),r11
    21c0:	5b 8c 00 10 	sw (sp+16),r12
    21c4:	5b 8d 00 0c 	sw (sp+12),r13
    21c8:	5b 8e 00 08 	sw (sp+8),r14
    21cc:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    21d0:	00 22 00 17 	srui r2,r1,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    21d4:	78 03 00 7f 	mvhi r3,0x7f
    21d8:	38 63 ff ff 	ori r3,r3,0xffff
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    21dc:	20 4c 00 ff 	andi r12,r2,0xff
    bits32 term0, term1;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
    21e0:	34 02 00 ff 	mvi r2,255
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    21e4:	a0 23 28 00 	and r5,r1,r3
The operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_sqrt( float32 a )
{
    21e8:	b8 20 20 00 	mv r4,r1
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    21ec:	00 23 00 1f 	srui r3,r1,31
    bits32 term0, term1;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
    21f0:	45 82 00 55 	be r12,r2,2344 <float32_sqrt+0x18c>
        if ( aSig ) return propagateFloat32NaN( a, 0 );
        if ( ! aSign ) return a;
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( aSign ) {
    21f4:	44 60 00 11 	be r3,r0,2238 <float32_sqrt+0x80>
        if ( ( aExp | aSig ) == 0 ) return a;
    21f8:	b9 85 08 00 	or r1,r12,r5
    21fc:	44 20 00 07 	be r1,r0,2218 <float32_sqrt+0x60>
    2200:	78 02 00 00 	mvhi r2,0x0
    2204:	38 42 40 3c 	ori r2,r2,0x403c
    2208:	28 41 00 00 	lw r1,(r2+0)
    220c:	34 04 ff ff 	mvi r4,-1
    2210:	38 21 00 10 	ori r1,r1,0x10
    2214:	58 41 00 00 	sw (r2+0),r1
        }
    }
    shift32RightJamming( zSig, 1, &zSig );
    return roundAndPackFloat32( 0, zExp, zSig );

}
    2218:	b8 80 08 00 	mv r1,r4
    221c:	2b 9d 00 04 	lw ra,(sp+4)
    2220:	2b 8b 00 14 	lw r11,(sp+20)
    2224:	2b 8c 00 10 	lw r12,(sp+16)
    2228:	2b 8d 00 0c 	lw r13,(sp+12)
    222c:	2b 8e 00 08 	lw r14,(sp+8)
    2230:	37 9c 00 14 	addi sp,sp,20
    2234:	c3 a0 00 00 	ret
    if ( aSign ) {
        if ( ( aExp | aSig ) == 0 ) return a;
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( aExp == 0 ) {
    2238:	5d 83 00 13 	bne r12,r3,2284 <float32_sqrt+0xcc>
        if ( aSig == 0 ) return 0;
    223c:	b8 a0 20 00 	mv r4,r5
    2240:	44 ac ff f6 	be r5,r12,2218 <float32_sqrt+0x60>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    2244:	38 01 ff ff 	mvu r1,0xffff
    2248:	50 25 00 86 	bgeu r1,r5,2460 <float32_sqrt+0x2a8>
    224c:	b8 a0 18 00 	mv r3,r5
    2250:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    2254:	3c 63 00 08 	sli r3,r3,8
    2258:	34 44 ff f8 	addi r4,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    225c:	00 63 00 18 	srui r3,r3,24
    2260:	78 01 00 00 	mvhi r1,0x0
    2264:	3c 63 00 02 	sli r3,r3,2
    2268:	38 21 3b 80 	ori r1,r1,0x3b80
    226c:	b4 23 08 00 	add r1,r1,r3
    2270:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    2274:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    2278:	b4 82 10 00 	add r2,r4,r2
    *zSigPtr = aSig<<shiftCount;
    227c:	bc a2 28 00 	sl r5,r5,r2
    *zExpPtr = 1 - shiftCount;
    2280:	c8 22 60 00 	sub r12,r1,r2
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return 0;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = ( ( aExp - 0x7F )>>1 ) + 0x7E;
    aSig = ( aSig | 0x00800000 )<<8;
    2284:	78 01 00 80 	mvhi r1,0x80
    2288:	38 21 00 00 	ori r1,r1,0x0
    228c:	b8 a1 08 00 	or r1,r5,r1
    2290:	3c 2d 00 08 	sli r13,r1,8
    };
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    if ( aExp & 1 ) {
    2294:	21 8e 00 01 	andi r14,r12,0x1
        0x0200, 0x0179, 0x0109, 0x00AF, 0x0068, 0x0034, 0x0012, 0x0002
    };
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    2298:	01 a1 00 1b 	srui r1,r13,27
    229c:	20 23 00 0f 	andi r3,r1,0xf
    if ( aExp & 1 ) {
    22a0:	5d c0 00 2c 	bne r14,r0,2350 <float32_sqrt+0x198>
        z = 0x4000 + ( a>>17 ) - sqrtOddAdjustments[ index ];
        z = ( ( a / z )<<14 ) + ( z<<15 );
        a >>= 1;
    }
    else {
        z = 0x8000 + ( a>>17 ) - sqrtEvenAdjustments[ index ];
    22a4:	78 01 00 00 	mvhi r1,0x0
    22a8:	b4 63 10 00 	add r2,r3,r3
    22ac:	38 21 3f 80 	ori r1,r1,0x3f80
    22b0:	b4 22 08 00 	add r1,r1,r2
    22b4:	2c 23 00 00 	lhu r3,(r1+0)
    22b8:	01 a2 00 11 	srui r2,r13,17
    22bc:	38 01 80 00 	mvu r1,0x8000
    22c0:	b4 41 10 00 	add r2,r2,r1
    22c4:	c8 43 10 00 	sub r2,r2,r3
        z = a / z + z;
    22c8:	8d a2 08 00 	divu r1,r13,r2
        z = ( 0x20000 <= z ) ? 0xFFFF8000 : ( z<<15 );
    22cc:	78 03 00 01 	mvhi r3,0x1
        z = ( ( a / z )<<14 ) + ( z<<15 );
        a >>= 1;
    }
    else {
        z = 0x8000 + ( a>>17 ) - sqrtEvenAdjustments[ index ];
        z = a / z + z;
    22d0:	b4 22 08 00 	add r1,r1,r2
        z = ( 0x20000 <= z ) ? 0xFFFF8000 : ( z<<15 );
    22d4:	38 63 ff ff 	ori r3,r3,0xffff
    22d8:	3c 2b 00 0f 	sli r11,r1,15
    22dc:	50 61 00 02 	bgeu r3,r1,22e4 <float32_sqrt+0x12c>
    22e0:	34 0b 80 00 	mvi r11,-32768
        if ( z <= a ) return (bits32) ( ( (sbits32) a )>>1 );
    22e4:	b9 a0 20 00 	mv r4,r13
    22e8:	55 6d 00 27 	bgu r11,r13,2384 <float32_sqrt+0x1cc>
    22ec:	15 a1 00 01 	sri r1,r13,1
    zSig = estimateSqrt32( aExp, aSig ) + 2;
    22f0:	34 26 00 02 	addi r6,r1,2
    if ( ( zSig & 0x7F ) <= 5 ) {
    22f4:	20 c2 00 7f 	andi r2,r6,0x7f
    22f8:	34 01 00 05 	mvi r1,5
    22fc:	50 22 00 2a 	bgeu r1,r2,23a4 <float32_sqrt+0x1ec>
    2300:	00 c2 00 01 	srui r2,r6,1
    2304:	20 c1 00 01 	andi r1,r6,0x1
    2308:	b8 22 18 00 	or r3,r1,r2
            }
            zSig |= ( ( rem0 | rem1 ) != 0 );
        }
    }
    shift32RightJamming( zSig, 1, &zSig );
    return roundAndPackFloat32( 0, zExp, zSig );
    230c:	35 82 ff 81 	addi r2,r12,-127
    2310:	14 42 00 01 	sri r2,r2,1
    2314:	34 01 00 00 	mvi r1,0
    2318:	34 42 00 7e 	addi r2,r2,126
    231c:	fb ff fb 04 	calli f2c <roundAndPackFloat32>
    2320:	b8 20 20 00 	mv r4,r1

}
    2324:	b8 80 08 00 	mv r1,r4
    2328:	2b 9d 00 04 	lw ra,(sp+4)
    232c:	2b 8b 00 14 	lw r11,(sp+20)
    2330:	2b 8c 00 10 	lw r12,(sp+16)
    2334:	2b 8d 00 0c 	lw r13,(sp+12)
    2338:	2b 8e 00 08 	lw r14,(sp+8)
    233c:	37 9c 00 14 	addi sp,sp,20
    2340:	c3 a0 00 00 	ret

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, 0 );
    2344:	5c a0 00 43 	bne r5,r0,2450 <float32_sqrt+0x298>
        if ( ! aSign ) return a;
    2348:	5c 65 ff ae 	bne r3,r5,2200 <float32_sqrt+0x48>
    234c:	e3 ff ff b3 	bi 2218 <float32_sqrt+0x60>
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    if ( aExp & 1 ) {
        z = 0x4000 + ( a>>17 ) - sqrtOddAdjustments[ index ];
    2350:	78 02 00 00 	mvhi r2,0x0
    2354:	b4 63 08 00 	add r1,r3,r3
    2358:	38 42 3f a0 	ori r2,r2,0x3fa0
    235c:	b4 41 10 00 	add r2,r2,r1
    2360:	2c 43 00 00 	lhu r3,(r2+0)
    2364:	01 a1 00 11 	srui r1,r13,17
        z = ( ( a / z )<<14 ) + ( z<<15 );
        a >>= 1;
    2368:	01 a4 00 01 	srui r4,r13,1
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    if ( aExp & 1 ) {
        z = 0x4000 + ( a>>17 ) - sqrtOddAdjustments[ index ];
    236c:	34 21 40 00 	addi r1,r1,16384
    2370:	c8 23 08 00 	sub r1,r1,r3
        z = ( ( a / z )<<14 ) + ( z<<15 );
    2374:	8d a1 10 00 	divu r2,r13,r1
    2378:	3c 21 00 0f 	sli r1,r1,15
    237c:	3c 42 00 0e 	sli r2,r2,14
    2380:	b4 41 58 00 	add r11,r2,r1
        z = 0x8000 + ( a>>17 ) - sqrtEvenAdjustments[ index ];
        z = a / z + z;
        z = ( 0x20000 <= z ) ? 0xFFFF8000 : ( z<<15 );
        if ( z <= a ) return (bits32) ( ( (sbits32) a )>>1 );
    }
    return ( ( estimateDiv64To32( a, 0, z ) )>>1 ) + ( z>>1 );
    2384:	34 02 00 00 	mvi r2,0
    2388:	b8 80 08 00 	mv r1,r4
    238c:	b9 60 18 00 	mv r3,r11
    2390:	fb ff fa 4b 	calli cbc <estimateDiv64To32>
    2394:	00 21 00 01 	srui r1,r1,1
    2398:	01 62 00 01 	srui r2,r11,1
    239c:	b4 41 08 00 	add r1,r2,r1
    23a0:	e3 ff ff d4 	bi 22f0 <float32_sqrt+0x138>
    }
    zExp = ( ( aExp - 0x7F )>>1 ) + 0x7E;
    aSig = ( aSig | 0x00800000 )<<8;
    zSig = estimateSqrt32( aExp, aSig ) + 2;
    if ( ( zSig & 0x7F ) <= 5 ) {
        if ( zSig < 2 ) {
    23a4:	34 01 00 01 	mvi r1,1
    23a8:	54 c1 00 04 	bgu r6,r1,23b8 <float32_sqrt+0x200>
    23ac:	78 03 7f ff 	mvhi r3,0x7fff
    23b0:	38 63 ff ff 	ori r3,r3,0xffff
    23b4:	e3 ff ff d6 	bi 230c <float32_sqrt+0x154>
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    23b8:	00 c3 00 10 	srui r3,r6,16

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    23bc:	20 c4 ff ff 	andi r4,r6,0xffff
    zMiddleA = ( (bits32) aLow ) * bHigh;
    23c0:	88 64 08 00 	mul r1,r3,r4
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    23c4:	b4 21 28 00 	add r5,r1,r1
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    23c8:	54 25 00 2c 	bgu r1,r5,2478 <float32_sqrt+0x2c0>
    23cc:	34 07 00 00 	mvi r7,0

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    23d0:	88 84 20 00 	mul r4,r4,r4
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
    23d4:	3c a2 00 10 	sli r2,r5,16
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    23d8:	88 63 18 00 	mul r3,r3,r3
    23dc:	81 ae 08 00 	sru r1,r13,r14
    zMiddleA <<= 16;
    z1 += zMiddleA;
    23e0:	b4 44 20 00 	add r4,r2,r4
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    23e4:	00 a5 00 10 	srui r5,r5,16
    23e8:	c8 23 08 00 	sub r1,r1,r3
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    23ec:	f4 44 10 00 	cmpgu r2,r2,r4
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    23f0:	c8 25 08 00 	sub r1,r1,r5
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    23f4:	7c 83 00 00 	cmpnei r3,r4,0
    23f8:	c8 22 08 00 	sub r1,r1,r2
    23fc:	c8 23 08 00 	sub r1,r1,r3
    2400:	c8 27 28 00 	sub r5,r1,r7
INLINE void
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    2404:	c8 04 18 00 	sub r3,r0,r4
        }
        else {
            aSig >>= aExp & 1;
            mul32To64( zSig, zSig, &term0, &term1 );
            sub64( aSig, 0, term0, term1, &rem0, &rem1 );
            while ( (sbits32) rem0 < 0 ) {
    2408:	4c a0 00 0b 	bge r5,r0,2434 <float32_sqrt+0x27c>
                --zSig;
    240c:	34 c6 ff ff 	addi r6,r6,-1
 add64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{
    bits32 z1;

    z1 = a1 + b1;
    2410:	b4 c6 08 00 	add r1,r6,r6
    2414:	38 21 00 01 	ori r1,r1,0x1
        }
        else {
            aSig >>= aExp & 1;
            mul32To64( zSig, zSig, &term0, &term1 );
            sub64( aSig, 0, term0, term1, &rem0, &rem1 );
            while ( (sbits32) rem0 < 0 ) {
    2418:	b8 60 10 00 	mv r2,r3
    241c:	b4 23 18 00 	add r3,r1,r3
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
    2420:	f4 43 10 00 	cmpgu r2,r2,r3
    2424:	00 c1 00 1f 	srui r1,r6,31
    2428:	b4 22 08 00 	add r1,r1,r2
    242c:	b4 a1 28 00 	add r5,r5,r1
    2430:	48 05 ff f7 	bg r0,r5,240c <float32_sqrt+0x254>
                --zSig;
                shortShift64Left( 0, zSig, 1, &term0, &term1 );
                term1 |= 1;
                add64( rem0, rem1, term0, term1, &rem0, &rem1 );
            }
            zSig |= ( ( rem0 | rem1 ) != 0 );
    2434:	b8 a3 08 00 	or r1,r5,r3
    2438:	7c 21 00 00 	cmpnei r1,r1,0
    243c:	b8 26 08 00 	or r1,r1,r6
    2440:	00 22 00 01 	srui r2,r1,1
    2444:	20 21 00 01 	andi r1,r1,0x1
    2448:	b8 22 18 00 	or r3,r1,r2
    244c:	e3 ff ff b0 	bi 230c <float32_sqrt+0x154>

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, 0 );
    2450:	34 02 00 00 	mvi r2,0
    2454:	fb ff fa 87 	calli e70 <propagateFloat32NaN>
    2458:	b8 20 20 00 	mv r4,r1
    245c:	e3 ff ff 6f 	bi 2218 <float32_sqrt+0x60>
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    2460:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    2464:	3c a3 00 10 	sli r3,r5,16
    }
    if ( a < 0x1000000 ) {
    2468:	38 21 ff ff 	ori r1,r1,0xffff
    246c:	50 23 00 06 	bgeu r1,r3,2484 <float32_sqrt+0x2cc>
    2470:	34 04 00 08 	mvi r4,8
    2474:	e3 ff ff 7a 	bi 225c <float32_sqrt+0xa4>
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    2478:	78 07 00 01 	mvhi r7,0x1
    247c:	38 e7 00 00 	ori r7,r7,0x0
    2480:	e3 ff ff d4 	bi 23d0 <float32_sqrt+0x218>
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    2484:	34 02 00 18 	mvi r2,24
    2488:	e3 ff ff 73 	bi 2254 <float32_sqrt+0x9c>

0000248c <float32_eq>:
corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_eq( float32 a, float32 b )
{
    248c:	b8 20 20 00 	mv r4,r1

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2490:	00 21 00 17 	srui r1,r1,23
corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_eq( float32 a, float32 b )
{
    2494:	b8 40 28 00 	mv r5,r2

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2498:	20 21 00 ff 	andi r1,r1,0xff
    249c:	34 02 00 ff 	mvi r2,255
    24a0:	44 22 00 0c 	be r1,r2,24d0 <float32_eq+0x44>
    24a4:	00 a1 00 17 	srui r1,r5,23
    24a8:	34 02 00 ff 	mvi r2,255
    24ac:	20 21 00 ff 	andi r1,r1,0xff
    24b0:	44 22 00 16 	be r1,r2,2508 <float32_eq+0x7c>
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );
    24b4:	34 03 00 01 	mvi r3,1
    24b8:	44 85 00 04 	be r4,r5,24c8 <float32_eq+0x3c>
    24bc:	b8 a4 08 00 	or r1,r5,r4
    24c0:	b4 21 08 00 	add r1,r1,r1
    24c4:	64 23 00 00 	cmpei r3,r1,0

}
    24c8:	b8 60 08 00 	mv r1,r3
    24cc:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_eq( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    24d0:	78 01 00 7f 	mvhi r1,0x7f
    24d4:	38 21 ff ff 	ori r1,r1,0xffff
    24d8:	a0 81 08 00 	and r1,r4,r1
    24dc:	44 20 ff f2 	be r1,r0,24a4 <float32_eq+0x18>
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    24e0:	00 81 00 16 	srui r1,r4,22
    24e4:	34 02 01 fe 	mvi r2,510
    24e8:	20 21 01 ff 	andi r1,r1,0x1ff
    24ec:	44 22 00 0f 	be r1,r2,2528 <float32_eq+0x9c>
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );
    24f0:	00 a1 00 16 	srui r1,r5,22
    24f4:	34 02 01 fe 	mvi r2,510
    24f8:	20 21 01 ff 	andi r1,r1,0x1ff
    24fc:	44 22 00 17 	be r1,r2,2558 <float32_eq+0xcc>
    2500:	34 03 00 00 	mvi r3,0
    2504:	e3 ff ff f1 	bi 24c8 <float32_eq+0x3c>
-------------------------------------------------------------------------------
*/
flag float32_eq( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2508:	78 01 00 7f 	mvhi r1,0x7f
    250c:	38 21 ff ff 	ori r1,r1,0xffff
    2510:	a0 a1 08 00 	and r1,r5,r1
    2514:	44 20 ff e8 	be r1,r0,24b4 <float32_eq+0x28>
    2518:	00 81 00 16 	srui r1,r4,22
    251c:	34 02 01 fe 	mvi r2,510
    2520:	20 21 01 ff 	andi r1,r1,0x1ff
    2524:	5c 22 ff f3 	bne r1,r2,24f0 <float32_eq+0x64>
    2528:	78 01 00 3f 	mvhi r1,0x3f
    252c:	38 21 ff ff 	ori r1,r1,0xffff
    2530:	a0 81 08 00 	and r1,r4,r1
    2534:	44 20 ff ef 	be r1,r0,24f0 <float32_eq+0x64>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    2538:	78 02 00 00 	mvhi r2,0x0
    253c:	38 42 40 3c 	ori r2,r2,0x403c
    2540:	28 41 00 00 	lw r1,(r2+0)
    2544:	34 03 00 00 	mvi r3,0
    2548:	38 21 00 10 	ori r1,r1,0x10
    254c:	58 41 00 00 	sw (r2+0),r1
        }
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );

}
    2550:	b8 60 08 00 	mv r1,r3
    2554:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    2558:	78 01 00 3f 	mvhi r1,0x3f
    255c:	38 21 ff ff 	ori r1,r1,0xffff
    2560:	a0 a1 08 00 	and r1,r5,r1
    2564:	5c 20 ff f5 	bne r1,r0,2538 <float32_eq+0xac>
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );
    2568:	34 03 00 00 	mvi r3,0
    256c:	e3 ff ff d7 	bi 24c8 <float32_eq+0x3c>

00002570 <float32_le>:
performed according to the IEC/IEEE Standard for Binary Floating-point
Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_le( float32 a, float32 b )
{
    2570:	b8 20 28 00 	mv r5,r1
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2574:	00 21 00 17 	srui r1,r1,23
performed according to the IEC/IEEE Standard for Binary Floating-point
Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_le( float32 a, float32 b )
{
    2578:	b8 40 20 00 	mv r4,r2
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    257c:	20 21 00 ff 	andi r1,r1,0xff
    2580:	34 02 00 ff 	mvi r2,255
    2584:	44 22 00 14 	be r1,r2,25d4 <float32_le+0x64>
    2588:	00 81 00 17 	srui r1,r4,23
    258c:	34 02 00 ff 	mvi r2,255
    2590:	20 21 00 ff 	andi r1,r1,0xff
    2594:	44 22 00 1c 	be r1,r2,2604 <float32_le+0x94>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    2598:	00 a2 00 1f 	srui r2,r5,31
        float_raise( float_flag_invalid );
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    259c:	00 81 00 1f 	srui r1,r4,31
    25a0:	44 41 00 07 	be r2,r1,25bc <float32_le+0x4c>
    25a4:	5c 40 00 09 	bne r2,r0,25c8 <float32_le+0x58>
    25a8:	b8 85 08 00 	or r1,r4,r5
    25ac:	b4 21 08 00 	add r1,r1,r1
    25b0:	64 23 00 00 	cmpei r3,r1,0
    return ( a == b ) || ( aSign ^ ( a < b ) );

}
    25b4:	b8 60 08 00 	mv r1,r3
    25b8:	c3 a0 00 00 	ret
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );
    25bc:	f4 85 08 00 	cmpgu r1,r4,r5
    25c0:	fc 22 18 00 	cmpne r3,r1,r2
    25c4:	5c a4 ff fc 	bne r5,r4,25b4 <float32_le+0x44>
    25c8:	34 03 00 01 	mvi r3,1

}
    25cc:	b8 60 08 00 	mv r1,r3
    25d0:	c3 a0 00 00 	ret
*/
flag float32_le( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    25d4:	78 01 00 7f 	mvhi r1,0x7f
    25d8:	38 21 ff ff 	ori r1,r1,0xffff
    25dc:	a0 a1 08 00 	and r1,r5,r1
    25e0:	44 20 ff ea 	be r1,r0,2588 <float32_le+0x18>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    25e4:	78 02 00 00 	mvhi r2,0x0
    25e8:	38 42 40 3c 	ori r2,r2,0x403c
    25ec:	28 41 00 00 	lw r1,(r2+0)
    25f0:	34 03 00 00 	mvi r3,0
    25f4:	38 21 00 10 	ori r1,r1,0x10
    25f8:	58 41 00 00 	sw (r2+0),r1
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );

}
    25fc:	b8 60 08 00 	mv r1,r3
    2600:	c3 a0 00 00 	ret
*/
flag float32_le( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2604:	78 01 00 7f 	mvhi r1,0x7f
    2608:	38 21 ff ff 	ori r1,r1,0xffff
    260c:	a0 81 08 00 	and r1,r4,r1
    2610:	44 20 ff e2 	be r1,r0,2598 <float32_le+0x28>
    2614:	78 02 00 00 	mvhi r2,0x0
    2618:	38 42 40 3c 	ori r2,r2,0x403c
    261c:	28 41 00 00 	lw r1,(r2+0)
    2620:	34 03 00 00 	mvi r3,0
    2624:	38 21 00 10 	ori r1,r1,0x10
    2628:	58 41 00 00 	sw (r2+0),r1
    262c:	e3 ff ff f4 	bi 25fc <float32_le+0x8c>

00002630 <float32_lt>:
the corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt( float32 a, float32 b )
{
    2630:	b8 20 28 00 	mv r5,r1
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2634:	00 21 00 17 	srui r1,r1,23
the corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt( float32 a, float32 b )
{
    2638:	b8 40 20 00 	mv r4,r2
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    263c:	20 21 00 ff 	andi r1,r1,0xff
    2640:	34 02 00 ff 	mvi r2,255
    2644:	44 22 00 11 	be r1,r2,2688 <float32_lt+0x58>
    2648:	00 81 00 17 	srui r1,r4,23
    264c:	34 02 00 ff 	mvi r2,255
    2650:	20 21 00 ff 	andi r1,r1,0xff
    2654:	44 22 00 19 	be r1,r2,26b8 <float32_lt+0x88>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    2658:	00 a2 00 1f 	srui r2,r5,31
        float_raise( float_flag_invalid );
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    265c:	00 81 00 1f 	srui r1,r4,31
    2660:	44 41 00 1d 	be r2,r1,26d4 <float32_lt+0xa4>
    2664:	5c 40 00 04 	bne r2,r0,2674 <float32_lt+0x44>
    return ( a != b ) && ( aSign ^ ( a < b ) );
    2668:	34 03 00 00 	mvi r3,0

}
    266c:	b8 60 08 00 	mv r1,r3
    2670:	c3 a0 00 00 	ret
        float_raise( float_flag_invalid );
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    2674:	b8 85 08 00 	or r1,r4,r5
    2678:	b4 21 08 00 	add r1,r1,r1
    267c:	7c 23 00 00 	cmpnei r3,r1,0
    return ( a != b ) && ( aSign ^ ( a < b ) );

}
    2680:	b8 60 08 00 	mv r1,r3
    2684:	c3 a0 00 00 	ret
*/
flag float32_lt( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2688:	78 01 00 7f 	mvhi r1,0x7f
    268c:	38 21 ff ff 	ori r1,r1,0xffff
    2690:	a0 a1 08 00 	and r1,r5,r1
    2694:	44 20 ff ed 	be r1,r0,2648 <float32_lt+0x18>
    2698:	78 02 00 00 	mvhi r2,0x0
    269c:	38 42 40 3c 	ori r2,r2,0x403c
    26a0:	28 41 00 00 	lw r1,(r2+0)
    26a4:	34 03 00 00 	mvi r3,0
    26a8:	38 21 00 10 	ori r1,r1,0x10
    26ac:	58 41 00 00 	sw (r2+0),r1
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    return ( a != b ) && ( aSign ^ ( a < b ) );

}
    26b0:	b8 60 08 00 	mv r1,r3
    26b4:	c3 a0 00 00 	ret
*/
flag float32_lt( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    26b8:	78 01 00 7f 	mvhi r1,0x7f
    26bc:	38 21 ff ff 	ori r1,r1,0xffff
    26c0:	a0 81 08 00 	and r1,r4,r1
    26c4:	5c 20 ff f5 	bne r1,r0,2698 <float32_lt+0x68>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    26c8:	00 a2 00 1f 	srui r2,r5,31
        float_raise( float_flag_invalid );
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    26cc:	00 81 00 1f 	srui r1,r4,31
    26d0:	5c 41 ff e5 	bne r2,r1,2664 <float32_lt+0x34>
    return ( a != b ) && ( aSign ^ ( a < b ) );
    26d4:	f4 85 08 00 	cmpgu r1,r4,r5
    26d8:	fc 22 18 00 	cmpne r3,r1,r2
    26dc:	44 a4 ff e3 	be r5,r4,2668 <float32_lt+0x38>

}
    26e0:	b8 60 08 00 	mv r1,r3
    26e4:	c3 a0 00 00 	ret

000026e8 <float32_eq_signaling>:
if either operand is a NaN.  Otherwise, the comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_eq_signaling( float32 a, float32 b )
{
    26e8:	b8 20 28 00 	mv r5,r1

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    26ec:	00 21 00 17 	srui r1,r1,23
if either operand is a NaN.  Otherwise, the comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_eq_signaling( float32 a, float32 b )
{
    26f0:	b8 40 20 00 	mv r4,r2

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    26f4:	20 21 00 ff 	andi r1,r1,0xff
    26f8:	34 02 00 ff 	mvi r2,255
    26fc:	44 22 00 0c 	be r1,r2,272c <float32_eq_signaling+0x44>
    2700:	00 81 00 17 	srui r1,r4,23
    2704:	34 02 00 ff 	mvi r2,255
    2708:	20 21 00 ff 	andi r1,r1,0xff
    270c:	44 22 00 14 	be r1,r2,275c <float32_eq_signaling+0x74>
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        float_raise( float_flag_invalid );
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );
    2710:	34 03 00 01 	mvi r3,1
    2714:	44 a4 00 04 	be r5,r4,2724 <float32_eq_signaling+0x3c>
    2718:	b8 85 08 00 	or r1,r4,r5
    271c:	b4 21 08 00 	add r1,r1,r1
    2720:	64 23 00 00 	cmpei r3,r1,0

}
    2724:	b8 60 08 00 	mv r1,r3
    2728:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_eq_signaling( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    272c:	78 01 00 7f 	mvhi r1,0x7f
    2730:	38 21 ff ff 	ori r1,r1,0xffff
    2734:	a0 a1 08 00 	and r1,r5,r1
    2738:	44 20 ff f2 	be r1,r0,2700 <float32_eq_signaling+0x18>
    273c:	78 02 00 00 	mvhi r2,0x0
    2740:	38 42 40 3c 	ori r2,r2,0x403c
    2744:	28 41 00 00 	lw r1,(r2+0)
    2748:	34 03 00 00 	mvi r3,0
    274c:	38 21 00 10 	ori r1,r1,0x10
    2750:	58 41 00 00 	sw (r2+0),r1
        float_raise( float_flag_invalid );
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );

}
    2754:	b8 60 08 00 	mv r1,r3
    2758:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_eq_signaling( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    275c:	78 01 00 7f 	mvhi r1,0x7f
    2760:	38 21 ff ff 	ori r1,r1,0xffff
    2764:	a0 81 08 00 	and r1,r4,r1
    2768:	44 20 ff ea 	be r1,r0,2710 <float32_eq_signaling+0x28>
    276c:	78 02 00 00 	mvhi r2,0x0
    2770:	38 42 40 3c 	ori r2,r2,0x403c
    2774:	28 41 00 00 	lw r1,(r2+0)
    2778:	34 03 00 00 	mvi r3,0
    277c:	38 21 00 10 	ori r1,r1,0x10
    2780:	58 41 00 00 	sw (r2+0),r1
    2784:	e3 ff ff f4 	bi 2754 <float32_eq_signaling+0x6c>

00002788 <float32_le_quiet>:
cause an exception.  Otherwise, the comparison is performed according to the
IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_le_quiet( float32 a, float32 b )
{
    2788:	b8 20 18 00 	mv r3,r1
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    278c:	00 21 00 17 	srui r1,r1,23
cause an exception.  Otherwise, the comparison is performed according to the
IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_le_quiet( float32 a, float32 b )
{
    2790:	b8 40 28 00 	mv r5,r2
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2794:	20 21 00 ff 	andi r1,r1,0xff
    2798:	34 02 00 ff 	mvi r2,255
    279c:	44 22 00 14 	be r1,r2,27ec <float32_le_quiet+0x64>
    27a0:	00 a1 00 17 	srui r1,r5,23
    27a4:	34 02 00 ff 	mvi r2,255
    27a8:	20 21 00 ff 	andi r1,r1,0xff
    27ac:	44 22 00 1f 	be r1,r2,2828 <float32_le_quiet+0xa0>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    27b0:	00 62 00 1f 	srui r2,r3,31
        }
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    27b4:	00 a1 00 1f 	srui r1,r5,31
    27b8:	44 41 00 07 	be r2,r1,27d4 <float32_le_quiet+0x4c>
    27bc:	5c 40 00 09 	bne r2,r0,27e0 <float32_le_quiet+0x58>
    27c0:	b8 a3 08 00 	or r1,r5,r3
    27c4:	b4 21 08 00 	add r1,r1,r1
    27c8:	64 24 00 00 	cmpei r4,r1,0
    return ( a == b ) || ( aSign ^ ( a < b ) );

}
    27cc:	b8 80 08 00 	mv r1,r4
    27d0:	c3 a0 00 00 	ret
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );
    27d4:	f4 a3 08 00 	cmpgu r1,r5,r3
    27d8:	fc 22 20 00 	cmpne r4,r1,r2
    27dc:	5c 65 ff fc 	bne r3,r5,27cc <float32_le_quiet+0x44>
    27e0:	34 04 00 01 	mvi r4,1

}
    27e4:	b8 80 08 00 	mv r1,r4
    27e8:	c3 a0 00 00 	ret
*/
flag float32_le_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    27ec:	78 01 00 7f 	mvhi r1,0x7f
    27f0:	38 21 ff ff 	ori r1,r1,0xffff
    27f4:	a0 61 08 00 	and r1,r3,r1
    27f8:	44 20 ff ea 	be r1,r0,27a0 <float32_le_quiet+0x18>
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    27fc:	00 61 00 16 	srui r1,r3,22
    2800:	34 02 01 fe 	mvi r2,510
    2804:	20 21 01 ff 	andi r1,r1,0x1ff
    2808:	44 22 00 10 	be r1,r2,2848 <float32_le_quiet+0xc0>
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );
    280c:	00 a1 00 16 	srui r1,r5,22
    2810:	34 02 01 fe 	mvi r2,510
    2814:	20 21 01 ff 	andi r1,r1,0x1ff
    2818:	44 22 00 18 	be r1,r2,2878 <float32_le_quiet+0xf0>
    281c:	34 04 00 00 	mvi r4,0

}
    2820:	b8 80 08 00 	mv r1,r4
    2824:	c3 a0 00 00 	ret
*/
flag float32_le_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2828:	78 01 00 7f 	mvhi r1,0x7f
    282c:	38 21 ff ff 	ori r1,r1,0xffff
    2830:	a0 a1 08 00 	and r1,r5,r1
    2834:	44 20 ff df 	be r1,r0,27b0 <float32_le_quiet+0x28>
    2838:	00 61 00 16 	srui r1,r3,22
    283c:	34 02 01 fe 	mvi r2,510
    2840:	20 21 01 ff 	andi r1,r1,0x1ff
    2844:	5c 22 ff f2 	bne r1,r2,280c <float32_le_quiet+0x84>
    2848:	78 01 00 3f 	mvhi r1,0x3f
    284c:	38 21 ff ff 	ori r1,r1,0xffff
    2850:	a0 61 08 00 	and r1,r3,r1
    2854:	44 20 ff ee 	be r1,r0,280c <float32_le_quiet+0x84>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    2858:	78 02 00 00 	mvhi r2,0x0
    285c:	38 42 40 3c 	ori r2,r2,0x403c
    2860:	28 41 00 00 	lw r1,(r2+0)
    2864:	34 04 00 00 	mvi r4,0
    2868:	38 21 00 10 	ori r1,r1,0x10
    286c:	58 41 00 00 	sw (r2+0),r1
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );

}
    2870:	b8 80 08 00 	mv r1,r4
    2874:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    2878:	78 01 00 3f 	mvhi r1,0x3f
    287c:	38 21 ff ff 	ori r1,r1,0xffff
    2880:	a0 a1 08 00 	and r1,r5,r1
    2884:	5c 20 ff f5 	bne r1,r0,2858 <float32_le_quiet+0xd0>
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );
    2888:	34 04 00 00 	mvi r4,0
    288c:	e3 ff ff e5 	bi 2820 <float32_le_quiet+0x98>

00002890 <float32_lt_quiet>:
exception.  Otherwise, the comparison is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt_quiet( float32 a, float32 b )
{
    2890:	b8 20 20 00 	mv r4,r1
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2894:	00 21 00 17 	srui r1,r1,23
exception.  Otherwise, the comparison is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt_quiet( float32 a, float32 b )
{
    2898:	b8 40 28 00 	mv r5,r2
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    289c:	20 21 00 ff 	andi r1,r1,0xff
    28a0:	34 02 00 ff 	mvi r2,255
    28a4:	44 22 00 14 	be r1,r2,28f4 <float32_lt_quiet+0x64>
    28a8:	00 a1 00 17 	srui r1,r5,23
    28ac:	34 02 00 ff 	mvi r2,255
    28b0:	20 21 00 ff 	andi r1,r1,0xff
    28b4:	44 22 00 28 	be r1,r2,2954 <float32_lt_quiet+0xc4>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    28b8:	00 82 00 1f 	srui r2,r4,31
        }
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    28bc:	00 a1 00 1f 	srui r1,r5,31
    28c0:	44 41 00 07 	be r2,r1,28dc <float32_lt_quiet+0x4c>
    28c4:	44 40 00 09 	be r2,r0,28e8 <float32_lt_quiet+0x58>
    28c8:	b8 a4 08 00 	or r1,r5,r4
    28cc:	b4 21 08 00 	add r1,r1,r1
    28d0:	7c 23 00 00 	cmpnei r3,r1,0
    return ( a != b ) && ( aSign ^ ( a < b ) );

}
    28d4:	b8 60 08 00 	mv r1,r3
    28d8:	c3 a0 00 00 	ret
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    return ( a != b ) && ( aSign ^ ( a < b ) );
    28dc:	f4 a4 08 00 	cmpgu r1,r5,r4
    28e0:	fc 22 18 00 	cmpne r3,r1,r2
    28e4:	5c 85 ff fc 	bne r4,r5,28d4 <float32_lt_quiet+0x44>
    28e8:	34 03 00 00 	mvi r3,0

}
    28ec:	b8 60 08 00 	mv r1,r3
    28f0:	c3 a0 00 00 	ret
*/
flag float32_lt_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    28f4:	78 01 00 7f 	mvhi r1,0x7f
    28f8:	38 21 ff ff 	ori r1,r1,0xffff
    28fc:	a0 81 08 00 	and r1,r4,r1
    2900:	44 20 ff ea 	be r1,r0,28a8 <float32_lt_quiet+0x18>
    2904:	00 81 00 16 	srui r1,r4,22
    2908:	34 02 01 fe 	mvi r2,510
    290c:	20 21 01 ff 	andi r1,r1,0x1ff
    2910:	44 22 00 19 	be r1,r2,2974 <float32_lt_quiet+0xe4>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    2914:	00 a1 00 16 	srui r1,r5,22
    2918:	34 02 01 fe 	mvi r2,510
    291c:	20 21 01 ff 	andi r1,r1,0x1ff
    2920:	5c 22 ff f2 	bne r1,r2,28e8 <float32_lt_quiet+0x58>
    2924:	78 01 00 3f 	mvhi r1,0x3f
    2928:	38 21 ff ff 	ori r1,r1,0xffff
    292c:	a0 a1 08 00 	and r1,r5,r1
    2930:	44 20 ff ee 	be r1,r0,28e8 <float32_lt_quiet+0x58>
    2934:	78 02 00 00 	mvhi r2,0x0
    2938:	38 42 40 3c 	ori r2,r2,0x403c
    293c:	28 41 00 00 	lw r1,(r2+0)
    2940:	34 03 00 00 	mvi r3,0
    2944:	38 21 00 10 	ori r1,r1,0x10
    2948:	58 41 00 00 	sw (r2+0),r1
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    return ( a != b ) && ( aSign ^ ( a < b ) );

}
    294c:	b8 60 08 00 	mv r1,r3
    2950:	c3 a0 00 00 	ret
*/
flag float32_lt_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2954:	78 01 00 7f 	mvhi r1,0x7f
    2958:	38 21 ff ff 	ori r1,r1,0xffff
    295c:	a0 a1 08 00 	and r1,r5,r1
    2960:	44 20 ff d6 	be r1,r0,28b8 <float32_lt_quiet+0x28>
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    2964:	00 81 00 16 	srui r1,r4,22
    2968:	34 02 01 fe 	mvi r2,510
    296c:	20 21 01 ff 	andi r1,r1,0x1ff
    2970:	5c 22 ff e9 	bne r1,r2,2914 <float32_lt_quiet+0x84>
    2974:	78 01 00 3f 	mvhi r1,0x3f
    2978:	38 21 ff ff 	ori r1,r1,0xffff
    297c:	a0 81 08 00 	and r1,r4,r1
    2980:	44 20 ff e5 	be r1,r0,2914 <float32_lt_quiet+0x84>
    2984:	e3 ff ff ec 	bi 2934 <float32_lt_quiet+0xa4>

00002988 <float32_abs>:
-------------------------------------------------------------------------------
This is an abs function
-------------------------------------------------------------------------------
*/
float32 float32_abs(float32 a)
{
    2988:	37 9c ff fc 	addi sp,sp,-4
    298c:	5b 9d 00 04 	sw (sp+4),ra
    2990:	b8 20 10 00 	mv r2,r1
	if ( extractFloat32Sign( a )){
    2994:	4c 20 00 05 	bge r1,r0,29a8 <float32_abs+0x20>
	return float32_mul( a, 0xBF800000 ) ;
    2998:	78 02 bf 80 	mvhi r2,0xbf80
    299c:	38 42 00 00 	ori r2,r2,0x0
    29a0:	fb ff fb d6 	calli 18f8 <float32_mul>
    29a4:	b8 20 10 00 	mv r2,r1
	}
	else {
	return a;
	}
}
    29a8:	b8 40 08 00 	mv r1,r2
    29ac:	2b 9d 00 04 	lw ra,(sp+4)
    29b0:	37 9c 00 04 	addi sp,sp,4
    29b4:	c3 a0 00 00 	ret

000029b8 <float32_artan>:
That formula was taken from equation 7
http://www.iro.umontreal.ca/~mignotte/IFT2425/Documents/EfficientApproximationArctgFunction.pdf
-------------------------------------------------------------------------------
*/
float32 float32_artan( float32 x )
{
    29b8:	37 9c ff f8 	addi sp,sp,-8
    29bc:	5b 8b 00 08 	sw (sp+8),r11
    29c0:	5b 9d 00 04 	sw (sp+4),ra
    29c4:	b8 20 58 00 	mv r11,r1
return	float32_mul(x,float32_add(0x3F490FD8,float32_mul(0x3E8BC6A8,float32_sub(0x3F800000,float32_abs(x)))));
    29c8:	fb ff ff f0 	calli 2988 <float32_abs>
    29cc:	b8 20 10 00 	mv r2,r1
    29d0:	78 01 3f 80 	mvhi r1,0x3f80
    29d4:	38 21 00 00 	ori r1,r1,0x0
    29d8:	fb ff fb b9 	calli 18bc <float32_sub>
    29dc:	b8 20 10 00 	mv r2,r1
    29e0:	78 01 3e 8b 	mvhi r1,0x3e8b
    29e4:	38 21 c6 a8 	ori r1,r1,0xc6a8
    29e8:	fb ff fb c4 	calli 18f8 <float32_mul>
    29ec:	b8 20 10 00 	mv r2,r1
    29f0:	78 01 3f 49 	mvhi r1,0x3f49
    29f4:	38 21 0f d8 	ori r1,r1,0xfd8
    29f8:	fb ff fb a2 	calli 1880 <float32_add>
    29fc:	b8 20 10 00 	mv r2,r1
    2a00:	b9 60 08 00 	mv r1,r11
    2a04:	fb ff fb bd 	calli 18f8 <float32_mul>
}
    2a08:	2b 9d 00 04 	lw ra,(sp+4)
    2a0c:	2b 8b 00 08 	lw r11,(sp+8)
    2a10:	37 9c 00 08 	addi sp,sp,8
    2a14:	c3 a0 00 00 	ret

00002a18 <float32_pow2>:
-------------------------------------------------------------------------------
This is the square function
-------------------------------------------------------------------------------
*/
float32 float32_pow2( float32 a)
{
    2a18:	37 9c ff fc 	addi sp,sp,-4
    2a1c:	5b 9d 00 04 	sw (sp+4),ra
	return float32_mul(a,a);
    2a20:	b8 20 10 00 	mv r2,r1
    2a24:	fb ff fb b5 	calli 18f8 <float32_mul>
}
    2a28:	2b 9d 00 04 	lw ra,(sp+4)
    2a2c:	37 9c 00 04 	addi sp,sp,4
    2a30:	c3 a0 00 00 	ret

00002a34 <float32_filterKom>:
// - oldAngle: 	Previous measured angle
// - AGy:		Gyroscope angle
// - AAc:		Accelerometer angle
// - dt:		time
//-----------------------------------------------------------------------
float32 float32_filterKom(float32 oldAngle, float32 AGy, float32 AAc, float32 dt){
    2a34:	37 9c ff f0 	addi sp,sp,-16
    2a38:	5b 8b 00 10 	sw (sp+16),r11
    2a3c:	5b 8c 00 0c 	sw (sp+12),r12
    2a40:	5b 8d 00 08 	sw (sp+8),r13
    2a44:	5b 9d 00 04 	sw (sp+4),ra
    2a48:	b8 40 58 00 	mv r11,r2
	//Filter: newAngle= 0.98 *(oldAngle + AGy * dt) + 0.02 * AAc
	dt = float32_mul(dt, 0x322BCC77); //0,00000001
    2a4c:	78 02 32 2b 	mvhi r2,0x322b
// - oldAngle: 	Previous measured angle
// - AGy:		Gyroscope angle
// - AAc:		Accelerometer angle
// - dt:		time
//-----------------------------------------------------------------------
float32 float32_filterKom(float32 oldAngle, float32 AGy, float32 AAc, float32 dt){
    2a50:	b8 20 60 00 	mv r12,r1
	//Filter: newAngle= 0.98 *(oldAngle + AGy * dt) + 0.02 * AAc
	dt = float32_mul(dt, 0x322BCC77); //0,00000001
    2a54:	38 42 cc 77 	ori r2,r2,0xcc77
    2a58:	b8 80 08 00 	mv r1,r4
// - oldAngle: 	Previous measured angle
// - AGy:		Gyroscope angle
// - AAc:		Accelerometer angle
// - dt:		time
//-----------------------------------------------------------------------
float32 float32_filterKom(float32 oldAngle, float32 AGy, float32 AAc, float32 dt){
    2a5c:	b8 60 68 00 	mv r13,r3
	//Filter: newAngle= 0.98 *(oldAngle + AGy * dt) + 0.02 * AAc
	dt = float32_mul(dt, 0x322BCC77); //0,00000001
    2a60:	fb ff fb a6 	calli 18f8 <float32_mul>
    2a64:	b8 20 10 00 	mv r2,r1
	float32 newAngle = float32_mul(AGy, dt);
    2a68:	b9 60 08 00 	mv r1,r11
    2a6c:	fb ff fb a3 	calli 18f8 <float32_mul>
	newAngle = float32_add(newAngle, oldAngle);
    2a70:	b9 80 10 00 	mv r2,r12
    2a74:	fb ff fb 83 	calli 1880 <float32_add>
	newAngle = float32_mul(newAngle, alfa);
    2a78:	78 02 3f 4c 	mvhi r2,0x3f4c
    2a7c:	38 42 cc cd 	ori r2,r2,0xcccd
    2a80:	fb ff fb 9e 	calli 18f8 <float32_mul>
	float32 temp = float32_mul(AAc, beta);
    2a84:	78 02 3e 4c 	mvhi r2,0x3e4c
float32 float32_filterKom(float32 oldAngle, float32 AGy, float32 AAc, float32 dt){
	//Filter: newAngle= 0.98 *(oldAngle + AGy * dt) + 0.02 * AAc
	dt = float32_mul(dt, 0x322BCC77); //0,00000001
	float32 newAngle = float32_mul(AGy, dt);
	newAngle = float32_add(newAngle, oldAngle);
	newAngle = float32_mul(newAngle, alfa);
    2a88:	b8 20 58 00 	mv r11,r1
	float32 temp = float32_mul(AAc, beta);
    2a8c:	38 42 cc cd 	ori r2,r2,0xcccd
    2a90:	b9 a0 08 00 	mv r1,r13
    2a94:	fb ff fb 99 	calli 18f8 <float32_mul>
    2a98:	b8 20 10 00 	mv r2,r1
	return float32_add(newAngle, temp);
    2a9c:	b9 60 08 00 	mv r1,r11
    2aa0:	fb ff fb 78 	calli 1880 <float32_add>
}
    2aa4:	2b 9d 00 04 	lw ra,(sp+4)
    2aa8:	2b 8b 00 10 	lw r11,(sp+16)
    2aac:	2b 8c 00 0c 	lw r12,(sp+12)
    2ab0:	2b 8d 00 08 	lw r13,(sp+8)
    2ab4:	37 9c 00 10 	addi sp,sp,16
    2ab8:	c3 a0 00 00 	ret

00002abc <agWriteByte>:
{
	return I2CreadByte(agAddress, subAddress);
}

void agWriteByte(uint8_t subAddress,uint8_t data)
{
    2abc:	37 9c ff fc 	addi sp,sp,-4
    2ac0:	5b 9d 00 04 	sw (sp+4),ra
    2ac4:	20 21 00 ff 	andi r1,r1,0xff
    2ac8:	20 42 00 ff 	andi r2,r2,0xff
	I2CwriteByte(agAddress, subAddress, data);
    2acc:	b8 40 18 00 	mv r3,r2
    2ad0:	b8 20 10 00 	mv r2,r1
    2ad4:	34 01 00 6a 	mvi r1,106
    2ad8:	fb ff f7 c1 	calli 9dc <I2CwriteByte>
}
    2adc:	2b 9d 00 04 	lw ra,(sp+4)
    2ae0:	37 9c 00 04 	addi sp,sp,4
    2ae4:	c3 a0 00 00 	ret

00002ae8 <initGyro>:

void initGyro()
{
    2ae8:	37 9c ff fc 	addi sp,sp,-4
    2aec:	5b 9d 00 04 	sw (sp+4),ra
	return I2CreadByte(agAddress, subAddress);
}

void agWriteByte(uint8_t subAddress,uint8_t data)
{
	I2CwriteByte(agAddress, subAddress, data);
    2af0:	34 01 00 6a 	mvi r1,106
    2af4:	34 02 00 10 	mvi r2,16
    2af8:	34 03 00 c0 	mvi r3,192
    2afc:	fb ff f7 b8 	calli 9dc <I2CwriteByte>
	agWriteByte(CTRL_REG2_G, ag_ctrl2_Default );

// TERCER REGISTRO
// Se dejara el valor por defecto
	agWriteByte(CTRL_REG3_G, ag_ctrl3_Default );
}
    2b00:	34 01 00 6a 	mvi r1,106
    2b04:	34 02 00 11 	mvi r2,17
    2b08:	34 03 00 00 	mvi r3,0
    2b0c:	fb ff f7 b4 	calli 9dc <I2CwriteByte>
    2b10:	34 01 00 6a 	mvi r1,106
    2b14:	34 02 00 12 	mvi r2,18
    2b18:	34 03 00 00 	mvi r3,0
    2b1c:	fb ff f7 b0 	calli 9dc <I2CwriteByte>
    2b20:	2b 9d 00 04 	lw ra,(sp+4)
    2b24:	37 9c 00 04 	addi sp,sp,4
    2b28:	c3 a0 00 00 	ret

00002b2c <agReadByte>:
{
	return I2CreadByte(mAddress, subAddress);
}

uint8_t agReadByte(uint8_t subAddress)
{
    2b2c:	37 9c ff fc 	addi sp,sp,-4
    2b30:	5b 9d 00 04 	sw (sp+4),ra
    2b34:	20 21 00 ff 	andi r1,r1,0xff
	return I2CreadByte(agAddress, subAddress);
    2b38:	b8 20 10 00 	mv r2,r1
    2b3c:	34 01 00 6a 	mvi r1,106
    2b40:	fb ff f7 20 	calli 7c0 <I2CreadByte>
}
    2b44:	2b 9d 00 04 	lw ra,(sp+4)
    2b48:	37 9c 00 04 	addi sp,sp,4
    2b4c:	c3 a0 00 00 	ret

00002b50 <mReadByte>:
#include "LSM9DS1.h"
#include "soc-hw.h"

uint8_t mReadByte(uint8_t subAddress)
{
    2b50:	37 9c ff fc 	addi sp,sp,-4
    2b54:	5b 9d 00 04 	sw (sp+4),ra
    2b58:	20 21 00 ff 	andi r1,r1,0xff
	return I2CreadByte(mAddress, subAddress);
    2b5c:	b8 20 10 00 	mv r2,r1
    2b60:	34 01 00 1c 	mvi r1,28
    2b64:	fb ff f7 17 	calli 7c0 <I2CreadByte>
}
    2b68:	2b 9d 00 04 	lw ra,(sp+4)
    2b6c:	37 9c 00 04 	addi sp,sp,4
    2b70:	c3 a0 00 00 	ret

00002b74 <MPLReadBytes>:
{
	I2CwriteByte(MPL3115A2_ADDRESS, subAddress, data);
}

void MPLReadBytes(uint8_t subaddress, int *dest, uint8_t count)
{
    2b74:	37 9c ff fc 	addi sp,sp,-4
    2b78:	5b 9d 00 04 	sw (sp+4),ra
    2b7c:	b8 40 28 00 	mv r5,r2
    2b80:	20 21 00 ff 	andi r1,r1,0xff
    2b84:	20 64 00 ff 	andi r4,r3,0xff
	I2CreadBytes(MPL3115A2_ADDRESS, subaddress, dest, count);
    2b88:	b8 20 10 00 	mv r2,r1
    2b8c:	b8 a0 18 00 	mv r3,r5
    2b90:	34 01 00 60 	mvi r1,96
    2b94:	fb ff f7 47 	calli 8b0 <I2CreadBytes>
}
    2b98:	2b 9d 00 04 	lw ra,(sp+4)
    2b9c:	37 9c 00 04 	addi sp,sp,4
    2ba0:	c3 a0 00 00 	ret

00002ba4 <MPLWriteByte>:
{
	return I2CreadByte(MPL3115A2_ADDRESS, subAddress);
}

void MPLWriteByte(uint8_t subAddress,uint8_t data)
{
    2ba4:	37 9c ff fc 	addi sp,sp,-4
    2ba8:	5b 9d 00 04 	sw (sp+4),ra
    2bac:	20 21 00 ff 	andi r1,r1,0xff
    2bb0:	20 42 00 ff 	andi r2,r2,0xff
	I2CwriteByte(MPL3115A2_ADDRESS, subAddress, data);
    2bb4:	b8 40 18 00 	mv r3,r2
    2bb8:	b8 20 10 00 	mv r2,r1
    2bbc:	34 01 00 60 	mvi r1,96
    2bc0:	fb ff f7 87 	calli 9dc <I2CwriteByte>
}
    2bc4:	2b 9d 00 04 	lw ra,(sp+4)
    2bc8:	37 9c 00 04 	addi sp,sp,4
    2bcc:	c3 a0 00 00 	ret

00002bd0 <MPLBegin>:
/*!
    INICIALIZAR EL MODULO
*/
/**************************************************************************/

void MPLBegin(){
    2bd0:	37 9c ff fc 	addi sp,sp,-4
    2bd4:	5b 9d 00 04 	sw (sp+4),ra
	return I2CreadByte(MPL3115A2_ADDRESS, subAddress);
}

void MPLWriteByte(uint8_t subAddress,uint8_t data)
{
	I2CwriteByte(MPL3115A2_ADDRESS, subAddress, data);
    2bd8:	34 01 00 60 	mvi r1,96
    2bdc:	34 02 00 26 	mvi r2,38
    2be0:	34 03 00 b8 	mvi r3,184
    2be4:	fb ff f7 7e 	calli 9dc <I2CwriteByte>

	MPLWriteByte(MPL3115A2_PT_DATA_CFG,
		MPL3115A2_PT_DATA_CFG_TDEFE |
		MPL3115A2_PT_DATA_CFG_PDEFE |
		MPL3115A2_PT_DATA_CFG_DREM);
}
    2be8:	34 01 00 60 	mvi r1,96
    2bec:	34 02 00 13 	mvi r2,19
    2bf0:	34 03 00 07 	mvi r3,7
    2bf4:	fb ff f7 7a 	calli 9dc <I2CwriteByte>
    2bf8:	2b 9d 00 04 	lw ra,(sp+4)
    2bfc:	37 9c 00 04 	addi sp,sp,4
    2c00:	c3 a0 00 00 	ret

00002c04 <MPLReadByte>:
    DECLARACION DE FUNCIONES DE LECTURA Y ESCRITURA I2C
*/
/**************************************************************************/

uint8_t MPLReadByte(uint8_t subAddress)
{
    2c04:	37 9c ff fc 	addi sp,sp,-4
    2c08:	5b 9d 00 04 	sw (sp+4),ra
    2c0c:	20 21 00 ff 	andi r1,r1,0xff
	return I2CreadByte(MPL3115A2_ADDRESS, subAddress);
    2c10:	b8 20 10 00 	mv r2,r1
    2c14:	34 01 00 60 	mvi r1,96
    2c18:	fb ff f6 ea 	calli 7c0 <I2CreadByte>
}
    2c1c:	2b 9d 00 04 	lw ra,(sp+4)
    2c20:	37 9c 00 04 	addi sp,sp,4
    2c24:	c3 a0 00 00 	ret

00002c28 <MPLgetAltitude>:
		MPL3115A2_PT_DATA_CFG_TDEFE |
		MPL3115A2_PT_DATA_CFG_PDEFE |
		MPL3115A2_PT_DATA_CFG_DREM);
}

void MPLgetAltitude(){
    2c28:	37 9c ff f4 	addi sp,sp,-12
    2c2c:	5b 8b 00 0c 	sw (sp+12),r11
    2c30:	5b 8c 00 08 	sw (sp+8),r12
    2c34:	5b 9d 00 04 	sw (sp+4),ra
	return I2CreadByte(MPL3115A2_ADDRESS, subAddress);
}

void MPLWriteByte(uint8_t subAddress,uint8_t data)
{
	I2CwriteByte(MPL3115A2_ADDRESS, subAddress, data);
    2c38:	34 01 00 60 	mvi r1,96
    2c3c:	34 02 00 26 	mvi r2,38
    2c40:	34 03 00 b9 	mvi r3,185
    2c44:	fb ff f7 66 	calli 9dc <I2CwriteByte>
    sta = MPLReadByte(MPL3115A2_REGISTER_STATUS);
    //gpio0->oe  = 0x000000ff;
    //gpio0->out = 0xBB;
    //gpio0->out = sta;
    //gpio0->out = sta & 0x04;    
    uart_putstr("NNNN");
    2c48:	78 0c 00 00 	mvhi r12,0x0
*/
/**************************************************************************/

uint8_t MPLReadByte(uint8_t subAddress)
{
	return I2CreadByte(MPL3115A2_ADDRESS, subAddress);
    2c4c:	34 02 00 00 	mvi r2,0
    2c50:	34 01 00 60 	mvi r1,96
    2c54:	fb ff f6 db 	calli 7c0 <I2CreadByte>
    2c58:	b8 20 58 00 	mv r11,r1
    sta = MPLReadByte(MPL3115A2_REGISTER_STATUS);
    //gpio0->oe  = 0x000000ff;
    //gpio0->out = 0xBB;
    //gpio0->out = sta;
    //gpio0->out = sta & 0x04;    
    uart_putstr("NNNN");
    2c5c:	b9 80 08 00 	mv r1,r12
    2c60:	38 21 3f c0 	ori r1,r1,0x3fc0
    2c64:	fb ff f6 87 	calli 680 <uart_putstr>
    nsleep(20);
    2c68:	34 01 00 14 	mvi r1,20
		MPL3115A2_CTRL_REG1_OS128 |
		MPL3115A2_CTRL_REG1_ALT);

  uint8_t sta = 0;
//  while (sta & MPL3115A2_REGISTER_STATUS_PDR) {
  while (! (sta & 0x04)) {
    2c6c:	21 6b 00 04 	andi r11,r11,0x4
    //gpio0->oe  = 0x000000ff;
    //gpio0->out = 0xBB;
    //gpio0->out = sta;
    //gpio0->out = sta & 0x04;    
    uart_putstr("NNNN");
    nsleep(20);
    2c70:	fb ff f6 18 	calli 4d0 <nsleep>
		MPL3115A2_CTRL_REG1_OS128 |
		MPL3115A2_CTRL_REG1_ALT);

  uint8_t sta = 0;
//  while (sta & MPL3115A2_REGISTER_STATUS_PDR) {
  while (! (sta & 0x04)) {
    2c74:	45 60 ff f6 	be r11,r0,2c4c <MPLgetAltitude+0x24>
	I2CwriteByte(MPL3115A2_ADDRESS, subAddress, data);
}

void MPLReadBytes(uint8_t subaddress, int *dest, uint8_t count)
{
	I2CreadBytes(MPL3115A2_ADDRESS, subaddress, dest, count);
    2c78:	78 03 00 00 	mvhi r3,0x0
    2c7c:	38 63 40 44 	ori r3,r3,0x4044
    2c80:	34 02 00 01 	mvi r2,1
    2c84:	34 04 00 03 	mvi r4,3
    2c88:	34 01 00 60 	mvi r1,96
    2c8c:	fb ff f7 09 	calli 8b0 <I2CreadBytes>
	gpio0->out = temp[2];*/

// Prueba lectura tamaño


   nsleep(20);
    2c90:	34 01 00 14 	mvi r1,20
    2c94:	fb ff f6 0f 	calli 4d0 <nsleep>
   uart_putstr("SSSS");
    2c98:	78 01 00 00 	mvhi r1,0x0
    2c9c:	38 21 3f c8 	ori r1,r1,0x3fc8
   uart_putchar(temp[0]);
    2ca0:	78 0b 00 00 	mvhi r11,0x0
    2ca4:	39 6b 40 44 	ori r11,r11,0x4044

// Prueba lectura tamaño


   nsleep(20);
   uart_putstr("SSSS");
    2ca8:	fb ff f6 76 	calli 680 <uart_putstr>
   uart_putchar(temp[0]);
    2cac:	29 61 00 00 	lw r1,(r11+0)
    2cb0:	20 21 00 ff 	andi r1,r1,0xff
    2cb4:	fb ff f6 6a 	calli 65c <uart_putchar>
   uart_putchar(temp[0]);
    2cb8:	29 61 00 00 	lw r1,(r11+0)
    2cbc:	20 21 00 ff 	andi r1,r1,0xff
    2cc0:	fb ff f6 67 	calli 65c <uart_putchar>
   uart_putchar(temp[0]);
    2cc4:	29 61 00 00 	lw r1,(r11+0)
    2cc8:	20 21 00 ff 	andi r1,r1,0xff
    2ccc:	fb ff f6 64 	calli 65c <uart_putchar>

   nsleep(20);
    2cd0:	34 01 00 14 	mvi r1,20
    2cd4:	fb ff f5 ff 	calli 4d0 <nsleep>
   uart_putstr("SSSS");
    2cd8:	78 01 00 00 	mvhi r1,0x0
    2cdc:	38 21 3f c8 	ori r1,r1,0x3fc8
    2ce0:	fb ff f6 68 	calli 680 <uart_putstr>
   uart_putchar(temp[1]);
    2ce4:	29 61 00 04 	lw r1,(r11+4)
    2ce8:	20 21 00 ff 	andi r1,r1,0xff
    2cec:	fb ff f6 5c 	calli 65c <uart_putchar>
   uart_putchar(temp[1]);
    2cf0:	29 61 00 04 	lw r1,(r11+4)
    2cf4:	20 21 00 ff 	andi r1,r1,0xff
    2cf8:	fb ff f6 59 	calli 65c <uart_putchar>
   uart_putchar(temp[1]);
    2cfc:	29 61 00 04 	lw r1,(r11+4)
    2d00:	20 21 00 ff 	andi r1,r1,0xff
    2d04:	fb ff f6 56 	calli 65c <uart_putchar>

   nsleep(20);
    2d08:	34 01 00 14 	mvi r1,20
    2d0c:	fb ff f5 f1 	calli 4d0 <nsleep>
   uart_putstr("SSSS");
    2d10:	78 01 00 00 	mvhi r1,0x0
    2d14:	38 21 3f c8 	ori r1,r1,0x3fc8
    2d18:	fb ff f6 5a 	calli 680 <uart_putstr>
   uart_putchar(temp[2]);
    2d1c:	29 61 00 08 	lw r1,(r11+8)
    2d20:	20 21 00 ff 	andi r1,r1,0xff
    2d24:	fb ff f6 4e 	calli 65c <uart_putchar>
   uart_putchar(temp[2]);
    2d28:	29 61 00 08 	lw r1,(r11+8)
    2d2c:	20 21 00 ff 	andi r1,r1,0xff
    2d30:	fb ff f6 4b 	calli 65c <uart_putchar>
   uart_putchar(temp[2]);
    2d34:	29 61 00 08 	lw r1,(r11+8)
    2d38:	20 21 00 ff 	andi r1,r1,0xff
    2d3c:	fb ff f6 48 	calli 65c <uart_putchar>

}
    2d40:	2b 9d 00 04 	lw ra,(sp+4)
    2d44:	2b 8b 00 0c 	lw r11,(sp+12)
    2d48:	2b 8c 00 08 	lw r12,(sp+8)
    2d4c:	37 9c 00 0c 	addi sp,sp,12
    2d50:	c3 a0 00 00 	ret

00002d54 <ce>:
	gpio0-> ports;
}
*/

uint8_t ce(uint8_t level)
{
    2d54:	20 26 00 ff 	andi r6,r1,0xff
	if(level == (HIGH)){
    2d58:	34 01 00 01 	mvi r1,1
    2d5c:	44 c1 00 1c 	be r6,r1,2dcc <ce+0x78>
		ports |=_BV(CE);
		//gpio0-> oe =ports;
		gpio0->out = ports;
		spi0->ce= 1;
		ce_pin = 1;
	}else if(level == (LOW)){
    2d60:	44 c0 00 07 	be r6,r0,2d7c <ce+0x28>
		ports &=~_BV(CE);
		gpio0->out = ports;
		spi0->ce = 0;
		ce_pin = 0;
	} else{
		ce_pin = 0;
    2d64:	78 02 00 00 	mvhi r2,0x0
    2d68:	38 42 40 5c 	ori r2,r2,0x405c
    2d6c:	34 01 00 00 	mvi r1,0
    2d70:	30 41 00 00 	sb (r2+0),r1
	}
	return ce_pin;
}
    2d74:	40 41 00 00 	lbu r1,(r2+0)
    2d78:	c3 a0 00 00 	ret
		//gpio0-> oe =ports;
		gpio0->out = ports;
		spi0->ce= 1;
		ce_pin = 1;
	}else if(level == (LOW)){
		ports &=~_BV(CE);
    2d7c:	78 03 00 00 	mvhi r3,0x0
    2d80:	38 63 40 e4 	ori r3,r3,0x40e4
    2d84:	28 61 00 00 	lw r1,(r3+0)
    2d88:	34 02 ff fd 	mvi r2,-3
		gpio0->out = ports;
    2d8c:	78 04 00 00 	mvhi r4,0x0
		//gpio0-> oe =ports;
		gpio0->out = ports;
		spi0->ce= 1;
		ce_pin = 1;
	}else if(level == (LOW)){
		ports &=~_BV(CE);
    2d90:	a0 22 08 00 	and r1,r1,r2
    2d94:	58 61 00 00 	sw (r3+0),r1
		gpio0->out = ports;
    2d98:	38 84 40 18 	ori r4,r4,0x4018
		spi0->ce = 0;
    2d9c:	78 01 00 00 	mvhi r1,0x0
		gpio0->out = ports;
		spi0->ce= 1;
		ce_pin = 1;
	}else if(level == (LOW)){
		ports &=~_BV(CE);
		gpio0->out = ports;
    2da0:	28 65 00 00 	lw r5,(r3+0)
    2da4:	28 82 00 00 	lw r2,(r4+0)
		spi0->ce = 0;
    2da8:	38 21 40 1c 	ori r1,r1,0x401c
    2dac:	28 23 00 00 	lw r3,(r1+0)
		gpio0->out = ports;
		spi0->ce= 1;
		ce_pin = 1;
	}else if(level == (LOW)){
		ports &=~_BV(CE);
		gpio0->out = ports;
    2db0:	58 45 00 14 	sw (r2+20),r5
		spi0->ce = 0;
		ce_pin = 0;
    2db4:	78 02 00 00 	mvhi r2,0x0
		spi0->ce= 1;
		ce_pin = 1;
	}else if(level == (LOW)){
		ports &=~_BV(CE);
		gpio0->out = ports;
		spi0->ce = 0;
    2db8:	58 66 00 0c 	sw (r3+12),r6
		ce_pin = 0;
    2dbc:	38 42 40 5c 	ori r2,r2,0x405c
    2dc0:	30 46 00 00 	sb (r2+0),r6
	} else{
		ce_pin = 0;
	}
	return ce_pin;
}
    2dc4:	40 41 00 00 	lbu r1,(r2+0)
    2dc8:	c3 a0 00 00 	ret
*/

uint8_t ce(uint8_t level)
{
	if(level == (HIGH)){
		ports |=_BV(CE);
    2dcc:	78 03 00 00 	mvhi r3,0x0
    2dd0:	38 63 40 e4 	ori r3,r3,0x40e4
    2dd4:	28 61 00 00 	lw r1,(r3+0)
		//gpio0-> oe =ports;
		gpio0->out = ports;
    2dd8:	78 04 00 00 	mvhi r4,0x0
    2ddc:	38 84 40 18 	ori r4,r4,0x4018
*/

uint8_t ce(uint8_t level)
{
	if(level == (HIGH)){
		ports |=_BV(CE);
    2de0:	38 21 00 02 	ori r1,r1,0x2
    2de4:	58 61 00 00 	sw (r3+0),r1
		//gpio0-> oe =ports;
		gpio0->out = ports;
		spi0->ce= 1;
    2de8:	78 02 00 00 	mvhi r2,0x0
uint8_t ce(uint8_t level)
{
	if(level == (HIGH)){
		ports |=_BV(CE);
		//gpio0-> oe =ports;
		gpio0->out = ports;
    2dec:	28 65 00 00 	lw r5,(r3+0)
    2df0:	28 81 00 00 	lw r1,(r4+0)
		spi0->ce= 1;
    2df4:	38 42 40 1c 	ori r2,r2,0x401c
    2df8:	28 43 00 00 	lw r3,(r2+0)
uint8_t ce(uint8_t level)
{
	if(level == (HIGH)){
		ports |=_BV(CE);
		//gpio0-> oe =ports;
		gpio0->out = ports;
    2dfc:	58 25 00 14 	sw (r1+20),r5
		spi0->ce= 1;
		ce_pin = 1;
    2e00:	78 02 00 00 	mvhi r2,0x0
{
	if(level == (HIGH)){
		ports |=_BV(CE);
		//gpio0-> oe =ports;
		gpio0->out = ports;
		spi0->ce= 1;
    2e04:	58 66 00 0c 	sw (r3+12),r6
		ce_pin = 1;
    2e08:	38 42 40 5c 	ori r2,r2,0x405c
    2e0c:	30 46 00 00 	sb (r2+0),r6
		ce_pin = 0;
	} else{
		ce_pin = 0;
	}
	return ce_pin;
}
    2e10:	40 41 00 00 	lbu r1,(r2+0)
    2e14:	c3 a0 00 00 	ret

00002e18 <nrf24_config>:
	nsleep(3);
	csn(HIGH);
}

void nrf24_config(void)
{
    2e18:	78 01 00 00 	mvhi r1,0x0
    2e1c:	38 21 40 58 	ori r1,r1,0x4058
    2e20:	34 02 00 00 	mvi r2,0
    2e24:	58 22 00 00 	sw (r1+0),r2
	pipe0_reading_address=0;
}
    2e28:	c3 a0 00 00 	ret

00002e2c <spi_finish>:
	}
	return csn_pin;
}

void spi_finish()
{
    2e2c:	37 9c ff fc 	addi sp,sp,-4
    2e30:	5b 9d 00 04 	sw (sp+4),ra
	nsleep(10);
    2e34:	34 01 00 0a 	mvi r1,10
    2e38:	fb ff f5 a6 	calli 4d0 <nsleep>
	gpio0->out = DEFAULT;
    2e3c:	78 01 00 00 	mvhi r1,0x0
    2e40:	38 21 40 18 	ori r1,r1,0x4018
	spi0->ce = 0x00;
    2e44:	78 02 00 00 	mvhi r2,0x0
}

void spi_finish()
{
	nsleep(10);
	gpio0->out = DEFAULT;
    2e48:	28 24 00 00 	lw r4,(r1+0)
	spi0->ce = 0x00;
    2e4c:	38 42 40 1c 	ori r2,r2,0x401c
    2e50:	28 43 00 00 	lw r3,(r2+0)
}

void spi_finish()
{
	nsleep(10);
	gpio0->out = DEFAULT;
    2e54:	34 01 00 00 	mvi r1,0
    2e58:	58 81 00 14 	sw (r4+20),r1
	spi0->ce = 0x00;
    2e5c:	58 61 00 0c 	sw (r3+12),r1
	spi0->csn=0x00;
    2e60:	58 61 00 08 	sw (r3+8),r1
}
    2e64:	2b 9d 00 04 	lw ra,(sp+4)
    2e68:	37 9c 00 04 	addi sp,sp,4
    2e6c:	c3 a0 00 00 	ret

00002e70 <csn>:
	}
	return ce_pin;
}

uint8_t csn(uint8_t level)
{
    2e70:	37 9c ff f8 	addi sp,sp,-8
    2e74:	5b 8b 00 08 	sw (sp+8),r11
    2e78:	5b 9d 00 04 	sw (sp+4),ra
    2e7c:	20 2b 00 ff 	andi r11,r1,0xff
	if(level == HIGH){
    2e80:	34 01 00 01 	mvi r1,1
    2e84:	45 61 00 22 	be r11,r1,2f0c <csn+0x9c>
		gpio0->out = ports;
		spi0->csn = 1;
		nsleep(1);
		csn_pin = 1;
	}else
	if(level == LOW){
    2e88:	45 60 00 0a 	be r11,r0,2eb0 <csn+0x40>
		ports &=~_BV(CSN);
		gpio0->out = ports;
		spi0->csn = 0;
		csn_pin = 0;
	} else {
		csn_pin = 0;
    2e8c:	78 02 00 00 	mvhi r2,0x0
    2e90:	38 42 40 55 	ori r2,r2,0x4055
    2e94:	34 01 00 00 	mvi r1,0
    2e98:	30 41 00 00 	sb (r2+0),r1
	}
	return csn_pin;
}
    2e9c:	40 41 00 00 	lbu r1,(r2+0)
    2ea0:	2b 9d 00 04 	lw ra,(sp+4)
    2ea4:	2b 8b 00 08 	lw r11,(sp+8)
    2ea8:	37 9c 00 08 	addi sp,sp,8
    2eac:	c3 a0 00 00 	ret
		spi0->csn = 1;
		nsleep(1);
		csn_pin = 1;
	}else
	if(level == LOW){
		ports &=~_BV(CSN);
    2eb0:	78 03 00 00 	mvhi r3,0x0
    2eb4:	38 63 40 e4 	ori r3,r3,0x40e4
    2eb8:	28 61 00 00 	lw r1,(r3+0)
    2ebc:	34 02 ff fe 	mvi r2,-2
		gpio0->out = ports;
    2ec0:	78 04 00 00 	mvhi r4,0x0
		spi0->csn = 1;
		nsleep(1);
		csn_pin = 1;
	}else
	if(level == LOW){
		ports &=~_BV(CSN);
    2ec4:	a0 22 08 00 	and r1,r1,r2
    2ec8:	58 61 00 00 	sw (r3+0),r1
		gpio0->out = ports;
    2ecc:	38 84 40 18 	ori r4,r4,0x4018
		spi0->csn = 0;
    2ed0:	78 01 00 00 	mvhi r1,0x0
		nsleep(1);
		csn_pin = 1;
	}else
	if(level == LOW){
		ports &=~_BV(CSN);
		gpio0->out = ports;
    2ed4:	28 65 00 00 	lw r5,(r3+0)
    2ed8:	28 82 00 00 	lw r2,(r4+0)
		spi0->csn = 0;
    2edc:	38 21 40 1c 	ori r1,r1,0x401c
    2ee0:	28 23 00 00 	lw r3,(r1+0)
		nsleep(1);
		csn_pin = 1;
	}else
	if(level == LOW){
		ports &=~_BV(CSN);
		gpio0->out = ports;
    2ee4:	58 45 00 14 	sw (r2+20),r5
		spi0->csn = 0;
		csn_pin = 0;
    2ee8:	78 02 00 00 	mvhi r2,0x0
		csn_pin = 1;
	}else
	if(level == LOW){
		ports &=~_BV(CSN);
		gpio0->out = ports;
		spi0->csn = 0;
    2eec:	58 6b 00 08 	sw (r3+8),r11
		csn_pin = 0;
    2ef0:	38 42 40 55 	ori r2,r2,0x4055
    2ef4:	30 4b 00 00 	sb (r2+0),r11
	} else {
		csn_pin = 0;
	}
	return csn_pin;
}
    2ef8:	40 41 00 00 	lbu r1,(r2+0)
    2efc:	2b 9d 00 04 	lw ra,(sp+4)
    2f00:	2b 8b 00 08 	lw r11,(sp+8)
    2f04:	37 9c 00 08 	addi sp,sp,8
    2f08:	c3 a0 00 00 	ret
}

uint8_t csn(uint8_t level)
{
	if(level == HIGH){
		ports |=_BV(CSN);
    2f0c:	78 03 00 00 	mvhi r3,0x0
    2f10:	38 63 40 e4 	ori r3,r3,0x40e4
    2f14:	28 61 00 00 	lw r1,(r3+0)
		gpio0->out = ports;
    2f18:	78 04 00 00 	mvhi r4,0x0
    2f1c:	38 84 40 18 	ori r4,r4,0x4018
}

uint8_t csn(uint8_t level)
{
	if(level == HIGH){
		ports |=_BV(CSN);
    2f20:	38 21 00 01 	ori r1,r1,0x1
    2f24:	58 61 00 00 	sw (r3+0),r1
		gpio0->out = ports;
		spi0->csn = 1;
    2f28:	78 02 00 00 	mvhi r2,0x0

uint8_t csn(uint8_t level)
{
	if(level == HIGH){
		ports |=_BV(CSN);
		gpio0->out = ports;
    2f2c:	28 65 00 00 	lw r5,(r3+0)
    2f30:	28 81 00 00 	lw r1,(r4+0)
		spi0->csn = 1;
    2f34:	38 42 40 1c 	ori r2,r2,0x401c
    2f38:	28 43 00 00 	lw r3,(r2+0)

uint8_t csn(uint8_t level)
{
	if(level == HIGH){
		ports |=_BV(CSN);
		gpio0->out = ports;
    2f3c:	58 25 00 14 	sw (r1+20),r5
		spi0->csn = 1;
		nsleep(1);
    2f40:	b9 60 08 00 	mv r1,r11
uint8_t csn(uint8_t level)
{
	if(level == HIGH){
		ports |=_BV(CSN);
		gpio0->out = ports;
		spi0->csn = 1;
    2f44:	58 6b 00 08 	sw (r3+8),r11
		nsleep(1);
    2f48:	fb ff f5 62 	calli 4d0 <nsleep>
		csn_pin = 1;
    2f4c:	78 02 00 00 	mvhi r2,0x0
    2f50:	38 42 40 55 	ori r2,r2,0x4055
    2f54:	30 4b 00 00 	sb (r2+0),r11
		csn_pin = 0;
	} else {
		csn_pin = 0;
	}
	return csn_pin;
}
    2f58:	40 41 00 00 	lbu r1,(r2+0)
    2f5c:	2b 9d 00 04 	lw ra,(sp+4)
    2f60:	2b 8b 00 08 	lw r11,(sp+8)
    2f64:	37 9c 00 08 	addi sp,sp,8
    2f68:	c3 a0 00 00 	ret

00002f6c <spi_enable>:
	spi0->ce = 0x00;
	spi0->csn=0x00;
}

void spi_enable()
{
    2f6c:	37 9c ff fc 	addi sp,sp,-4
    2f70:	5b 9d 00 04 	sw (sp+4),ra
	spi_finish();
    2f74:	fb ff ff ae 	calli 2e2c <spi_finish>
	csn(HIGH);
    2f78:	34 01 00 01 	mvi r1,1
    2f7c:	fb ff ff bd 	calli 2e70 <csn>
}
    2f80:	2b 9d 00 04 	lw ra,(sp+4)
    2f84:	37 9c 00 04 	addi sp,sp,4
    2f88:	c3 a0 00 00 	ret

00002f8c <spi_transmitD>:
	csn(HIGH);
	nsleep(5);
}

uint8_t spi_transmitD(uint8_t data)
{
    2f8c:	37 9c ff fc 	addi sp,sp,-4
    2f90:	5b 9d 00 04 	sw (sp+4),ra
	uint8_t receive;
	spi_putchar(data);
    2f94:	20 21 00 ff 	andi r1,r1,0xff
    2f98:	fb ff f6 fe 	calli b90 <spi_putchar>
	nsleep(1);
    2f9c:	34 01 00 01 	mvi r1,1
    2fa0:	fb ff f5 4c 	calli 4d0 <nsleep>
	spi_init();
    2fa4:	fb ff f6 c7 	calli ac0 <spi_init>
  receive = spi_getchar();
    2fa8:	fb ff f6 ce 	calli ae0 <spi_getchar>
	return receive; 
}
    2fac:	2b 9d 00 04 	lw ra,(sp+4)
    2fb0:	37 9c 00 04 	addi sp,sp,4
    2fb4:	c3 a0 00 00 	ret

00002fb8 <toggle_features>:
  return status;
}


void toggle_features(void)
{
    2fb8:	37 9c ff fc 	addi sp,sp,-4
    2fbc:	5b 9d 00 04 	sw (sp+4),ra
	csn(LOW);
    2fc0:	34 01 00 00 	mvi r1,0
    2fc4:	fb ff ff ab 	calli 2e70 <csn>
	 spi_transmitD(ACTIVATE);
    2fc8:	34 01 00 50 	mvi r1,80
    2fcc:	fb ff ff f0 	calli 2f8c <spi_transmitD>
   spi_transmitD( 0x73 );
    2fd0:	34 01 00 73 	mvi r1,115
    2fd4:	fb ff ff ee 	calli 2f8c <spi_transmitD>
	nsleep(3);
    2fd8:	34 01 00 03 	mvi r1,3
    2fdc:	fb ff f5 3d 	calli 4d0 <nsleep>
	csn(HIGH);
    2fe0:	34 01 00 01 	mvi r1,1
    2fe4:	fb ff ff a3 	calli 2e70 <csn>
}
    2fe8:	2b 9d 00 04 	lw ra,(sp+4)
    2fec:	37 9c 00 04 	addi sp,sp,4
    2ff0:	c3 a0 00 00 	ret

00002ff4 <read_payload>:
  csn(HIGH);
}

/****************************************************************************/
uint8_t read_payload(void *buf, uint8_t data_len)
{
    2ff4:	37 9c ff ec 	addi sp,sp,-20
    2ff8:	5b 8b 00 14 	sw (sp+20),r11
    2ffc:	5b 8c 00 10 	sw (sp+16),r12
    3000:	5b 8d 00 0c 	sw (sp+12),r13
    3004:	5b 8e 00 08 	sw (sp+8),r14
    3008:	5b 9d 00 04 	sw (sp+4),ra
	uint8_t status;
  int *data = (int*) buf;
	if(data_len > payload_size) data_len = payload_size;
    300c:	78 03 00 00 	mvhi r3,0x0
    3010:	38 63 40 2c 	ori r3,r3,0x402c
    3014:	40 64 00 00 	lbu r4,(r3+0)
    3018:	20 4b 00 ff 	andi r11,r2,0xff
  csn(HIGH);
}

/****************************************************************************/
uint8_t read_payload(void *buf, uint8_t data_len)
{
    301c:	b8 20 68 00 	mv r13,r1
	uint8_t status;
  int *data = (int*) buf;
	if(data_len > payload_size) data_len = payload_size;
    3020:	50 8b 00 02 	bgeu r4,r11,3028 <read_payload+0x34>
    3024:	b8 80 58 00 	mv r11,r4
  uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
    3028:	78 01 00 00 	mvhi r1,0x0
    302c:	38 21 40 54 	ori r1,r1,0x4054
    3030:	40 23 00 00 	lbu r3,(r1+0)
    3034:	c8 8b 10 00 	sub r2,r4,r11
    3038:	20 4c 00 ff 	andi r12,r2,0xff
    303c:	44 60 00 02 	be r3,r0,3044 <read_payload+0x50>
    3040:	34 0c 00 00 	mvi r12,0

	csn(LOW);
    3044:	34 01 00 00 	mvi r1,0
    3048:	fb ff ff 8a 	calli 2e70 <csn>
  status = spi_transmitD( R_RX_PAYLOAD );
    304c:	34 01 00 61 	mvi r1,97
    3050:	fb ff ff cf 	calli 2f8c <spi_transmitD>
    3054:	b8 20 70 00 	mv r14,r1
  while ( data_len-- ) {
    3058:	45 60 00 0c 	be r11,r0,3088 <read_payload+0x94>
    305c:	35 61 ff ff 	addi r1,r11,-1
    3060:	20 21 00 ff 	andi r1,r1,0xff
    3064:	34 21 00 01 	addi r1,r1,1
    3068:	3c 21 00 02 	sli r1,r1,2

/****************************************************************************/
uint8_t read_payload(void *buf, uint8_t data_len)
{
	uint8_t status;
  int *data = (int*) buf;
    306c:	b9 a0 58 00 	mv r11,r13
	if(data_len > payload_size) data_len = payload_size;
  uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;

	csn(LOW);
  status = spi_transmitD( R_RX_PAYLOAD );
  while ( data_len-- ) {
    3070:	b5 a1 68 00 	add r13,r13,r1
    *data++ = spi_transmitD(0xff);
    3074:	34 01 00 ff 	mvi r1,255
    3078:	fb ff ff c5 	calli 2f8c <spi_transmitD>
    307c:	59 61 00 00 	sw (r11+0),r1
    3080:	35 6b 00 04 	addi r11,r11,4
	if(data_len > payload_size) data_len = payload_size;
  uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;

	csn(LOW);
  status = spi_transmitD( R_RX_PAYLOAD );
  while ( data_len-- ) {
    3084:	5d 6d ff fc 	bne r11,r13,3074 <read_payload+0x80>
    *data++ = spi_transmitD(0xff);
  }
  while ( blank_len-- ) {
    3088:	45 80 00 06 	be r12,r0,30a0 <read_payload+0xac>
    spi_transmitD(0xff);
    308c:	34 01 00 ff 	mvi r1,255
    3090:	fb ff ff bf 	calli 2f8c <spi_transmitD>
    3094:	35 82 ff ff 	addi r2,r12,-1
    3098:	20 4c 00 ff 	andi r12,r2,0xff
	csn(LOW);
  status = spi_transmitD( R_RX_PAYLOAD );
  while ( data_len-- ) {
    *data++ = spi_transmitD(0xff);
  }
  while ( blank_len-- ) {
    309c:	5d 80 ff fc 	bne r12,r0,308c <read_payload+0x98>
    spi_transmitD(0xff);
  }
  nsleep(3);
    30a0:	34 01 00 03 	mvi r1,3
    30a4:	fb ff f5 0b 	calli 4d0 <nsleep>
	csn(HIGH);
    30a8:	34 01 00 01 	mvi r1,1
    30ac:	fb ff ff 71 	calli 2e70 <csn>

  return status;
}
    30b0:	b9 c0 08 00 	mv r1,r14
    30b4:	2b 9d 00 04 	lw ra,(sp+4)
    30b8:	2b 8b 00 14 	lw r11,(sp+20)
    30bc:	2b 8c 00 10 	lw r12,(sp+16)
    30c0:	2b 8d 00 0c 	lw r13,(sp+12)
    30c4:	2b 8e 00 08 	lw r14,(sp+8)
    30c8:	37 9c 00 14 	addi sp,sp,20
    30cc:	c3 a0 00 00 	ret

000030d0 <writeAckPayload>:
  return 0;
}

/****************************************************************************/
void writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
    30d0:	37 9c ff f0 	addi sp,sp,-16
    30d4:	5b 8b 00 10 	sw (sp+16),r11
    30d8:	5b 8c 00 0c 	sw (sp+12),r12
    30dc:	5b 8d 00 08 	sw (sp+8),r13
    30e0:	5b 9d 00 04 	sw (sp+4),ra
  const uint8_t* current = (uint8_t*)buf;

  uint8_t data_len = rf24_min(len,32);
    30e4:	20 6b 00 ff 	andi r11,r3,0xff
    30e8:	34 03 00 20 	mvi r3,32
  return 0;
}

/****************************************************************************/
void writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
    30ec:	b8 40 68 00 	mv r13,r2
    30f0:	20 2c 00 ff 	andi r12,r1,0xff
  const uint8_t* current = (uint8_t*)buf;

  uint8_t data_len = rf24_min(len,32);
    30f4:	50 6b 00 02 	bgeu r3,r11,30fc <writeAckPayload+0x2c>
    30f8:	b8 60 58 00 	mv r11,r3

  csn(LOW);
    30fc:	34 01 00 00 	mvi r1,0
    3100:	fb ff ff 5c 	calli 2e70 <csn>
	nsleep(1);
    3104:	34 01 00 01 	mvi r1,1
    3108:	fb ff f4 f2 	calli 4d0 <nsleep>
  spi_transmitD(W_ACK_PAYLOAD | ( pipe & 0b111 ) );
    310c:	21 81 00 07 	andi r1,r12,0x7
    3110:	38 21 00 a8 	ori r1,r1,0xa8
    3114:	fb ff ff 9e 	calli 2f8c <spi_transmitD>

  while ( data_len-- )
    3118:	45 60 00 0a 	be r11,r0,3140 <writeAckPayload+0x70>
    311c:	35 61 ff ff 	addi r1,r11,-1
    3120:	20 21 00 ff 	andi r1,r1,0xff
    3124:	34 21 00 01 	addi r1,r1,1
}

/****************************************************************************/
void writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
  const uint8_t* current = (uint8_t*)buf;
    3128:	b9 a0 58 00 	mv r11,r13

  csn(LOW);
	nsleep(1);
  spi_transmitD(W_ACK_PAYLOAD | ( pipe & 0b111 ) );

  while ( data_len-- )
    312c:	b5 a1 60 00 	add r12,r13,r1
    spi_transmitD(*current++);
    3130:	41 61 00 00 	lbu r1,(r11+0)
    3134:	35 6b 00 01 	addi r11,r11,1
    3138:	fb ff ff 95 	calli 2f8c <spi_transmitD>

  csn(LOW);
	nsleep(1);
  spi_transmitD(W_ACK_PAYLOAD | ( pipe & 0b111 ) );

  while ( data_len-- )
    313c:	5d 6c ff fd 	bne r11,r12,3130 <writeAckPayload+0x60>
    spi_transmitD(*current++);
	nsleep(4);
    3140:	34 01 00 04 	mvi r1,4
    3144:	fb ff f4 e3 	calli 4d0 <nsleep>
  csn(HIGH);
    3148:	34 01 00 01 	mvi r1,1
    314c:	fb ff ff 49 	calli 2e70 <csn>
}
    3150:	2b 9d 00 04 	lw ra,(sp+4)
    3154:	2b 8b 00 10 	lw r11,(sp+16)
    3158:	2b 8c 00 0c 	lw r12,(sp+12)
    315c:	2b 8d 00 08 	lw r13,(sp+8)
    3160:	37 9c 00 10 	addi sp,sp,16
    3164:	c3 a0 00 00 	ret

00003168 <write_register>:
	return status;
}

/****************************************************************************/
uint8_t write_register(uint8_t reg,const uint8_t *buf, uint8_t len)
{
    3168:	37 9c ff ec 	addi sp,sp,-20
    316c:	5b 8b 00 14 	sw (sp+20),r11
    3170:	5b 8c 00 10 	sw (sp+16),r12
    3174:	5b 8d 00 0c 	sw (sp+12),r13
    3178:	5b 8e 00 08 	sw (sp+8),r14
    317c:	5b 9d 00 04 	sw (sp+4),ra
    3180:	20 2b 00 ff 	andi r11,r1,0xff
	csn(LOW);
    3184:	34 01 00 00 	mvi r1,0
	return status;
}

/****************************************************************************/
uint8_t write_register(uint8_t reg,const uint8_t *buf, uint8_t len)
{
    3188:	b8 40 70 00 	mv r14,r2
    318c:	20 6c 00 ff 	andi r12,r3,0xff
	csn(LOW);
    3190:	fb ff ff 38 	calli 2e70 <csn>
	nsleep(1);
    3194:	34 01 00 01 	mvi r1,1
    3198:	fb ff f4 ce 	calli 4d0 <nsleep>
	status = spi_transmitD(W_REGISTER|(REGISTER_MASK & reg) );
    319c:	21 6b 00 1f 	andi r11,r11,0x1f
    31a0:	39 61 00 20 	ori r1,r11,0x20
    31a4:	78 0d 00 00 	mvhi r13,0x0
    31a8:	39 ad 40 52 	ori r13,r13,0x4052
    31ac:	fb ff ff 78 	calli 2f8c <spi_transmitD>
    31b0:	31 a1 00 00 	sb (r13+0),r1
	while(len--){
    31b4:	45 80 00 0a 	be r12,r0,31dc <write_register+0x74>
    31b8:	35 81 ff ff 	addi r1,r12,-1
    31bc:	20 21 00 ff 	andi r1,r1,0xff
    31c0:	34 21 00 01 	addi r1,r1,1
    31c4:	b9 c0 58 00 	mv r11,r14
    31c8:	b5 c1 60 00 	add r12,r14,r1
	spi_transmitD(*buf++);
    31cc:	41 61 00 00 	lbu r1,(r11+0)
    31d0:	35 6b 00 01 	addi r11,r11,1
    31d4:	fb ff ff 6e 	calli 2f8c <spi_transmitD>
uint8_t write_register(uint8_t reg,const uint8_t *buf, uint8_t len)
{
	csn(LOW);
	nsleep(1);
	status = spi_transmitD(W_REGISTER|(REGISTER_MASK & reg) );
	while(len--){
    31d8:	5d 6c ff fd 	bne r11,r12,31cc <write_register+0x64>
	spi_transmitD(*buf++);
	}
	nsleep(2);
    31dc:	34 01 00 02 	mvi r1,2
    31e0:	fb ff f4 bc 	calli 4d0 <nsleep>
	csn(HIGH);
    31e4:	34 01 00 01 	mvi r1,1
    31e8:	fb ff ff 22 	calli 2e70 <csn>
	nsleep(5);
    31ec:	34 01 00 05 	mvi r1,5
    31f0:	fb ff f4 b8 	calli 4d0 <nsleep>
	return status;
}
    31f4:	41 a1 00 00 	lbu r1,(r13+0)
    31f8:	2b 9d 00 04 	lw ra,(sp+4)
    31fc:	2b 8b 00 14 	lw r11,(sp+20)
    3200:	2b 8c 00 10 	lw r12,(sp+16)
    3204:	2b 8d 00 0c 	lw r13,(sp+12)
    3208:	2b 8e 00 08 	lw r14,(sp+8)
    320c:	37 9c 00 14 	addi sp,sp,20
    3210:	c3 a0 00 00 	ret

00003214 <write_register_basic>:
  return status;
}

/****************************************************************************/
uint8_t write_register_basic(uint8_t reg, uint8_t value)
{
    3214:	37 9c ff f0 	addi sp,sp,-16
    3218:	5b 8b 00 10 	sw (sp+16),r11
    321c:	5b 8c 00 0c 	sw (sp+12),r12
    3220:	5b 8d 00 08 	sw (sp+8),r13
    3224:	5b 9d 00 04 	sw (sp+4),ra
    3228:	20 2b 00 ff 	andi r11,r1,0xff
	csn(LOW);
    322c:	34 01 00 00 	mvi r1,0
  return status;
}

/****************************************************************************/
uint8_t write_register_basic(uint8_t reg, uint8_t value)
{
    3230:	20 4d 00 ff 	andi r13,r2,0xff
	csn(LOW);
	status = spi_transmitD(W_REGISTER|(REGISTER_MASK & reg) );
    3234:	21 6b 00 1f 	andi r11,r11,0x1f
}

/****************************************************************************/
uint8_t write_register_basic(uint8_t reg, uint8_t value)
{
	csn(LOW);
    3238:	fb ff ff 0e 	calli 2e70 <csn>
	status = spi_transmitD(W_REGISTER|(REGISTER_MASK & reg) );
    323c:	39 61 00 20 	ori r1,r11,0x20
    3240:	78 0c 00 00 	mvhi r12,0x0
    3244:	fb ff ff 52 	calli 2f8c <spi_transmitD>
    3248:	39 8c 40 52 	ori r12,r12,0x4052
    324c:	31 81 00 00 	sb (r12+0),r1
	spi_transmitD(value);
    3250:	b9 a0 08 00 	mv r1,r13
    3254:	fb ff ff 4e 	calli 2f8c <spi_transmitD>
	nsleep(3);
    3258:	34 01 00 03 	mvi r1,3
    325c:	fb ff f4 9d 	calli 4d0 <nsleep>
	csn(HIGH);
    3260:	34 01 00 01 	mvi r1,1
    3264:	fb ff ff 03 	calli 2e70 <csn>
	nsleep(5);
    3268:	34 01 00 05 	mvi r1,5
    326c:	fb ff f4 99 	calli 4d0 <nsleep>
	return status;
}
    3270:	41 81 00 00 	lbu r1,(r12+0)
    3274:	2b 9d 00 04 	lw ra,(sp+4)
    3278:	2b 8b 00 10 	lw r11,(sp+16)
    327c:	2b 8c 00 0c 	lw r12,(sp+12)
    3280:	2b 8d 00 08 	lw r13,(sp+8)
    3284:	37 9c 00 10 	addi sp,sp,16
    3288:	c3 a0 00 00 	ret

0000328c <setAutoAck>:
  write_register_basic(EN_RXADDR,read_register(EN_RXADDR) & ~_BV(child_pipe_enable[pipe]));
}

/****************************************************************************/
void setAutoAck(uint8_t enable)
{
    328c:	37 9c ff fc 	addi sp,sp,-4
    3290:	5b 9d 00 04 	sw (sp+4),ra
    3294:	20 22 00 ff 	andi r2,r1,0xff
  if ( enable ) 
    3298:	5c 40 00 06 	bne r2,r0,32b0 <setAutoAck+0x24>
    write_register_basic(EN_AA, 0b111111);
  else
    write_register_basic(EN_AA, 0);
    329c:	34 01 00 01 	mvi r1,1
    32a0:	fb ff ff dd 	calli 3214 <write_register_basic>
}
    32a4:	2b 9d 00 04 	lw ra,(sp+4)
    32a8:	37 9c 00 04 	addi sp,sp,4
    32ac:	c3 a0 00 00 	ret

/****************************************************************************/
void setAutoAck(uint8_t enable)
{
  if ( enable ) 
    write_register_basic(EN_AA, 0b111111);
    32b0:	34 02 00 3f 	mvi r2,63
    32b4:	34 01 00 01 	mvi r1,1
    32b8:	fb ff ff d7 	calli 3214 <write_register_basic>
  else
    write_register_basic(EN_AA, 0);
}
    32bc:	2b 9d 00 04 	lw ra,(sp+4)
    32c0:	37 9c 00 04 	addi sp,sp,4
    32c4:	c3 a0 00 00 	ret

000032c8 <openPipe0_tx>:
	write_register_basic(RF_SETUP, status);
}

/****************************************************************************/
void openPipe0_tx(const uint8_t * addres)
{
    32c8:	37 9c ff f8 	addi sp,sp,-8
    32cc:	5b 8b 00 08 	sw (sp+8),r11
    32d0:	5b 9d 00 04 	sw (sp+4),ra

  write_register(RX_ADDR_P0,addres, addr_width);
    32d4:	34 03 00 05 	mvi r3,5
	write_register_basic(RF_SETUP, status);
}

/****************************************************************************/
void openPipe0_tx(const uint8_t * addres)
{
    32d8:	b8 20 58 00 	mv r11,r1

  write_register(RX_ADDR_P0,addres, addr_width);
    32dc:	b8 20 10 00 	mv r2,r1
    32e0:	34 01 00 0a 	mvi r1,10
    32e4:	fb ff ff a1 	calli 3168 <write_register>
  write_register(TX_ADDR,addres, addr_width);
    32e8:	b9 60 10 00 	mv r2,r11
    32ec:	34 03 00 05 	mvi r3,5
    32f0:	34 01 00 10 	mvi r1,16
    32f4:	fb ff ff 9d 	calli 3168 <write_register>

  write_register_basic(RX_PW_P0,payload_size);
    32f8:	78 03 00 00 	mvhi r3,0x0
    32fc:	38 63 40 2c 	ori r3,r3,0x402c
    3300:	40 62 00 00 	lbu r2,(r3+0)
    3304:	34 01 00 11 	mvi r1,17
    3308:	fb ff ff c3 	calli 3214 <write_register_basic>
}
    330c:	2b 9d 00 04 	lw ra,(sp+4)
    3310:	2b 8b 00 08 	lw r11,(sp+8)
    3314:	37 9c 00 08 	addi sp,sp,8
    3318:	c3 a0 00 00 	ret

0000331c <setChannel>:
	write_register_basic(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
}

/****************************************************************************/
void setChannel(uint8_t channel)
{
    331c:	37 9c ff fc 	addi sp,sp,-4
    3320:	5b 9d 00 04 	sw (sp+4),ra
	const uint8_t max_channel=125;
	write_register_basic(RF_CH, rf24_min(channel, max_channel));
    3324:	20 22 00 ff 	andi r2,r1,0xff
    3328:	34 01 00 7d 	mvi r1,125
    332c:	50 22 00 02 	bgeu r1,r2,3334 <setChannel+0x18>
    3330:	b8 20 10 00 	mv r2,r1
    3334:	34 01 00 05 	mvi r1,5
    3338:	fb ff ff b7 	calli 3214 <write_register_basic>
}
    333c:	2b 9d 00 04 	lw ra,(sp+4)
    3340:	37 9c 00 04 	addi sp,sp,4
    3344:	c3 a0 00 00 	ret

00003348 <setRetries>:
	return status;
}

/****************************************************************************/
void setRetries(uint8_t delay, uint8_t count)
{
    3348:	37 9c ff fc 	addi sp,sp,-4
    334c:	5b 9d 00 04 	sw (sp+4),ra
    3350:	20 21 00 ff 	andi r1,r1,0xff
	write_register_basic(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
    3354:	3c 21 00 04 	sli r1,r1,4
    3358:	20 42 00 0f 	andi r2,r2,0xf
    335c:	b8 41 10 00 	or r2,r2,r1
    3360:	20 42 00 ff 	andi r2,r2,0xff
    3364:	34 01 00 04 	mvi r1,4
    3368:	fb ff ff ab 	calli 3214 <write_register_basic>
}
    336c:	2b 9d 00 04 	lw ra,(sp+4)
    3370:	37 9c 00 04 	addi sp,sp,4
    3374:	c3 a0 00 00 	ret

00003378 <read_register_buff>:
	csn(HIGH);
	nsleep(20);
	return result;	
}

uint8_t read_register_buff(uint8_t reg, uint8_t * buf, uint8_t len){
    3378:	37 9c ff ec 	addi sp,sp,-20
    337c:	5b 8b 00 14 	sw (sp+20),r11
    3380:	5b 8c 00 10 	sw (sp+16),r12
    3384:	5b 8d 00 0c 	sw (sp+12),r13
    3388:	5b 8e 00 08 	sw (sp+8),r14
    338c:	5b 9d 00 04 	sw (sp+4),ra
    3390:	20 2b 00 ff 	andi r11,r1,0xff
	uint8_t status;
	csn(LOW);
    3394:	34 01 00 00 	mvi r1,0
	csn(HIGH);
	nsleep(20);
	return result;	
}

uint8_t read_register_buff(uint8_t reg, uint8_t * buf, uint8_t len){
    3398:	b8 40 68 00 	mv r13,r2
    339c:	20 6c 00 ff 	andi r12,r3,0xff
	uint8_t status;
	csn(LOW);
    33a0:	fb ff fe b4 	calli 2e70 <csn>
	nsleep(1);
    33a4:	34 01 00 01 	mvi r1,1
    33a8:	fb ff f4 4a 	calli 4d0 <nsleep>
	status = spi_transmitD( R_REGISTER | ( REGISTER_MASK & reg ) );
    33ac:	21 61 00 1f 	andi r1,r11,0x1f
    33b0:	fb ff fe f7 	calli 2f8c <spi_transmitD>
    33b4:	b8 20 70 00 	mv r14,r1

	 while ( len-- ){
    33b8:	45 80 00 0b 	be r12,r0,33e4 <read_register_buff+0x6c>
    33bc:	35 81 ff ff 	addi r1,r12,-1
    33c0:	20 21 00 ff 	andi r1,r1,0xff
    33c4:	34 21 00 01 	addi r1,r1,1
    33c8:	b9 a0 58 00 	mv r11,r13
    33cc:	b5 a1 60 00 	add r12,r13,r1
    *buf++ = spi_transmitD(0xff);
    33d0:	34 01 00 ff 	mvi r1,255
    33d4:	fb ff fe ee 	calli 2f8c <spi_transmitD>
    33d8:	31 61 00 00 	sb (r11+0),r1
    33dc:	35 6b 00 01 	addi r11,r11,1
	uint8_t status;
	csn(LOW);
	nsleep(1);
	status = spi_transmitD( R_REGISTER | ( REGISTER_MASK & reg ) );

	 while ( len-- ){
    33e0:	5d 6c ff fc 	bne r11,r12,33d0 <read_register_buff+0x58>
    *buf++ = spi_transmitD(0xff);
  }
	nsleep(4);
    33e4:	34 01 00 04 	mvi r1,4
    33e8:	fb ff f4 3a 	calli 4d0 <nsleep>
  csn(HIGH);
    33ec:	34 01 00 01 	mvi r1,1
    33f0:	fb ff fe a0 	calli 2e70 <csn>
  return status;
}
    33f4:	b9 c0 08 00 	mv r1,r14
    33f8:	2b 9d 00 04 	lw ra,(sp+4)
    33fc:	2b 8b 00 14 	lw r11,(sp+20)
    3400:	2b 8c 00 10 	lw r12,(sp+16)
    3404:	2b 8d 00 0c 	lw r13,(sp+12)
    3408:	2b 8e 00 08 	lw r14,(sp+8)
    340c:	37 9c 00 14 	addi sp,sp,20
    3410:	c3 a0 00 00 	ret

00003414 <read_register>:
	return spi_transfer(0xff);
}

/****************************************************************************/
uint8_t read_register(uint8_t reg)
{
    3414:	37 9c ff f8 	addi sp,sp,-8
    3418:	5b 8b 00 08 	sw (sp+8),r11
    341c:	5b 9d 00 04 	sw (sp+4),ra
    3420:	20 2b 00 ff 	andi r11,r1,0xff
	uint8_t result;
	csn(LOW);
    3424:	34 01 00 00 	mvi r1,0
    3428:	fb ff fe 92 	calli 2e70 <csn>
	nsleep(1);
    342c:	34 01 00 01 	mvi r1,1
    3430:	fb ff f4 28 	calli 4d0 <nsleep>
	spi_transmitD(R_REGISTER|(REGISTER_MASK & reg));
    3434:	21 61 00 1f 	andi r1,r11,0x1f
    3438:	fb ff fe d5 	calli 2f8c <spi_transmitD>
	spi_transmitD(0xff);
    343c:	34 01 00 ff 	mvi r1,255
    3440:	fb ff fe d3 	calli 2f8c <spi_transmitD>
	result = spi_getchar();
    3444:	fb ff f5 a7 	calli ae0 <spi_getchar>
    3448:	b8 20 58 00 	mv r11,r1
	nsleep(3);
    344c:	34 01 00 03 	mvi r1,3
    3450:	fb ff f4 20 	calli 4d0 <nsleep>
	csn(HIGH);
    3454:	34 01 00 01 	mvi r1,1
    3458:	fb ff fe 86 	calli 2e70 <csn>
	nsleep(20);
    345c:	34 01 00 14 	mvi r1,20
    3460:	fb ff f4 1c 	calli 4d0 <nsleep>
	return result;	
}
    3464:	b9 60 08 00 	mv r1,r11
    3468:	2b 9d 00 04 	lw ra,(sp+4)
    346c:	2b 8b 00 08 	lw r11,(sp+8)
    3470:	37 9c 00 08 	addi sp,sp,8
    3474:	c3 a0 00 00 	ret

00003478 <available>:
	//se usa para negar la condicion de status, ya que no existe variables booleanas
	return status;
}

uint8_t available(void)
{
    3478:	37 9c ff fc 	addi sp,sp,-4
    347c:	5b 9d 00 04 	sw (sp+4),ra
  if (!( read_register(FIFO_STATUS) & _BV(RX_EMPTY) )){
    3480:	34 01 00 17 	mvi r1,23
    3484:	fb ff ff e4 	calli 3414 <read_register>
    3488:	18 21 00 01 	xori r1,r1,0x1
  	return 1;
  }
  return 0;
}
    348c:	20 21 00 01 	andi r1,r1,0x1
    3490:	2b 9d 00 04 	lw ra,(sp+4)
    3494:	37 9c 00 04 	addi sp,sp,4
    3498:	c3 a0 00 00 	ret

0000349c <isAckPayloadAvailable>:
  write_register_basic(EN_RXADDR,read_register(EN_RXADDR) | _BV(ERX_P0)); // Enable RX on pipe0
}

/****************************************************************************/
uint8_t isAckPayloadAvailable(void)
{
    349c:	37 9c ff fc 	addi sp,sp,-4
    34a0:	5b 9d 00 04 	sw (sp+4),ra
	uint8_t status;
  status = (read_register(FIFO_STATUS) & _BV(RX_EMPTY))? false : true;
    34a4:	34 01 00 17 	mvi r1,23
    34a8:	fb ff ff db 	calli 3414 <read_register>
    34ac:	18 21 00 01 	xori r1,r1,0x1
	//se usa para negar la condicion de status, ya que no existe variables booleanas
	return status;
}
    34b0:	20 21 00 01 	andi r1,r1,0x1
    34b4:	2b 9d 00 04 	lw ra,(sp+4)
    34b8:	37 9c 00 04 	addi sp,sp,4
    34bc:	c3 a0 00 00 	ret

000034c0 <enableDynamicAckPayloads>:
    write_register_basic(EN_AA, 0);
}

/****************************************************************************/
void enableDynamicAckPayloads(void)
{
    34c0:	37 9c ff fc 	addi sp,sp,-4
    34c4:	5b 9d 00 04 	sw (sp+4),ra
  write_register_basic(FEATURE,read_register(FEATURE) | _BV(EN_ACK_PAY) | _BV(EN_DPL) );
    34c8:	34 01 00 1d 	mvi r1,29
    34cc:	fb ff ff d2 	calli 3414 <read_register>
    34d0:	38 21 00 06 	ori r1,r1,0x6
    34d4:	20 22 00 ff 	andi r2,r1,0xff
    34d8:	34 01 00 1d 	mvi r1,29
    34dc:	fb ff ff 4e 	calli 3214 <write_register_basic>

  write_register_basic(DYNPD,read_register(DYNPD) | _BV(DPL_P5) | _BV(DPL_P4) | _BV(DPL_P3) | _BV(DPL_P2) | _BV(DPL_P1) | _BV(DPL_P0));
    34e0:	34 01 00 1c 	mvi r1,28
    34e4:	fb ff ff cc 	calli 3414 <read_register>
    34e8:	38 21 00 3f 	ori r1,r1,0x3f
    34ec:	20 22 00 ff 	andi r2,r1,0xff
    34f0:	34 01 00 1c 	mvi r1,28
    34f4:	fb ff ff 48 	calli 3214 <write_register_basic>

  dynamic_payloads_enabled = true;
    34f8:	78 02 00 00 	mvhi r2,0x0
    34fc:	38 42 40 54 	ori r2,r2,0x4054
    3500:	34 01 00 01 	mvi r1,1
    3504:	30 41 00 00 	sb (r2+0),r1
}
    3508:	2b 9d 00 04 	lw ra,(sp+4)
    350c:	37 9c 00 04 	addi sp,sp,4
    3510:	c3 a0 00 00 	ret

00003514 <closeReadingPipe>:
  //delayMicroseconds(100);
}

/****************************************************************************/
void closeReadingPipe( uint8_t pipe )
{
    3514:	37 9c ff f8 	addi sp,sp,-8
    3518:	5b 8b 00 08 	sw (sp+8),r11
    351c:	5b 9d 00 04 	sw (sp+4),ra
    3520:	20 2b 00 ff 	andi r11,r1,0xff
  write_register_basic(EN_RXADDR,read_register(EN_RXADDR) & ~_BV(child_pipe_enable[pipe]));
    3524:	34 01 00 02 	mvi r1,2
    3528:	fb ff ff bb 	calli 3414 <read_register>
    352c:	78 02 00 00 	mvhi r2,0x0
    3530:	38 42 3f f0 	ori r2,r2,0x3ff0
    3534:	b4 4b 10 00 	add r2,r2,r11
    3538:	40 43 00 00 	lbu r3,(r2+0)
    353c:	34 02 00 01 	mvi r2,1
    3540:	bc 43 10 00 	sl r2,r2,r3
    3544:	a4 40 10 00 	not r2,r2
    3548:	a0 41 10 00 	and r2,r2,r1
    354c:	20 42 00 ff 	andi r2,r2,0xff
    3550:	34 01 00 02 	mvi r1,2
    3554:	fb ff ff 30 	calli 3214 <write_register_basic>
}
    3558:	2b 9d 00 04 	lw ra,(sp+4)
    355c:	2b 8b 00 08 	lw r11,(sp+8)
    3560:	37 9c 00 08 	addi sp,sp,8
    3564:	c3 a0 00 00 	ret

00003568 <openpipe_rx>:



/****************************************************************************/
void openpipe_rx(uint8_t pipe,const uint8_t *address)
{
    3568:	37 9c ff f8 	addi sp,sp,-8
    356c:	5b 8b 00 08 	sw (sp+8),r11
    3570:	5b 9d 00 04 	sw (sp+4),ra
    3574:	20 2b 00 ff 	andi r11,r1,0xff
    3578:	b8 40 18 00 	mv r3,r2
de los datos de las otras antenas amenos que se verifique para que el PRX
pueda acpetar 6 antenas o simplemente se cierre el canal 0 a modo de que 
si la antena vuelve a ser PTX, la direccion TX_ADDR concuerde con la RX_ADDR_P0
mas infotmacion en el datasheet pag 39
*/
  if (pipe == 0){
    357c:	5d 60 00 23 	bne r11,r0,3608 <openpipe_rx+0xa0>
    pipe0_reading_address=(uint8_t *)address;//periodo de prueba
    3580:	78 01 00 00 	mvhi r1,0x0
    3584:	38 21 40 58 	ori r1,r1,0x4058
    3588:	58 22 00 00 	sw (r1+0),r2
  }
  if (pipe <= 6)
  {
    // Para los canales 2 y 5 solo se modifica el byte menos significatico LSB
    if ( pipe < 2 ){
      write_register((child_pipe[pipe]), (uint8_t *)address, addr_width);
    358c:	78 02 00 00 	mvhi r2,0x0
    3590:	38 42 3f f8 	ori r2,r2,0x3ff8
    3594:	b4 4b 10 00 	add r2,r2,r11
    3598:	40 41 00 00 	lbu r1,(r2+0)
    359c:	b8 60 10 00 	mv r2,r3
    35a0:	34 03 00 05 	mvi r3,5
    35a4:	fb ff fe f1 	calli 3168 <write_register>
    }else{
      write_register((child_pipe[pipe]), (uint8_t *)address, 1);
	}
    write_register_basic((child_payload_size[pipe]),payload_size);
    35a8:	78 03 00 00 	mvhi r3,0x0
    35ac:	38 63 40 00 	ori r3,r3,0x4000
    35b0:	78 01 00 00 	mvhi r1,0x0
    35b4:	b4 6b 18 00 	add r3,r3,r11
    35b8:	38 21 40 2c 	ori r1,r1,0x402c
    35bc:	40 22 00 00 	lbu r2,(r1+0)
    35c0:	40 61 00 00 	lbu r1,(r3+0)
    35c4:	fb ff ff 14 	calli 3214 <write_register_basic>

    // Note it would be more efficient to set all of the bits for all open
    // pipes at once.  However, I thought it would make the calling code
    // more simple to do it this way.
    write_register_basic(EN_RXADDR,read_register(EN_RXADDR) | _BV(child_pipe_enable[pipe]));
    35c8:	34 01 00 02 	mvi r1,2
    35cc:	fb ff ff 92 	calli 3414 <read_register>
    35d0:	78 02 00 00 	mvhi r2,0x0
    35d4:	38 42 3f f0 	ori r2,r2,0x3ff0
    35d8:	b4 4b 10 00 	add r2,r2,r11
    35dc:	40 43 00 00 	lbu r3,(r2+0)
    35e0:	34 02 00 01 	mvi r2,1
    35e4:	bc 43 10 00 	sl r2,r2,r3
    35e8:	b8 41 10 00 	or r2,r2,r1
    35ec:	20 42 00 ff 	andi r2,r2,0xff
    35f0:	34 01 00 02 	mvi r1,2
    35f4:	fb ff ff 08 	calli 3214 <write_register_basic>

  }
}
    35f8:	2b 9d 00 04 	lw ra,(sp+4)
    35fc:	2b 8b 00 08 	lw r11,(sp+8)
    3600:	37 9c 00 08 	addi sp,sp,8
    3604:	c3 a0 00 00 	ret
mas infotmacion en el datasheet pag 39
*/
  if (pipe == 0){
    pipe0_reading_address=(uint8_t *)address;//periodo de prueba
  }
  if (pipe <= 6)
    3608:	34 01 00 06 	mvi r1,6
    360c:	55 61 ff fb 	bgu r11,r1,35f8 <openpipe_rx+0x90>
  {
    // Para los canales 2 y 5 solo se modifica el byte menos significatico LSB
    if ( pipe < 2 ){
    3610:	34 04 00 01 	mvi r4,1
    3614:	45 64 ff de 	be r11,r4,358c <openpipe_rx+0x24>
      write_register((child_pipe[pipe]), (uint8_t *)address, addr_width);
    }else{
      write_register((child_pipe[pipe]), (uint8_t *)address, 1);
    3618:	78 03 00 00 	mvhi r3,0x0
    361c:	38 63 3f f8 	ori r3,r3,0x3ff8
    3620:	b4 6b 18 00 	add r3,r3,r11
    3624:	40 61 00 00 	lbu r1,(r3+0)
    3628:	b8 80 18 00 	mv r3,r4
    362c:	fb ff fe cf 	calli 3168 <write_register>
    3630:	e3 ff ff de 	bi 35a8 <openpipe_rx+0x40>

00003634 <setPaLevel>:
}


/****************************************************************************/
void setPaLevel(uint8_t level)
{
    3634:	37 9c ff f8 	addi sp,sp,-8
    3638:	5b 8b 00 08 	sw (sp+8),r11
    363c:	5b 9d 00 04 	sw (sp+4),ra
    3640:	20 2b 00 ff 	andi r11,r1,0xff
	status = read_register(RF_SETUP) & 0b11111000;
    3644:	34 01 00 06 	mvi r1,6
    3648:	fb ff ff 73 	calli 3414 <read_register>
    364c:	78 02 00 00 	mvhi r2,0x0
    3650:	20 23 00 f8 	andi r3,r1,0xf8
    3654:	38 42 40 52 	ori r2,r2,0x4052
    3658:	30 43 00 00 	sb (r2+0),r3
	if(level<7){
    365c:	34 01 00 06 	mvi r1,6
    3660:	55 61 00 03 	bgu r11,r1,366c <setPaLevel+0x38>
	status |=level;
    3664:	b8 6b 08 00 	or r1,r3,r11
    3668:	30 41 00 00 	sb (r2+0),r1
	}else{
	status |=0x00;
	//Deja por default la potencia de las antenas en -18dBm
	}
	write_register_basic(RF_SETUP, status);
    366c:	40 42 00 00 	lbu r2,(r2+0)
    3670:	34 01 00 06 	mvi r1,6
    3674:	fb ff fe e8 	calli 3214 <write_register_basic>
}
    3678:	2b 9d 00 04 	lw ra,(sp+4)
    367c:	2b 8b 00 08 	lw r11,(sp+8)
    3680:	37 9c 00 08 	addi sp,sp,8
    3684:	c3 a0 00 00 	ret

00003688 <power_up>:
  write_register_basic(NRF_CONFIG,read_register(NRF_CONFIG) & ~_BV(PWR_UP));
}

/****************************************************************************/
void power_up(void)
{
    3688:	37 9c ff fc 	addi sp,sp,-4
    368c:	5b 9d 00 04 	sw (sp+4),ra
   uint8_t cfg = read_register(NRF_CONFIG);
    3690:	34 01 00 00 	mvi r1,0
    3694:	fb ff ff 60 	calli 3414 <read_register>

   //si no se ha activado la senal PWR_UP, se ectiva y se verifica que el modulo este donectado
   if (!(cfg & _BV(PWR_UP))){
    3698:	20 23 00 02 	andi r3,r1,0x2
    369c:	5c 60 00 07 	bne r3,r0,36b8 <power_up+0x30>
      write_register_basic(NRF_CONFIG, cfg | _BV(PWR_UP));
    36a0:	38 22 00 02 	ori r2,r1,0x2
    36a4:	20 42 00 ff 	andi r2,r2,0xff
    36a8:	b8 60 08 00 	mv r1,r3
    36ac:	fb ff fe da 	calli 3214 <write_register_basic>
			//Espere 5ms para que el modulo pueda establecer el cambio del estado power down al estado StandBy-I
			//Ver datasheet tiempo tpd2stby
      msleep(5); //Para sintetizacion
    36b0:	34 01 00 05 	mvi r1,5
    36b4:	fb ff f3 79 	calli 498 <msleep>
   }
}
    36b8:	2b 9d 00 04 	lw ra,(sp+4)
    36bc:	37 9c 00 04 	addi sp,sp,4
    36c0:	c3 a0 00 00 	ret

000036c4 <power_down>:
	spi_transfer(FLUSH_TX);
}

/****************************************************************************/
void power_down(void)
{
    36c4:	37 9c ff fc 	addi sp,sp,-4
    36c8:	5b 9d 00 04 	sw (sp+4),ra
  ce(LOW); // Guarantee CE is low on powerDown
    36cc:	34 01 00 00 	mvi r1,0
    36d0:	fb ff fd a1 	calli 2d54 <ce>
  write_register_basic(NRF_CONFIG,read_register(NRF_CONFIG) & ~_BV(PWR_UP));
    36d4:	34 01 00 00 	mvi r1,0
    36d8:	fb ff ff 4f 	calli 3414 <read_register>
    36dc:	20 21 00 fd 	andi r1,r1,0xfd
    36e0:	b8 20 10 00 	mv r2,r1
    36e4:	34 01 00 00 	mvi r1,0
    36e8:	fb ff fe cb 	calli 3214 <write_register_basic>
}
    36ec:	2b 9d 00 04 	lw ra,(sp+4)
    36f0:	37 9c 00 04 	addi sp,sp,4
    36f4:	c3 a0 00 00 	ret

000036f8 <spi_putstr_nrf24>:
	nsleep(5);
	return receive; 
}

void spi_putstr_nrf24(const uint8_t *data)
{
    36f8:	37 9c ff f8 	addi sp,sp,-8
    36fc:	5b 8b 00 08 	sw (sp+8),r11
    3700:	5b 9d 00 04 	sw (sp+4),ra
    3704:	b8 20 58 00 	mv r11,r1
	csn(LOW);
    3708:	34 01 00 00 	mvi r1,0
    370c:	fb ff fd d9 	calli 2e70 <csn>
	nsleep(1);
    3710:	34 01 00 01 	mvi r1,1
    3714:	fb ff f3 6f 	calli 4d0 <nsleep>
	const uint8_t *c = data;
	while(*c){
    3718:	41 61 00 00 	lbu r1,(r11+0)
    371c:	44 20 00 05 	be r1,r0,3730 <spi_putstr_nrf24+0x38>
		spi_transmitD(*c);
		c++;
    3720:	35 6b 00 01 	addi r11,r11,1
{
	csn(LOW);
	nsleep(1);
	const uint8_t *c = data;
	while(*c){
		spi_transmitD(*c);
    3724:	fb ff fe 1a 	calli 2f8c <spi_transmitD>
void spi_putstr_nrf24(const uint8_t *data)
{
	csn(LOW);
	nsleep(1);
	const uint8_t *c = data;
	while(*c){
    3728:	41 61 00 00 	lbu r1,(r11+0)
    372c:	5c 20 ff fd 	bne r1,r0,3720 <spi_putstr_nrf24+0x28>
		spi_transmitD(*c);
		c++;
	}
	nsleep(3);
    3730:	34 01 00 03 	mvi r1,3
    3734:	fb ff f3 67 	calli 4d0 <nsleep>
	csn(HIGH);
    3738:	34 01 00 01 	mvi r1,1
    373c:	fb ff fd cd 	calli 2e70 <csn>
	nsleep(5);
    3740:	34 01 00 05 	mvi r1,5
    3744:	fb ff f3 63 	calli 4d0 <nsleep>
}
    3748:	2b 9d 00 04 	lw ra,(sp+4)
    374c:	2b 8b 00 08 	lw r11,(sp+8)
    3750:	37 9c 00 08 	addi sp,sp,8
    3754:	c3 a0 00 00 	ret

00003758 <spi_transfer>:
	return receive;
}
*/
//Para usar esta funcion no hay que olvidar que hay que habilitar el CSN y darle los restrasos adecuados al mismo
uint8_t spi_transfer(uint8_t data)
{
    3758:	37 9c ff f8 	addi sp,sp,-8
    375c:	5b 8b 00 08 	sw (sp+8),r11
    3760:	5b 9d 00 04 	sw (sp+4),ra
    3764:	20 2b 00 ff 	andi r11,r1,0xff
	uint8_t receive;
	csn(LOW);
    3768:	34 01 00 00 	mvi r1,0
    376c:	fb ff fd c1 	calli 2e70 <csn>
	receive = spi_transmitD(data);
    3770:	b9 60 08 00 	mv r1,r11
    3774:	fb ff fe 06 	calli 2f8c <spi_transmitD>
    3778:	b8 20 58 00 	mv r11,r1
	nsleep(3);
    377c:	34 01 00 03 	mvi r1,3
    3780:	fb ff f3 54 	calli 4d0 <nsleep>
	csn(HIGH);
    3784:	34 01 00 01 	mvi r1,1
    3788:	fb ff fd ba 	calli 2e70 <csn>
	nsleep(5);
    378c:	34 01 00 05 	mvi r1,5
    3790:	fb ff f3 50 	calli 4d0 <nsleep>
	return receive; 
}
    3794:	b9 60 08 00 	mv r1,r11
    3798:	2b 9d 00 04 	lw ra,(sp+4)
    379c:	2b 8b 00 08 	lw r11,(sp+8)
    37a0:	37 9c 00 08 	addi sp,sp,8
    37a4:	c3 a0 00 00 	ret

000037a8 <flush_tx>:
	spi_transfer(FLUSH_RX);
}

/****************************************************************************/
void flush_tx()
{
    37a8:	37 9c ff fc 	addi sp,sp,-4
    37ac:	5b 9d 00 04 	sw (sp+4),ra
	spi_transfer(FLUSH_TX);
    37b0:	34 01 00 e1 	mvi r1,225
    37b4:	fb ff ff e9 	calli 3758 <spi_transfer>
}
    37b8:	2b 9d 00 04 	lw ra,(sp+4)
    37bc:	37 9c 00 04 	addi sp,sp,4
    37c0:	c3 a0 00 00 	ret

000037c4 <startRx_mode>:



/***************************************************************************/
void startRx_mode(void)
{
    37c4:	37 9c ff fc 	addi sp,sp,-4
    37c8:	5b 9d 00 04 	sw (sp+4),ra
  power_up();
    37cc:	fb ff ff af 	calli 3688 <power_up>

  write_register_basic(NRF_CONFIG, read_register(NRF_CONFIG) | _BV(PRIM_RX));
    37d0:	34 01 00 00 	mvi r1,0
    37d4:	fb ff ff 10 	calli 3414 <read_register>
    37d8:	38 21 00 01 	ori r1,r1,0x1
    37dc:	20 22 00 ff 	andi r2,r1,0xff
    37e0:	34 01 00 00 	mvi r1,0
    37e4:	fb ff fe 8c 	calli 3214 <write_register_basic>
  write_register_basic(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
    37e8:	34 02 00 70 	mvi r2,112
    37ec:	34 01 00 07 	mvi r1,7
    37f0:	fb ff fe 89 	calli 3214 <write_register_basic>
  ce(HIGH);
    37f4:	34 01 00 01 	mvi r1,1
    37f8:	fb ff fd 57 	calli 2d54 <ce>
    write_register(RX_ADDR_P0, pipe0_reading_address, addr_width);	
  }else{
	closeReadingPipe(0);
  }
*/
	closeReadingPipe(0);
    37fc:	34 01 00 00 	mvi r1,0
    3800:	fb ff ff 45 	calli 3514 <closeReadingPipe>

  // Flush buffers
  //flush_rx();
  if(read_register(FEATURE) & _BV(EN_ACK_PAY)){
    3804:	34 01 00 1d 	mvi r1,29
    3808:	fb ff ff 03 	calli 3414 <read_register>
    380c:	20 21 00 02 	andi r1,r1,0x2
    3810:	44 20 00 02 	be r1,r0,3818 <startRx_mode+0x54>
	flush_tx();
    3814:	fb ff ff e5 	calli 37a8 <flush_tx>
  }

  // Go!
  //delayMicroseconds(100);
}
    3818:	2b 9d 00 04 	lw ra,(sp+4)
    381c:	37 9c 00 04 	addi sp,sp,4
    3820:	c3 a0 00 00 	ret

00003824 <flush_rx>:
	write_register_basic(RF_CH, rf24_min(channel, max_channel));
}

/****************************************************************************/
void flush_rx()
{
    3824:	37 9c ff fc 	addi sp,sp,-4
    3828:	5b 9d 00 04 	sw (sp+4),ra
	spi_transfer(FLUSH_RX);
    382c:	34 01 00 e2 	mvi r1,226
    3830:	fb ff ff ca 	calli 3758 <spi_transfer>
}
    3834:	2b 9d 00 04 	lw ra,(sp+4)
    3838:	37 9c 00 04 	addi sp,sp,4
    383c:	c3 a0 00 00 	ret

00003840 <stopTransmission>:
}
*/

/****************************************************************************/
void stopTransmission(void)
{
    3840:	37 9c ff f8 	addi sp,sp,-8
    3844:	5b 8b 00 08 	sw (sp+8),r11
    3848:	5b 9d 00 04 	sw (sp+4),ra
	ce(LOW);
    384c:	34 01 00 00 	mvi r1,0

	nsleep(wxrxDelay);
    3850:	78 0b 00 00 	mvhi r11,0x0
*/

/****************************************************************************/
void stopTransmission(void)
{
	ce(LOW);
    3854:	fb ff fd 40 	calli 2d54 <ce>

	nsleep(wxrxDelay);
    3858:	39 6b 40 5d 	ori r11,r11,0x405d
    385c:	41 61 00 00 	lbu r1,(r11+0)
    3860:	fb ff f3 1c 	calli 4d0 <nsleep>
  
  if(read_register(FEATURE) & _BV(EN_ACK_PAY)){
    3864:	34 01 00 1d 	mvi r1,29
    3868:	fb ff fe eb 	calli 3414 <read_register>
    386c:	20 21 00 02 	andi r1,r1,0x2
    3870:	44 20 00 04 	be r1,r0,3880 <stopTransmission+0x40>
		nsleep(wxrxDelay);
    3874:	41 61 00 00 	lbu r1,(r11+0)
    3878:	fb ff f3 16 	calli 4d0 <nsleep>
		flush_tx(); //Limpia el TX_	FIFO luego que ha terminado el tiempo de espera
    387c:	fb ff ff cb 	calli 37a8 <flush_tx>
  }
	flush_rx();
    3880:	fb ff ff e9 	calli 3824 <flush_rx>
  write_register_basic(NRF_CONFIG, ( read_register(NRF_CONFIG) ) & ~_BV(PRIM_RX) );
    3884:	34 01 00 00 	mvi r1,0
    3888:	fb ff fe e3 	calli 3414 <read_register>
    388c:	20 21 00 fe 	andi r1,r1,0xfe
    3890:	b8 20 10 00 	mv r2,r1
    3894:	34 01 00 00 	mvi r1,0
    3898:	fb ff fe 5f 	calli 3214 <write_register_basic>
 
  write_register_basic(EN_RXADDR,read_register(EN_RXADDR) | _BV(ERX_P0)); // Enable RX on pipe0
    389c:	34 01 00 02 	mvi r1,2
    38a0:	fb ff fe dd 	calli 3414 <read_register>
    38a4:	38 21 00 01 	ori r1,r1,0x1
    38a8:	20 22 00 ff 	andi r2,r1,0xff
    38ac:	34 01 00 02 	mvi r1,2
    38b0:	fb ff fe 59 	calli 3214 <write_register_basic>
}
    38b4:	2b 9d 00 04 	lw ra,(sp+4)
    38b8:	2b 8b 00 08 	lw r11,(sp+8)
    38bc:	37 9c 00 08 	addi sp,sp,8
    38c0:	c3 a0 00 00 	ret

000038c4 <nrf24_begin>:
static uint8_t setup;   //almacena el estado actual del registro
static uint8_t delay_t; //Retraso necesario que se debe esperar despues de cada transmision
static uint8_t status;  //almacena el status de las antenas

void nrf24_begin(void)
{
    38c4:	37 9c ff fc 	addi sp,sp,-4
    38c8:	5b 9d 00 04 	sw (sp+4),ra
	gpio_init_write(); //Habilita el gpio en forma de escritura
    38cc:	fb ff f2 be 	calli 3c4 <gpio_init_write>
//	spi_finish();
	csn(HIGH);
    38d0:	34 01 00 01 	mvi r1,1
    38d4:	fb ff fd 67 	calli 2e70 <csn>
	ce(LOW);
    38d8:	34 01 00 00 	mvi r1,0
    38dc:	fb ff fd 1e 	calli 2d54 <ce>
	msleep(100); //usar para sintetizacion
    38e0:	34 01 00 64 	mvi r1,100
    38e4:	fb ff f2 ed 	calli 498 <msleep>
	//nsleep(10);	 //usar para simulacion
	
  // Reset NRF_CONFIG and enable 16-bit CRC.
  write_register_basic( NRF_CONFIG, 0b00001100 );
    38e8:	34 02 00 0c 	mvi r2,12
    38ec:	34 01 00 00 	mvi r1,0
    38f0:	fb ff fe 49 	calli 3214 <write_register_basic>
	//Tiempo de reenvio entre cada paquete 250uS, se reenvia 15 veces
	setRetries(5,15);
    38f4:	34 02 00 0f 	mvi r2,15
    38f8:	34 01 00 05 	mvi r1,5
    38fc:	fb ff fe 93 	calli 3348 <setRetries>
	//Se configura la velocidad de transmision de las antenas
	setup = read_register( RF_SETUP );
    3900:	34 01 00 06 	mvi r1,6
    3904:	fb ff fe c4 	calli 3414 <read_register>
  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
	setup |= 0x00; //-0b00101000Se configura la antena para que transmita a una velocidad de 1MBits
    3908:	78 03 00 00 	mvhi r3,0x0
	//Tiempo de reenvio entre cada paquete 250uS, se reenvia 15 veces
	setRetries(5,15);
	//Se configura la velocidad de transmision de las antenas
	setup = read_register( RF_SETUP );
  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
    390c:	20 24 00 d7 	andi r4,r1,0xd7
	setup |= 0x00; //-0b00101000Se configura la antena para que transmita a una velocidad de 1MBits
    3910:	38 63 40 50 	ori r3,r3,0x4050
	write_register_basic( RF_SETUP, setup);
    3914:	b8 80 10 00 	mv r2,r4
	setRetries(5,15);
	//Se configura la velocidad de transmision de las antenas
	setup = read_register( RF_SETUP );
  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
	setup |= 0x00; //-0b00101000Se configura la antena para que transmita a una velocidad de 1MBits
    3918:	30 64 00 00 	sb (r3+0),r4
	write_register_basic( RF_SETUP, setup);
    391c:	34 01 00 06 	mvi r1,6
    3920:	fb ff fe 3d 	calli 3214 <write_register_basic>
	delay_t = 85; 
    3924:	78 02 00 00 	mvhi r2,0x0
    3928:	38 42 40 51 	ori r2,r2,0x4051
    392c:	34 01 00 55 	mvi r1,85
    3930:	30 41 00 00 	sb (r2+0),r1
	//Configura la senal de acknowledge y los dinamicos payaloads de la antena
	toggle_features();
    3934:	fb ff fd a1 	calli 2fb8 <toggle_features>
	write_register_basic(FEATURE,0); //Permite que se adjunte un payload a la senal de ack, proveniente del PRX
    3938:	34 02 00 00 	mvi r2,0
    393c:	34 01 00 1d 	mvi r1,29
    3940:	fb ff fe 35 	calli 3214 <write_register_basic>
  write_register_basic(DYNPD,0);			//Desactiva el payload dinamico de todos los canales
    3944:	34 02 00 00 	mvi r2,0
    3948:	34 01 00 1c 	mvi r1,28
    394c:	fb ff fe 32 	calli 3214 <write_register_basic>
	//resetea las senales de control, provenientes de la recepcion de un paquete PRX
	//Del recibimiento de una senal de ACK PTX
	//De una maximo de envios de un payload PTX  
	write_register_basic(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
    3950:	34 02 00 70 	mvi r2,112
    3954:	34 01 00 07 	mvi r1,7
    3958:	fb ff fe 2f 	calli 3214 <write_register_basic>
	//Configuracion de la frecuencia de transmision del dato
	setChannel(110);
    395c:	34 01 00 6e 	mvi r1,110
    3960:	fb ff fe 6f 	calli 331c <setChannel>
	//Limpia los buffers
	flush_rx();
    3964:	fb ff ff b0 	calli 3824 <flush_rx>
	flush_tx();
    3968:	fb ff ff 90 	calli 37a8 <flush_tx>

	power_up();
    396c:	fb ff ff 47 	calli 3688 <power_up>

	//Se configura la antena para que sea receptora	
	write_register_basic(NRF_CONFIG, ( read_register(NRF_CONFIG) ) | _BV(PRIM_RX) );
    3970:	34 01 00 00 	mvi r1,0
    3974:	fb ff fe a8 	calli 3414 <read_register>
    3978:	38 21 00 01 	ori r1,r1,0x1
    397c:	20 22 00 ff 	andi r2,r1,0xff
    3980:	34 01 00 00 	mvi r1,0
    3984:	fb ff fe 24 	calli 3214 <write_register_basic>
	
	//Configura la potencia de trasnmision a -6dBm
	setPaLevel(RF_HIGH_PWR);	
    3988:	34 01 00 04 	mvi r1,4
    398c:	fb ff ff 2a 	calli 3634 <setPaLevel>

	//abre el canal 0
	//openPipe0_tx(channel0);
}
    3990:	2b 9d 00 04 	lw ra,(sp+4)
    3994:	37 9c 00 04 	addi sp,sp,4
    3998:	c3 a0 00 00 	ret

0000399c <get_status>:
	data++;
}
*/
/****************************************************************************/
uint8_t get_status()
{
    399c:	37 9c ff fc 	addi sp,sp,-4
    39a0:	5b 9d 00 04 	sw (sp+4),ra
	return spi_transfer(0xff);
    39a4:	34 01 00 ff 	mvi r1,255
    39a8:	fb ff ff 6c 	calli 3758 <spi_transfer>
}
    39ac:	2b 9d 00 04 	lw ra,(sp+4)
    39b0:	37 9c 00 04 	addi sp,sp,4
    39b4:	c3 a0 00 00 	ret

000039b8 <load_payload>:
	//openPipe0_tx(channel0);
}

/****************************************************************************/
uint8_t load_payload(const void *spi_txbuff, uint8_t writeType, uint8_t len)
{
    39b8:	37 9c ff ec 	addi sp,sp,-20
    39bc:	5b 8b 00 14 	sw (sp+20),r11
    39c0:	5b 8c 00 10 	sw (sp+16),r12
    39c4:	5b 8d 00 0c 	sw (sp+12),r13
    39c8:	5b 8e 00 08 	sw (sp+8),r14
    39cc:	5b 9d 00 04 	sw (sp+4),ra
	uint8_t status;
	const uint8_t *data = (const uint8_t *)spi_txbuff;
  uint8_t data_len = rf24_min(len, payload_size);
    39d0:	78 04 00 00 	mvhi r4,0x0
    39d4:	38 84 40 2c 	ori r4,r4,0x402c
    39d8:	40 84 00 00 	lbu r4,(r4+0)
    39dc:	20 6b 00 ff 	andi r11,r3,0xff
	//openPipe0_tx(channel0);
}

/****************************************************************************/
uint8_t load_payload(const void *spi_txbuff, uint8_t writeType, uint8_t len)
{
    39e0:	b8 20 70 00 	mv r14,r1
    39e4:	20 4c 00 ff 	andi r12,r2,0xff
	uint8_t status;
	const uint8_t *data = (const uint8_t *)spi_txbuff;
  uint8_t data_len = rf24_min(len, payload_size);
    39e8:	50 8b 00 02 	bgeu r4,r11,39f0 <load_payload+0x38>
    39ec:	b8 80 58 00 	mv r11,r4
  uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size- data_len;
    39f0:	78 01 00 00 	mvhi r1,0x0
    39f4:	38 21 40 54 	ori r1,r1,0x4054
    39f8:	40 23 00 00 	lbu r3,(r1+0)
    39fc:	c8 8b 10 00 	sub r2,r4,r11
    3a00:	20 4d 00 ff 	andi r13,r2,0xff
    3a04:	44 60 00 02 	be r3,r0,3a0c <load_payload+0x54>
    3a08:	34 0d 00 00 	mvi r13,0


	csn(LOW);
    3a0c:	34 01 00 00 	mvi r1,0
    3a10:	fb ff fd 18 	calli 2e70 <csn>
	nsleep(1);
    3a14:	34 01 00 01 	mvi r1,1
    3a18:	fb ff f2 ae 	calli 4d0 <nsleep>
	if(writeType == W_TX_PAYLOAD){
    3a1c:	34 01 00 a0 	mvi r1,160
    3a20:	45 81 00 37 	be r12,r1,3afc <load_payload+0x144>
		spi_transmitD(W_TX_PAYLOAD);
	}else{
		spi_transmitD(W_TX_PAYLOAD_NO_ACK);
    3a24:	34 01 00 b0 	mvi r1,176
    3a28:	fb ff fd 59 	calli 2f8c <spi_transmitD>
	}
	while(data_len--){
    3a2c:	45 60 00 0a 	be r11,r0,3a54 <load_payload+0x9c>
    3a30:	35 61 ff ff 	addi r1,r11,-1
    3a34:	20 21 00 ff 	andi r1,r1,0xff
    3a38:	34 21 00 01 	addi r1,r1,1

/****************************************************************************/
uint8_t load_payload(const void *spi_txbuff, uint8_t writeType, uint8_t len)
{
	uint8_t status;
	const uint8_t *data = (const uint8_t *)spi_txbuff;
    3a3c:	b9 c0 58 00 	mv r11,r14
	if(writeType == W_TX_PAYLOAD){
		spi_transmitD(W_TX_PAYLOAD);
	}else{
		spi_transmitD(W_TX_PAYLOAD_NO_ACK);
	}
	while(data_len--){
    3a40:	b5 c1 60 00 	add r12,r14,r1
		spi_transmitD(*data);
    3a44:	41 61 00 00 	lbu r1,(r11+0)
		data++;
    3a48:	35 6b 00 01 	addi r11,r11,1
		spi_transmitD(W_TX_PAYLOAD);
	}else{
		spi_transmitD(W_TX_PAYLOAD_NO_ACK);
	}
	while(data_len--){
		spi_transmitD(*data);
    3a4c:	fb ff fd 50 	calli 2f8c <spi_transmitD>
	if(writeType == W_TX_PAYLOAD){
		spi_transmitD(W_TX_PAYLOAD);
	}else{
		spi_transmitD(W_TX_PAYLOAD_NO_ACK);
	}
	while(data_len--){
    3a50:	5d 6c ff fd 	bne r11,r12,3a44 <load_payload+0x8c>
		spi_transmitD(*data);
		data++;
	}
	while(blank_len--){
    3a54:	45 a0 00 06 	be r13,r0,3a6c <load_payload+0xb4>
		spi_transmitD(0x00);
    3a58:	34 01 00 00 	mvi r1,0
    3a5c:	fb ff fd 4c 	calli 2f8c <spi_transmitD>
    3a60:	35 a2 ff ff 	addi r2,r13,-1
    3a64:	20 4d 00 ff 	andi r13,r2,0xff
	}
	while(data_len--){
		spi_transmitD(*data);
		data++;
	}
	while(blank_len--){
    3a68:	5d a0 ff fc 	bne r13,r0,3a58 <load_payload+0xa0>
		spi_transmitD(0x00);
	}
	nsleep(1);
    3a6c:	34 01 00 01 	mvi r1,1
    3a70:	fb ff f2 98 	calli 4d0 <nsleep>
	csn(HIGH);
    3a74:	34 01 00 01 	mvi r1,1
    3a78:	fb ff fc fe 	calli 2e70 <csn>
	ce(HIGH);
    3a7c:	34 01 00 01 	mvi r1,1
    3a80:	fb ff fc b5 	calli 2d54 <ce>
	init_watch();
    3a84:	fb ff f2 d1 	calli 5c8 <init_watch>
	while( ! ( get_status()  & ( _BV(TX_DS) | _BV(MAX_RT) ))) {

		if(time_happened_millis(95)==1){
    3a88:	34 0b 00 01 	mvi r11,1
	}
	nsleep(1);
	csn(HIGH);
	ce(HIGH);
	init_watch();
	while( ! ( get_status()  & ( _BV(TX_DS) | _BV(MAX_RT) ))) {
    3a8c:	fb ff ff c4 	calli 399c <get_status>
    3a90:	20 22 00 30 	andi r2,r1,0x30

		if(time_happened_millis(95)==1){
    3a94:	34 01 00 5f 	mvi r1,95
	}
	nsleep(1);
	csn(HIGH);
	ce(HIGH);
	init_watch();
	while( ! ( get_status()  & ( _BV(TX_DS) | _BV(MAX_RT) ))) {
    3a98:	5c 40 00 07 	bne r2,r0,3ab4 <load_payload+0xfc>

		if(time_happened_millis(95)==1){
    3a9c:	fb ff f2 b7 	calli 578 <time_happened_millis>
    3aa0:	5c 2b ff fb 	bne r1,r11,3a8c <load_payload+0xd4>
			uart_putstr("\nLa transmision fallo");
    3aa4:	78 01 00 00 	mvhi r1,0x0
    3aa8:	38 21 3f d0 	ori r1,r1,0x3fd0
    3aac:	fb ff f2 f5 	calli 680 <uart_putstr>
			init_watch();
    3ab0:	fb ff f2 c6 	calli 5c8 <init_watch>
			goto cont;
		}

	}
  cont:
	ce(LOW);
    3ab4:	34 01 00 00 	mvi r1,0
    3ab8:	fb ff fc a7 	calli 2d54 <ce>
	status = write_register_basic	(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
    3abc:	34 02 00 70 	mvi r2,112
    3ac0:	34 01 00 07 	mvi r1,7
    3ac4:	fb ff fd d4 	calli 3214 <write_register_basic>

  if( status & _BV(MAX_RT)){
    3ac8:	20 21 00 10 	andi r1,r1,0x10
    3acc:	34 02 00 01 	mvi r2,1
    3ad0:	44 20 00 03 	be r1,r0,3adc <load_payload+0x124>
  	flush_tx(); //Cuando se excede el maximo de intentos, se limpia el TX_FIFO
    3ad4:	fb ff ff 35 	calli 37a8 <flush_tx>
    3ad8:	34 02 00 00 	mvi r2,0
  	return 0;
  }
	//TX OK 1 or 0
  return 1;
}
    3adc:	b8 40 08 00 	mv r1,r2
    3ae0:	2b 9d 00 04 	lw ra,(sp+4)
    3ae4:	2b 8b 00 14 	lw r11,(sp+20)
    3ae8:	2b 8c 00 10 	lw r12,(sp+16)
    3aec:	2b 8d 00 0c 	lw r13,(sp+12)
    3af0:	2b 8e 00 08 	lw r14,(sp+8)
    3af4:	37 9c 00 14 	addi sp,sp,20
    3af8:	c3 a0 00 00 	ret


	csn(LOW);
	nsleep(1);
	if(writeType == W_TX_PAYLOAD){
		spi_transmitD(W_TX_PAYLOAD);
    3afc:	b9 80 08 00 	mv r1,r12
    3b00:	fb ff fd 23 	calli 2f8c <spi_transmitD>
    3b04:	e3 ff ff ca 	bi 3a2c <load_payload+0x74>
