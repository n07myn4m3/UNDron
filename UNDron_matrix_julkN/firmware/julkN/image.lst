
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003af8  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000500  00003af8  00003af8  00003b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000025  00003ff8  00003ff8  0000404c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000000c0  00004020  00004020  00004071  2**2
                  ALLOC
  4 .debug_abbrev 00000b6f  00000000  00000000  00004071  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003a81  00000000  00000000  00004be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000037e2  00000000  00000000  00008661  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000007d0  00000000  00000000  0000be44  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000099b  00000000  00000000  0000c614  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000000c0  00000000  00000000  0000cfaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000de2  00000000  00000000  0000d06f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000006c  00000000  00000000  0000de51  2**0
                  CONTENTS, READONLY
 12 .debug_loc    00002a36  00000000  00000000  0000debd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c28  00000000  00000000  000108f3  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <_ftext>:
       0:	98 00 00 00 	xor r0,r0,r0
       4:	d0 00 00 00 	wcsr IE,r0
       8:	78 01 00 00 	mvhi r1,0x0
       c:	38 21 00 00 	ori r1,r1,0x0
      10:	d0 e1 00 00 	wcsr EBA,r1
      14:	f8 00 00 3b 	calli 100 <_crt0>
      18:	34 00 00 00 	nop
      1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
      20:	34 00 00 00 	nop
      24:	34 00 00 00 	nop
      28:	34 00 00 00 	nop
      2c:	34 00 00 00 	nop
      30:	34 00 00 00 	nop
      34:	34 00 00 00 	nop
      38:	34 00 00 00 	nop
      3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
      40:	34 00 00 00 	nop
      44:	34 00 00 00 	nop
      48:	34 00 00 00 	nop
      4c:	34 00 00 00 	nop
      50:	34 00 00 00 	nop
      54:	34 00 00 00 	nop
      58:	34 00 00 00 	nop
      5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
      60:	34 00 00 00 	nop
      64:	34 00 00 00 	nop
      68:	34 00 00 00 	nop
      6c:	34 00 00 00 	nop
      70:	34 00 00 00 	nop
      74:	34 00 00 00 	nop
      78:	34 00 00 00 	nop
      7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
      80:	34 00 00 00 	nop
      84:	34 00 00 00 	nop
      88:	34 00 00 00 	nop
      8c:	34 00 00 00 	nop
      90:	34 00 00 00 	nop
      94:	34 00 00 00 	nop
      98:	34 00 00 00 	nop
      9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
      a0:	34 00 00 00 	nop
      a4:	34 00 00 00 	nop
      a8:	34 00 00 00 	nop
      ac:	34 00 00 00 	nop
      b0:	34 00 00 00 	nop
      b4:	34 00 00 00 	nop
      b8:	34 00 00 00 	nop
      bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
      c0:	5b 9d 00 00 	sw (sp+0),ra
      c4:	f8 00 00 2b 	calli 170 <_save_all>
      c8:	90 40 08 00 	rcsr r1,IP
      cc:	f8 00 00 8a 	calli 2f4 <irq_handler>
      d0:	78 01 ff ff 	mvhi r1,0xffff
      d4:	38 21 ff ff 	ori r1,r1,0xffff
      d8:	d0 41 00 00 	wcsr IP,r1
      dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
      e0:	34 00 00 00 	nop
      e4:	34 00 00 00 	nop
      e8:	34 00 00 00 	nop
      ec:	34 00 00 00 	nop
      f0:	34 00 00 00 	nop
      f4:	34 00 00 00 	nop
      f8:	34 00 00 00 	nop
      fc:	34 00 00 00 	nop

00000100 <_crt0>:
     100:	78 1c 00 00 	mvhi sp,0x0
     104:	3b 9c 7f fc 	ori sp,sp,0x7ffc
     108:	78 1a 00 00 	mvhi gp,0x0
     10c:	3b 5a 40 20 	ori gp,gp,0x4020
     110:	78 01 00 00 	mvhi r1,0x0
     114:	38 21 40 20 	ori r1,r1,0x4020
     118:	78 03 00 00 	mvhi r3,0x0
     11c:	38 63 40 e0 	ori r3,r3,0x40e0

00000120 <.clearBSS>:
     120:	44 23 00 04 	be r1,r3,130 <.callMain>
     124:	58 20 00 00 	sw (r1+0),r0
     128:	34 21 00 04 	addi r1,r1,4
     12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
     130:	34 01 00 00 	mvi r1,0
     134:	34 02 00 00 	mvi r2,0
     138:	34 03 00 00 	mvi r3,0
     13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
     140:	34 01 00 01 	mvi r1,1
     144:	d0 01 00 00 	wcsr IE,r1
     148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
     14c:	34 01 00 00 	mvi r1,0
     150:	d0 01 00 00 	wcsr IE,r1
     154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
     158:	d0 21 00 00 	wcsr IM,r1
     15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
     160:	90 20 08 00 	rcsr r1,IM
     164:	c3 a0 00 00 	ret

00000168 <jump>:
     168:	c0 20 00 00 	b r1

0000016c <halt>:
     16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
     170:	37 9c ff 80 	addi sp,sp,-128
     174:	5b 81 00 04 	sw (sp+4),r1
     178:	5b 82 00 08 	sw (sp+8),r2
     17c:	5b 83 00 0c 	sw (sp+12),r3
     180:	5b 84 00 10 	sw (sp+16),r4
     184:	5b 85 00 14 	sw (sp+20),r5
     188:	5b 86 00 18 	sw (sp+24),r6
     18c:	5b 87 00 1c 	sw (sp+28),r7
     190:	5b 88 00 20 	sw (sp+32),r8
     194:	5b 89 00 24 	sw (sp+36),r9
     198:	5b 8a 00 28 	sw (sp+40),r10
     19c:	5b 9e 00 78 	sw (sp+120),ea
     1a0:	5b 9f 00 7c 	sw (sp+124),ba
     1a4:	2b 81 00 80 	lw r1,(sp+128)
     1a8:	5b 81 00 74 	sw (sp+116),r1
     1ac:	bb 80 08 00 	mv r1,sp
     1b0:	34 21 00 80 	addi r1,r1,128
     1b4:	5b 81 00 70 	sw (sp+112),r1
     1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
     1bc:	2b 81 00 04 	lw r1,(sp+4)
     1c0:	2b 82 00 08 	lw r2,(sp+8)
     1c4:	2b 83 00 0c 	lw r3,(sp+12)
     1c8:	2b 84 00 10 	lw r4,(sp+16)
     1cc:	2b 85 00 14 	lw r5,(sp+20)
     1d0:	2b 86 00 18 	lw r6,(sp+24)
     1d4:	2b 87 00 1c 	lw r7,(sp+28)
     1d8:	2b 88 00 20 	lw r8,(sp+32)
     1dc:	2b 89 00 24 	lw r9,(sp+36)
     1e0:	2b 8a 00 28 	lw r10,(sp+40)
     1e4:	2b 9d 00 74 	lw ra,(sp+116)
     1e8:	2b 9e 00 78 	lw ea,(sp+120)
     1ec:	2b 9f 00 7c 	lw ba,(sp+124)
     1f0:	2b 9c 00 70 	lw sp,(sp+112)
     1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
     1f8:	bb 80 08 00 	mv r1,sp
     1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
     200:	bb 40 08 00 	mv r1,gp
     204:	c3 a0 00 00 	ret

00000208 <main>:
static uint8_t ports;
int *data_receive;



int main(){
     208:	37 9c ff dc 	addi sp,sp,-36
     20c:	5b 8b 00 24 	sw (sp+36),r11
     210:	5b 8c 00 20 	sw (sp+32),r12
     214:	5b 8d 00 1c 	sw (sp+28),r13
     218:	5b 8e 00 18 	sw (sp+24),r14
     21c:	5b 8f 00 14 	sw (sp+20),r15
     220:	5b 90 00 10 	sw (sp+16),r16
     224:	5b 91 00 0c 	sw (sp+12),r17
     228:	5b 92 00 08 	sw (sp+8),r18
     22c:	5b 9d 00 04 	sw (sp+4),ra
     230:	78 0b 00 00 	mvhi r11,0x0
     234:	39 6b 40 44 	ori r11,r11,0x4044
		enableDynamicAckPayloads();
		//PTX
		//stopTransmission();
		//openPipe0_tx(pipe);
		//PRX
		openpipe_rx(1,pipe);
     238:	34 0e 00 01 	mvi r14,1
     23c:	78 0d 00 00 	mvhi r13,0x0
		startRx_mode();
		setRetries(15, 15);


			uart_putstr("\nLa transmision va a iniciar");
     240:	78 0c 00 00 	mvhi r12,0x0
			if ( available() == 1) {
				writeAckPayload( 1, data, 5 );
     244:	78 0f 00 00 	mvhi r15,0x0
				uart_putstr("\nEL dato enviado es: ");
     248:	78 12 00 00 	mvhi r18,0x0
				uart_putstr((char*)data);
				read_payload( data_receive, sizeof(data_receive) );
				uart_putstr("\nEl archivo recibido es : ");
     24c:	78 11 00 00 	mvhi r17,0x0
				uart_putstr("\nEL mensaje recibo es : ");
     250:	78 10 00 00 	mvhi r16,0x0
     254:	e0 00 00 03 	bi 260 <main+0x58>
				uart_putstr((char*)data_receive);
		  }
			msleep(100);
     258:	34 01 00 64 	mvi r1,100
     25c:	f8 00 00 8b 	calli 488 <msleep>
/*
		nrf24_begin();
		msleep(100);
		setAutoAck(true);
*/
		enableDynamicAckPayloads();
     260:	f8 00 0c 94 	calli 34b0 <enableDynamicAckPayloads>
		//PTX
		//stopTransmission();
		//openPipe0_tx(pipe);
		//PRX
		openpipe_rx(1,pipe);
     264:	b9 a0 10 00 	mv r2,r13
     268:	38 42 3b 68 	ori r2,r2,0x3b68
     26c:	34 01 00 01 	mvi r1,1
     270:	f8 00 0c ba 	calli 3558 <openpipe_rx>
		startRx_mode();
     274:	f8 00 0d 50 	calli 37b4 <startRx_mode>
		setRetries(15, 15);
     278:	34 01 00 0f 	mvi r1,15
     27c:	b8 20 10 00 	mv r2,r1
     280:	f8 00 0c 2e 	calli 3338 <setRetries>


			uart_putstr("\nLa transmision va a iniciar");
     284:	b9 80 08 00 	mv r1,r12
     288:	38 21 3a f8 	ori r1,r1,0x3af8
     28c:	f8 00 00 f9 	calli 670 <uart_putstr>
			if ( available() == 1) {
     290:	f8 00 0c 76 	calli 3468 <available>
     294:	5c 2e ff f1 	bne r1,r14,258 <main+0x50>
				writeAckPayload( 1, data, 5 );
     298:	b9 e0 10 00 	mv r2,r15
     29c:	34 03 00 05 	mvi r3,5
     2a0:	38 42 3f f8 	ori r2,r2,0x3ff8
     2a4:	f8 00 0b 87 	calli 30c0 <writeAckPayload>
				uart_putstr("\nEL dato enviado es: ");
     2a8:	ba 40 08 00 	mv r1,r18
     2ac:	38 21 3b 18 	ori r1,r1,0x3b18
     2b0:	f8 00 00 f0 	calli 670 <uart_putstr>
				uart_putstr((char*)data);
     2b4:	b9 e0 08 00 	mv r1,r15
     2b8:	38 21 3f f8 	ori r1,r1,0x3ff8
     2bc:	f8 00 00 ed 	calli 670 <uart_putstr>
				read_payload( data_receive, sizeof(data_receive) );
     2c0:	29 61 00 00 	lw r1,(r11+0)
     2c4:	34 02 00 04 	mvi r2,4
     2c8:	f8 00 0b 47 	calli 2fe4 <read_payload>
				uart_putstr("\nEl archivo recibido es : ");
     2cc:	ba 20 08 00 	mv r1,r17
     2d0:	38 21 3b 30 	ori r1,r1,0x3b30
     2d4:	f8 00 00 e7 	calli 670 <uart_putstr>
				uart_putstr("\nEL mensaje recibo es : ");
     2d8:	ba 00 08 00 	mv r1,r16
     2dc:	38 21 3b 4c 	ori r1,r1,0x3b4c
     2e0:	f8 00 00 e4 	calli 670 <uart_putstr>
				uart_putstr((char*)data_receive);
     2e4:	29 61 00 00 	lw r1,(r11+0)
     2e8:	f8 00 00 e2 	calli 670 <uart_putstr>
     2ec:	e3 ff ff db 	bi 258 <main+0x50>

000002f0 <isr_null>:
void tic_isr();
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
     2f0:	c3 a0 00 00 	ret

000002f4 <irq_handler>:
}

void irq_handler(uint32_t pending)
{
     2f4:	37 9c ff f0 	addi sp,sp,-16
     2f8:	5b 8b 00 10 	sw (sp+16),r11
     2fc:	5b 8c 00 0c 	sw (sp+12),r12
     300:	5b 8d 00 08 	sw (sp+8),r13
     304:	5b 9d 00 04 	sw (sp+4),ra
     308:	78 0b 00 00 	mvhi r11,0x0
     30c:	39 6b 40 54 	ori r11,r11,0x4054
     310:	b8 20 60 00 	mv r12,r1
     314:	35 6d 00 80 	addi r13,r11,128
     318:	e0 00 00 03 	bi 324 <irq_handler+0x30>
    int i;

    for(i=0; i<32; i++) {
        if (pending & 0x01) (*isr_table[i])();
     31c:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
    int i;

    for(i=0; i<32; i++) {
     320:	45 6d 00 08 	be r11,r13,340 <irq_handler+0x4c>
        if (pending & 0x01) (*isr_table[i])();
     324:	21 81 00 01 	andi r1,r12,0x1
        pending >>= 1;
     328:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
    int i;

    for(i=0; i<32; i++) {
        if (pending & 0x01) (*isr_table[i])();
     32c:	44 20 ff fc 	be r1,r0,31c <irq_handler+0x28>
     330:	29 61 00 00 	lw r1,(r11+0)
     334:	35 6b 00 04 	addi r11,r11,4
     338:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
    int i;

    for(i=0; i<32; i++) {
     33c:	5d 6d ff fa 	bne r11,r13,324 <irq_handler+0x30>
        if (pending & 0x01) (*isr_table[i])();
        pending >>= 1;
    }
}
     340:	2b 9d 00 04 	lw ra,(sp+4)
     344:	2b 8b 00 10 	lw r11,(sp+16)
     348:	2b 8c 00 0c 	lw r12,(sp+12)
     34c:	2b 8d 00 08 	lw r13,(sp+8)
     350:	37 9c 00 10 	addi sp,sp,16
     354:	c3 a0 00 00 	ret

00000358 <isr_init>:

void isr_init()
{
     358:	78 01 00 00 	mvhi r1,0x0
     35c:	38 21 40 54 	ori r1,r1,0x4054
     360:	78 02 00 00 	mvhi r2,0x0
     364:	38 42 02 f0 	ori r2,r2,0x2f0
     368:	34 23 00 80 	addi r3,r1,128
    int i;
    for(i=0; i<32; i++)
        isr_table[i] = &isr_null;
     36c:	58 22 00 00 	sw (r1+0),r2
     370:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
    int i;
    for(i=0; i<32; i++)
     374:	5c 23 ff fe 	bne r1,r3,36c <isr_init+0x14>
        isr_table[i] = &isr_null;
}
     378:	c3 a0 00 00 	ret

0000037c <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
     37c:	3c 21 00 02 	sli r1,r1,2
     380:	78 03 00 00 	mvhi r3,0x0
     384:	38 63 40 54 	ori r3,r3,0x4054
     388:	b4 61 18 00 	add r3,r3,r1
     38c:	58 62 00 00 	sw (r3+0),r2
    isr_table[irq] = isr;
}
     390:	c3 a0 00 00 	ret

00000394 <isr_unregister>:

void isr_unregister(int irq)
{
     394:	3c 21 00 02 	sli r1,r1,2
     398:	78 03 00 00 	mvhi r3,0x0
     39c:	38 63 40 54 	ori r3,r3,0x4054
     3a0:	78 02 00 00 	mvhi r2,0x0
     3a4:	b4 61 18 00 	add r3,r3,r1
     3a8:	38 42 02 f0 	ori r2,r2,0x2f0
     3ac:	58 62 00 00 	sw (r3+0),r2
    isr_table[irq] = &isr_null;
}
     3b0:	c3 a0 00 00 	ret

000003b4 <gpio_init_write>:
 */
static uint8_t output;
static uint8_t addrs;

void gpio_init_write(void)
{
     3b4:	78 01 00 00 	mvhi r1,0x0
     3b8:	38 21 40 08 	ori r1,r1,0x4008
     3bc:	28 24 00 00 	lw r4,(r1+0)
	addrs = 0xff;
     3c0:	78 02 00 00 	mvhi r2,0x0
     3c4:	38 42 40 25 	ori r2,r2,0x4025
     3c8:	34 01 ff ff 	mvi r1,-1
     3cc:	30 41 00 00 	sb (r2+0),r1
	gpio0->oe = addrs;
     3d0:	34 03 00 ff 	mvi r3,255
     3d4:	58 83 00 18 	sw (r4+24),r3
}
     3d8:	c3 a0 00 00 	ret

000003dc <digitalWrite>:

void digitalWrite(uint8_t data, uint8_t mode)
{
     3dc:	20 24 00 ff 	andi r4,r1,0xff
     3e0:	20 42 00 ff 	andi r2,r2,0xff
	if(mode==TRUE){
     3e4:	34 01 00 01 	mvi r1,1
     3e8:	44 41 00 0c 	be r2,r1,418 <digitalWrite+0x3c>
    output |= data;
		} else {
		output &= ~data;
     3ec:	78 01 00 00 	mvhi r1,0x0
     3f0:	38 21 40 24 	ori r1,r1,0x4024
     3f4:	40 23 00 00 	lbu r3,(r1+0)
     3f8:	a4 80 10 00 	not r2,r4
     3fc:	a0 43 10 00 	and r2,r2,r3
     400:	30 22 00 00 	sb (r1+0),r2
	}
	gpio0->out = data; 
     404:	78 01 00 00 	mvhi r1,0x0
     408:	38 21 40 08 	ori r1,r1,0x4008
     40c:	28 22 00 00 	lw r2,(r1+0)
     410:	58 44 00 14 	sw (r2+20),r4
}
     414:	c3 a0 00 00 	ret
}

void digitalWrite(uint8_t data, uint8_t mode)
{
	if(mode==TRUE){
    output |= data;
     418:	78 02 00 00 	mvhi r2,0x0
     41c:	38 42 40 24 	ori r2,r2,0x4024
     420:	40 41 00 00 	lbu r1,(r2+0)
     424:	b8 81 08 00 	or r1,r4,r1
     428:	30 41 00 00 	sb (r2+0),r1
		} else {
		output &= ~data;
	}
	gpio0->out = data; 
     42c:	78 01 00 00 	mvhi r1,0x0
     430:	38 21 40 08 	ori r1,r1,0x4008
     434:	28 22 00 00 	lw r2,(r1+0)
     438:	58 44 00 14 	sw (r2+20),r4
}
     43c:	c3 a0 00 00 	ret

00000440 <read_gpio>:


uint8_t read_gpio(void)
{
     440:	78 01 00 00 	mvhi r1,0x0
     444:	38 21 40 08 	ori r1,r1,0x4008
     448:	28 22 00 00 	lw r2,(r1+0)
     44c:	28 41 00 10 	lw r1,(r2+16)
	uint8_t data;
	data = gpio0-> in;
	return data;
}
     450:	20 21 00 ff 	andi r1,r1,0xff
     454:	c3 a0 00 00 	ret

00000458 <step_sleep>:
uint32_t tic_msec;



void step_sleep(uint32_t step)
{
     458:	78 02 00 00 	mvhi r2,0x0
     45c:	38 42 40 04 	ori r2,r2,0x4004
     460:	28 43 00 00 	lw r3,(r2+0)
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = step;
    timer0->counter1 = 0;
    timer0->tcr1 = TIMER_EN;
     464:	34 02 00 08 	mvi r2,8
void step_sleep(uint32_t step)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = step;
     468:	58 61 00 10 	sw (r3+16),r1
    timer0->counter1 = 0;
     46c:	34 01 00 00 	mvi r1,0
     470:	58 61 00 14 	sw (r3+20),r1
    timer0->tcr1 = TIMER_EN;
     474:	58 62 00 0c 	sw (r3+12),r2

    do {
        //halt();
         tcr = timer0->tcr1;
     478:	28 61 00 0c 	lw r1,(r3+12)
     } while ( ! (tcr & TIMER_TRIG) );
     47c:	20 21 00 01 	andi r1,r1,0x1
     480:	44 20 ff fe 	be r1,r0,478 <step_sleep+0x20>
	
}
     484:	c3 a0 00 00 	ret

00000488 <msleep>:



void msleep(uint32_t msec)
{
     488:	78 02 00 00 	mvhi r2,0x0
     48c:	38 42 40 04 	ori r2,r2,0x4004
     490:	38 03 c3 50 	mvu r3,0xc350
     494:	88 23 08 00 	mul r1,r1,r3
     498:	28 43 00 00 	lw r3,(r2+0)
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000)*msec;
    timer0->counter1 = 0;
    timer0->tcr1 = TIMER_EN;
     49c:	34 02 00 08 	mvi r2,8
void msleep(uint32_t msec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000)*msec;
     4a0:	58 61 00 10 	sw (r3+16),r1
    timer0->counter1 = 0;
     4a4:	34 01 00 00 	mvi r1,0
     4a8:	58 61 00 14 	sw (r3+20),r1
    timer0->tcr1 = TIMER_EN;
     4ac:	58 62 00 0c 	sw (r3+12),r2

    do {
        //halt();
         tcr = timer0->tcr1;
     4b0:	28 61 00 0c 	lw r1,(r3+12)
     } while ( ! (tcr & TIMER_TRIG) );
     4b4:	20 21 00 01 	andi r1,r1,0x1
     4b8:	44 20 ff fe 	be r1,r0,4b0 <msleep+0x28>
}
     4bc:	c3 a0 00 00 	ret

000004c0 <nsleep>:

void nsleep(uint32_t nsec)
{
     4c0:	78 02 00 00 	mvhi r2,0x0
     4c4:	38 42 40 04 	ori r2,r2,0x4004
     4c8:	28 43 00 00 	lw r3,(r2+0)
     4cc:	08 21 00 32 	muli r1,r1,50
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
    timer0->counter1 = 0;
    timer0->tcr1 = TIMER_EN;
     4d0:	34 02 00 08 	mvi r2,8
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     4d4:	58 61 00 10 	sw (r3+16),r1
    timer0->counter1 = 0;
     4d8:	34 01 00 00 	mvi r1,0
     4dc:	58 61 00 14 	sw (r3+20),r1
    timer0->tcr1 = TIMER_EN;
     4e0:	58 62 00 0c 	sw (r3+12),r2

    do {
        //halt();
         tcr = timer0->tcr1;
     4e4:	28 61 00 0c 	lw r1,(r3+12)
     } while ( ! (tcr & TIMER_TRIG) );
     4e8:	20 21 00 01 	andi r1,r1,0x1
     4ec:	44 20 ff fe 	be r1,r0,4e4 <nsleep+0x24>
}
     4f0:	c3 a0 00 00 	ret

000004f4 <tic_isr>:

void tic_isr()
{
     4f4:	78 03 00 00 	mvhi r3,0x0
     4f8:	38 63 40 d4 	ori r3,r3,0x40d4
     4fc:	28 62 00 00 	lw r2,(r3+0)
    tic_msec++;
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     500:	78 01 00 00 	mvhi r1,0x0
     504:	38 21 40 04 	ori r1,r1,0x4004
     508:	28 24 00 00 	lw r4,(r1+0)
     } while ( ! (tcr & TIMER_TRIG) );
}

void tic_isr()
{
    tic_msec++;
     50c:	34 42 00 01 	addi r2,r2,1
     510:	58 62 00 00 	sw (r3+0),r2
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     514:	34 01 00 0e 	mvi r1,14
     518:	58 81 00 00 	sw (r4+0),r1
}
     51c:	c3 a0 00 00 	ret

00000520 <tic_init>:

void tic_init()
{
     520:	78 01 00 00 	mvhi r1,0x0
     524:	38 21 40 04 	ori r1,r1,0x4004
     528:	28 24 00 00 	lw r4,(r1+0)
    tic_msec = 0;
     52c:	78 02 00 00 	mvhi r2,0x0
     530:	38 42 40 d4 	ori r2,r2,0x40d4
     534:	34 05 00 00 	mvi r5,0
     538:	58 45 00 00 	sw (r2+0),r5

    // Setup timer0.0
    timer0->compare0 = (FCPU/10000);
     53c:	34 01 13 88 	mvi r1,5000
     540:	58 81 00 04 	sw (r4+4),r1
        isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
    isr_table[irq] = isr;
     544:	78 03 00 00 	mvhi r3,0x0
     548:	78 02 00 00 	mvhi r2,0x0
{
    tic_msec = 0;

    // Setup timer0.0
    timer0->compare0 = (FCPU/10000);
    timer0->counter0 = 0;
     54c:	58 85 00 08 	sw (r4+8),r5
        isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
    isr_table[irq] = isr;
     550:	38 63 40 54 	ori r3,r3,0x4054
     554:	38 42 04 f4 	ori r2,r2,0x4f4
    tic_msec = 0;

    // Setup timer0.0
    timer0->compare0 = (FCPU/10000);
    timer0->counter0 = 0;
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     558:	34 01 00 0e 	mvi r1,14
     55c:	58 81 00 00 	sw (r4+0),r1
        isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
    isr_table[irq] = isr;
     560:	58 62 00 04 	sw (r3+4),r2
    timer0->compare0 = (FCPU/10000);
    timer0->counter0 = 0;
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

    isr_register(1, &tic_isr);
}
     564:	c3 a0 00 00 	ret

00000568 <time_happened_millis>:




uint8_t time_happened_millis(uint32_t millis)
{
     568:	78 02 00 00 	mvhi r2,0x0
     56c:	38 42 40 04 	ori r2,r2,0x4004
     570:	28 42 00 00 	lw r2,(r2+0)
     574:	b8 20 30 00 	mv r6,r1
    uint32_t tcr;
		
		tcr =timer0->tcr0;
		if(! (tcr & TIMER_EN)){
     578:	34 03 00 00 	mvi r3,0

uint8_t time_happened_millis(uint32_t millis)
{
    uint32_t tcr;
		
		tcr =timer0->tcr0;
     57c:	28 41 00 00 	lw r1,(r2+0)
		if(! (tcr & TIMER_EN)){
     580:	20 24 00 08 	andi r4,r1,0x8
     584:	5c 83 00 0b 	bne r4,r3,5b0 <time_happened_millis+0x48>
		  // Use timer0.1
			if(tcr & TIMER_TRIG){
     588:	20 25 00 01 	andi r5,r1,0x1
     58c:	34 03 00 01 	mvi r3,1
     590:	5c a4 00 08 	bne r5,r4,5b0 <time_happened_millis+0x48>
				return 1;
			}else{ 
		  timer0->compare0 = (FCPU/1000)*millis;
     594:	38 01 c3 50 	mvu r1,0xc350
     598:	88 c1 08 00 	mul r1,r6,r1
		  timer0->counter0 = 0;
		  timer0->tcr0 = TIMER_EN;	
     59c:	b8 a0 18 00 	mv r3,r5
		if(! (tcr & TIMER_EN)){
		  // Use timer0.1
			if(tcr & TIMER_TRIG){
				return 1;
			}else{ 
		  timer0->compare0 = (FCPU/1000)*millis;
     5a0:	58 41 00 04 	sw (r2+4),r1
		  timer0->counter0 = 0;
     5a4:	58 45 00 08 	sw (r2+8),r5
		  timer0->tcr0 = TIMER_EN;	
     5a8:	34 01 00 08 	mvi r1,8
     5ac:	58 41 00 00 	sw (r2+0),r1
			return 0;
			}
		}else{
			return 0;			
		}		
}
     5b0:	b8 60 08 00 	mv r1,r3
     5b4:	c3 a0 00 00 	ret

000005b8 <init_watch>:


void init_watch(void){
     5b8:	78 01 00 00 	mvhi r1,0x0
     5bc:	38 21 40 04 	ori r1,r1,0x4004
     5c0:	28 23 00 00 	lw r3,(r1+0)
     5c4:	34 02 00 00 	mvi r2,0
     5c8:	58 62 00 00 	sw (r3+0),r2
	timer0->tcr0=0x00;
}
     5cc:	c3 a0 00 00 	ret

000005d0 <time_happened_micro>:


uint8_t time_happened_micro(uint32_t micros)
{
     5d0:	78 02 00 00 	mvhi r2,0x0
     5d4:	38 42 40 04 	ori r2,r2,0x4004
     5d8:	28 42 00 00 	lw r2,(r2+0)
    uint32_t tcr;
		static uint32_t time;
		time = micros;
     5dc:	78 03 00 00 	mvhi r3,0x0
     5e0:	38 63 40 20 	ori r3,r3,0x4020
     5e4:	58 61 00 00 	sw (r3+0),r1
		tcr =timer0->tcr0;
     5e8:	28 44 00 00 	lw r4,(r2+0)
		if(! (tcr & TIMER_EN)){
     5ec:	34 03 00 00 	mvi r3,0
     5f0:	20 85 00 08 	andi r5,r4,0x8
     5f4:	5c a3 00 0a 	bne r5,r3,61c <time_happened_micro+0x4c>
		  // Use timer0.1
			if(tcr & TIMER_TRIG){
     5f8:	20 84 00 01 	andi r4,r4,0x1
     5fc:	34 03 00 01 	mvi r3,1
     600:	5c 85 00 07 	bne r4,r5,61c <time_happened_micro+0x4c>
				return 1;
			}else{ 
				timer0->compare0 = (FCPU/1000000)*time;
     604:	08 21 00 32 	muli r1,r1,50
				timer0->counter0 = 0;
				timer0->tcr0 = TIMER_EN;	
     608:	b8 80 18 00 	mv r3,r4
		if(! (tcr & TIMER_EN)){
		  // Use timer0.1
			if(tcr & TIMER_TRIG){
				return 1;
			}else{ 
				timer0->compare0 = (FCPU/1000000)*time;
     60c:	58 41 00 04 	sw (r2+4),r1
				timer0->counter0 = 0;
     610:	58 44 00 08 	sw (r2+8),r4
				timer0->tcr0 = TIMER_EN;	
     614:	34 01 00 08 	mvi r1,8
     618:	58 41 00 00 	sw (r2+0),r1
				return 0;
			}
		}else{
			return 0;			
		}		
}
     61c:	b8 60 08 00 	mv r1,r3
     620:	c3 a0 00 00 	ret

00000624 <uart_init>:

/***************************************************************************
 * UART Functions
 */
void uart_init()
{
     624:	c3 a0 00 00 	ret

00000628 <uart_getchar>:
    // Setup Divisor register (Fclk / Baud)
    //uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
     628:	78 01 00 00 	mvhi r1,0x0
     62c:	38 21 40 00 	ori r1,r1,0x4000
     630:	28 22 00 00 	lw r2,(r1+0)
     634:	28 41 00 00 	lw r1,(r2+0)
     638:	20 21 00 01 	andi r1,r1,0x1
     63c:	44 20 ff fe 	be r1,r0,634 <uart_getchar+0xc>
    while (! (uart0->ucr & UART_DR)) ;
    return uart0->rxtx;
     640:	28 41 00 04 	lw r1,(r2+4)
}
     644:	20 21 00 ff 	andi r1,r1,0xff
     648:	c3 a0 00 00 	ret

0000064c <uart_putchar>:

void uart_putchar(char c)
{
     64c:	78 02 00 00 	mvhi r2,0x0
     650:	38 42 40 00 	ori r2,r2,0x4000
     654:	28 42 00 00 	lw r2,(r2+0)
     658:	20 23 00 ff 	andi r3,r1,0xff
    while (uart0->ucr & UART_BUSY) ;
     65c:	28 41 00 00 	lw r1,(r2+0)
     660:	20 21 00 10 	andi r1,r1,0x10
     664:	5c 20 ff fe 	bne r1,r0,65c <uart_putchar+0x10>
    uart0->rxtx = c;
     668:	58 43 00 04 	sw (r2+4),r3
}
     66c:	c3 a0 00 00 	ret

00000670 <uart_putstr>:

void uart_putstr(char *str)
{
     670:	40 24 00 00 	lbu r4,(r1+0)
     674:	b8 20 18 00 	mv r3,r1
    char *c = str;
    while(*c) {
     678:	44 80 00 0b 	be r4,r0,6a4 <uart_putstr+0x34>
    return uart0->rxtx;
}

void uart_putchar(char c)
{
    while (uart0->ucr & UART_BUSY) ;
     67c:	78 01 00 00 	mvhi r1,0x0
     680:	38 21 40 00 	ori r1,r1,0x4000
     684:	28 22 00 00 	lw r2,(r1+0)
     688:	28 41 00 00 	lw r1,(r2+0)
     68c:	20 21 00 10 	andi r1,r1,0x10
     690:	5c 20 ff fe 	bne r1,r0,688 <uart_putstr+0x18>
    uart0->rxtx = c;
     694:	58 44 00 04 	sw (r2+4),r4
void uart_putstr(char *str)
{
    char *c = str;
    while(*c) {
        uart_putchar(*c);
        c++;
     698:	34 63 00 01 	addi r3,r3,1
}

void uart_putstr(char *str)
{
    char *c = str;
    while(*c) {
     69c:	40 64 00 00 	lbu r4,(r3+0)
     6a0:	5c 81 ff fa 	bne r4,r1,688 <uart_putstr+0x18>
     6a4:	c3 a0 00 00 	ret

000006a8 <i2c_putdata>:
 */

	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
     6a8:	78 02 00 00 	mvhi r2,0x0
     6ac:	38 42 40 14 	ori r2,r2,0x4014
     6b0:	28 44 00 00 	lw r4,(r2+0)
	  data = c;
     6b4:	78 03 00 00 	mvhi r3,0x0
 */

	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
     6b8:	20 21 00 ff 	andi r1,r1,0xff
	  data = c;
     6bc:	38 63 40 26 	ori r3,r3,0x4026
     6c0:	30 61 00 00 	sb (r3+0),r1
		while ((i2c0->ucr & !I2C_BUSY));
     6c4:	28 82 00 00 	lw r2,(r4+0)
		i2c0->wxrx = data;
     6c8:	58 81 00 04 	sw (r4+4),r1
	}
     6cc:	c3 a0 00 00 	ret

000006d0 <i2c_putrwaddr>:
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
     6d0:	78 03 00 00 	mvhi r3,0x0
     6d4:	20 21 00 ff 	andi r1,r1,0xff
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     6d8:	38 63 40 14 	ori r3,r3,0x4014
     6dc:	28 64 00 00 	lw r4,(r3+0)
     6e0:	3c 21 00 07 	sli r1,r1,7
		while ((i2c0->ucr & !I2C_BUSY));
		i2c0->wxrx = data;
	}
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
     6e4:	20 42 00 ff 	andi r2,r2,0xff
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     6e8:	b8 41 10 00 	or r2,r2,r1
     6ec:	58 82 00 08 	sw (r4+8),r2
	}
     6f0:	c3 a0 00 00 	ret

000006f4 <i2c_putdatas>:
    //----------------------------------------------------------------
	void i2c_putdatas(char *str)	
	{
     6f4:	40 22 00 00 	lbu r2,(r1+0)
     6f8:	b8 20 20 00 	mv r4,r1
		char *c= str;
		while (*c) {
     6fc:	44 40 00 0e 	be r2,r0,734 <i2c_putdatas+0x40>
	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
		while ((i2c0->ucr & !I2C_BUSY));
     700:	78 01 00 00 	mvhi r1,0x0
     704:	38 21 40 14 	ori r1,r1,0x4014
     708:	28 23 00 00 	lw r3,(r1+0)
     70c:	b8 80 08 00 	mv r1,r4
		i2c0->wxrx = data;
     710:	b8 40 20 00 	mv r4,r2
	void i2c_putdatas(char *str)	
	{
		char *c= str;
		while (*c) {
			i2c_putdata(*c);
		c++;
     714:	34 21 00 01 	addi r1,r1,1
	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
		while ((i2c0->ucr & !I2C_BUSY));
     718:	28 62 00 00 	lw r2,(r3+0)
		i2c0->wxrx = data;
     71c:	58 64 00 04 	sw (r3+4),r4
	}
    //----------------------------------------------------------------
	void i2c_putdatas(char *str)	
	{
		char *c= str;
		while (*c) {
     720:	40 22 00 00 	lbu r2,(r1+0)
     724:	5c 40 ff fb 	bne r2,r0,710 <i2c_putdatas+0x1c>
     728:	78 01 00 00 	mvhi r1,0x0
     72c:	38 21 40 26 	ori r1,r1,0x4026
     730:	30 24 00 00 	sb (r1+0),r4
     734:	c3 a0 00 00 	ret

00000738 <i2c_init>:
		c++;
		}
	}
    //----------------------------------------------------------------
	void i2c_init()
	{
     738:	78 01 00 00 	mvhi r1,0x0
     73c:	38 21 40 14 	ori r1,r1,0x4014
     740:	28 23 00 00 	lw r3,(r1+0)
     744:	34 02 00 08 	mvi r2,8
     748:	58 62 00 00 	sw (r3+0),r2
	 i2c0->ucr = I2C_ENA;  
	}
     74c:	c3 a0 00 00 	ret

00000750 <i2c_sleep>:
    //----------------------------------------------------------------
	void i2c_sleep()
	{
     750:	78 01 00 00 	mvhi r1,0x0
     754:	38 21 40 14 	ori r1,r1,0x4014
     758:	28 23 00 00 	lw r3,(r1+0)
     75c:	28 62 00 00 	lw r2,(r3+0)
     760:	20 42 00 01 	andi r2,r2,0x1
     764:	44 40 00 06 	be r2,r0,77c <i2c_sleep+0x2c>
		while((i2c0->ucr & I2C_BUSY))
		i2c0->ucr = 0x00;
     768:	34 02 00 00 	mvi r2,0
     76c:	58 62 00 00 	sw (r3+0),r2
	 i2c0->ucr = I2C_ENA;  
	}
    //----------------------------------------------------------------
	void i2c_sleep()
	{
		while((i2c0->ucr & I2C_BUSY))
     770:	28 61 00 00 	lw r1,(r3+0)
     774:	20 21 00 01 	andi r1,r1,0x1
     778:	5c 20 ff fd 	bne r1,r0,76c <i2c_sleep+0x1c>
     77c:	c3 a0 00 00 	ret

00000780 <i2c_getdata>:
		i2c0->ucr = 0x00;
	}
    //----------------------------------------------------------------
	uint8_t i2c_getdata()
	{
     780:	78 01 00 00 	mvhi r1,0x0
     784:	38 21 40 14 	ori r1,r1,0x4014
     788:	28 22 00 00 	lw r2,(r1+0)
     78c:	28 41 00 00 	lw r1,(r2+0)
     790:	20 21 00 01 	andi r1,r1,0x1
     794:	44 20 00 04 	be r1,r0,7a4 <i2c_getdata+0x24>
     798:	28 41 00 00 	lw r1,(r2+0)
     79c:	20 21 00 02 	andi r1,r1,0x2
     7a0:	44 20 ff fb 	be r1,r0,78c <i2c_getdata+0xc>
		while ( (i2c0->ucr & I2C_BUSY) && (!(i2c0->ucr & I2C_ERROR)));
		return i2c0-> wxrx;
     7a4:	28 41 00 04 	lw r1,(r2+4)
	}
     7a8:	20 21 00 ff 	andi r1,r1,0xff
     7ac:	c3 a0 00 00 	ret

000007b0 <I2CreadByte>:
    //----------------------------------------------------------------
    uint8_t I2CreadByte(uint8_t address, uint8_t subaddress)
    {
     7b0:	78 03 00 00 	mvhi r3,0x0
     7b4:	38 63 40 14 	ori r3,r3,0x4014
     7b8:	28 65 00 00 	lw r5,(r3+0)
     7bc:	20 26 00 ff 	andi r6,r1,0xff

	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
     7c0:	78 01 00 00 	mvhi r1,0x0
		i2c0->wxrx = data;
	}
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     7c4:	58 a6 00 08 	sw (r5+8),r6
		while ( (i2c0->ucr & I2C_BUSY) && (!(i2c0->ucr & I2C_ERROR)));
		return i2c0-> wxrx;
	}
    //----------------------------------------------------------------
    uint8_t I2CreadByte(uint8_t address, uint8_t subaddress)
    {
     7c8:	20 42 00 ff 	andi r2,r2,0xff

	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
     7cc:	38 21 40 26 	ori r1,r1,0x4026
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     7d0:	78 03 00 00 	mvhi r3,0x0

	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
     7d4:	30 22 00 00 	sb (r1+0),r2
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     7d8:	38 63 40 04 	ori r3,r3,0x4004
	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
		while ((i2c0->ucr & !I2C_BUSY));
     7dc:	28 a1 00 00 	lw r1,(r5+0)
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     7e0:	28 64 00 00 	lw r4,(r3+0)
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
		while ((i2c0->ucr & !I2C_BUSY));
		i2c0->wxrx = data;
     7e4:	58 a2 00 04 	sw (r5+4),r2
		}
	}
    //----------------------------------------------------------------
	void i2c_init()
	{
	 i2c0->ucr = I2C_ENA;  
     7e8:	34 03 00 08 	mvi r3,8
     7ec:	58 a3 00 00 	sw (r5+0),r3
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     7f0:	34 01 03 e8 	mvi r1,1000
     7f4:	58 81 00 10 	sw (r4+16),r1
    timer0->counter1 = 0;
     7f8:	34 02 00 00 	mvi r2,0
     7fc:	58 82 00 14 	sw (r4+20),r2
    timer0->tcr1 = TIMER_EN;
     800:	58 83 00 0c 	sw (r4+12),r3

    do {
        //halt();
         tcr = timer0->tcr1;
     804:	28 81 00 0c 	lw r1,(r4+12)
     } while ( ! (tcr & TIMER_TRIG) );
     808:	20 21 00 01 	andi r1,r1,0x1
     80c:	44 20 ff fe 	be r1,r0,804 <I2CreadByte+0x54>
		  //Indicar la direccion interna que se desea leer    
      i2c_putrwaddr (I2C_WRITE, address);
      i2c_putdata(subaddress);
      i2c_init(); 
      nsleep(20);
	  i2c0->ucr = 0x00;
     810:	34 01 00 00 	mvi r1,0
     814:	58 a1 00 00 	sw (r5+0),r1
		  //Pausa para que el esclavo procese la orden
      while((i2c0->ucr & I2C_BUSY));
     818:	28 a1 00 00 	lw r1,(r5+0)
     81c:	20 22 00 01 	andi r2,r1,0x1
     820:	5c 40 ff fe 	bne r2,r0,818 <I2CreadByte+0x68>
void msleep(uint32_t msec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000)*msec;
     824:	38 01 c3 50 	mvu r1,0xc350
     828:	58 81 00 10 	sw (r4+16),r1
    timer0->counter1 = 0;
     82c:	58 82 00 14 	sw (r4+20),r2
    timer0->tcr1 = TIMER_EN;
     830:	34 01 00 08 	mvi r1,8
     834:	58 81 00 0c 	sw (r4+12),r1

    do {
        //halt();
         tcr = timer0->tcr1;
     838:	28 81 00 0c 	lw r1,(r4+12)
     } while ( ! (tcr & TIMER_TRIG) );
     83c:	20 21 00 01 	andi r1,r1,0x1
     840:	44 20 ff fe 	be r1,r0,838 <I2CreadByte+0x88>
		i2c0->wxrx = data;
	}
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     844:	38 c1 00 80 	ori r1,r6,0x80
     848:	58 a1 00 08 	sw (r5+8),r1
		}
	}
    //----------------------------------------------------------------
	void i2c_init()
	{
	 i2c0->ucr = I2C_ENA;  
     84c:	34 03 00 08 	mvi r3,8
     850:	58 a3 00 00 	sw (r5+0),r3
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     854:	34 02 03 e8 	mvi r2,1000
     858:	58 82 00 10 	sw (r4+16),r2
    timer0->counter1 = 0;
     85c:	34 01 00 00 	mvi r1,0
     860:	58 81 00 14 	sw (r4+20),r1
    timer0->tcr1 = TIMER_EN;
     864:	58 83 00 0c 	sw (r4+12),r3

    do {
        //halt();
         tcr = timer0->tcr1;
     868:	28 81 00 0c 	lw r1,(r4+12)
     } while ( ! (tcr & TIMER_TRIG) );
     86c:	20 21 00 01 	andi r1,r1,0x1
     870:	44 20 ff fe 	be r1,r0,868 <I2CreadByte+0xb8>
		  //gpio0->out = 0x65;
		  //Lectura de la informacion otorgada por el esclavo
      i2c_putrwaddr(I2C_READ, address);
      i2c_init();  
      nsleep(20);
      i2c0->ucr = 0x00;
     874:	34 01 00 00 	mvi r1,0
     878:	58 a1 00 00 	sw (r5+0),r1
	  while ( (i2c0->ucr & I2C_BUSY) && (!(i2c0->ucr & I2C_ERROR)));
     87c:	28 a1 00 00 	lw r1,(r5+0)
     880:	20 21 00 01 	andi r1,r1,0x1
     884:	44 20 00 04 	be r1,r0,894 <I2CreadByte+0xe4>
     888:	28 a1 00 00 	lw r1,(r5+0)
     88c:	20 21 00 02 	andi r1,r1,0x2
     890:	44 20 ff fb 	be r1,r0,87c <I2CreadByte+0xcc>
		  //gpio0->oe  = 0x000000ff;
		  //gpio0->out = 0x66;
	  return i2c0-> wxrx;     
     894:	28 a1 00 04 	lw r1,(r5+4)
    }
     898:	20 21 00 ff 	andi r1,r1,0xff
     89c:	c3 a0 00 00 	ret

000008a0 <I2CreadBytes>:
    //----------------------------------------------------------------
    void I2CreadBytes(uint8_t address, uint8_t subaddress, int *dest, uint8_t count)
    {
     8a0:	37 9c ff fc 	addi sp,sp,-4
     8a4:	5b 8b 00 04 	sw (sp+4),r11
		i2c0->wxrx = data;
	}
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     8a8:	78 05 00 00 	mvhi r5,0x0
     8ac:	38 a5 40 14 	ori r5,r5,0x4014
     8b0:	28 a7 00 00 	lw r7,(r5+0)
		  //gpio0->out = 0x66;
	  return i2c0-> wxrx;     
    }
    //----------------------------------------------------------------
    void I2CreadBytes(uint8_t address, uint8_t subaddress, int *dest, uint8_t count)
    {
     8b4:	20 28 00 ff 	andi r8,r1,0xff

	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
     8b8:	78 01 00 00 	mvhi r1,0x0
		i2c0->wxrx = data;
	}
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     8bc:	58 e8 00 08 	sw (r7+8),r8
		  //gpio0->out = 0x66;
	  return i2c0-> wxrx;     
    }
    //----------------------------------------------------------------
    void I2CreadBytes(uint8_t address, uint8_t subaddress, int *dest, uint8_t count)
    {
     8c0:	20 42 00 ff 	andi r2,r2,0xff

	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
     8c4:	38 21 40 26 	ori r1,r1,0x4026
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     8c8:	78 05 00 00 	mvhi r5,0x0

	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
     8cc:	30 22 00 00 	sb (r1+0),r2
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     8d0:	38 a5 40 04 	ori r5,r5,0x4004
	static uint8_t data;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
		while ((i2c0->ucr & !I2C_BUSY));
     8d4:	28 e1 00 00 	lw r1,(r7+0)
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     8d8:	28 a6 00 00 	lw r6,(r5+0)
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
		while ((i2c0->ucr & !I2C_BUSY));
		i2c0->wxrx = data;
     8dc:	58 e2 00 04 	sw (r7+4),r2
		}
	}
    //----------------------------------------------------------------
	void i2c_init()
	{
	 i2c0->ucr = I2C_ENA;  
     8e0:	34 05 00 08 	mvi r5,8
     8e4:	58 e5 00 00 	sw (r7+0),r5
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     8e8:	34 01 03 e8 	mvi r1,1000
     8ec:	58 c1 00 10 	sw (r6+16),r1
    timer0->counter1 = 0;
     8f0:	34 02 00 00 	mvi r2,0
     8f4:	58 c2 00 14 	sw (r6+20),r2
    timer0->tcr1 = TIMER_EN;
     8f8:	58 c5 00 0c 	sw (r6+12),r5
		  //gpio0->out = 0x66;
	  return i2c0-> wxrx;     
    }
    //----------------------------------------------------------------
    void I2CreadBytes(uint8_t address, uint8_t subaddress, int *dest, uint8_t count)
    {
     8fc:	20 84 00 ff 	andi r4,r4,0xff
    timer0->counter1 = 0;
    timer0->tcr1 = TIMER_EN;

    do {
        //halt();
         tcr = timer0->tcr1;
     900:	28 c1 00 0c 	lw r1,(r6+12)
     } while ( ! (tcr & TIMER_TRIG) );
     904:	20 21 00 01 	andi r1,r1,0x1
     908:	44 20 ff fe 	be r1,r0,900 <I2CreadBytes+0x60>
    {
		i2c_putrwaddr (I2C_WRITE, address);
		i2c_putdata(subaddress);
		i2c_init(); 
		nsleep(20);
		i2c0->ucr = 0x00;
     90c:	34 01 00 00 	mvi r1,0
     910:	58 e1 00 00 	sw (r7+0),r1
		  //Pausa para que el esclavo procese la orden
		while((i2c0->ucr & I2C_BUSY));
     914:	28 e1 00 00 	lw r1,(r7+0)
     918:	20 22 00 01 	andi r2,r1,0x1
     91c:	5c 40 ff fe 	bne r2,r0,914 <I2CreadBytes+0x74>
void msleep(uint32_t msec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000)*msec;
     920:	38 01 c3 50 	mvu r1,0xc350
     924:	58 c1 00 10 	sw (r6+16),r1
    timer0->counter1 = 0;
     928:	58 c2 00 14 	sw (r6+20),r2
    timer0->tcr1 = TIMER_EN;
     92c:	34 01 00 08 	mvi r1,8
     930:	58 c1 00 0c 	sw (r6+12),r1

    do {
        //halt();
         tcr = timer0->tcr1;
     934:	28 c1 00 0c 	lw r1,(r6+12)
     } while ( ! (tcr & TIMER_TRIG) );
     938:	20 21 00 01 	andi r1,r1,0x1
     93c:	44 20 ff fe 	be r1,r0,934 <I2CreadBytes+0x94>
		i2c0->wxrx = data;
	}
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     940:	39 01 00 80 	ori r1,r8,0x80
     944:	58 e1 00 08 	sw (r7+8),r1
		}
	}
    //----------------------------------------------------------------
	void i2c_init()
	{
	 i2c0->ucr = I2C_ENA;  
     948:	34 01 00 08 	mvi r1,8
     94c:	58 e1 00 00 	sw (r7+0),r1
		  //Lectura de la informacion otorgada por el esclavo
		i2c_putrwaddr(I2C_READ, address);
		i2c_init();  
		//-------------------------------------
      uint8_t i;
		for (i=0; i<count;)
     950:	44 80 00 19 	be r4,r0,9b4 <I2CreadBytes+0x114>
     954:	34 05 00 00 	mvi r5,0
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
    timer0->counter1 = 0;
    timer0->tcr1 = TIMER_EN;
     958:	b8 20 58 00 	mv r11,r1
		  //Lectura de la informacion otorgada por el esclavo
		i2c_putrwaddr(I2C_READ, address);
		i2c_init();  
		//-------------------------------------
      uint8_t i;
		for (i=0; i<count;)
     95c:	34 88 ff ff 	addi r8,r4,-1
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     960:	34 0a 03 e8 	mvi r10,1000
    timer0->counter1 = 0;
     964:	b8 a0 48 00 	mv r9,r5
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     968:	58 ca 00 10 	sw (r6+16),r10
    timer0->counter1 = 0;
     96c:	58 c9 00 14 	sw (r6+20),r9
    timer0->tcr1 = TIMER_EN;
     970:	58 cb 00 0c 	sw (r6+12),r11

    do {
        //halt();
         tcr = timer0->tcr1;
     974:	28 c1 00 0c 	lw r1,(r6+12)
     } while ( ! (tcr & TIMER_TRIG) );
     978:	20 21 00 01 	andi r1,r1,0x1
     97c:	44 20 ff fe 	be r1,r0,974 <I2CreadBytes+0xd4>
		//-------------------------------------
      uint8_t i;
		for (i=0; i<count;)
		{
			nsleep(20);
         if (i==count-1) i2c0->ucr = 0x00;
     980:	44 a8 00 10 	be r5,r8,9c0 <I2CreadBytes+0x120>

			while ( (i2c0->ucr & I2C_BUSY) && (!(i2c0->ucr & I2C_ERROR)));
     984:	28 e1 00 00 	lw r1,(r7+0)
     988:	20 21 00 01 	andi r1,r1,0x1
     98c:	44 20 00 04 	be r1,r0,99c <I2CreadBytes+0xfc>
     990:	28 e1 00 00 	lw r1,(r7+0)
     994:	20 21 00 02 	andi r1,r1,0x2
     998:	44 20 ff fb 	be r1,r0,984 <I2CreadBytes+0xe4>
            dest[i++] = i2c0-> wxrx;
     99c:	28 e1 00 04 	lw r1,(r7+4)
     9a0:	34 a5 00 01 	addi r5,r5,1
		  //Lectura de la informacion otorgada por el esclavo
		i2c_putrwaddr(I2C_READ, address);
		i2c_init();  
		//-------------------------------------
      uint8_t i;
		for (i=0; i<count;)
     9a4:	20 a2 00 ff 	andi r2,r5,0xff
		{
			nsleep(20);
         if (i==count-1) i2c0->ucr = 0x00;

			while ( (i2c0->ucr & I2C_BUSY) && (!(i2c0->ucr & I2C_ERROR)));
            dest[i++] = i2c0-> wxrx;
     9a8:	58 61 00 00 	sw (r3+0),r1
     9ac:	34 63 00 04 	addi r3,r3,4
		  //Lectura de la informacion otorgada por el esclavo
		i2c_putrwaddr(I2C_READ, address);
		i2c_init();  
		//-------------------------------------
      uint8_t i;
		for (i=0; i<count;)
     9b0:	54 82 ff ee 	bgu r4,r2,968 <I2CreadBytes+0xc8>

			while ( (i2c0->ucr & I2C_BUSY) && (!(i2c0->ucr & I2C_ERROR)));
            dest[i++] = i2c0-> wxrx;
		}
		//-------------------------------------
    }
     9b4:	2b 8b 00 04 	lw r11,(sp+4)
     9b8:	37 9c 00 04 	addi sp,sp,4
     9bc:	c3 a0 00 00 	ret
		//-------------------------------------
      uint8_t i;
		for (i=0; i<count;)
		{
			nsleep(20);
         if (i==count-1) i2c0->ucr = 0x00;
     9c0:	34 01 00 00 	mvi r1,0
     9c4:	58 e1 00 00 	sw (r7+0),r1
     9c8:	e3 ff ff ef 	bi 984 <I2CreadBytes+0xe4>

000009cc <I2CwriteByte>:
		}
		//-------------------------------------
    }
    //----------------------------------------------------------------
	void I2CwriteByte(uint8_t address, uint8_t subaddress, uint8_t data)
    {
     9cc:	78 04 00 00 	mvhi r4,0x0
     9d0:	38 84 40 14 	ori r4,r4,0x4014
     9d4:	28 86 00 00 	lw r6,(r4+0)
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     9d8:	78 05 00 00 	mvhi r5,0x0
		}
		//-------------------------------------
    }
    //----------------------------------------------------------------
	void I2CwriteByte(uint8_t address, uint8_t subaddress, uint8_t data)
    {
     9dc:	20 21 00 ff 	andi r1,r1,0xff
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     9e0:	38 a5 40 04 	ori r5,r5,0x4004
		i2c0->wxrx = data;
	}
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     9e4:	58 c1 00 08 	sw (r6+8),r1
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     9e8:	28 a5 00 00 	lw r5,(r5+0)
		}
		//-------------------------------------
    }
    //----------------------------------------------------------------
	void I2CwriteByte(uint8_t address, uint8_t subaddress, uint8_t data)
    {
     9ec:	20 42 00 ff 	andi r2,r2,0xff
      i2c_putrwaddr (I2C_WRITE, address);
      i2c0->wxrx = subaddress;
     9f0:	58 c2 00 04 	sw (r6+4),r2
		}
	}
    //----------------------------------------------------------------
	void i2c_init()
	{
	 i2c0->ucr = I2C_ENA;  
     9f4:	34 04 00 08 	mvi r4,8
     9f8:	58 c4 00 00 	sw (r6+0),r4
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     9fc:	34 01 03 e8 	mvi r1,1000
     a00:	58 a1 00 10 	sw (r5+16),r1
    timer0->counter1 = 0;
     a04:	34 02 00 00 	mvi r2,0
     a08:	58 a2 00 14 	sw (r5+20),r2
    timer0->tcr1 = TIMER_EN;
     a0c:	58 a4 00 0c 	sw (r5+12),r4
		}
		//-------------------------------------
    }
    //----------------------------------------------------------------
	void I2CwriteByte(uint8_t address, uint8_t subaddress, uint8_t data)
    {
     a10:	20 63 00 ff 	andi r3,r3,0xff
    timer0->counter1 = 0;
    timer0->tcr1 = TIMER_EN;

    do {
        //halt();
         tcr = timer0->tcr1;
     a14:	28 a1 00 0c 	lw r1,(r5+12)
     } while ( ! (tcr & TIMER_TRIG) );
     a18:	20 21 00 01 	andi r1,r1,0x1
     a1c:	44 20 ff fe 	be r1,r0,a14 <I2CwriteByte+0x48>
      i2c_putrwaddr (I2C_WRITE, address);
      i2c0->wxrx = subaddress;
      i2c_init();
      nsleep(20);
	  //Para verificar cuando se valida la condicion
      while((i2c0->ucr & I2C_BUSY));
     a20:	28 c1 00 00 	lw r1,(r6+0)
     a24:	20 22 00 01 	andi r2,r1,0x1
     a28:	5c 40 ff fe 	bne r2,r0,a20 <I2CwriteByte+0x54>
	   //gpio0->oe  = 0x000000ff;
	   //gpio0->out = 0xAA;
      i2c0->wxrx = data;
     a2c:	58 c3 00 04 	sw (r6+4),r3
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     a30:	34 01 03 e8 	mvi r1,1000
     a34:	58 a1 00 10 	sw (r5+16),r1
    timer0->counter1 = 0;
     a38:	58 a2 00 14 	sw (r5+20),r2
    timer0->tcr1 = TIMER_EN;
     a3c:	34 01 00 08 	mvi r1,8
     a40:	58 a1 00 0c 	sw (r5+12),r1

    do {
        //halt();
         tcr = timer0->tcr1;
     a44:	28 a1 00 0c 	lw r1,(r5+12)
     } while ( ! (tcr & TIMER_TRIG) );
     a48:	20 21 00 01 	andi r1,r1,0x1
     a4c:	44 20 ff fe 	be r1,r0,a44 <I2CwriteByte+0x78>
      while((i2c0->ucr & I2C_BUSY));
	   //gpio0->oe  = 0x000000ff;
	   //gpio0->out = 0xAA;
      i2c0->wxrx = data;
      nsleep(20);
	  i2c0->ucr = 0x00;
     a50:	34 01 00 00 	mvi r1,0
     a54:	58 c1 00 00 	sw (r6+0),r1
      while((i2c0->ucr & I2C_BUSY));
     a58:	28 c1 00 00 	lw r1,(r6+0)
     a5c:	20 21 00 01 	andi r1,r1,0x1
     a60:	5c 20 ff fe 	bne r1,r0,a58 <I2CwriteByte+0x8c>
    }
     a64:	c3 a0 00 00 	ret

00000a68 <everloop_putdata_1>:

/***************************************************************************
 * everloop functions
 */
	void everloop_putdata_1(uint8_t data1)
	{
     a68:	78 02 00 00 	mvhi r2,0x0
     a6c:	38 42 40 10 	ori r2,r2,0x4010
     a70:	28 43 00 00 	lw r3,(r2+0)
     a74:	20 21 00 ff 	andi r1,r1,0xff
	  everloop0->prueba_1 = data1;
     a78:	30 61 00 00 	sb (r3+0),r1
	}
     a7c:	c3 a0 00 00 	ret

00000a80 <everloop_putdata_2>:

	void everloop_putdata_2(uint8_t data2)
	{
     a80:	78 02 00 00 	mvhi r2,0x0
     a84:	38 42 40 10 	ori r2,r2,0x4010
     a88:	28 43 00 00 	lw r3,(r2+0)
     a8c:	20 21 00 ff 	andi r1,r1,0xff
	  everloop0->prueba_2 = data2;
     a90:	30 61 00 01 	sb (r3+1),r1
	}
     a94:	c3 a0 00 00 	ret

00000a98 <everloop_putdata_3>:

	void everloop_putdata_3(uint8_t data3)
	{
     a98:	78 02 00 00 	mvhi r2,0x0
     a9c:	38 42 40 10 	ori r2,r2,0x4010
     aa0:	28 43 00 00 	lw r3,(r2+0)
     aa4:	20 21 00 ff 	andi r1,r1,0xff
	  everloop0->prueba_3 = data3;
     aa8:	30 61 00 02 	sb (r3+2),r1
	}
     aac:	c3 a0 00 00 	ret

00000ab0 <spi_init>:
/***************************************************************************
 * SPI Functions
 */
		//---------------------------------------------------------------------
	void spi_init()
	{
     ab0:	78 01 00 00 	mvhi r1,0x0
     ab4:	38 21 40 0c 	ori r1,r1,0x400c
     ab8:	28 23 00 00 	lw r3,(r1+0)
     abc:	34 02 00 04 	mvi r2,4
		spi0-> ucr = SPI_ENA;
		//nsleep(1); //Valido para cuando la frecuencia del reloj del spi es bastante rapida
		spi0-> ucr = !SPI_ENA;
     ac0:	34 01 00 00 	mvi r1,0
 * SPI Functions
 */
		//---------------------------------------------------------------------
	void spi_init()
	{
		spi0-> ucr = SPI_ENA;
     ac4:	58 62 00 00 	sw (r3+0),r2
		//nsleep(1); //Valido para cuando la frecuencia del reloj del spi es bastante rapida
		spi0-> ucr = !SPI_ENA;
     ac8:	58 61 00 00 	sw (r3+0),r1
	}
     acc:	c3 a0 00 00 	ret

00000ad0 <spi_getchar>:
		//---------------------------------------------------------------------
	uint8_t spi_getchar()
	{   
     ad0:	78 01 00 00 	mvhi r1,0x0
     ad4:	38 21 40 0c 	ori r1,r1,0x400c
     ad8:	28 22 00 00 	lw r2,(r1+0)
     adc:	28 41 00 00 	lw r1,(r2+0)
     ae0:	20 21 00 01 	andi r1,r1,0x1
     ae4:	5c 20 ff fe 	bne r1,r0,adc <spi_getchar+0xc>
		  while (spi0->ucr & SPI_BUSY) ;
		  return spi0->rxtx;
     ae8:	28 41 00 04 	lw r1,(r2+4)
	}
     aec:	20 21 00 ff 	andi r1,r1,0xff
     af0:	c3 a0 00 00 	ret

00000af4 <spi_not_ena>:
		//---------------------------------------------------------------------
	void spi_not_ena()
	{
     af4:	78 01 00 00 	mvhi r1,0x0
     af8:	38 21 40 0c 	ori r1,r1,0x400c
     afc:	28 23 00 00 	lw r3,(r1+0)
     b00:	34 02 00 00 	mvi r2,0
     b04:	58 62 00 00 	sw (r3+0),r2
		spi0->ucr = !SPI_ENA;
	}
     b08:	c3 a0 00 00 	ret

00000b0c <spi_sleep>:
		//---------------------------------------------------------------------
	void spi_sleep()
	{
     b0c:	78 01 00 00 	mvhi r1,0x0
     b10:	38 21 40 0c 	ori r1,r1,0x400c
     b14:	28 22 00 00 	lw r2,(r1+0)
     b18:	28 41 00 00 	lw r1,(r2+0)
     b1c:	20 21 00 01 	andi r1,r1,0x1
     b20:	5c 20 ff fe 	bne r1,r0,b18 <spi_sleep+0xc>
		while ((spi0->ucr & SPI_BUSY));
		spi0->ucr = 0x00;
     b24:	58 41 00 00 	sw (r2+0),r1
	}
     b28:	c3 a0 00 00 	ret

00000b2c <spi_continue>:
		//---------------------------------------------------------------------
	void spi_continue(uint8_t a)
	{
     b2c:	20 23 00 ff 	andi r3,r1,0xff
		if(a) {
     b30:	5c 60 00 06 	bne r3,r0,b48 <spi_continue+0x1c>
		spi0->ucr = SPI_CONT;
		}
		else {
		spi0->ucr = !SPI_CONT;
     b34:	78 01 00 00 	mvhi r1,0x0
     b38:	38 21 40 0c 	ori r1,r1,0x400c
     b3c:	28 22 00 00 	lw r2,(r1+0)
     b40:	58 43 00 00 	sw (r2+0),r3
     b44:	c3 a0 00 00 	ret
	}
		//---------------------------------------------------------------------
	void spi_continue(uint8_t a)
	{
		if(a) {
		spi0->ucr = SPI_CONT;
     b48:	78 01 00 00 	mvhi r1,0x0
     b4c:	38 21 40 0c 	ori r1,r1,0x400c
     b50:	28 23 00 00 	lw r3,(r1+0)
     b54:	34 02 00 08 	mvi r2,8
     b58:	58 62 00 00 	sw (r3+0),r2
     b5c:	c3 a0 00 00 	ret

00000b60 <spi_cont_d>:
		spi0->ucr = !SPI_CONT;
		}
	}
		//---------------------------------------------------------------------
	void spi_cont_d(char data)
	{
     b60:	78 02 00 00 	mvhi r2,0x0
     b64:	38 42 40 0c 	ori r2,r2,0x400c
     b68:	28 43 00 00 	lw r3,(r2+0)
     b6c:	34 02 00 08 	mvi r2,8
     b70:	20 21 00 ff 	andi r1,r1,0xff
		spi0->ucr = SPI_CONT;
     b74:	58 62 00 00 	sw (r3+0),r2
		spi0->rxtx = data;
     b78:	58 61 00 04 	sw (r3+4),r1
	}
     b7c:	c3 a0 00 00 	ret

00000b80 <spi_putchar>:
		//---------------------------------------------------------------------
	void spi_putchar(char c)
	{
     b80:	78 02 00 00 	mvhi r2,0x0
     b84:	38 42 40 0c 	ori r2,r2,0x400c
     b88:	28 42 00 00 	lw r2,(r2+0)
     b8c:	20 23 00 ff 	andi r3,r1,0xff
		  while (spi0->ucr & SPI_BUSY) ;
     b90:	28 41 00 00 	lw r1,(r2+0)
     b94:	20 21 00 01 	andi r1,r1,0x1
     b98:	5c 20 ff fe 	bne r1,r0,b90 <spi_putchar+0x10>
		  spi0->rxtx = c;
     b9c:	58 43 00 04 	sw (r2+4),r3
	}
     ba0:	c3 a0 00 00 	ret

00000ba4 <spi_putstr>:
		//---------------------------------------------------------------------
	void spi_putstr(char *str)
	{
     ba4:	b8 20 10 00 	mv r2,r1
		  char *c = str;
		  while(*c) {
     ba8:	40 21 00 00 	lbu r1,(r1+0)
     bac:	44 20 00 0f 	be r1,r0,be8 <spi_putstr+0x44>
	}
		//---------------------------------------------------------------------
	void spi_continue(uint8_t a)
	{
		if(a) {
		spi0->ucr = SPI_CONT;
     bb0:	78 01 00 00 	mvhi r1,0x0
     bb4:	38 21 40 0c 	ori r1,r1,0x400c
     bb8:	28 23 00 00 	lw r3,(r1+0)
     bbc:	b8 40 20 00 	mv r4,r2
     bc0:	34 06 00 08 	mvi r6,8
     bc4:	58 66 00 00 	sw (r3+0),r6
	void spi_putstr(char *str)
	{
		  char *c = str;
		  while(*c) {
					spi_continue(0x01);
		      spi_putchar(*c);
     bc8:	40 85 00 00 	lbu r5,(r4+0)
		spi0->rxtx = data;
	}
		//---------------------------------------------------------------------
	void spi_putchar(char c)
	{
		  while (spi0->ucr & SPI_BUSY) ;
     bcc:	28 61 00 00 	lw r1,(r3+0)
     bd0:	20 22 00 01 	andi r2,r1,0x1
     bd4:	5c 40 ff fe 	bne r2,r0,bcc <spi_putstr+0x28>
		  spi0->rxtx = c;
     bd8:	58 65 00 04 	sw (r3+4),r5
	{
		  char *c = str;
		  while(*c) {
					spi_continue(0x01);
		      spi_putchar(*c);
		      c++;
     bdc:	34 84 00 01 	addi r4,r4,1
	}
		//---------------------------------------------------------------------
	void spi_putstr(char *str)
	{
		  char *c = str;
		  while(*c) {
     be0:	40 81 00 00 	lbu r1,(r4+0)
     be4:	5c 22 ff f8 	bne r1,r2,bc4 <spi_putstr+0x20>
     be8:	c3 a0 00 00 	ret

00000bec <setmotor1>:
/***************************************************************************
 * PWM Functions
 */
    //----------------------------------------------------------------
	uint8_t setmotor1(uint8_t bit)
	{
     bec:	78 02 00 00 	mvhi r2,0x0
     bf0:	38 42 40 18 	ori r2,r2,0x4018
     bf4:	28 44 00 00 	lw r4,(r2+0)
     bf8:	20 23 00 ff 	andi r3,r1,0xff
		uint8_t val0=bit;
		pwm0->duty_m1=val0;
		return val0;
	
	}
     bfc:	b8 60 08 00 	mv r1,r3
 */
    //----------------------------------------------------------------
	uint8_t setmotor1(uint8_t bit)
	{
		uint8_t val0=bit;
		pwm0->duty_m1=val0;
     c00:	58 83 00 04 	sw (r4+4),r3
		return val0;
	
	}
     c04:	c3 a0 00 00 	ret

00000c08 <setmotor2>:
    //----------------------------------------------------------------
	uint8_t setmotor2(uint8_t bit)
	{
     c08:	78 02 00 00 	mvhi r2,0x0
     c0c:	38 42 40 18 	ori r2,r2,0x4018
     c10:	28 44 00 00 	lw r4,(r2+0)
     c14:	20 23 00 ff 	andi r3,r1,0xff
		uint8_t val0=bit;
		pwm0-> duty_m2=val0;
		return val0;
	}
     c18:	b8 60 08 00 	mv r1,r3
	}
    //----------------------------------------------------------------
	uint8_t setmotor2(uint8_t bit)
	{
		uint8_t val0=bit;
		pwm0-> duty_m2=val0;
     c1c:	58 83 00 08 	sw (r4+8),r3
		return val0;
	}
     c20:	c3 a0 00 00 	ret

00000c24 <setmotor3>:
    //----------------------------------------------------------------
	uint8_t setmotor3(uint8_t bit)
	{
     c24:	78 02 00 00 	mvhi r2,0x0
     c28:	38 42 40 18 	ori r2,r2,0x4018
     c2c:	28 44 00 00 	lw r4,(r2+0)
     c30:	20 23 00 ff 	andi r3,r1,0xff
		uint8_t val0=bit;
		pwm0-> duty_m3=val0;
		return val0;
	}
     c34:	b8 60 08 00 	mv r1,r3
	}
    //----------------------------------------------------------------
	uint8_t setmotor3(uint8_t bit)
	{
		uint8_t val0=bit;
		pwm0-> duty_m3=val0;
     c38:	58 83 00 0c 	sw (r4+12),r3
		return val0;
	}
     c3c:	c3 a0 00 00 	ret

00000c40 <setmotor4>:
    //----------------------------------------------------------------
	uint8_t setmotor4(uint8_t bit)
	{
     c40:	78 02 00 00 	mvhi r2,0x0
     c44:	38 42 40 18 	ori r2,r2,0x4018
     c48:	28 44 00 00 	lw r4,(r2+0)
     c4c:	20 23 00 ff 	andi r3,r1,0xff
		uint8_t val0=bit;
		pwm0-> duty_m4=val0;
		return val0;
	}
     c50:	b8 60 08 00 	mv r1,r3
	}
    //----------------------------------------------------------------
	uint8_t setmotor4(uint8_t bit)
	{
		uint8_t val0=bit;
		pwm0-> duty_m4=val0;
     c54:	58 83 00 10 	sw (r4+16),r3
		return val0;
	}
     c58:	c3 a0 00 00 	ret

00000c5c <pwm_init>:
    //----------------------------------------------------------------
	void pwm_init(void)
	{
     c5c:	78 01 00 00 	mvhi r1,0x0
     c60:	38 21 40 18 	ori r1,r1,0x4018
     c64:	28 23 00 00 	lw r3,(r1+0)
     c68:	34 02 00 01 	mvi r2,1
     c6c:	58 62 00 00 	sw (r3+0),r2
			pwm0->enable=TRUE;
	}
     c70:	c3 a0 00 00 	ret

00000c74 <set_pwm>:
    //----------------------------------------------------------------
	void set_pwm(uint8_t state)
	{
     c74:	20 23 00 ff 	andi r3,r1,0xff
		if(state == HIGH){
     c78:	34 01 00 01 	mvi r1,1
     c7c:	44 61 00 07 	be r3,r1,c98 <set_pwm+0x24>
			pwm0->enable=TRUE;
		}else if(state ==LOW){
     c80:	5c 60 00 05 	bne r3,r0,c94 <set_pwm+0x20>
			pwm0->enable=FALSE;
     c84:	78 01 00 00 	mvhi r1,0x0
     c88:	38 21 40 18 	ori r1,r1,0x4018
     c8c:	28 22 00 00 	lw r2,(r1+0)
     c90:	58 43 00 00 	sw (r2+0),r3
     c94:	c3 a0 00 00 	ret
	}
    //----------------------------------------------------------------
	void set_pwm(uint8_t state)
	{
		if(state == HIGH){
			pwm0->enable=TRUE;
     c98:	78 01 00 00 	mvhi r1,0x0
     c9c:	38 21 40 18 	ori r1,r1,0x4018
     ca0:	28 22 00 00 	lw r2,(r1+0)
     ca4:	58 43 00 00 	sw (r2+0),r3
     ca8:	c3 a0 00 00 	ret

00000cac <estimateDiv64To32>:
the exact quotient q is larger than 32 bits, the maximum positive 32-bit
unsigned integer is returned.
-------------------------------------------------------------------------------
*/
static bits32 estimateDiv64To32( bits32 a0, bits32 a1, bits32 b )
{
     cac:	37 9c ff f0 	addi sp,sp,-16
     cb0:	5b 8b 00 10 	sw (sp+16),r11
     cb4:	5b 8c 00 0c 	sw (sp+12),r12
     cb8:	5b 8d 00 08 	sw (sp+8),r13
     cbc:	5b 8e 00 04 	sw (sp+4),r14
     cc0:	b8 20 38 00 	mv r7,r1
     cc4:	b8 60 60 00 	mv r12,r3
     cc8:	b8 40 68 00 	mv r13,r2
    bits32 b0, b1;
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
     ccc:	54 61 00 08 	bgu r3,r1,cec <estimateDiv64To32+0x40>
     cd0:	34 01 ff ff 	mvi r1,-1
    }
    rem0 = ( rem0<<16 ) | ( rem1>>16 );
    z |= ( b0<<16 <= rem0 ) ? 0xFFFF : rem0 / b0;
    return z;

}
     cd4:	2b 8b 00 10 	lw r11,(sp+16)
     cd8:	2b 8c 00 0c 	lw r12,(sp+12)
     cdc:	2b 8d 00 08 	lw r13,(sp+8)
     ce0:	2b 8e 00 04 	lw r14,(sp+4)
     ce4:	37 9c 00 10 	addi sp,sp,16
     ce8:	c3 a0 00 00 	ret
    bits32 b0, b1;
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
     cec:	00 69 00 10 	srui r9,r3,16
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
     cf0:	3d 2e 00 10 	sli r14,r9,16
     cf4:	55 c1 00 2f 	bgu r14,r1,db0 <estimateDiv64To32+0x104>
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
     cf8:	20 61 ff ff 	andi r1,r3,0xffff
     cfc:	3c 22 00 10 	sli r2,r1,16
     d00:	34 0b 00 00 	mvi r11,0
     d04:	78 08 ff ff 	mvhi r8,0xffff
     d08:	c8 41 28 00 	sub r5,r2,r1
     d0c:	39 08 00 00 	ori r8,r8,0x0
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
     d10:	21 2a ff ff 	andi r10,r9,0xffff
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
     d14:	b9 60 20 00 	mv r4,r11
     d18:	38 06 ff ff 	mvu r6,0xffff
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
     d1c:	3c a2 00 10 	sli r2,r5,16
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
     d20:	89 46 08 00 	mul r1,r10,r6
    zMiddleA <<= 16;
    z1 += zMiddleA;
     d24:	b4 44 18 00 	add r3,r2,r4
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
     d28:	00 a5 00 10 	srui r5,r5,16
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
     d2c:	f4 43 10 00 	cmpgu r2,r2,r3
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
     d30:	c8 e1 08 00 	sub r1,r7,r1
     d34:	c8 25 08 00 	sub r1,r1,r5
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
     d38:	f4 6d 20 00 	cmpgu r4,r3,r13
     d3c:	c8 22 08 00 	sub r1,r1,r2
     d40:	c8 24 08 00 	sub r1,r1,r4
     d44:	c8 2b 28 00 	sub r5,r1,r11
INLINE void
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
     d48:	c9 a3 10 00 	sub r2,r13,r3
    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    mul32To64( b, z, &term0, &term1 );
    sub64( a0, a1, term0, term1, &rem0, &rem1 );
    while ( ( (sbits32) rem0 ) < 0 ) {
     d4c:	4c a0 00 0d 	bge r5,r0,d80 <estimateDiv64To32+0xd4>
     d50:	78 07 ff ff 	mvhi r7,0xffff
     d54:	3d 83 00 10 	sli r3,r12,16
        z -= 0x10000;
     d58:	38 e7 00 00 	ori r7,r7,0x0
 add64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{
    bits32 z1;

    z1 = a1 + b1;
     d5c:	b4 43 30 00 	add r6,r2,r3
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
     d60:	f4 46 08 00 	cmpgu r1,r2,r6
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    mul32To64( b, z, &term0, &term1 );
    sub64( a0, a1, term0, term1, &rem0, &rem1 );
    while ( ( (sbits32) rem0 ) < 0 ) {
        z -= 0x10000;
     d64:	b5 07 40 00 	add r8,r8,r7
{
    bits32 z1;

    z1 = a1 + b1;
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
     d68:	b4 29 08 00 	add r1,r1,r9
     d6c:	b4 a1 28 00 	add r5,r5,r1
    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    mul32To64( b, z, &term0, &term1 );
    sub64( a0, a1, term0, term1, &rem0, &rem1 );
    while ( ( (sbits32) rem0 ) < 0 ) {
     d70:	b8 c0 10 00 	mv r2,r6
     d74:	4c a0 00 02 	bge r5,r0,d7c <estimateDiv64To32+0xd0>
     d78:	e3 ff ff f9 	bi d5c <estimateDiv64To32+0xb0>
     d7c:	b8 c0 10 00 	mv r2,r6
        z -= 0x10000;
        b1 = b<<16;
        add64( rem0, rem1, b0, b1, &rem0, &rem1 );
    }
    rem0 = ( rem0<<16 ) | ( rem1>>16 );
     d80:	00 42 00 10 	srui r2,r2,16
     d84:	3c a1 00 10 	sli r1,r5,16
     d88:	b8 41 08 00 	or r1,r2,r1
    z |= ( b0<<16 <= rem0 ) ? 0xFFFF : rem0 / b0;
     d8c:	55 c1 00 19 	bgu r14,r1,df0 <estimateDiv64To32+0x144>
     d90:	38 01 ff ff 	mvu r1,0xffff
     d94:	b8 28 08 00 	or r1,r1,r8
    return z;

}
     d98:	2b 8b 00 10 	lw r11,(sp+16)
     d9c:	2b 8c 00 0c 	lw r12,(sp+12)
     da0:	2b 8d 00 08 	lw r13,(sp+8)
     da4:	2b 8e 00 04 	lw r14,(sp+4)
     da8:	37 9c 00 10 	addi sp,sp,16
     dac:	c3 a0 00 00 	ret
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
     db0:	8c 29 08 00 	divu r1,r1,r9
     db4:	20 64 ff ff 	andi r4,r3,0xffff
     db8:	3c 28 00 10 	sli r8,r1,16
     dbc:	21 2a ff ff 	andi r10,r9,0xffff
     dc0:	01 06 00 10 	srui r6,r8,16
     dc4:	21 01 ff ff 	andi r1,r8,0xffff
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
     dc8:	88 86 10 00 	mul r2,r4,r6
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
     dcc:	88 2a 18 00 	mul r3,r1,r10
     dd0:	88 24 20 00 	mul r4,r1,r4
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
     dd4:	b4 43 28 00 	add r5,r2,r3
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
     dd8:	54 65 00 03 	bgu r3,r5,de4 <estimateDiv64To32+0x138>
     ddc:	34 0b 00 00 	mvi r11,0
     de0:	e3 ff ff cf 	bi d1c <estimateDiv64To32+0x70>
     de4:	78 0b 00 01 	mvhi r11,0x1
     de8:	39 6b 00 00 	ori r11,r11,0x0
     dec:	e3 ff ff cc 	bi d1c <estimateDiv64To32+0x70>
        z -= 0x10000;
        b1 = b<<16;
        add64( rem0, rem1, b0, b1, &rem0, &rem1 );
    }
    rem0 = ( rem0<<16 ) | ( rem1>>16 );
    z |= ( b0<<16 <= rem0 ) ? 0xFFFF : rem0 / b0;
     df0:	8c 29 08 00 	divu r1,r1,r9
     df4:	b8 28 08 00 	or r1,r1,r8
     df8:	e3 ff ff e8 	bi d98 <estimateDiv64To32+0xec>

00000dfc <float_raise>:
substitute a result value.  If traps are not implemented, this routine
should be simply `float_exception_flags |= flags;'.
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{
     dfc:	78 02 00 00 	mvhi r2,0x0
     e00:	38 42 40 2c 	ori r2,r2,0x402c
     e04:	28 43 00 00 	lw r3,(r2+0)
     e08:	b8 23 08 00 	or r1,r1,r3
     e0c:	58 41 00 00 	sw (r2+0),r1

    float_exception_flags |= flags;

}
     e10:	c3 a0 00 00 	ret

00000e14 <float32_is_nan>:
Returns 1 if the single-precision floating-point value `a' is a NaN;
otherwise returns 0.
-------------------------------------------------------------------------------
*/
flag float32_is_nan( float32 a )
{
     e14:	78 02 ff 00 	mvhi r2,0xff00
     e18:	38 42 00 00 	ori r2,r2,0x0
     e1c:	b4 21 08 00 	add r1,r1,r1

    return ( 0xFF000000 < (bits32) ( a<<1 ) );

}
     e20:	f4 22 08 00 	cmpgu r1,r1,r2
     e24:	c3 a0 00 00 	ret

00000e28 <float32_is_signaling_nan>:
Returns 1 if the single-precision floating-point value `a' is a signaling
NaN; otherwise returns 0.
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{
     e28:	b8 20 20 00 	mv r4,r1

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     e2c:	00 21 00 16 	srui r1,r1,22
     e30:	34 02 01 fe 	mvi r2,510
     e34:	20 21 01 ff 	andi r1,r1,0x1ff
     e38:	34 03 00 00 	mvi r3,0
     e3c:	44 22 00 03 	be r1,r2,e48 <float32_is_signaling_nan+0x20>

}
     e40:	b8 60 08 00 	mv r1,r3
     e44:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     e48:	78 01 00 3f 	mvhi r1,0x3f
     e4c:	38 21 ff ff 	ori r1,r1,0xffff
     e50:	a0 81 08 00 	and r1,r4,r1
     e54:	7c 23 00 00 	cmpnei r3,r1,0

}
     e58:	b8 60 08 00 	mv r1,r3
     e5c:	c3 a0 00 00 	ret

00000e60 <propagateFloat32NaN>:
is a NaN, and returns the appropriate NaN result.  If either `a' or `b' is a
signaling NaN, the invalid exception is raised.
-------------------------------------------------------------------------------
*/
static float32 propagateFloat32NaN( float32 a, float32 b )
{
     e60:	00 23 00 16 	srui r3,r1,22
     e64:	b8 20 30 00 	mv r6,r1
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     e68:	20 63 01 ff 	andi r3,r3,0x1ff
     e6c:	34 01 01 fe 	mvi r1,510
is a NaN, and returns the appropriate NaN result.  If either `a' or `b' is a
signaling NaN, the invalid exception is raised.
-------------------------------------------------------------------------------
*/
static float32 propagateFloat32NaN( float32 a, float32 b )
{
     e70:	b8 40 20 00 	mv r4,r2
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     e74:	34 07 00 00 	mvi r7,0
     e78:	44 61 00 24 	be r3,r1,f08 <propagateFloat32NaN+0xa8>
    aIsNaN = float32_is_nan( a );
    aIsSignalingNaN = float32_is_signaling_nan( a );
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
    b |= 0x00400000;
     e7c:	00 81 00 16 	srui r1,r4,22
     e80:	34 02 01 fe 	mvi r2,510
     e84:	20 21 01 ff 	andi r1,r1,0x1ff
     e88:	34 03 00 00 	mvi r3,0
     e8c:	44 22 00 1a 	be r1,r2,ef4 <propagateFloat32NaN+0x94>
     e90:	78 05 00 40 	mvhi r5,0x40
     e94:	b8 a0 08 00 	mv r1,r5
    if ( aIsSignalingNaN | bIsSignalingNaN ) float_raise( float_flag_invalid );
     e98:	b8 67 10 00 	or r2,r3,r7
    aIsNaN = float32_is_nan( a );
    aIsSignalingNaN = float32_is_signaling_nan( a );
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
    b |= 0x00400000;
     e9c:	38 21 00 00 	ori r1,r1,0x0
     ea0:	b8 81 18 00 	or r3,r4,r1
    if ( aIsSignalingNaN | bIsSignalingNaN ) float_raise( float_flag_invalid );
     ea4:	44 40 00 06 	be r2,r0,ebc <propagateFloat32NaN+0x5c>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
     ea8:	78 02 00 00 	mvhi r2,0x0
     eac:	38 42 40 2c 	ori r2,r2,0x402c
     eb0:	28 41 00 00 	lw r1,(r2+0)
     eb4:	38 21 00 10 	ori r1,r1,0x10
     eb8:	58 41 00 00 	sw (r2+0),r1
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
    b |= 0x00400000;
    if ( aIsSignalingNaN | bIsSignalingNaN ) float_raise( float_flag_invalid );
    if ( aIsNaN ) {
     ebc:	78 02 ff 00 	mvhi r2,0xff00
     ec0:	38 42 00 00 	ori r2,r2,0x0
     ec4:	b4 c6 08 00 	add r1,r6,r6
     ec8:	50 41 00 05 	bgeu r2,r1,edc <propagateFloat32NaN+0x7c>
        return ( aIsSignalingNaN & bIsNaN ) ? b : a;
     ecc:	b4 84 08 00 	add r1,r4,r4
     ed0:	f4 22 08 00 	cmpgu r1,r1,r2
     ed4:	a0 e1 08 00 	and r1,r7,r1
     ed8:	44 20 00 03 	be r1,r0,ee4 <propagateFloat32NaN+0x84>
    }
    else {
        return b;
    }

}
     edc:	b8 60 08 00 	mv r1,r3
     ee0:	c3 a0 00 00 	ret

    aIsNaN = float32_is_nan( a );
    aIsSignalingNaN = float32_is_signaling_nan( a );
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
     ee4:	38 a5 00 00 	ori r5,r5,0x0
     ee8:	b8 c5 18 00 	or r3,r6,r5
    }
    else {
        return b;
    }

}
     eec:	b8 60 08 00 	mv r1,r3
     ef0:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     ef4:	78 01 00 3f 	mvhi r1,0x3f
     ef8:	38 21 ff ff 	ori r1,r1,0xffff
     efc:	a0 81 08 00 	and r1,r4,r1
     f00:	7c 23 00 00 	cmpnei r3,r1,0
     f04:	e3 ff ff e3 	bi e90 <propagateFloat32NaN+0x30>
     f08:	78 01 00 3f 	mvhi r1,0x3f
     f0c:	38 21 ff ff 	ori r1,r1,0xffff
     f10:	a0 c1 08 00 	and r1,r6,r1
     f14:	7c 27 00 00 	cmpnei r7,r1,0
     f18:	e3 ff ff d9 	bi e7c <propagateFloat32NaN+0x1c>

00000f1c <roundAndPackFloat32>:
The handling of underflow and overflow follows the IEC/IEEE Standard for
Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 roundAndPackFloat32( flag zSign, int16 zExp, bits32 zSig )
{
     f1c:	78 04 00 00 	mvhi r4,0x0
     f20:	38 84 40 28 	ori r4,r4,0x4028
     f24:	28 84 00 00 	lw r4,(r4+0)
     f28:	b8 20 48 00 	mv r9,r1
     f2c:	b8 40 30 00 	mv r6,r2
    flag roundNearestEven;
    int8 roundIncrement, roundBits;
    flag isTiny;

    roundingMode = float_rounding_mode;
    roundNearestEven = roundingMode == float_round_nearest_even;
     f30:	64 88 00 00 	cmpei r8,r4,0
The handling of underflow and overflow follows the IEC/IEEE Standard for
Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 roundAndPackFloat32( flag zSign, int16 zExp, bits32 zSig )
{
     f34:	b8 60 38 00 	mv r7,r3
    flag isTiny;

    roundingMode = float_rounding_mode;
    roundNearestEven = roundingMode == float_round_nearest_even;
    roundIncrement = 0x40;
    if ( ! roundNearestEven ) {
     f38:	34 05 00 40 	mvi r5,64
     f3c:	5d 00 00 07 	bne r8,r0,f58 <roundAndPackFloat32+0x3c>
        if ( roundingMode == float_round_to_zero ) {
     f40:	34 01 00 01 	mvi r1,1
     f44:	44 81 00 37 	be r4,r1,1020 <roundAndPackFloat32+0x104>
            roundIncrement = 0;
        }
        else {
            roundIncrement = 0x7F;
            if ( zSign ) {
     f48:	45 28 00 34 	be r9,r8,1018 <roundAndPackFloat32+0xfc>
                if ( roundingMode == float_round_up ) roundIncrement = 0;
     f4c:	34 01 00 02 	mvi r1,2
     f50:	44 81 00 34 	be r4,r1,1020 <roundAndPackFloat32+0x104>
            }
            else {
                if ( roundingMode == float_round_down ) roundIncrement = 0;
     f54:	34 05 00 7f 	mvi r5,127
            }
        }
    }
    roundBits = zSig & 0x7F;
    if ( 0xFD <= (bits16) zExp ) {
     f58:	20 c2 ff ff 	andi r2,r6,0xffff
     f5c:	34 01 00 fc 	mvi r1,252
            else {
                if ( roundingMode == float_round_down ) roundIncrement = 0;
            }
        }
    }
    roundBits = zSig & 0x7F;
     f60:	20 e3 00 7f 	andi r3,r7,0x7f
     f64:	b4 a7 20 00 	add r4,r5,r7
    if ( 0xFD <= (bits16) zExp ) {
     f68:	50 22 00 05 	bgeu r1,r2,f7c <roundAndPackFloat32+0x60>
        if (    ( 0xFD < zExp )
     f6c:	34 01 00 fd 	mvi r1,253
     f70:	48 c1 00 1e 	bg r6,r1,fe8 <roundAndPackFloat32+0xcc>
     f74:	44 c1 00 1c 	be r6,r1,fe4 <roundAndPackFloat32+0xc8>
                  && ( (sbits32) ( zSig + roundIncrement ) < 0 ) )
           ) {
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
        }
        if ( zExp < 0 ) {
     f78:	48 06 00 2c 	bg r0,r6,1028 <roundAndPackFloat32+0x10c>
            zExp = 0;
            roundBits = zSig & 0x7F;
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
        }
    }
    if ( roundBits ) float_exception_flags |= float_flag_inexact;
     f7c:	5c 60 00 0d 	bne r3,r0,fb0 <roundAndPackFloat32+0x94>
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
     f80:	64 61 00 40 	cmpei r1,r3,64
     f84:	00 82 00 07 	srui r2,r4,7
     f88:	a0 28 08 00 	and r1,r1,r8
     f8c:	a4 20 08 00 	not r1,r1
     f90:	a0 22 10 00 	and r2,r1,r2
    if ( zSig == 0 ) zExp = 0;
     f94:	3c c3 00 17 	sli r3,r6,23
     f98:	5c 40 00 02 	bne r2,r0,fa0 <roundAndPackFloat32+0x84>
     f9c:	b8 40 18 00 	mv r3,r2
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
     fa0:	3d 21 00 1f 	sli r1,r9,31
     fa4:	b4 41 08 00 	add r1,r2,r1
     fa8:	b4 23 08 00 	add r1,r1,r3
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
    if ( zSig == 0 ) zExp = 0;
    return packFloat32( zSign, zExp, zSig );

}
     fac:	c3 a0 00 00 	ret
     fb0:	78 02 00 00 	mvhi r2,0x0
     fb4:	38 42 40 2c 	ori r2,r2,0x402c
            zExp = 0;
            roundBits = zSig & 0x7F;
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
        }
    }
    if ( roundBits ) float_exception_flags |= float_flag_inexact;
     fb8:	28 41 00 00 	lw r1,(r2+0)
     fbc:	38 21 00 01 	ori r1,r1,0x1
     fc0:	58 41 00 00 	sw (r2+0),r1
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
     fc4:	64 61 00 40 	cmpei r1,r3,64
     fc8:	00 82 00 07 	srui r2,r4,7
     fcc:	a0 28 08 00 	and r1,r1,r8
     fd0:	a4 20 08 00 	not r1,r1
     fd4:	a0 22 10 00 	and r2,r1,r2
    if ( zSig == 0 ) zExp = 0;
     fd8:	3c c3 00 17 	sli r3,r6,23
     fdc:	5c 40 ff f1 	bne r2,r0,fa0 <roundAndPackFloat32+0x84>
     fe0:	e3 ff ff ef 	bi f9c <roundAndPackFloat32+0x80>
            }
        }
    }
    roundBits = zSig & 0x7F;
    if ( 0xFD <= (bits16) zExp ) {
        if (    ( 0xFD < zExp )
     fe4:	4c 80 ff e6 	bge r4,r0,f7c <roundAndPackFloat32+0x60>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
     fe8:	78 04 00 00 	mvhi r4,0x0
     fec:	38 84 40 2c 	ori r4,r4,0x402c
     ff0:	28 82 00 00 	lw r2,(r4+0)
             || (    ( zExp == 0xFD )
                  && ( (sbits32) ( zSig + roundIncrement ) < 0 ) )
           ) {
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
     ff4:	3d 23 00 1f 	sli r3,r9,31
     ff8:	78 01 7f 80 	mvhi r1,0x7f80
     ffc:	38 21 00 00 	ori r1,r1,0x0
    1000:	64 a5 00 00 	cmpei r5,r5,0
    1004:	b4 61 18 00 	add r3,r3,r1
    1008:	38 42 00 09 	ori r2,r2,0x9
    100c:	58 82 00 00 	sw (r4+0),r2
    1010:	c8 65 08 00 	sub r1,r3,r5
    1014:	c3 a0 00 00 	ret
            roundIncrement = 0x7F;
            if ( zSign ) {
                if ( roundingMode == float_round_up ) roundIncrement = 0;
            }
            else {
                if ( roundingMode == float_round_down ) roundIncrement = 0;
    1018:	34 01 00 03 	mvi r1,3
    101c:	5c 81 ff ce 	bne r4,r1,f54 <roundAndPackFloat32+0x38>
    1020:	34 05 00 00 	mvi r5,0
    1024:	e3 ff ff cd 	bi f58 <roundAndPackFloat32+0x3c>
           ) {
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
        }
        if ( zExp < 0 ) {
            isTiny =
    1028:	78 01 00 00 	mvhi r1,0x0
    102c:	38 21 40 30 	ori r1,r1,0x4030
    1030:	28 22 00 00 	lw r2,(r1+0)
    1034:	34 03 ff ff 	mvi r3,-1
    1038:	e8 66 18 00 	cmpg r3,r3,r6
    103c:	64 42 00 01 	cmpei r2,r2,1
    1040:	34 0a 00 01 	mvi r10,1
    1044:	b8 43 10 00 	or r2,r2,r3
    1048:	5c 40 00 02 	bne r2,r0,1050 <roundAndPackFloat32+0x134>
    104c:	6c 8a 00 00 	cmpgei r10,r4,0
                   ( float_detect_tininess == float_tininess_before_rounding )
                || ( zExp < -1 )
                || ( zSig + roundIncrement < 0x80000000 );
            shift32RightJamming( zSig, - zExp, &zSig );
    1050:	c8 06 10 00 	sub r2,r0,r6
    bits32 z;

    if ( count == 0 ) {
        z = a;
    }
    else if ( count < 32 ) {
    1054:	34 01 00 1f 	mvi r1,31
    1058:	48 41 00 06 	bg r2,r1,1070 <roundAndPackFloat32+0x154>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    105c:	bc e6 08 00 	sl r1,r7,r6
    1060:	80 e2 10 00 	sru r2,r7,r2
    1064:	7c 21 00 00 	cmpnei r1,r1,0
    1068:	b8 22 38 00 	or r7,r1,r2
    106c:	e0 00 00 02 	bi 1074 <roundAndPackFloat32+0x158>
    }
    else {
        z = ( a != 0 );
    1070:	7c e7 00 00 	cmpnei r7,r7,0
            zExp = 0;
            roundBits = zSig & 0x7F;
    1074:	20 e3 00 7f 	andi r3,r7,0x7f
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
    1078:	7c 61 00 00 	cmpnei r1,r3,0
    107c:	b4 a7 20 00 	add r4,r5,r7
    1080:	a1 41 08 00 	and r1,r10,r1
    1084:	b8 20 30 00 	mv r6,r1
    1088:	44 20 ff bd 	be r1,r0,f7c <roundAndPackFloat32+0x60>
    108c:	78 02 00 00 	mvhi r2,0x0
    1090:	38 42 40 2c 	ori r2,r2,0x402c
    1094:	28 41 00 00 	lw r1,(r2+0)
    1098:	b4 a7 20 00 	add r4,r5,r7
    109c:	34 06 00 00 	mvi r6,0
    10a0:	38 21 00 04 	ori r1,r1,0x4
    10a4:	58 41 00 00 	sw (r2+0),r1
    10a8:	e3 ff ff c4 	bi fb8 <roundAndPackFloat32+0x9c>

000010ac <normalizeRoundAndPackFloat32>:
point exponent.
-------------------------------------------------------------------------------
*/
static float32
 normalizeRoundAndPackFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    10ac:	37 9c ff fc 	addi sp,sp,-4
    10b0:	5b 9d 00 04 	sw (sp+4),ra
    10b4:	b8 20 30 00 	mv r6,r1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    10b8:	38 01 ff ff 	mvu r1,0xffff
    10bc:	b8 40 38 00 	mv r7,r2
    10c0:	b8 60 28 00 	mv r5,r3
        shiftCount += 16;
        a <<= 16;
    10c4:	3c 62 00 10 	sli r2,r3,16
    10c8:	34 04 00 10 	mvi r4,16
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    10cc:	50 23 00 03 	bgeu r1,r3,10d8 <normalizeRoundAndPackFloat32+0x2c>
    10d0:	b8 60 10 00 	mv r2,r3
    10d4:	34 04 00 00 	mvi r4,0
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    10d8:	78 01 00 ff 	mvhi r1,0xff
    10dc:	38 21 ff ff 	ori r1,r1,0xffff
    10e0:	54 41 00 03 	bgu r2,r1,10ec <normalizeRoundAndPackFloat32+0x40>
        shiftCount += 8;
        a <<= 8;
    10e4:	3c 42 00 08 	sli r2,r2,8
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
    10e8:	34 84 00 08 	addi r4,r4,8
    int8 shiftCount;
	
    shiftCount = countLeadingZeros32( zSig ) - 1;
    10ec:	00 42 00 18 	srui r2,r2,24
    10f0:	78 01 00 00 	mvhi r1,0x0
    10f4:	3c 42 00 02 	sli r2,r2,2
    10f8:	38 21 3b 70 	ori r1,r1,0x3b70
    10fc:	b4 22 08 00 	add r1,r1,r2
    1100:	28 23 00 00 	lw r3,(r1+0)
    1104:	34 82 ff ff 	addi r2,r4,-1
    return roundAndPackFloat32( zSign, zExp - shiftCount, zSig<<shiftCount );
    1108:	b8 c0 08 00 	mv r1,r6
static float32
 normalizeRoundAndPackFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    int8 shiftCount;
	
    shiftCount = countLeadingZeros32( zSig ) - 1;
    110c:	b4 43 10 00 	add r2,r2,r3
    return roundAndPackFloat32( zSign, zExp - shiftCount, zSig<<shiftCount );
    1110:	bc a2 18 00 	sl r3,r5,r2
    1114:	c8 e2 10 00 	sub r2,r7,r2
    1118:	fb ff ff 81 	calli f1c <roundAndPackFloat32>

}
    111c:	2b 9d 00 04 	lw ra,(sp+4)
    1120:	37 9c 00 04 	addi sp,sp,4
    1124:	c3 a0 00 00 	ret

00001128 <int32_to_float32>:
the single-precision floating-point format.  The conversion is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 int32_to_float32( int32 a )
{
    1128:	37 9c ff fc 	addi sp,sp,-4
    112c:	5b 9d 00 04 	sw (sp+4),ra
    1130:	b8 20 18 00 	mv r3,r1
    flag zSign;

    if ( a == 0 ) return 0;
    1134:	44 60 00 09 	be r3,r0,1158 <int32_to_float32+0x30>
    if ( a == 0x80000000 ) return packFloat32( 1, 0x9E, 0 );
    1138:	78 01 80 00 	mvhi r1,0x8000
    113c:	38 21 00 00 	ori r1,r1,0x0
    1140:	44 61 00 09 	be r3,r1,1164 <int32_to_float32+0x3c>
    zSign = ( a < 0 );
    1144:	00 61 00 1f 	srui r1,r3,31
    return normalizeRoundAndPackFloat32( zSign, 0x9C, zSign ? - a : a );
    1148:	44 20 00 02 	be r1,r0,1150 <int32_to_float32+0x28>
    114c:	c8 03 18 00 	sub r3,r0,r3
    1150:	34 02 00 9c 	mvi r2,156
    1154:	fb ff ff d6 	calli 10ac <normalizeRoundAndPackFloat32>

}
    1158:	2b 9d 00 04 	lw ra,(sp+4)
    115c:	37 9c 00 04 	addi sp,sp,4
    1160:	c3 a0 00 00 	ret
float32 int32_to_float32( int32 a )
{
    flag zSign;

    if ( a == 0 ) return 0;
    if ( a == 0x80000000 ) return packFloat32( 1, 0x9E, 0 );
    1164:	78 01 cf 00 	mvhi r1,0xcf00
    1168:	38 21 00 00 	ori r1,r1,0x0
    zSign = ( a < 0 );
    return normalizeRoundAndPackFloat32( zSign, 0x9C, zSign ? - a : a );

}
    116c:	2b 9d 00 04 	lw ra,(sp+4)
    1170:	37 9c 00 04 	addi sp,sp,4
    1174:	c3 a0 00 00 	ret

00001178 <float32_to_int32>:
positive integer is returned.  Otherwise, if the conversion overflows, the
largest integer with the same sign as `a' is returned.
-------------------------------------------------------------------------------
*/
int32 float32_to_int32( float32 a )
{
    1178:	00 22 00 17 	srui r2,r1,23
    117c:	b8 20 18 00 	mv r3,r1
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1180:	20 45 00 ff 	andi r5,r2,0xff
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1184:	78 01 00 7f 	mvhi r1,0x7f
    1188:	38 21 ff ff 	ori r1,r1,0xffff
    int8 roundingMode;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x96;
    118c:	34 a4 ff 6a 	addi r4,r5,-150
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1190:	a0 61 30 00 	and r6,r3,r1
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    1194:	00 67 00 1f 	srui r7,r3,31

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x96;
    if ( 0 <= shiftCount ) {
    1198:	48 04 00 1c 	bg r0,r4,1208 <float32_to_int32+0x90>
        if ( 0x9E <= aExp ) {
    119c:	34 01 00 9d 	mvi r1,157
    11a0:	4c 25 00 12 	bge r1,r5,11e8 <float32_to_int32+0x70>
            if ( a == 0xCF000000 ) return 0x80000000;
    11a4:	78 01 cf 00 	mvhi r1,0xcf00
    11a8:	38 21 00 00 	ori r1,r1,0x0
    11ac:	44 61 00 40 	be r3,r1,12ac <float32_to_int32+0x134>
    11b0:	78 02 00 00 	mvhi r2,0x0
    11b4:	38 42 40 2c 	ori r2,r2,0x402c
    11b8:	28 41 00 00 	lw r1,(r2+0)
    11bc:	38 21 00 10 	ori r1,r1,0x10
    11c0:	58 41 00 00 	sw (r2+0),r1
            float_raise( float_flag_invalid );
            if ( ! aSign || ( ( aExp == 0xFF ) && aSig ) ) return 0x7FFFFFFF;
    11c4:	44 e0 00 05 	be r7,r0,11d8 <float32_to_int32+0x60>
    11c8:	64 a1 00 ff 	cmpei r1,r5,255
    11cc:	7c c2 00 00 	cmpnei r2,r6,0
    11d0:	a0 22 08 00 	and r1,r1,r2
    11d4:	44 20 00 36 	be r1,r0,12ac <float32_to_int32+0x134>
            if ( aSign ) {
                z += ( roundingMode == float_round_down ) & zExtra;
                z = - z;
            }
            else {
                z += ( roundingMode == float_round_up ) & zExtra;
    11d8:	78 03 7f ff 	mvhi r3,0x7fff
    11dc:	38 63 ff ff 	ori r3,r3,0xffff
            }
        }
    }
    return z;

}
    11e0:	b8 60 08 00 	mv r1,r3
    11e4:	c3 a0 00 00 	ret
            if ( a == 0xCF000000 ) return 0x80000000;
            float_raise( float_flag_invalid );
            if ( ! aSign || ( ( aExp == 0xFF ) && aSig ) ) return 0x7FFFFFFF;
            return 0x80000000;
        }
        z = ( aSig | 0x00800000 )<<shiftCount;
    11e8:	78 01 00 80 	mvhi r1,0x80
    11ec:	38 21 00 00 	ori r1,r1,0x0
    11f0:	b8 c1 08 00 	or r1,r6,r1
    11f4:	bc 24 18 00 	sl r3,r1,r4
        if ( aSign ) z = - z;
    11f8:	44 e0 ff fa 	be r7,r0,11e0 <float32_to_int32+0x68>
        if ( roundingMode == float_round_nearest_even ) {
            if ( (sbits32) zExtra < 0 ) {
                ++z;
                if ( (bits32) ( zExtra<<1 ) == 0 ) z &= ~1;
            }
            if ( aSign ) z = - z;
    11fc:	c8 03 18 00 	sub r3,r0,r3
            }
        }
    }
    return z;

}
    1200:	b8 60 08 00 	mv r1,r3
    1204:	c3 a0 00 00 	ret
        }
        z = ( aSig | 0x00800000 )<<shiftCount;
        if ( aSign ) z = - z;
    }
    else {
        if ( aExp < 0x7E ) {
    1208:	34 01 00 7d 	mvi r1,125
    120c:	48 a1 00 16 	bg r5,r1,1264 <float32_to_int32+0xec>
            zExtra = aExp | aSig;
    1210:	b8 a6 20 00 	or r4,r5,r6
    1214:	34 03 00 00 	mvi r3,0
        else {
            aSig |= 0x00800000;
            zExtra = aSig<<( shiftCount & 31 );
            z = aSig>>( - shiftCount );
        }
        if ( zExtra ) float_exception_flags |= float_flag_inexact;
    1218:	44 80 00 06 	be r4,r0,1230 <float32_to_int32+0xb8>
    121c:	78 02 00 00 	mvhi r2,0x0
    1220:	38 42 40 2c 	ori r2,r2,0x402c
    1224:	28 41 00 00 	lw r1,(r2+0)
    1228:	38 21 00 01 	ori r1,r1,0x1
    122c:	58 41 00 00 	sw (r2+0),r1
        roundingMode = float_rounding_mode;
    1230:	78 01 00 00 	mvhi r1,0x0
    1234:	38 21 40 28 	ori r1,r1,0x4028
    1238:	28 21 00 00 	lw r1,(r1+0)
        if ( roundingMode == float_round_nearest_even ) {
    123c:	5c 20 00 11 	bne r1,r0,1280 <float32_to_int32+0x108>
            if ( (sbits32) zExtra < 0 ) {
    1240:	4c 81 00 06 	bge r4,r1,1258 <float32_to_int32+0xe0>
                ++z;
                if ( (bits32) ( zExtra<<1 ) == 0 ) z &= ~1;
    1244:	b4 84 08 00 	add r1,r4,r4
        }
        if ( zExtra ) float_exception_flags |= float_flag_inexact;
        roundingMode = float_rounding_mode;
        if ( roundingMode == float_round_nearest_even ) {
            if ( (sbits32) zExtra < 0 ) {
                ++z;
    1248:	34 63 00 01 	addi r3,r3,1
                if ( (bits32) ( zExtra<<1 ) == 0 ) z &= ~1;
    124c:	5c 20 00 03 	bne r1,r0,1258 <float32_to_int32+0xe0>
    1250:	34 01 ff fe 	mvi r1,-2
    1254:	a0 61 18 00 	and r3,r3,r1
            }
            if ( aSign ) z = - z;
    1258:	44 e0 ff e2 	be r7,r0,11e0 <float32_to_int32+0x68>
    125c:	c8 03 18 00 	sub r3,r0,r3
    1260:	e3 ff ff e8 	bi 1200 <float32_to_int32+0x88>
        if ( aExp < 0x7E ) {
            zExtra = aExp | aSig;
            z = 0;
        }
        else {
            aSig |= 0x00800000;
    1264:	78 01 00 80 	mvhi r1,0x80
    1268:	38 21 00 00 	ori r1,r1,0x0
    126c:	b8 c1 08 00 	or r1,r6,r1
            zExtra = aSig<<( shiftCount & 31 );
            z = aSig>>( - shiftCount );
    1270:	c8 04 10 00 	sub r2,r0,r4
    1274:	80 22 18 00 	sru r3,r1,r2
            zExtra = aExp | aSig;
            z = 0;
        }
        else {
            aSig |= 0x00800000;
            zExtra = aSig<<( shiftCount & 31 );
    1278:	bc 24 20 00 	sl r4,r1,r4
    127c:	e3 ff ff e7 	bi 1218 <float32_to_int32+0xa0>
                if ( (bits32) ( zExtra<<1 ) == 0 ) z &= ~1;
            }
            if ( aSign ) z = - z;
        }
        else {
            zExtra = ( zExtra != 0 );
    1280:	7c 82 00 00 	cmpnei r2,r4,0
            if ( aSign ) {
    1284:	44 e0 00 06 	be r7,r0,129c <float32_to_int32+0x124>
                z += ( roundingMode == float_round_down ) & zExtra;
    1288:	64 21 00 03 	cmpei r1,r1,3
    128c:	a0 41 08 00 	and r1,r2,r1
    1290:	b4 23 08 00 	add r1,r1,r3
                z = - z;
    1294:	c8 01 18 00 	sub r3,r0,r1
    1298:	e3 ff ff d2 	bi 11e0 <float32_to_int32+0x68>
            }
            else {
                z += ( roundingMode == float_round_up ) & zExtra;
    129c:	64 21 00 02 	cmpei r1,r1,2
    12a0:	a0 41 08 00 	and r1,r2,r1
    12a4:	b4 23 18 00 	add r3,r1,r3
    12a8:	e3 ff ff ce 	bi 11e0 <float32_to_int32+0x68>
    shiftCount = aExp - 0x96;
    if ( 0 <= shiftCount ) {
        if ( 0x9E <= aExp ) {
            if ( a == 0xCF000000 ) return 0x80000000;
            float_raise( float_flag_invalid );
            if ( ! aSign || ( ( aExp == 0xFF ) && aSig ) ) return 0x7FFFFFFF;
    12ac:	78 03 80 00 	mvhi r3,0x8000
    12b0:	38 63 00 00 	ori r3,r3,0x0
    12b4:	e3 ff ff cb 	bi 11e0 <float32_to_int32+0x68>

000012b8 <float32_to_int32_round_to_zero>:
conversion overflows, the largest integer with the same sign as `a' is
returned.
-------------------------------------------------------------------------------
*/
int32 float32_to_int32_round_to_zero( float32 a )
{
    12b8:	00 22 00 17 	srui r2,r1,23
    12bc:	b8 20 18 00 	mv r3,r1
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    12c0:	20 45 00 ff 	andi r5,r2,0xff
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    12c4:	78 01 00 7f 	mvhi r1,0x7f
    12c8:	38 21 ff ff 	ori r1,r1,0xffff
    int32 z;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x9E;
    12cc:	34 a4 ff 62 	addi r4,r5,-158
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    12d0:	a0 61 30 00 	and r6,r3,r1
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    12d4:	00 67 00 1f 	srui r7,r3,31

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x9E;
    if ( 0 <= shiftCount ) {
    12d8:	48 04 00 11 	bg r0,r4,131c <float32_to_int32_round_to_zero+0x64>
        if ( a == 0xCF000000 ) return 0x80000000;
    12dc:	78 01 cf 00 	mvhi r1,0xcf00
    12e0:	38 21 00 00 	ori r1,r1,0x0
    12e4:	44 61 00 0b 	be r3,r1,1310 <float32_to_int32_round_to_zero+0x58>
    12e8:	78 02 00 00 	mvhi r2,0x0
    12ec:	38 42 40 2c 	ori r2,r2,0x402c
    12f0:	28 41 00 00 	lw r1,(r2+0)
    12f4:	38 21 00 10 	ori r1,r1,0x10
    12f8:	58 41 00 00 	sw (r2+0),r1
        float_raise( float_flag_invalid );
        if ( ! aSign || ( ( aExp == 0xFF ) && aSig ) ) return 0x7FFFFFFF;
    12fc:	44 e0 00 26 	be r7,r0,1394 <float32_to_int32_round_to_zero+0xdc>
    1300:	64 a1 00 ff 	cmpei r1,r5,255
    1304:	7c c2 00 00 	cmpnei r2,r6,0
    1308:	a0 22 08 00 	and r1,r1,r2
    130c:	5c 20 00 22 	bne r1,r0,1394 <float32_to_int32_round_to_zero+0xdc>
    1310:	78 04 80 00 	mvhi r4,0x8000
    1314:	38 84 00 00 	ori r4,r4,0x0
    1318:	e0 00 00 0c 	bi 1348 <float32_to_int32_round_to_zero+0x90>
        return 0x80000000;
    }
    else if ( aExp <= 0x7E ) {
    131c:	34 01 00 7e 	mvi r1,126
    1320:	48 a1 00 0c 	bg r5,r1,1350 <float32_to_int32_round_to_zero+0x98>
        if ( aExp | aSig ) float_exception_flags |= float_flag_inexact;
    1324:	b8 a6 08 00 	or r1,r5,r6
    1328:	b8 20 20 00 	mv r4,r1
    132c:	44 20 00 07 	be r1,r0,1348 <float32_to_int32_round_to_zero+0x90>
    1330:	78 02 00 00 	mvhi r2,0x0
    1334:	38 42 40 2c 	ori r2,r2,0x402c
    1338:	28 41 00 00 	lw r1,(r2+0)
    133c:	34 04 00 00 	mvi r4,0
    1340:	38 21 00 01 	ori r1,r1,0x1
    1344:	58 41 00 00 	sw (r2+0),r1
    if ( (bits32) ( aSig<<( shiftCount & 31 ) ) ) {
        float_exception_flags |= float_flag_inexact;
    }
    return aSign ? - z : z;

}
    1348:	b8 80 08 00 	mv r1,r4
    134c:	c3 a0 00 00 	ret
    }
    else if ( aExp <= 0x7E ) {
        if ( aExp | aSig ) float_exception_flags |= float_flag_inexact;
        return 0;
    }
    aSig = ( aSig | 0x00800000 )<<8;
    1350:	78 01 00 80 	mvhi r1,0x80
    1354:	38 21 00 00 	ori r1,r1,0x0
    1358:	b8 c1 08 00 	or r1,r6,r1
    135c:	3c 21 00 08 	sli r1,r1,8
    z = aSig>>( - shiftCount );
    1360:	c8 04 10 00 	sub r2,r0,r4
    if ( (bits32) ( aSig<<( shiftCount & 31 ) ) ) {
    1364:	bc 24 18 00 	sl r3,r1,r4
    else if ( aExp <= 0x7E ) {
        if ( aExp | aSig ) float_exception_flags |= float_flag_inexact;
        return 0;
    }
    aSig = ( aSig | 0x00800000 )<<8;
    z = aSig>>( - shiftCount );
    1368:	80 22 20 00 	sru r4,r1,r2
    if ( (bits32) ( aSig<<( shiftCount & 31 ) ) ) {
    136c:	44 60 00 06 	be r3,r0,1384 <float32_to_int32_round_to_zero+0xcc>
        float_exception_flags |= float_flag_inexact;
    1370:	78 02 00 00 	mvhi r2,0x0
    1374:	38 42 40 2c 	ori r2,r2,0x402c
    1378:	28 41 00 00 	lw r1,(r2+0)
    137c:	38 21 00 01 	ori r1,r1,0x1
    1380:	58 41 00 00 	sw (r2+0),r1
    }
    return aSign ? - z : z;
    1384:	44 e0 ff f1 	be r7,r0,1348 <float32_to_int32_round_to_zero+0x90>
    1388:	c8 04 20 00 	sub r4,r0,r4

}
    138c:	b8 80 08 00 	mv r1,r4
    1390:	c3 a0 00 00 	ret
    aSig = ( aSig | 0x00800000 )<<8;
    z = aSig>>( - shiftCount );
    if ( (bits32) ( aSig<<( shiftCount & 31 ) ) ) {
        float_exception_flags |= float_flag_inexact;
    }
    return aSign ? - z : z;
    1394:	78 04 7f ff 	mvhi r4,0x7fff
    1398:	38 84 ff ff 	ori r4,r4,0xffff
    139c:	e3 ff ff eb 	bi 1348 <float32_to_int32_round_to_zero+0x90>

000013a0 <float32_round_to_int>:
operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_round_to_int( float32 a )
{
    13a0:	37 9c ff fc 	addi sp,sp,-4
    13a4:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    13a8:	00 22 00 17 	srui r2,r1,23
    bits32 lastBitMask, roundBitsMask;
    int8 roundingMode;
    float32 z;

    aExp = extractFloat32Exp( a );
    if ( 0x96 <= aExp ) {
    13ac:	34 03 00 95 	mvi r3,149
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    13b0:	20 44 00 ff 	andi r4,r2,0xff
operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_round_to_int( float32 a )
{
    13b4:	b8 20 28 00 	mv r5,r1
    bits32 lastBitMask, roundBitsMask;
    int8 roundingMode;
    float32 z;

    aExp = extractFloat32Exp( a );
    if ( 0x96 <= aExp ) {
    13b8:	4c 64 00 07 	bge r3,r4,13d4 <float32_round_to_int+0x34>
        if ( ( aExp == 0xFF ) && extractFloat32Frac( a ) ) {
    13bc:	34 02 00 ff 	mvi r2,255
    13c0:	44 82 00 34 	be r4,r2,1490 <float32_round_to_int+0xf0>
    }
    z &= ~ roundBitsMask;
    if ( z != a ) float_exception_flags |= float_flag_inexact;
    return z;

}
    13c4:	b8 a0 08 00 	mv r1,r5
    13c8:	2b 9d 00 04 	lw ra,(sp+4)
    13cc:	37 9c 00 04 	addi sp,sp,4
    13d0:	c3 a0 00 00 	ret
        if ( ( aExp == 0xFF ) && extractFloat32Frac( a ) ) {
            return propagateFloat32NaN( a, a );
        }
        return a;
    }
    if ( aExp <= 0x7E ) {
    13d4:	34 07 00 7e 	mvi r7,126
    13d8:	48 87 00 13 	bg r4,r7,1424 <float32_round_to_int+0x84>
        if ( (bits32) ( a<<1 ) == 0 ) return a;
    13dc:	b4 21 08 00 	add r1,r1,r1
    13e0:	44 20 ff f9 	be r1,r0,13c4 <float32_round_to_int+0x24>
        float_exception_flags |= float_flag_inexact;
    13e4:	78 03 00 00 	mvhi r3,0x0
    13e8:	38 63 40 2c 	ori r3,r3,0x402c
    13ec:	28 62 00 00 	lw r2,(r3+0)
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
    13f0:	78 01 00 00 	mvhi r1,0x0
    13f4:	38 21 40 28 	ori r1,r1,0x4028
    13f8:	28 26 00 00 	lw r6,(r1+0)
        }
        return a;
    }
    if ( aExp <= 0x7E ) {
        if ( (bits32) ( a<<1 ) == 0 ) return a;
        float_exception_flags |= float_flag_inexact;
    13fc:	38 42 00 01 	ori r2,r2,0x1
    1400:	58 62 00 00 	sw (r3+0),r2
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
    1404:	34 01 00 02 	mvi r1,2
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    1408:	00 a2 00 1f 	srui r2,r5,31
    }
    if ( aExp <= 0x7E ) {
        if ( (bits32) ( a<<1 ) == 0 ) return a;
        float_exception_flags |= float_flag_inexact;
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
    140c:	44 c1 00 41 	be r6,r1,1510 <float32_round_to_int+0x170>
    1410:	34 01 00 03 	mvi r1,3
    1414:	44 c1 00 3a 	be r6,r1,14fc <float32_round_to_int+0x15c>
    1418:	44 c0 00 2f 	be r6,r0,14d4 <float32_round_to_int+0x134>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    141c:	3c 45 00 1f 	sli r5,r2,31
    1420:	e3 ff ff e9 	bi 13c4 <float32_round_to_int+0x24>
    }
    lastBitMask = 1;
    lastBitMask <<= 0x96 - aExp;
    roundBitsMask = lastBitMask - 1;
    z = a;
    roundingMode = float_rounding_mode;
    1424:	78 01 00 00 	mvhi r1,0x0
    1428:	38 21 40 28 	ori r1,r1,0x4028
            return aSign ? 0x80000000 : 0x3F800000;
        }
        return packFloat32( aSign, 0, 0 );
    }
    lastBitMask = 1;
    lastBitMask <<= 0x96 - aExp;
    142c:	34 02 00 96 	mvi r2,150
    1430:	c8 44 10 00 	sub r2,r2,r4
    roundBitsMask = lastBitMask - 1;
    z = a;
    roundingMode = float_rounding_mode;
    1434:	28 24 00 00 	lw r4,(r1+0)
            return aSign ? 0x80000000 : 0x3F800000;
        }
        return packFloat32( aSign, 0, 0 );
    }
    lastBitMask = 1;
    lastBitMask <<= 0x96 - aExp;
    1438:	34 01 00 01 	mvi r1,1
    143c:	bc 22 18 00 	sl r3,r1,r2
    roundBitsMask = lastBitMask - 1;
    1440:	34 67 ff ff 	addi r7,r3,-1
    z = a;
    roundingMode = float_rounding_mode;
    if ( roundingMode == float_round_nearest_even ) {
    1444:	44 80 00 1b 	be r4,r0,14b0 <float32_round_to_int+0x110>
        z += lastBitMask>>1;
        if ( ( z & roundBitsMask ) == 0 ) z &= ~ lastBitMask;
    }
    else if ( roundingMode != float_round_to_zero ) {
    1448:	44 81 00 21 	be r4,r1,14cc <float32_round_to_int+0x12c>
        if ( extractFloat32Sign( z ) ^ ( roundingMode == float_round_up ) ) {
    144c:	64 82 00 02 	cmpei r2,r4,2
    1450:	00 a1 00 1f 	srui r1,r5,31
            z += roundBitsMask;
    1454:	b4 e5 30 00 	add r6,r7,r5
    if ( roundingMode == float_round_nearest_even ) {
        z += lastBitMask>>1;
        if ( ( z & roundBitsMask ) == 0 ) z &= ~ lastBitMask;
    }
    else if ( roundingMode != float_round_to_zero ) {
        if ( extractFloat32Sign( z ) ^ ( roundingMode == float_round_up ) ) {
    1458:	44 41 00 1d 	be r2,r1,14cc <float32_round_to_int+0x12c>
            z += roundBitsMask;
        }
    }
    z &= ~ roundBitsMask;
    145c:	a4 e0 08 00 	not r1,r7
    1460:	a0 c1 18 00 	and r3,r6,r1
    if ( z != a ) float_exception_flags |= float_flag_inexact;
    1464:	44 65 ff d8 	be r3,r5,13c4 <float32_round_to_int+0x24>
    1468:	78 02 00 00 	mvhi r2,0x0
    146c:	38 42 40 2c 	ori r2,r2,0x402c
    1470:	28 41 00 00 	lw r1,(r2+0)
    1474:	b8 60 28 00 	mv r5,r3
    1478:	38 21 00 01 	ori r1,r1,0x1
    147c:	58 41 00 00 	sw (r2+0),r1
    return z;

}
    1480:	b8 a0 08 00 	mv r1,r5
    1484:	2b 9d 00 04 	lw ra,(sp+4)
    1488:	37 9c 00 04 	addi sp,sp,4
    148c:	c3 a0 00 00 	ret
    int8 roundingMode;
    float32 z;

    aExp = extractFloat32Exp( a );
    if ( 0x96 <= aExp ) {
        if ( ( aExp == 0xFF ) && extractFloat32Frac( a ) ) {
    1490:	78 02 00 7f 	mvhi r2,0x7f
    1494:	38 42 ff ff 	ori r2,r2,0xffff
    1498:	a0 22 10 00 	and r2,r1,r2
    149c:	44 40 ff ca 	be r2,r0,13c4 <float32_round_to_int+0x24>
            return propagateFloat32NaN( a, a );
    14a0:	b8 20 10 00 	mv r2,r1
    14a4:	fb ff fe 6f 	calli e60 <propagateFloat32NaN>
    14a8:	b8 20 28 00 	mv r5,r1
    14ac:	e3 ff ff c6 	bi 13c4 <float32_round_to_int+0x24>
    lastBitMask <<= 0x96 - aExp;
    roundBitsMask = lastBitMask - 1;
    z = a;
    roundingMode = float_rounding_mode;
    if ( roundingMode == float_round_nearest_even ) {
        z += lastBitMask>>1;
    14b0:	80 61 08 00 	sru r1,r3,r1
    14b4:	b4 25 30 00 	add r6,r1,r5
        if ( ( z & roundBitsMask ) == 0 ) z &= ~ lastBitMask;
    14b8:	a0 c7 10 00 	and r2,r6,r7
    14bc:	5c 44 ff e8 	bne r2,r4,145c <float32_round_to_int+0xbc>
    14c0:	a4 60 08 00 	not r1,r3
    14c4:	a0 c1 30 00 	and r6,r6,r1
    14c8:	e3 ff ff e5 	bi 145c <float32_round_to_int+0xbc>
    }
    else if ( roundingMode != float_round_to_zero ) {
        if ( extractFloat32Sign( z ) ^ ( roundingMode == float_round_up ) ) {
            z += roundBitsMask;
    14cc:	b8 a0 30 00 	mv r6,r5
    14d0:	e3 ff ff e3 	bi 145c <float32_round_to_int+0xbc>
        if ( (bits32) ( a<<1 ) == 0 ) return a;
        float_exception_flags |= float_flag_inexact;
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
         case float_round_nearest_even:
            if ( ( aExp == 0x7E ) && extractFloat32Frac( a ) ) {
    14d4:	5c 87 ff d2 	bne r4,r7,141c <float32_round_to_int+0x7c>
    14d8:	78 01 00 7f 	mvhi r1,0x7f
    14dc:	38 21 ff ff 	ori r1,r1,0xffff
    14e0:	a0 a1 08 00 	and r1,r5,r1
    14e4:	44 20 ff ce 	be r1,r0,141c <float32_round_to_int+0x7c>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    14e8:	3c 42 00 1f 	sli r2,r2,31
    14ec:	78 01 3f 80 	mvhi r1,0x3f80
    14f0:	38 21 00 00 	ori r1,r1,0x0
    14f4:	b4 41 28 00 	add r5,r2,r1
    14f8:	e3 ff ff b3 	bi 13c4 <float32_round_to_int+0x24>
            if ( ( aExp == 0x7E ) && extractFloat32Frac( a ) ) {
                return packFloat32( aSign, 0x7F, 0 );
            }
            break;
         case float_round_down:
            return aSign ? 0xBF800000 : 0;
    14fc:	b8 40 28 00 	mv r5,r2
    1500:	44 40 ff b1 	be r2,r0,13c4 <float32_round_to_int+0x24>
    1504:	78 05 bf 80 	mvhi r5,0xbf80
    1508:	38 a5 00 00 	ori r5,r5,0x0
    150c:	e3 ff ff ae 	bi 13c4 <float32_round_to_int+0x24>
         case float_round_up:
            return aSign ? 0x80000000 : 0x3F800000;
    1510:	5c 40 00 04 	bne r2,r0,1520 <float32_round_to_int+0x180>
    1514:	78 05 3f 80 	mvhi r5,0x3f80
    1518:	38 a5 00 00 	ori r5,r5,0x0
    151c:	e3 ff ff aa 	bi 13c4 <float32_round_to_int+0x24>
    1520:	78 05 80 00 	mvhi r5,0x8000
    1524:	38 a5 00 00 	ori r5,r5,0x0
    1528:	e3 ff ff a7 	bi 13c4 <float32_round_to_int+0x24>

0000152c <addFloat32Sigs>:
addition is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 addFloat32Sigs( float32 a, float32 b, flag zSign )
{
    152c:	37 9c ff fc 	addi sp,sp,-4
    1530:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1534:	00 26 00 17 	srui r6,r1,23
    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 6;
    1538:	00 47 00 17 	srui r7,r2,23
    153c:	78 04 00 7f 	mvhi r4,0x7f
    1540:	38 84 ff ff 	ori r4,r4,0xffff
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1544:	20 c6 00 ff 	andi r6,r6,0xff
    1548:	20 e7 00 ff 	andi r7,r7,0xff
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 6;
    bSig <<= 6;
    154c:	a0 44 28 00 	and r5,r2,r4

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    1550:	c8 c7 48 00 	sub r9,r6,r7
    aSig <<= 6;
    1554:	a0 24 20 00 	and r4,r1,r4
    1558:	3c 8a 00 06 	sli r10,r4,6
addition is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 addFloat32Sigs( float32 a, float32 b, flag zSign )
{
    155c:	b8 20 40 00 	mv r8,r1
    1560:	b8 60 e8 00 	mv ra,r3
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 6;
    bSig <<= 6;
    1564:	3c a4 00 06 	sli r4,r5,6
    if ( 0 < expDiff ) {
    1568:	4c 09 00 1b 	bge r0,r9,15d4 <addFloat32Sigs+0xa8>
        if ( aExp == 0xFF ) {
    156c:	34 03 00 ff 	mvi r3,255
    1570:	44 c3 00 15 	be r6,r3,15c4 <addFloat32Sigs+0x98>
            if ( aSig ) return propagateFloat32NaN( a, b );
            return a;
        }
        if ( bExp == 0 ) {
    1574:	5c e0 00 21 	bne r7,r0,15f8 <addFloat32Sigs+0xcc>
            --expDiff;
    1578:	35 29 ff ff 	addi r9,r9,-1
    157c:	78 08 20 00 	mvhi r8,0x2000
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
    1580:	5d 27 00 22 	bne r9,r7,1608 <addFloat32Sigs+0xdc>
    1584:	78 08 20 00 	mvhi r8,0x2000
        zSig = 0x40000000 + aSig + bSig;
        zExp = aExp;
        goto roundAndPack;
    }
    aSig |= 0x20000000;
    zSig = ( aSig + bSig )<<1;
    1588:	39 08 00 00 	ori r8,r8,0x0
    158c:	b9 48 08 00 	or r1,r10,r8
    1590:	b4 24 18 00 	add r3,r1,r4
    1594:	b4 63 08 00 	add r1,r3,r3
    --zExp;
    if ( (sbits32) zSig < 0 ) {
    1598:	48 01 00 03 	bg r0,r1,15a4 <addFloat32Sigs+0x78>
        zExp = aExp;
        goto roundAndPack;
    }
    aSig |= 0x20000000;
    zSig = ( aSig + bSig )<<1;
    --zExp;
    159c:	34 c6 ff ff 	addi r6,r6,-1
    15a0:	b8 20 18 00 	mv r3,r1
    if ( (sbits32) zSig < 0 ) {
        zSig = aSig + bSig;
        ++zExp;
    }
 roundAndPack:
    return roundAndPackFloat32( zSign, zExp, zSig );
    15a4:	bb a0 08 00 	mv r1,ra
    15a8:	b8 c0 10 00 	mv r2,r6
    15ac:	fb ff fe 5c 	calli f1c <roundAndPackFloat32>
    15b0:	b8 20 40 00 	mv r8,r1

}
    15b4:	b9 00 08 00 	mv r1,r8
    15b8:	2b 9d 00 04 	lw ra,(sp+4)
    15bc:	37 9c 00 04 	addi sp,sp,4
    15c0:	c3 a0 00 00 	ret
    expDiff = aExp - bExp;
    aSig <<= 6;
    bSig <<= 6;
    if ( 0 < expDiff ) {
        if ( aExp == 0xFF ) {
            if ( aSig ) return propagateFloat32NaN( a, b );
    15c4:	45 40 ff fc 	be r10,r0,15b4 <addFloat32Sigs+0x88>
        shift32RightJamming( aSig, - expDiff, &aSig );
        zExp = bExp;
    }
    else {
        if ( aExp == 0xFF ) {
            if ( aSig | bSig ) return propagateFloat32NaN( a, b );
    15c8:	fb ff fe 26 	calli e60 <propagateFloat32NaN>
    15cc:	b8 20 40 00 	mv r8,r1
    15d0:	e3 ff ff f9 	bi 15b4 <addFloat32Sigs+0x88>
            bSig |= 0x20000000;
        }
        shift32RightJamming( bSig, expDiff, &bSig );
        zExp = aExp;
    }
    else if ( expDiff < 0 ) {
    15d4:	5d 20 00 1a 	bne r9,r0,163c <addFloat32Sigs+0x110>
        }
        shift32RightJamming( aSig, - expDiff, &aSig );
        zExp = bExp;
    }
    else {
        if ( aExp == 0xFF ) {
    15d8:	34 03 00 ff 	mvi r3,255
    15dc:	44 c3 00 15 	be r6,r3,1630 <addFloat32Sigs+0x104>
            if ( aSig | bSig ) return propagateFloat32NaN( a, b );
            return a;
        }
        if ( aExp == 0 ) return packFloat32( zSign, 0, ( aSig + bSig )>>6 );
    15e0:	44 c0 00 28 	be r6,r0,1680 <addFloat32Sigs+0x154>
        zSig = 0x40000000 + aSig + bSig;
    15e4:	78 01 40 00 	mvhi r1,0x4000
    15e8:	38 21 00 00 	ori r1,r1,0x0
    15ec:	b5 41 08 00 	add r1,r10,r1
    15f0:	b4 24 18 00 	add r3,r1,r4
    15f4:	e3 ff ff ec 	bi 15a4 <addFloat32Sigs+0x78>
        }
        if ( bExp == 0 ) {
            --expDiff;
        }
        else {
            bSig |= 0x20000000;
    15f8:	78 08 20 00 	mvhi r8,0x2000
    15fc:	b9 00 08 00 	mv r1,r8
    1600:	38 21 00 00 	ori r1,r1,0x0
    1604:	b8 81 20 00 	or r4,r4,r1
        z = a;
    }
    else if ( count < 32 ) {
    1608:	34 01 00 1f 	mvi r1,31
    160c:	49 21 00 07 	bg r9,r1,1628 <addFloat32Sigs+0xfc>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    1610:	c8 09 08 00 	sub r1,r0,r9
    1614:	bc 81 08 00 	sl r1,r4,r1
    1618:	80 89 10 00 	sru r2,r4,r9
    161c:	7c 21 00 00 	cmpnei r1,r1,0
    1620:	b8 22 20 00 	or r4,r1,r2
    1624:	e3 ff ff d9 	bi 1588 <addFloat32Sigs+0x5c>
    }
    else {
        z = ( a != 0 );
    1628:	7c 84 00 00 	cmpnei r4,r4,0
    162c:	e3 ff ff d7 	bi 1588 <addFloat32Sigs+0x5c>
        shift32RightJamming( aSig, - expDiff, &aSig );
        zExp = bExp;
    }
    else {
        if ( aExp == 0xFF ) {
            if ( aSig | bSig ) return propagateFloat32NaN( a, b );
    1630:	b8 8a 18 00 	or r3,r4,r10
    1634:	44 60 ff e0 	be r3,r0,15b4 <addFloat32Sigs+0x88>
    1638:	e3 ff ff e4 	bi 15c8 <addFloat32Sigs+0x9c>
        }
        shift32RightJamming( bSig, expDiff, &bSig );
        zExp = aExp;
    }
    else if ( expDiff < 0 ) {
        if ( bExp == 0xFF ) {
    163c:	34 03 00 ff 	mvi r3,255
    1640:	44 e3 00 18 	be r7,r3,16a0 <addFloat32Sigs+0x174>
            if ( bSig ) return propagateFloat32NaN( a, b );
            return packFloat32( zSign, 0xFF, 0 );
        }
        if ( aExp == 0 ) {
    1644:	44 c0 00 14 	be r6,r0,1694 <addFloat32Sigs+0x168>
            ++expDiff;
        }
        else {
            aSig |= 0x20000000;
    1648:	78 08 20 00 	mvhi r8,0x2000
    164c:	b9 00 08 00 	mv r1,r8
    1650:	38 21 00 00 	ori r1,r1,0x0
    1654:	b9 41 50 00 	or r10,r10,r1
        }
        shift32RightJamming( aSig, - expDiff, &aSig );
    1658:	c8 09 10 00 	sub r2,r0,r9
            return a;
        }
        if ( aExp == 0 ) return packFloat32( zSign, 0, ( aSig + bSig )>>6 );
        zSig = 0x40000000 + aSig + bSig;
        zExp = aExp;
        goto roundAndPack;
    165c:	b8 e0 30 00 	mv r6,r7
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
    1660:	44 40 ff ca 	be r2,r0,1588 <addFloat32Sigs+0x5c>
        z = a;
    }
    else if ( count < 32 ) {
    1664:	34 01 00 1f 	mvi r1,31
    1668:	48 41 00 14 	bg r2,r1,16b8 <addFloat32Sigs+0x18c>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    166c:	bd 49 08 00 	sl r1,r10,r9
    1670:	81 42 10 00 	sru r2,r10,r2
    1674:	7c 21 00 00 	cmpnei r1,r1,0
    1678:	b8 22 50 00 	or r10,r1,r2
    167c:	e3 ff ff c3 	bi 1588 <addFloat32Sigs+0x5c>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1680:	b4 8a 08 00 	add r1,r4,r10
    1684:	00 21 00 06 	srui r1,r1,6
    1688:	3f a2 00 1f 	sli r2,ra,31
    168c:	b4 22 40 00 	add r8,r1,r2
    1690:	e3 ff ff c9 	bi 15b4 <addFloat32Sigs+0x88>
        if ( bExp == 0xFF ) {
            if ( bSig ) return propagateFloat32NaN( a, b );
            return packFloat32( zSign, 0xFF, 0 );
        }
        if ( aExp == 0 ) {
            ++expDiff;
    1694:	35 29 00 01 	addi r9,r9,1
    1698:	78 08 20 00 	mvhi r8,0x2000
    169c:	e3 ff ff ef 	bi 1658 <addFloat32Sigs+0x12c>
        shift32RightJamming( bSig, expDiff, &bSig );
        zExp = aExp;
    }
    else if ( expDiff < 0 ) {
        if ( bExp == 0xFF ) {
            if ( bSig ) return propagateFloat32NaN( a, b );
    16a0:	5c 80 ff ca 	bne r4,r0,15c8 <addFloat32Sigs+0x9c>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    16a4:	3f a2 00 1f 	sli r2,ra,31
    16a8:	78 01 7f 80 	mvhi r1,0x7f80
    16ac:	38 21 00 00 	ori r1,r1,0x0
    16b0:	b4 41 40 00 	add r8,r2,r1
    16b4:	e3 ff ff c0 	bi 15b4 <addFloat32Sigs+0x88>
    }
    else {
        z = ( a != 0 );
    16b8:	7d 4a 00 00 	cmpnei r10,r10,0
    16bc:	e3 ff ff b3 	bi 1588 <addFloat32Sigs+0x5c>

000016c0 <subFloat32Sigs>:
result is a NaN.  The subtraction is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 subFloat32Sigs( float32 a, float32 b, flag zSign )
{
    16c0:	37 9c ff fc 	addi sp,sp,-4
    16c4:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    16c8:	00 26 00 17 	srui r6,r1,23
    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 7;
    16cc:	00 47 00 17 	srui r7,r2,23
    16d0:	78 04 00 7f 	mvhi r4,0x7f
    16d4:	38 84 ff ff 	ori r4,r4,0xffff
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    16d8:	20 c6 00 ff 	andi r6,r6,0xff
    16dc:	20 e7 00 ff 	andi r7,r7,0xff
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 7;
    bSig <<= 7;
    16e0:	a0 44 28 00 	and r5,r2,r4

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    16e4:	c8 c7 48 00 	sub r9,r6,r7
    aSig <<= 7;
    16e8:	a0 24 20 00 	and r4,r1,r4
result is a NaN.  The subtraction is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 subFloat32Sigs( float32 a, float32 b, flag zSign )
{
    16ec:	b8 20 40 00 	mv r8,r1
    16f0:	b8 60 50 00 	mv r10,r3
    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 7;
    16f4:	3c 84 00 07 	sli r4,r4,7
    bSig <<= 7;
    16f8:	3c a5 00 07 	sli r5,r5,7
    if ( 0 < expDiff ) goto aExpBigger;
    16fc:	49 20 00 0f 	bg r9,r0,1738 <subFloat32Sigs+0x78>
    if ( expDiff < 0 ) goto bExpBigger;
    1700:	5d 20 00 3b 	bne r9,r0,17ec <subFloat32Sigs+0x12c>
    if ( aExp == 0xFF ) {
    1704:	34 03 00 ff 	mvi r3,255
    1708:	44 c3 00 30 	be r6,r3,17c8 <subFloat32Sigs+0x108>
        if ( aSig | bSig ) return propagateFloat32NaN( a, b );
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( aExp == 0 ) {
    170c:	5c c0 00 03 	bne r6,r0,1718 <subFloat32Sigs+0x58>
    1710:	34 06 00 01 	mvi r6,1
    1714:	b8 c0 38 00 	mv r7,r6
        aExp = 1;
        bExp = 1;
    }
    if ( bSig < aSig ) goto aBigger;
    1718:	54 85 00 10 	bgu r4,r5,1758 <subFloat32Sigs+0x98>
    if ( aSig < bSig ) goto bBigger;
    171c:	54 a4 00 45 	bgu r5,r4,1830 <subFloat32Sigs+0x170>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1720:	78 01 00 00 	mvhi r1,0x0
    1724:	38 21 40 28 	ori r1,r1,0x4028
    1728:	28 22 00 00 	lw r2,(r1+0)
    172c:	64 42 00 03 	cmpei r2,r2,3
    1730:	3c 48 00 1f 	sli r8,r2,31
    1734:	e0 00 00 0f 	bi 1770 <subFloat32Sigs+0xb0>
    zSig = bSig - aSig;
    zExp = bExp;
    zSign ^= 1;
    goto normalizeRoundAndPack;
 aExpBigger:
    if ( aExp == 0xFF ) {
    1738:	34 03 00 ff 	mvi r3,255
    173c:	44 c3 00 11 	be r6,r3,1780 <subFloat32Sigs+0xc0>
        if ( aSig ) return propagateFloat32NaN( a, b );
        return a;
    }
    if ( bExp == 0 ) {
    1740:	5c e0 00 14 	bne r7,r0,1790 <subFloat32Sigs+0xd0>
        --expDiff;
    1744:	35 29 ff ff 	addi r9,r9,-1
    1748:	78 08 40 00 	mvhi r8,0x4000
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
    174c:	5d 27 00 15 	bne r9,r7,17a0 <subFloat32Sigs+0xe0>
    }
    else {
        bSig |= 0x40000000;
    }
    shift32RightJamming( bSig, expDiff, &bSig );
    aSig |= 0x40000000;
    1750:	39 08 00 00 	ori r8,r8,0x0
    1754:	b8 88 20 00 	or r4,r4,r8
 aBigger:
    zSig = aSig - bSig;
    1758:	c8 85 18 00 	sub r3,r4,r5
    175c:	b8 c0 10 00 	mv r2,r6
    zExp = aExp;
 normalizeRoundAndPack:
    --zExp;
    return normalizeRoundAndPackFloat32( zSign, zExp, zSig );
    1760:	b9 40 08 00 	mv r1,r10
    1764:	34 42 ff ff 	addi r2,r2,-1
    1768:	fb ff fe 51 	calli 10ac <normalizeRoundAndPackFloat32>
    176c:	b8 20 40 00 	mv r8,r1

}
    1770:	b9 00 08 00 	mv r1,r8
    1774:	2b 9d 00 04 	lw ra,(sp+4)
    1778:	37 9c 00 04 	addi sp,sp,4
    177c:	c3 a0 00 00 	ret
    zExp = bExp;
    zSign ^= 1;
    goto normalizeRoundAndPack;
 aExpBigger:
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, b );
    1780:	44 80 ff fc 	be r4,r0,1770 <subFloat32Sigs+0xb0>
    1784:	fb ff fd b7 	calli e60 <propagateFloat32NaN>
    1788:	b8 20 40 00 	mv r8,r1
    178c:	e3 ff ff f9 	bi 1770 <subFloat32Sigs+0xb0>
    }
    if ( bExp == 0 ) {
        --expDiff;
    }
    else {
        bSig |= 0x40000000;
    1790:	78 08 40 00 	mvhi r8,0x4000
    1794:	b9 00 08 00 	mv r1,r8
    1798:	38 21 00 00 	ori r1,r1,0x0
    179c:	b8 a1 28 00 	or r5,r5,r1
        z = a;
    }
    else if ( count < 32 ) {
    17a0:	34 01 00 1f 	mvi r1,31
    17a4:	49 21 00 07 	bg r9,r1,17c0 <subFloat32Sigs+0x100>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    17a8:	c8 09 08 00 	sub r1,r0,r9
    17ac:	bc a1 08 00 	sl r1,r5,r1
    17b0:	80 a9 10 00 	sru r2,r5,r9
    17b4:	7c 21 00 00 	cmpnei r1,r1,0
    17b8:	b8 22 28 00 	or r5,r1,r2
    17bc:	e3 ff ff e5 	bi 1750 <subFloat32Sigs+0x90>
    }
    else {
        z = ( a != 0 );
    17c0:	7c a5 00 00 	cmpnei r5,r5,0
    17c4:	e3 ff ff e3 	bi 1750 <subFloat32Sigs+0x90>
    aSig <<= 7;
    bSig <<= 7;
    if ( 0 < expDiff ) goto aExpBigger;
    if ( expDiff < 0 ) goto bExpBigger;
    if ( aExp == 0xFF ) {
        if ( aSig | bSig ) return propagateFloat32NaN( a, b );
    17c8:	b8 a4 18 00 	or r3,r5,r4
    17cc:	5c 60 ff ee 	bne r3,r0,1784 <subFloat32Sigs+0xc4>
    17d0:	78 02 00 00 	mvhi r2,0x0
    17d4:	38 42 40 2c 	ori r2,r2,0x402c
    17d8:	28 41 00 00 	lw r1,(r2+0)
    17dc:	34 08 ff ff 	mvi r8,-1
    17e0:	38 21 00 10 	ori r1,r1,0x10
    17e4:	58 41 00 00 	sw (r2+0),r1
    17e8:	e3 ff ff e2 	bi 1770 <subFloat32Sigs+0xb0>
    }
    if ( bSig < aSig ) goto aBigger;
    if ( aSig < bSig ) goto bBigger;
    return packFloat32( float_rounding_mode == float_round_down, 0, 0 );
 bExpBigger:
    if ( bExp == 0xFF ) {
    17ec:	34 03 00 ff 	mvi r3,255
    17f0:	44 e3 00 17 	be r7,r3,184c <subFloat32Sigs+0x18c>
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign ^ 1, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
    17f4:	44 c0 00 13 	be r6,r0,1840 <subFloat32Sigs+0x180>
        ++expDiff;
    }
    else {
        aSig |= 0x40000000;
    17f8:	78 08 40 00 	mvhi r8,0x4000
    17fc:	b9 00 08 00 	mv r1,r8
    1800:	38 21 00 00 	ori r1,r1,0x0
    1804:	b8 81 20 00 	or r4,r4,r1
    }
    shift32RightJamming( aSig, - expDiff, &aSig );
    1808:	c8 09 10 00 	sub r2,r0,r9
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
    180c:	44 40 00 07 	be r2,r0,1828 <subFloat32Sigs+0x168>
        z = a;
    }
    else if ( count < 32 ) {
    1810:	34 01 00 1f 	mvi r1,31
    1814:	48 41 00 15 	bg r2,r1,1868 <subFloat32Sigs+0x1a8>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    1818:	bc 89 08 00 	sl r1,r4,r9
    181c:	80 82 10 00 	sru r2,r4,r2
    1820:	7c 21 00 00 	cmpnei r1,r1,0
    1824:	b8 22 20 00 	or r4,r1,r2
    bSig |= 0x40000000;
    1828:	39 08 00 00 	ori r8,r8,0x0
    182c:	b8 a8 28 00 	or r5,r5,r8
 bBigger:
    zSig = bSig - aSig;
    1830:	c8 a4 18 00 	sub r3,r5,r4
    zExp = bExp;
    zSign ^= 1;
    1834:	19 4a 00 01 	xori r10,r10,0x1
    1838:	b8 e0 10 00 	mv r2,r7
    183c:	e3 ff ff c9 	bi 1760 <subFloat32Sigs+0xa0>
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign ^ 1, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
        ++expDiff;
    1840:	35 29 00 01 	addi r9,r9,1
    1844:	78 08 40 00 	mvhi r8,0x4000
    1848:	e3 ff ff f0 	bi 1808 <subFloat32Sigs+0x148>
    if ( bSig < aSig ) goto aBigger;
    if ( aSig < bSig ) goto bBigger;
    return packFloat32( float_rounding_mode == float_round_down, 0, 0 );
 bExpBigger:
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    184c:	5c a0 ff ce 	bne r5,r0,1784 <subFloat32Sigs+0xc4>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1850:	19 42 00 01 	xori r2,r10,0x1
    1854:	3c 42 00 1f 	sli r2,r2,31
    1858:	78 01 7f 80 	mvhi r1,0x7f80
    185c:	38 21 00 00 	ori r1,r1,0x0
    1860:	b4 41 40 00 	add r8,r2,r1
    1864:	e3 ff ff c3 	bi 1770 <subFloat32Sigs+0xb0>
    }
    else {
        z = ( a != 0 );
    1868:	7c 84 00 00 	cmpnei r4,r4,0
    186c:	e3 ff ff ef 	bi 1828 <subFloat32Sigs+0x168>

00001870 <float32_add>:
and `b'.  The operation is performed according to the IEC/IEEE Standard for
Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_add( float32 a, float32 b )
{
    1870:	37 9c ff fc 	addi sp,sp,-4
    1874:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    1878:	00 24 00 1f 	srui r4,r1,31
{
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
    187c:	00 43 00 1f 	srui r3,r2,31
    1880:	44 83 00 06 	be r4,r3,1898 <float32_add+0x28>
        return addFloat32Sigs( a, b, aSign );
    }
    else {
        return subFloat32Sigs( a, b, aSign );
    1884:	b8 80 18 00 	mv r3,r4
    1888:	fb ff ff 8e 	calli 16c0 <subFloat32Sigs>
    }

}
    188c:	2b 9d 00 04 	lw ra,(sp+4)
    1890:	37 9c 00 04 	addi sp,sp,4
    1894:	c3 a0 00 00 	ret
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
        return addFloat32Sigs( a, b, aSign );
    1898:	b8 80 18 00 	mv r3,r4
    189c:	fb ff ff 24 	calli 152c <addFloat32Sigs>
    }
    else {
        return subFloat32Sigs( a, b, aSign );
    }

}
    18a0:	2b 9d 00 04 	lw ra,(sp+4)
    18a4:	37 9c 00 04 	addi sp,sp,4
    18a8:	c3 a0 00 00 	ret

000018ac <float32_sub>:
`a' and `b'.  The operation is performed according to the IEC/IEEE Standard
for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_sub( float32 a, float32 b )
{
    18ac:	37 9c ff fc 	addi sp,sp,-4
    18b0:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    18b4:	00 24 00 1f 	srui r4,r1,31
{
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
    18b8:	00 43 00 1f 	srui r3,r2,31
    18bc:	44 83 00 06 	be r4,r3,18d4 <float32_sub+0x28>
        return subFloat32Sigs( a, b, aSign );
    }
    else {
        return addFloat32Sigs( a, b, aSign );
    18c0:	b8 80 18 00 	mv r3,r4
    18c4:	fb ff ff 1a 	calli 152c <addFloat32Sigs>
    }

}
    18c8:	2b 9d 00 04 	lw ra,(sp+4)
    18cc:	37 9c 00 04 	addi sp,sp,4
    18d0:	c3 a0 00 00 	ret
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
        return subFloat32Sigs( a, b, aSign );
    18d4:	b8 80 18 00 	mv r3,r4
    18d8:	fb ff ff 7a 	calli 16c0 <subFloat32Sigs>
    }
    else {
        return addFloat32Sigs( a, b, aSign );
    }

}
    18dc:	2b 9d 00 04 	lw ra,(sp+4)
    18e0:	37 9c 00 04 	addi sp,sp,4
    18e4:	c3 a0 00 00 	ret

000018e8 <float32_mul>:
`a' and `b'.  The operation is performed according to the IEC/IEEE Standard
for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_mul( float32 a, float32 b )
{
    18e8:	37 9c ff f4 	addi sp,sp,-12
    18ec:	5b 8b 00 0c 	sw (sp+12),r11
    18f0:	5b 8c 00 08 	sw (sp+8),r12
    18f4:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    18f8:	00 24 00 17 	srui r4,r1,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    18fc:	78 03 00 7f 	mvhi r3,0x7f
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1900:	00 46 00 17 	srui r6,r2,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1904:	38 63 ff ff 	ori r3,r3,0xffff
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1908:	20 8a 00 ff 	andi r10,r4,0xff
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    190c:	98 22 28 00 	xor r5,r1,r2
    if ( aExp == 0xFF ) {
    1910:	34 09 00 ff 	mvi r9,255
`a' and `b'.  The operation is performed according to the IEC/IEEE Standard
for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_mul( float32 a, float32 b )
{
    1914:	b8 20 38 00 	mv r7,r1
    1918:	b8 40 40 00 	mv r8,r2
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    191c:	a0 43 58 00 	and r11,r2,r3
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1920:	a0 c9 20 00 	and r4,r6,r9
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    1924:	00 ac 00 1f 	srui r12,r5,31
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1928:	a0 23 e8 00 	and ra,r1,r3
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
    192c:	45 49 00 61 	be r10,r9,1ab0 <float32_mul+0x1c8>
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
    1930:	44 89 00 51 	be r4,r9,1a74 <float32_mul+0x18c>
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
    1934:	5d 40 00 13 	bne r10,r0,1980 <float32_mul+0x98>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1938:	3d 85 00 1f 	sli r5,r12,31
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
    193c:	47 aa 00 48 	be ra,r10,1a5c <float32_mul+0x174>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    1940:	38 01 ff ff 	mvu r1,0xffff
    1944:	50 3d 00 77 	bgeu r1,ra,1b20 <float32_mul+0x238>
    1948:	bb a0 18 00 	mv r3,ra
    194c:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    1950:	3c 63 00 08 	sli r3,r3,8
    1954:	34 45 ff f8 	addi r5,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1958:	00 63 00 18 	srui r3,r3,24
    195c:	78 01 00 00 	mvhi r1,0x0
    1960:	3c 63 00 02 	sli r3,r3,2
    1964:	38 21 3b 70 	ori r1,r1,0x3b70
    1968:	b4 23 08 00 	add r1,r1,r3
    196c:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    1970:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1974:	b4 a2 10 00 	add r2,r5,r2
    *zSigPtr = aSig<<shiftCount;
    1978:	bf a2 e8 00 	sl ra,ra,r2
    *zExpPtr = 1 - shiftCount;
    197c:	c8 22 50 00 	sub r10,r1,r2
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    if ( bExp == 0 ) {
    1980:	5c 80 00 13 	bne r4,r0,19cc <float32_mul+0xe4>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1984:	3d 85 00 1f 	sli r5,r12,31
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
    1988:	45 64 00 35 	be r11,r4,1a5c <float32_mul+0x174>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    198c:	38 01 ff ff 	mvu r1,0xffff
    1990:	50 2b 00 6a 	bgeu r1,r11,1b38 <float32_mul+0x250>
    1994:	b9 60 18 00 	mv r3,r11
    1998:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    199c:	3c 63 00 08 	sli r3,r3,8
    19a0:	34 44 ff f8 	addi r4,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    19a4:	00 63 00 18 	srui r3,r3,24
    19a8:	78 01 00 00 	mvhi r1,0x0
    19ac:	3c 63 00 02 	sli r3,r3,2
    19b0:	38 21 3b 70 	ori r1,r1,0x3b70
    19b4:	b4 23 08 00 	add r1,r1,r3
    19b8:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    19bc:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    19c0:	b4 82 10 00 	add r2,r4,r2
    *zSigPtr = aSig<<shiftCount;
    19c4:	bd 62 58 00 	sl r11,r11,r2
    *zExpPtr = 1 - shiftCount;
    19c8:	c8 22 20 00 	sub r4,r1,r2
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    zExp = aExp + bExp - 0x7F;
    aSig = ( aSig | 0x00800000 )<<7;
    19cc:	78 01 00 80 	mvhi r1,0x80
    19d0:	38 21 00 00 	ori r1,r1,0x0
    bSig = ( bSig | 0x00800000 )<<8;
    19d4:	b9 61 10 00 	or r2,r11,r1
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    zExp = aExp + bExp - 0x7F;
    aSig = ( aSig | 0x00800000 )<<7;
    19d8:	bb a1 08 00 	or r1,ra,r1
    19dc:	3c 21 00 07 	sli r1,r1,7
    bSig = ( bSig | 0x00800000 )<<8;
    19e0:	3c 42 00 08 	sli r2,r2,8
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    19e4:	00 3d 00 10 	srui ra,r1,16
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    19e8:	00 4b 00 10 	srui r11,r2,16

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    19ec:	20 29 ff ff 	andi r9,r1,0xffff
    19f0:	20 48 ff ff 	andi r8,r2,0xffff
    zMiddleA = ( (bits32) aLow ) * bHigh;
    19f4:	89 69 18 00 	mul r3,r11,r9
    zMiddleB = ( (bits32) aHigh ) * bLow;
    19f8:	89 1d 10 00 	mul r2,r8,ra
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    zExp = aExp + bExp - 0x7F;
    19fc:	35 41 ff 81 	addi r1,r10,-127
    1a00:	b4 24 30 00 	add r6,r1,r4
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    1a04:	b4 62 08 00 	add r1,r3,r2
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1a08:	54 41 00 36 	bgu r2,r1,1ae0 <float32_mul+0x1f8>
    1a0c:	34 07 00 00 	mvi r7,0

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    1a10:	89 09 18 00 	mul r3,r8,r9
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
    1a14:	3c 22 00 10 	sli r2,r1,16
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1a18:	89 7d 20 00 	mul r4,r11,ra
    zMiddleA <<= 16;
    z1 += zMiddleA;
    1a1c:	b4 43 18 00 	add r3,r2,r3
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1a20:	00 21 00 10 	srui r1,r1,16
    1a24:	f4 43 10 00 	cmpgu r2,r2,r3
    1a28:	b4 24 08 00 	add r1,r1,r4
    1a2c:	b4 22 08 00 	add r1,r1,r2
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    mul32To64( aSig, bSig, &zSig0, &zSig1 );
    zSig0 |= ( zSig1 != 0 );
    1a30:	7c 63 00 00 	cmpnei r3,r3,0
    1a34:	b4 27 08 00 	add r1,r1,r7
    1a38:	b8 23 18 00 	or r3,r1,r3
    if ( 0 <= (sbits32) ( zSig0<<1 ) ) {
    1a3c:	b4 63 08 00 	add r1,r3,r3
    1a40:	48 01 00 03 	bg r0,r1,1a4c <float32_mul+0x164>
        zSig0 <<= 1;
        --zExp;
    1a44:	34 c6 ff ff 	addi r6,r6,-1
    1a48:	b8 20 18 00 	mv r3,r1
    }
    return roundAndPackFloat32( zSign, zExp, zSig0 );
    1a4c:	b9 80 08 00 	mv r1,r12
    1a50:	b8 c0 10 00 	mv r2,r6
    1a54:	fb ff fd 32 	calli f1c <roundAndPackFloat32>
    1a58:	b8 20 28 00 	mv r5,r1

}
    1a5c:	b8 a0 08 00 	mv r1,r5
    1a60:	2b 9d 00 04 	lw ra,(sp+4)
    1a64:	2b 8b 00 0c 	lw r11,(sp+12)
    1a68:	2b 8c 00 08 	lw r12,(sp+8)
    1a6c:	37 9c 00 0c 	addi sp,sp,12
    1a70:	c3 a0 00 00 	ret
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    1a74:	5d 60 00 28 	bne r11,r0,1b14 <float32_mul+0x22c>
        if ( ( aExp | aSig ) == 0 ) {
    1a78:	b9 5d 08 00 	or r1,r10,ra
    1a7c:	5c 2b 00 14 	bne r1,r11,1acc <float32_mul+0x1e4>
    1a80:	78 02 00 00 	mvhi r2,0x0
    1a84:	38 42 40 2c 	ori r2,r2,0x402c
    1a88:	28 41 00 00 	lw r1,(r2+0)
    1a8c:	34 05 ff ff 	mvi r5,-1
    1a90:	38 21 00 10 	ori r1,r1,0x10
    1a94:	58 41 00 00 	sw (r2+0),r1
        zSig0 <<= 1;
        --zExp;
    }
    return roundAndPackFloat32( zSign, zExp, zSig0 );

}
    1a98:	b8 a0 08 00 	mv r1,r5
    1a9c:	2b 9d 00 04 	lw ra,(sp+4)
    1aa0:	2b 8b 00 0c 	lw r11,(sp+12)
    1aa4:	2b 8c 00 08 	lw r12,(sp+8)
    1aa8:	37 9c 00 0c 	addi sp,sp,12
    1aac:	c3 a0 00 00 	ret
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig || ( ( bExp == 0xFF ) && bSig ) ) {
    1ab0:	5f a0 00 0f 	bne ra,r0,1aec <float32_mul+0x204>
    1ab4:	e4 89 10 00 	cmpe r2,r4,r9
    1ab8:	7d 61 00 00 	cmpnei r1,r11,0
    1abc:	a0 41 10 00 	and r2,r2,r1
    1ac0:	5c 5d 00 0b 	bne r2,ra,1aec <float32_mul+0x204>
            return propagateFloat32NaN( a, b );
        }
        if ( ( bExp | bSig ) == 0 ) {
    1ac4:	b8 8b 08 00 	or r1,r4,r11
    1ac8:	44 22 ff ee 	be r1,r2,1a80 <float32_mul+0x198>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1acc:	3d 82 00 1f 	sli r2,r12,31
    1ad0:	78 01 7f 80 	mvhi r1,0x7f80
    1ad4:	38 21 00 00 	ori r1,r1,0x0
    1ad8:	b4 41 28 00 	add r5,r2,r1
    1adc:	e3 ff ff e0 	bi 1a5c <float32_mul+0x174>
    1ae0:	78 07 00 01 	mvhi r7,0x1
    1ae4:	38 e7 00 00 	ori r7,r7,0x0
    1ae8:	e3 ff ff ca 	bi 1a10 <float32_mul+0x128>
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig || ( ( bExp == 0xFF ) && bSig ) ) {
            return propagateFloat32NaN( a, b );
    1aec:	b8 e0 08 00 	mv r1,r7
    1af0:	b9 00 10 00 	mv r2,r8
    1af4:	fb ff fc db 	calli e60 <propagateFloat32NaN>
    1af8:	b8 20 28 00 	mv r5,r1
        zSig0 <<= 1;
        --zExp;
    }
    return roundAndPackFloat32( zSign, zExp, zSig0 );

}
    1afc:	b8 a0 08 00 	mv r1,r5
    1b00:	2b 9d 00 04 	lw ra,(sp+4)
    1b04:	2b 8b 00 0c 	lw r11,(sp+12)
    1b08:	2b 8c 00 08 	lw r12,(sp+8)
    1b0c:	37 9c 00 0c 	addi sp,sp,12
    1b10:	c3 a0 00 00 	ret
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    1b14:	fb ff fc d3 	calli e60 <propagateFloat32NaN>
    1b18:	b8 20 28 00 	mv r5,r1
    1b1c:	e3 ff ff d0 	bi 1a5c <float32_mul+0x174>
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    1b20:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    1b24:	3f a3 00 10 	sli r3,ra,16
    }
    if ( a < 0x1000000 ) {
    1b28:	38 21 ff ff 	ori r1,r1,0xffff
    1b2c:	50 23 00 09 	bgeu r1,r3,1b50 <float32_mul+0x268>
    1b30:	34 05 00 08 	mvi r5,8
    1b34:	e3 ff ff 89 	bi 1958 <float32_mul+0x70>
    1b38:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    1b3c:	3d 63 00 10 	sli r3,r11,16
    }
    if ( a < 0x1000000 ) {
    1b40:	38 21 ff ff 	ori r1,r1,0xffff
    1b44:	50 23 00 05 	bgeu r1,r3,1b58 <float32_mul+0x270>
    1b48:	34 04 00 08 	mvi r4,8
    1b4c:	e3 ff ff 96 	bi 19a4 <float32_mul+0xbc>
    1b50:	34 02 00 18 	mvi r2,24
    1b54:	e3 ff ff 7f 	bi 1950 <float32_mul+0x68>
    1b58:	34 02 00 18 	mvi r2,24
    1b5c:	e3 ff ff 90 	bi 199c <float32_mul+0xb4>

00001b60 <float32_div>:
by the corresponding value `b'.  The operation is performed according to
the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_div( float32 a, float32 b )
{
    1b60:	37 9c ff ec 	addi sp,sp,-20
    1b64:	5b 8b 00 14 	sw (sp+20),r11
    1b68:	5b 8c 00 10 	sw (sp+16),r12
    1b6c:	5b 8d 00 0c 	sw (sp+12),r13
    1b70:	5b 8e 00 08 	sw (sp+8),r14
    1b74:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1b78:	00 26 00 17 	srui r6,r1,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1b7c:	78 03 00 7f 	mvhi r3,0x7f
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1b80:	00 47 00 17 	srui r7,r2,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1b84:	38 63 ff ff 	ori r3,r3,0xffff
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    1b88:	98 22 40 00 	xor r8,r1,r2
    if ( aExp == 0xFF ) {
    1b8c:	34 09 00 ff 	mvi r9,255
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1b90:	20 c6 00 ff 	andi r6,r6,0xff
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1b94:	a0 43 50 00 	and r10,r2,r3
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1b98:	a0 e9 38 00 	and r7,r7,r9
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    1b9c:	01 0e 00 1f 	srui r14,r8,31
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1ba0:	a0 23 28 00 	and r5,r1,r3
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
    1ba4:	44 c9 00 73 	be r6,r9,1d70 <float32_div+0x210>
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
    1ba8:	44 e9 00 58 	be r7,r9,1d08 <float32_div+0x1a8>
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign, 0, 0 );
    }
    if ( bExp == 0 ) {
    1bac:	5c e0 00 12 	bne r7,r0,1bf4 <float32_div+0x94>
        if ( bSig == 0 ) {
    1bb0:	45 47 00 7e 	be r10,r7,1da8 <float32_div+0x248>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    1bb4:	38 01 ff ff 	mvu r1,0xffff
    1bb8:	50 2a 00 9a 	bgeu r1,r10,1e20 <float32_div+0x2c0>
    1bbc:	b9 40 18 00 	mv r3,r10
    1bc0:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    1bc4:	3c 63 00 08 	sli r3,r3,8
    1bc8:	34 44 ff f8 	addi r4,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1bcc:	00 63 00 18 	srui r3,r3,24
    1bd0:	78 01 00 00 	mvhi r1,0x0
    1bd4:	3c 63 00 02 	sli r3,r3,2
    1bd8:	38 21 3b 70 	ori r1,r1,0x3b70
    1bdc:	b4 23 08 00 	add r1,r1,r3
    1be0:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    1be4:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1be8:	b4 82 10 00 	add r2,r4,r2
    *zSigPtr = aSig<<shiftCount;
    1bec:	bd 42 50 00 	sl r10,r10,r2
    *zExpPtr = 1 - shiftCount;
    1bf0:	c8 22 38 00 	sub r7,r1,r2
            float_raise( float_flag_divbyzero );
            return packFloat32( zSign, 0xFF, 0 );
        }
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    if ( aExp == 0 ) {
    1bf4:	5c c0 00 13 	bne r6,r0,1c40 <float32_div+0xe0>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1bf8:	3d c4 00 1f 	sli r4,r14,31
            return packFloat32( zSign, 0xFF, 0 );
        }
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
    1bfc:	44 a6 00 45 	be r5,r6,1d10 <float32_div+0x1b0>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    1c00:	38 01 ff ff 	mvu r1,0xffff
    1c04:	50 25 00 8d 	bgeu r1,r5,1e38 <float32_div+0x2d8>
    1c08:	b8 a0 18 00 	mv r3,r5
    1c0c:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    1c10:	3c 63 00 08 	sli r3,r3,8
    1c14:	34 44 ff f8 	addi r4,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1c18:	00 63 00 18 	srui r3,r3,24
    1c1c:	78 01 00 00 	mvhi r1,0x0
    1c20:	3c 63 00 02 	sli r3,r3,2
    1c24:	38 21 3b 70 	ori r1,r1,0x3b70
    1c28:	b4 23 08 00 	add r1,r1,r3
    1c2c:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    1c30:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1c34:	b4 82 10 00 	add r2,r4,r2
    *zSigPtr = aSig<<shiftCount;
    1c38:	bc a2 28 00 	sl r5,r5,r2
    *zExpPtr = 1 - shiftCount;
    1c3c:	c8 22 30 00 	sub r6,r1,r2
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = aExp - bExp + 0x7D;
    aSig = ( aSig | 0x00800000 )<<7;
    1c40:	78 01 00 80 	mvhi r1,0x80
    1c44:	38 21 00 00 	ori r1,r1,0x0
    1c48:	b8 a1 10 00 	or r2,r5,r1
    1c4c:	3c 4c 00 07 	sli r12,r2,7
    bSig = ( bSig | 0x00800000 )<<8;
    1c50:	b9 41 08 00 	or r1,r10,r1
    1c54:	3c 2b 00 08 	sli r11,r1,8
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = aExp - bExp + 0x7D;
    1c58:	c8 c7 10 00 	sub r2,r6,r7
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    if ( bSig <= ( aSig + aSig ) ) {
    1c5c:	b5 8c 08 00 	add r1,r12,r12
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = aExp - bExp + 0x7D;
    1c60:	34 4d 00 7d 	addi r13,r2,125
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    if ( bSig <= ( aSig + aSig ) ) {
    1c64:	55 61 00 03 	bgu r11,r1,1c70 <float32_div+0x110>
        aSig >>= 1;
    1c68:	01 8c 00 01 	srui r12,r12,1
        ++zExp;
    1c6c:	35 ad 00 01 	addi r13,r13,1
    }
    zSig = estimateDiv64To32( aSig, 0, bSig );
    1c70:	34 02 00 00 	mvi r2,0
    1c74:	b9 80 08 00 	mv r1,r12
    1c78:	b9 60 18 00 	mv r3,r11
    1c7c:	fb ff fc 0c 	calli cac <estimateDiv64To32>
    1c80:	b8 20 38 00 	mv r7,r1
    if ( ( zSig & 0x3F ) <= 2 ) {
    1c84:	20 22 00 3f 	andi r2,r1,0x3f
    1c88:	34 01 00 02 	mvi r1,2
    1c8c:	54 41 00 2c 	bgu r2,r1,1d3c <float32_div+0x1dc>
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    1c90:	00 e9 00 10 	srui r9,r7,16
    zMiddleB = ( (bits32) aHigh ) * bLow;
    1c94:	01 68 00 10 	srui r8,r11,16

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    1c98:	21 64 ff ff 	andi r4,r11,0xffff
    1c9c:	20 e3 ff ff 	andi r3,r7,0xffff
    zMiddleA = ( (bits32) aLow ) * bHigh;
    1ca0:	89 24 10 00 	mul r2,r9,r4
    zMiddleB = ( (bits32) aHigh ) * bLow;
    1ca4:	88 68 08 00 	mul r1,r3,r8
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    1ca8:	b4 41 28 00 	add r5,r2,r1
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1cac:	54 25 00 5a 	bgu r1,r5,1e14 <float32_div+0x2b4>
    1cb0:	34 06 00 00 	mvi r6,0

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    1cb4:	88 64 18 00 	mul r3,r3,r4
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
    1cb8:	3c a2 00 10 	sli r2,r5,16
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1cbc:	89 28 08 00 	mul r1,r9,r8
    zMiddleA <<= 16;
    z1 += zMiddleA;
    1cc0:	b4 43 18 00 	add r3,r2,r3
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1cc4:	00 a5 00 10 	srui r5,r5,16
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    1cc8:	7c 64 00 00 	cmpnei r4,r3,0
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1ccc:	c9 81 08 00 	sub r1,r12,r1
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    1cd0:	f4 43 10 00 	cmpgu r2,r2,r3
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1cd4:	c8 25 08 00 	sub r1,r1,r5
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    1cd8:	c8 24 08 00 	sub r1,r1,r4
    1cdc:	c8 22 08 00 	sub r1,r1,r2
    1ce0:	c8 26 10 00 	sub r2,r1,r6
INLINE void
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    1ce4:	c8 03 18 00 	sub r3,r0,r3
        mul32To64( bSig, zSig, &term0, &term1 );
        sub64( aSig, 0, term0, term1, &rem0, &rem1 );
        while ( (sbits32) rem0 < 0 ) {
    1ce8:	4c 40 00 13 	bge r2,r0,1d34 <float32_div+0x1d4>
 add64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{
    bits32 z1;

    z1 = a1 + b1;
    1cec:	b4 6b 20 00 	add r4,r3,r11
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
    1cf0:	f4 64 08 00 	cmpgu r1,r3,r4
            --zSig;
    1cf4:	34 e7 ff ff 	addi r7,r7,-1
    1cf8:	b4 41 10 00 	add r2,r2,r1
    }
    zSig = estimateDiv64To32( aSig, 0, bSig );
    if ( ( zSig & 0x3F ) <= 2 ) {
        mul32To64( bSig, zSig, &term0, &term1 );
        sub64( aSig, 0, term0, term1, &rem0, &rem1 );
        while ( (sbits32) rem0 < 0 ) {
    1cfc:	b8 80 18 00 	mv r3,r4
    1d00:	4c 40 00 0c 	bge r2,r0,1d30 <float32_div+0x1d0>
    1d04:	e3 ff ff fa 	bi 1cec <float32_div+0x18c>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1d08:	3d c4 00 1f 	sli r4,r14,31
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    1d0c:	5d 40 00 38 	bne r10,r0,1dec <float32_div+0x28c>
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    1d10:	b8 80 08 00 	mv r1,r4
    1d14:	2b 9d 00 04 	lw ra,(sp+4)
    1d18:	2b 8b 00 14 	lw r11,(sp+20)
    1d1c:	2b 8c 00 10 	lw r12,(sp+16)
    1d20:	2b 8d 00 0c 	lw r13,(sp+12)
    1d24:	2b 8e 00 08 	lw r14,(sp+8)
    1d28:	37 9c 00 14 	addi sp,sp,20
    1d2c:	c3 a0 00 00 	ret
    }
    zSig = estimateDiv64To32( aSig, 0, bSig );
    if ( ( zSig & 0x3F ) <= 2 ) {
        mul32To64( bSig, zSig, &term0, &term1 );
        sub64( aSig, 0, term0, term1, &rem0, &rem1 );
        while ( (sbits32) rem0 < 0 ) {
    1d30:	b8 80 18 00 	mv r3,r4
            --zSig;
            add64( rem0, rem1, 0, bSig, &rem0, &rem1 );
        }
        zSig |= ( rem1 != 0 );
    1d34:	7c 61 00 00 	cmpnei r1,r3,0
    1d38:	b8 e1 38 00 	or r7,r7,r1
    }
    return roundAndPackFloat32( zSign, zExp, zSig );
    1d3c:	b9 c0 08 00 	mv r1,r14
    1d40:	b9 a0 10 00 	mv r2,r13
    1d44:	b8 e0 18 00 	mv r3,r7
    1d48:	fb ff fc 75 	calli f1c <roundAndPackFloat32>
    1d4c:	b8 20 20 00 	mv r4,r1

}
    1d50:	b8 80 08 00 	mv r1,r4
    1d54:	2b 9d 00 04 	lw ra,(sp+4)
    1d58:	2b 8b 00 14 	lw r11,(sp+20)
    1d5c:	2b 8c 00 10 	lw r12,(sp+16)
    1d60:	2b 8d 00 0c 	lw r13,(sp+12)
    1d64:	2b 8e 00 08 	lw r14,(sp+8)
    1d68:	37 9c 00 14 	addi sp,sp,20
    1d6c:	c3 a0 00 00 	ret
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, b );
    1d70:	5c a0 00 1f 	bne r5,r0,1dec <float32_div+0x28c>
        if ( bExp == 0xFF ) {
    1d74:	44 e6 00 1d 	be r7,r6,1de8 <float32_div+0x288>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1d78:	3d c2 00 1f 	sli r2,r14,31
    1d7c:	78 01 7f 80 	mvhi r1,0x7f80
    1d80:	38 21 00 00 	ori r1,r1,0x0
    1d84:	b4 41 20 00 	add r4,r2,r1
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    1d88:	b8 80 08 00 	mv r1,r4
    1d8c:	2b 9d 00 04 	lw ra,(sp+4)
    1d90:	2b 8b 00 14 	lw r11,(sp+20)
    1d94:	2b 8c 00 10 	lw r12,(sp+16)
    1d98:	2b 8d 00 0c 	lw r13,(sp+12)
    1d9c:	2b 8e 00 08 	lw r14,(sp+8)
    1da0:	37 9c 00 14 	addi sp,sp,20
    1da4:	c3 a0 00 00 	ret
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign, 0, 0 );
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) {
            if ( ( aExp | aSig ) == 0 ) {
    1da8:	b8 c5 08 00 	or r1,r6,r5
    1dac:	5c 2a 00 29 	bne r1,r10,1e50 <float32_div+0x2f0>
    1db0:	78 02 00 00 	mvhi r2,0x0
    1db4:	38 42 40 2c 	ori r2,r2,0x402c
    1db8:	28 41 00 00 	lw r1,(r2+0)
    1dbc:	34 04 ff ff 	mvi r4,-1
    1dc0:	38 21 00 10 	ori r1,r1,0x10
    1dc4:	58 41 00 00 	sw (r2+0),r1
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    1dc8:	b8 80 08 00 	mv r1,r4
    1dcc:	2b 9d 00 04 	lw ra,(sp+4)
    1dd0:	2b 8b 00 14 	lw r11,(sp+20)
    1dd4:	2b 8c 00 10 	lw r12,(sp+16)
    1dd8:	2b 8d 00 0c 	lw r13,(sp+12)
    1ddc:	2b 8e 00 08 	lw r14,(sp+8)
    1de0:	37 9c 00 14 	addi sp,sp,20
    1de4:	c3 a0 00 00 	ret
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, b );
        if ( bExp == 0xFF ) {
            if ( bSig ) return propagateFloat32NaN( a, b );
    1de8:	45 40 ff f2 	be r10,r0,1db0 <float32_div+0x250>
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    1dec:	fb ff fc 1d 	calli e60 <propagateFloat32NaN>
    1df0:	b8 20 20 00 	mv r4,r1
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    1df4:	b8 80 08 00 	mv r1,r4
    1df8:	2b 9d 00 04 	lw ra,(sp+4)
    1dfc:	2b 8b 00 14 	lw r11,(sp+20)
    1e00:	2b 8c 00 10 	lw r12,(sp+16)
    1e04:	2b 8d 00 0c 	lw r13,(sp+12)
    1e08:	2b 8e 00 08 	lw r14,(sp+8)
    1e0c:	37 9c 00 14 	addi sp,sp,20
    1e10:	c3 a0 00 00 	ret
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1e14:	78 06 00 01 	mvhi r6,0x1
    1e18:	38 c6 00 00 	ori r6,r6,0x0
    1e1c:	e3 ff ff a6 	bi 1cb4 <float32_div+0x154>
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    1e20:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    1e24:	3d 43 00 10 	sli r3,r10,16
    }
    if ( a < 0x1000000 ) {
    1e28:	38 21 ff ff 	ori r1,r1,0xffff
    1e2c:	50 23 00 13 	bgeu r1,r3,1e78 <float32_div+0x318>
    1e30:	34 04 00 08 	mvi r4,8
    1e34:	e3 ff ff 66 	bi 1bcc <float32_div+0x6c>
    1e38:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    1e3c:	3c a3 00 10 	sli r3,r5,16
    }
    if ( a < 0x1000000 ) {
    1e40:	38 21 ff ff 	ori r1,r1,0xffff
    1e44:	50 23 00 0f 	bgeu r1,r3,1e80 <float32_div+0x320>
    1e48:	34 04 00 08 	mvi r4,8
    1e4c:	e3 ff ff 73 	bi 1c18 <float32_div+0xb8>
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) {
            if ( ( aExp | aSig ) == 0 ) {
                float_raise( float_flag_invalid );
                return float32_default_nan;
    1e50:	78 03 00 00 	mvhi r3,0x0
    1e54:	38 63 40 2c 	ori r3,r3,0x402c
    1e58:	28 62 00 00 	lw r2,(r3+0)
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1e5c:	3d c4 00 1f 	sli r4,r14,31
    1e60:	78 01 7f 80 	mvhi r1,0x7f80
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) {
            if ( ( aExp | aSig ) == 0 ) {
                float_raise( float_flag_invalid );
                return float32_default_nan;
    1e64:	38 42 00 02 	ori r2,r2,0x2
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1e68:	38 21 00 00 	ori r1,r1,0x0
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) {
            if ( ( aExp | aSig ) == 0 ) {
                float_raise( float_flag_invalid );
                return float32_default_nan;
    1e6c:	58 62 00 00 	sw (r3+0),r2
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1e70:	b4 81 20 00 	add r4,r4,r1
    1e74:	e3 ff ff a7 	bi 1d10 <float32_div+0x1b0>
    1e78:	34 02 00 18 	mvi r2,24
    1e7c:	e3 ff ff 52 	bi 1bc4 <float32_div+0x64>
    1e80:	34 02 00 18 	mvi r2,24
    1e84:	e3 ff ff 63 	bi 1c10 <float32_div+0xb0>

00001e88 <float32_rem>:
with respect to the corresponding value `b'.  The operation is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_rem( float32 a, float32 b )
{
    1e88:	37 9c ff d8 	addi sp,sp,-40
    1e8c:	5b 8b 00 28 	sw (sp+40),r11
    1e90:	5b 8c 00 24 	sw (sp+36),r12
    1e94:	5b 8d 00 20 	sw (sp+32),r13
    1e98:	5b 8e 00 1c 	sw (sp+28),r14
    1e9c:	5b 8f 00 18 	sw (sp+24),r15
    1ea0:	5b 90 00 14 	sw (sp+20),r16
    1ea4:	5b 91 00 10 	sw (sp+16),r17
    1ea8:	5b 92 00 0c 	sw (sp+12),r18
    1eac:	5b 93 00 08 	sw (sp+8),r19
    1eb0:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1eb4:	00 23 00 17 	srui r3,r1,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1eb8:	78 04 00 7f 	mvhi r4,0x7f
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1ebc:	00 45 00 17 	srui r5,r2,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1ec0:	38 84 ff ff 	ori r4,r4,0xffff
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1ec4:	20 67 00 ff 	andi r7,r3,0xff
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    if ( aExp == 0xFF ) {
    1ec8:	34 03 00 ff 	mvi r3,255
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1ecc:	a0 44 40 00 	and r8,r2,r4
with respect to the corresponding value `b'.  The operation is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_rem( float32 a, float32 b )
{
    1ed0:	b8 20 80 00 	mv r16,r1
    1ed4:	b8 40 30 00 	mv r6,r2
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1ed8:	a0 a3 88 00 	and r17,r5,r3
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1edc:	a0 24 20 00 	and r4,r1,r4
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    if ( aExp == 0xFF ) {
    1ee0:	44 e3 00 82 	be r7,r3,20e8 <float32_rem+0x260>
            return propagateFloat32NaN( a, b );
        }
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( bExp == 0xFF ) {
    1ee4:	46 23 00 16 	be r17,r3,1f3c <float32_rem+0xb4>
        if ( bSig ) return propagateFloat32NaN( a, b );
        return a;
    }
    if ( bExp == 0 ) {
    1ee8:	5e 20 00 29 	bne r17,r0,1f8c <float32_rem+0x104>
        if ( bSig == 0 ) {
    1eec:	5d 11 00 18 	bne r8,r17,1f4c <float32_rem+0xc4>
    1ef0:	78 02 00 00 	mvhi r2,0x0
    1ef4:	38 42 40 2c 	ori r2,r2,0x402c
    1ef8:	28 41 00 00 	lw r1,(r2+0)
    1efc:	34 10 ff ff 	mvi r16,-1
    1f00:	38 21 00 10 	ori r1,r1,0x10
    1f04:	58 41 00 00 	sw (r2+0),r1
    }
    zSign = ( (sbits32) aSig < 0 );
    if ( zSign ) aSig = - aSig;
    return normalizeRoundAndPackFloat32( aSign ^ zSign, bExp, aSig );

}
    1f08:	ba 00 08 00 	mv r1,r16
    1f0c:	2b 9d 00 04 	lw ra,(sp+4)
    1f10:	2b 8b 00 28 	lw r11,(sp+40)
    1f14:	2b 8c 00 24 	lw r12,(sp+36)
    1f18:	2b 8d 00 20 	lw r13,(sp+32)
    1f1c:	2b 8e 00 1c 	lw r14,(sp+28)
    1f20:	2b 8f 00 18 	lw r15,(sp+24)
    1f24:	2b 90 00 14 	lw r16,(sp+20)
    1f28:	2b 91 00 10 	lw r17,(sp+16)
    1f2c:	2b 92 00 0c 	lw r18,(sp+12)
    1f30:	2b 93 00 08 	lw r19,(sp+8)
    1f34:	37 9c 00 28 	addi sp,sp,40
    1f38:	c3 a0 00 00 	ret
        }
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    1f3c:	45 00 ff f3 	be r8,r0,1f08 <float32_rem+0x80>
    1f40:	fb ff fb c8 	calli e60 <propagateFloat32NaN>
    1f44:	b8 20 80 00 	mv r16,r1
    1f48:	e3 ff ff f0 	bi 1f08 <float32_rem+0x80>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    1f4c:	38 01 ff ff 	mvu r1,0xffff
    1f50:	50 28 00 8c 	bgeu r1,r8,2180 <float32_rem+0x2f8>
    1f54:	b9 00 18 00 	mv r3,r8
    1f58:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    1f5c:	3c 63 00 08 	sli r3,r3,8
    1f60:	34 45 ff f8 	addi r5,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1f64:	00 63 00 18 	srui r3,r3,24
    1f68:	78 01 00 00 	mvhi r1,0x0
    1f6c:	3c 63 00 02 	sli r3,r3,2
    1f70:	38 21 3b 70 	ori r1,r1,0x3b70
    1f74:	b4 23 08 00 	add r1,r1,r3
    1f78:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    1f7c:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1f80:	b4 a2 10 00 	add r2,r5,r2
    *zSigPtr = aSig<<shiftCount;
    1f84:	bd 02 40 00 	sl r8,r8,r2
    *zExpPtr = 1 - shiftCount;
    1f88:	c8 22 88 00 	sub r17,r1,r2
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    if ( aExp == 0 ) {
    1f8c:	5c e0 00 12 	bne r7,r0,1fd4 <float32_rem+0x14c>
        if ( aSig == 0 ) return a;
    1f90:	44 87 ff de 	be r4,r7,1f08 <float32_rem+0x80>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    1f94:	38 01 ff ff 	mvu r1,0xffff
    1f98:	50 24 00 74 	bgeu r1,r4,2168 <float32_rem+0x2e0>
    1f9c:	b8 80 18 00 	mv r3,r4
    1fa0:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    1fa4:	3c 63 00 08 	sli r3,r3,8
    1fa8:	34 45 ff f8 	addi r5,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1fac:	00 63 00 18 	srui r3,r3,24
    1fb0:	78 01 00 00 	mvhi r1,0x0
    1fb4:	3c 63 00 02 	sli r3,r3,2
    1fb8:	38 21 3b 70 	ori r1,r1,0x3b70
    1fbc:	b4 23 08 00 	add r1,r1,r3
    1fc0:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    1fc4:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1fc8:	b4 a2 10 00 	add r2,r5,r2
    *zSigPtr = aSig<<shiftCount;
    1fcc:	bc 82 20 00 	sl r4,r4,r2
    *zExpPtr = 1 - shiftCount;
    1fd0:	c8 22 38 00 	sub r7,r1,r2
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return a;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    expDiff = aExp - bExp;
    aSig = ( aSig | 0x00800000 )<<8;
    1fd4:	78 02 00 80 	mvhi r2,0x80
    1fd8:	b8 40 08 00 	mv r1,r2
    1fdc:	38 21 00 00 	ori r1,r1,0x0
    1fe0:	b8 81 08 00 	or r1,r4,r1
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return a;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    expDiff = aExp - bExp;
    1fe4:	c8 f1 98 00 	sub r19,r7,r17
    aSig = ( aSig | 0x00800000 )<<8;
    1fe8:	3c 2c 00 08 	sli r12,r1,8
    bSig = ( bSig | 0x00800000 )<<8;
    if ( expDiff < 0 ) {
    1fec:	4e 60 00 04 	bge r19,r0,1ffc <float32_rem+0x174>
        if ( expDiff < -1 ) return a;
    1ff0:	34 01 ff ff 	mvi r1,-1
    1ff4:	5e 61 ff c5 	bne r19,r1,1f08 <float32_rem+0x80>
        aSig >>= 1;
    1ff8:	01 8c 00 01 	srui r12,r12,1
        if ( aSig == 0 ) return a;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    expDiff = aExp - bExp;
    aSig = ( aSig | 0x00800000 )<<8;
    bSig = ( bSig | 0x00800000 )<<8;
    1ffc:	38 42 00 00 	ori r2,r2,0x0
    2000:	b9 02 08 00 	or r1,r8,r2
    2004:	3c 2d 00 08 	sli r13,r1,8
    if ( expDiff < 0 ) {
        if ( expDiff < -1 ) return a;
        aSig >>= 1;
    }
    q = ( bSig <= aSig );
    2008:	f1 8d 28 00 	cmpgeu r5,r12,r13
    if ( q ) aSig -= bSig;
    200c:	44 a0 00 02 	be r5,r0,2014 <float32_rem+0x18c>
    2010:	c9 8d 60 00 	sub r12,r12,r13
    expDiff -= 32;
    2014:	36 6f ff e0 	addi r15,r19,-32
    while ( 0 < expDiff ) {
    2018:	01 ae 00 02 	srui r14,r13,2
    201c:	b9 e0 58 00 	mv r11,r15
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
    2020:	34 12 00 02 	mvi r18,2
        aSig >>= 1;
    }
    q = ( bSig <= aSig );
    if ( q ) aSig -= bSig;
    expDiff -= 32;
    while ( 0 < expDiff ) {
    2024:	49 e0 00 02 	bg r15,r0,202c <float32_rem+0x1a4>
    2028:	e0 00 00 14 	bi 2078 <float32_rem+0x1f0>
        q = estimateDiv64To32( aSig, 0, bSig );
    202c:	b9 80 08 00 	mv r1,r12
    2030:	34 02 00 00 	mvi r2,0
    2034:	b9 a0 18 00 	mv r3,r13
    2038:	fb ff fb 1d 	calli cac <estimateDiv64To32>
        q = ( 2 < q ) ? q - 2 : 0;
    203c:	34 25 ff fe 	addi r5,r1,-2
    2040:	89 c5 10 00 	mul r2,r14,r5
    2044:	34 0c 00 00 	mvi r12,0
    2048:	54 32 00 26 	bgu r1,r18,20e0 <float32_rem+0x258>
    204c:	b9 80 28 00 	mv r5,r12
        aSig = - ( ( bSig>>2 ) * q );
        expDiff -= 30;
    2050:	35 6b ff e2 	addi r11,r11,-30
        aSig >>= 1;
    }
    q = ( bSig <= aSig );
    if ( q ) aSig -= bSig;
    expDiff -= 32;
    while ( 0 < expDiff ) {
    2054:	49 60 ff f6 	bg r11,r0,202c <float32_rem+0x1a4>
with respect to the corresponding value `b'.  The operation is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_rem( float32 a, float32 b )
{
    2058:	34 02 00 1e 	mvi r2,30
    205c:	36 61 ff df 	addi r1,r19,-33
    2060:	8c 22 08 00 	divu r1,r1,r2
    2064:	35 e3 ff e2 	addi r3,r15,-30
    2068:	3c 22 00 05 	sli r2,r1,5
    206c:	b4 21 08 00 	add r1,r1,r1
    2070:	c8 22 08 00 	sub r1,r1,r2
    2074:	b4 61 78 00 	add r15,r3,r1
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
        aSig = - ( ( bSig>>2 ) * q );
        expDiff -= 30;
    }
    expDiff += 32;
    2078:	35 eb 00 20 	addi r11,r15,32
        q >>= 32 - expDiff;
        bSig >>= 2;
        aSig = ( ( aSig>>1 )<<( expDiff - 1 ) ) - bSig * q;
    }
    else {
        aSig >>= 2;
    207c:	01 83 00 02 	srui r3,r12,2
        q = ( 2 < q ) ? q - 2 : 0;
        aSig = - ( ( bSig>>2 ) * q );
        expDiff -= 30;
    }
    expDiff += 32;
    if ( 0 < expDiff ) {
    2080:	4c 0b 00 0e 	bge r0,r11,20b8 <float32_rem+0x230>
        q = estimateDiv64To32( aSig, 0, bSig );
    2084:	34 02 00 00 	mvi r2,0
    2088:	b9 a0 18 00 	mv r3,r13
    208c:	b9 80 08 00 	mv r1,r12
    2090:	fb ff fb 07 	calli cac <estimateDiv64To32>
    2094:	b8 20 10 00 	mv r2,r1
        q = ( 2 < q ) ? q - 2 : 0;
    2098:	34 01 00 02 	mvi r1,2
    209c:	54 41 00 2e 	bgu r2,r1,2154 <float32_rem+0x2cc>
    20a0:	34 05 00 00 	mvi r5,0
    20a4:	b8 a0 18 00 	mv r3,r5
        q >>= 32 - expDiff;
        bSig >>= 2;
        aSig = ( ( aSig>>1 )<<( expDiff - 1 ) ) - bSig * q;
    20a8:	01 81 00 01 	srui r1,r12,1
    20ac:	35 62 ff ff 	addi r2,r11,-1
    20b0:	bc 22 08 00 	sl r1,r1,r2
    20b4:	c8 23 18 00 	sub r3,r1,r3
    }
    else {
        aSig >>= 2;
    20b8:	c8 0e 30 00 	sub r6,r0,r14
    20bc:	c8 6e 10 00 	sub r2,r3,r14
        bSig >>= 2;
    }
    do {
        alternateASig = aSig;
        ++q;
    20c0:	b8 40 38 00 	mv r7,r2
    20c4:	b4 46 10 00 	add r2,r2,r6
        aSig -= bSig;
    } while ( 0 <= (sbits32) aSig );
    20c8:	b4 4e 08 00 	add r1,r2,r14
        aSig >>= 2;
        bSig >>= 2;
    }
    do {
        alternateASig = aSig;
        ++q;
    20cc:	34 a5 00 01 	addi r5,r5,1
    20d0:	b4 c3 20 00 	add r4,r6,r3
        aSig -= bSig;
    } while ( 0 <= (sbits32) aSig );
    20d4:	48 01 00 0f 	bg r0,r1,2110 <float32_rem+0x288>
    20d8:	b8 80 18 00 	mv r3,r4
    20dc:	e3 ff ff f9 	bi 20c0 <float32_rem+0x238>
    q = ( bSig <= aSig );
    if ( q ) aSig -= bSig;
    expDiff -= 32;
    while ( 0 < expDiff ) {
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
    20e0:	c8 02 60 00 	sub r12,r0,r2
    20e4:	e3 ff ff db 	bi 2050 <float32_rem+0x1c8>
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    if ( aExp == 0xFF ) {
        if ( aSig || ( ( bExp == 0xFF ) && bSig ) ) {
    20e8:	5c 80 00 05 	bne r4,r0,20fc <float32_rem+0x274>
    20ec:	e6 23 08 00 	cmpe r1,r17,r3
    20f0:	7d 02 00 00 	cmpnei r2,r8,0
    20f4:	a0 22 08 00 	and r1,r1,r2
    20f8:	44 24 ff 7e 	be r1,r4,1ef0 <float32_rem+0x68>
            return propagateFloat32NaN( a, b );
    20fc:	ba 00 08 00 	mv r1,r16
    2100:	b8 c0 10 00 	mv r2,r6
    2104:	fb ff fb 57 	calli e60 <propagateFloat32NaN>
    2108:	b8 20 80 00 	mv r16,r1
    210c:	e3 ff ff 7f 	bi 1f08 <float32_rem+0x80>
    do {
        alternateASig = aSig;
        ++q;
        aSig -= bSig;
    } while ( 0 <= (sbits32) aSig );
    sigMean = aSig + alternateASig;
    2110:	b4 64 30 00 	add r6,r3,r4
    if ( ( sigMean < 0 ) || ( ( sigMean == 0 ) && ( q & 1 ) ) ) {
    2114:	48 06 00 04 	bg r0,r6,2124 <float32_rem+0x29c>
    2118:	5c c0 00 0d 	bne r6,r0,214c <float32_rem+0x2c4>
    211c:	20 a1 00 01 	andi r1,r5,0x1
    2120:	44 26 00 0b 	be r1,r6,214c <float32_rem+0x2c4>
    2124:	b8 60 38 00 	mv r7,r3
        aSig = alternateASig;
    }
    zSign = ( (sbits32) aSig < 0 );
    2128:	00 e4 00 1f 	srui r4,r7,31
    if ( zSign ) aSig = - aSig;
    212c:	44 80 00 02 	be r4,r0,2134 <float32_rem+0x2ac>
    2130:	c8 03 18 00 	sub r3,r0,r3
    return normalizeRoundAndPackFloat32( aSign ^ zSign, bExp, aSig );
    2134:	02 01 00 1f 	srui r1,r16,31
    2138:	ba 20 10 00 	mv r2,r17
    213c:	98 81 08 00 	xor r1,r4,r1
    2140:	fb ff fb db 	calli 10ac <normalizeRoundAndPackFloat32>
    2144:	b8 20 80 00 	mv r16,r1
    2148:	e3 ff ff 70 	bi 1f08 <float32_rem+0x80>
        alternateASig = aSig;
        ++q;
        aSig -= bSig;
    } while ( 0 <= (sbits32) aSig );
    sigMean = aSig + alternateASig;
    if ( ( sigMean < 0 ) || ( ( sigMean == 0 ) && ( q & 1 ) ) ) {
    214c:	b8 80 18 00 	mv r3,r4
    2150:	e3 ff ff f6 	bi 2128 <float32_rem+0x2a0>
        expDiff -= 30;
    }
    expDiff += 32;
    if ( 0 < expDiff ) {
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
    2154:	34 42 ff fe 	addi r2,r2,-2
    2158:	c8 0b 08 00 	sub r1,r0,r11
    215c:	80 41 28 00 	sru r5,r2,r1
    2160:	88 ae 18 00 	mul r3,r5,r14
    2164:	e3 ff ff d1 	bi 20a8 <float32_rem+0x220>
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    2168:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    216c:	3c 83 00 10 	sli r3,r4,16
    }
    if ( a < 0x1000000 ) {
    2170:	38 21 ff ff 	ori r1,r1,0xffff
    2174:	50 23 00 09 	bgeu r1,r3,2198 <float32_rem+0x310>
    2178:	34 05 00 08 	mvi r5,8
    217c:	e3 ff ff 8c 	bi 1fac <float32_rem+0x124>
    2180:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    2184:	3d 03 00 10 	sli r3,r8,16
    }
    if ( a < 0x1000000 ) {
    2188:	38 21 ff ff 	ori r1,r1,0xffff
    218c:	50 23 00 05 	bgeu r1,r3,21a0 <float32_rem+0x318>
    2190:	34 05 00 08 	mvi r5,8
    2194:	e3 ff ff 74 	bi 1f64 <float32_rem+0xdc>
    2198:	34 02 00 18 	mvi r2,24
    219c:	e3 ff ff 82 	bi 1fa4 <float32_rem+0x11c>
    21a0:	34 02 00 18 	mvi r2,24
    21a4:	e3 ff ff 6e 	bi 1f5c <float32_rem+0xd4>

000021a8 <float32_sqrt>:
The operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_sqrt( float32 a )
{
    21a8:	37 9c ff ec 	addi sp,sp,-20
    21ac:	5b 8b 00 14 	sw (sp+20),r11
    21b0:	5b 8c 00 10 	sw (sp+16),r12
    21b4:	5b 8d 00 0c 	sw (sp+12),r13
    21b8:	5b 8e 00 08 	sw (sp+8),r14
    21bc:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    21c0:	00 22 00 17 	srui r2,r1,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    21c4:	78 03 00 7f 	mvhi r3,0x7f
    21c8:	38 63 ff ff 	ori r3,r3,0xffff
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    21cc:	20 4c 00 ff 	andi r12,r2,0xff
    bits32 term0, term1;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
    21d0:	34 02 00 ff 	mvi r2,255
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    21d4:	a0 23 28 00 	and r5,r1,r3
The operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_sqrt( float32 a )
{
    21d8:	b8 20 20 00 	mv r4,r1
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    21dc:	00 23 00 1f 	srui r3,r1,31
    bits32 term0, term1;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
    21e0:	45 82 00 55 	be r12,r2,2334 <float32_sqrt+0x18c>
        if ( aSig ) return propagateFloat32NaN( a, 0 );
        if ( ! aSign ) return a;
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( aSign ) {
    21e4:	44 60 00 11 	be r3,r0,2228 <float32_sqrt+0x80>
        if ( ( aExp | aSig ) == 0 ) return a;
    21e8:	b9 85 08 00 	or r1,r12,r5
    21ec:	44 20 00 07 	be r1,r0,2208 <float32_sqrt+0x60>
    21f0:	78 02 00 00 	mvhi r2,0x0
    21f4:	38 42 40 2c 	ori r2,r2,0x402c
    21f8:	28 41 00 00 	lw r1,(r2+0)
    21fc:	34 04 ff ff 	mvi r4,-1
    2200:	38 21 00 10 	ori r1,r1,0x10
    2204:	58 41 00 00 	sw (r2+0),r1
        }
    }
    shift32RightJamming( zSig, 1, &zSig );
    return roundAndPackFloat32( 0, zExp, zSig );

}
    2208:	b8 80 08 00 	mv r1,r4
    220c:	2b 9d 00 04 	lw ra,(sp+4)
    2210:	2b 8b 00 14 	lw r11,(sp+20)
    2214:	2b 8c 00 10 	lw r12,(sp+16)
    2218:	2b 8d 00 0c 	lw r13,(sp+12)
    221c:	2b 8e 00 08 	lw r14,(sp+8)
    2220:	37 9c 00 14 	addi sp,sp,20
    2224:	c3 a0 00 00 	ret
    if ( aSign ) {
        if ( ( aExp | aSig ) == 0 ) return a;
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( aExp == 0 ) {
    2228:	5d 83 00 13 	bne r12,r3,2274 <float32_sqrt+0xcc>
        if ( aSig == 0 ) return 0;
    222c:	b8 a0 20 00 	mv r4,r5
    2230:	44 ac ff f6 	be r5,r12,2208 <float32_sqrt+0x60>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    2234:	38 01 ff ff 	mvu r1,0xffff
    2238:	50 25 00 86 	bgeu r1,r5,2450 <float32_sqrt+0x2a8>
    223c:	b8 a0 18 00 	mv r3,r5
    2240:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    2244:	3c 63 00 08 	sli r3,r3,8
    2248:	34 44 ff f8 	addi r4,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    224c:	00 63 00 18 	srui r3,r3,24
    2250:	78 01 00 00 	mvhi r1,0x0
    2254:	3c 63 00 02 	sli r3,r3,2
    2258:	38 21 3b 70 	ori r1,r1,0x3b70
    225c:	b4 23 08 00 	add r1,r1,r3
    2260:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    2264:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    2268:	b4 82 10 00 	add r2,r4,r2
    *zSigPtr = aSig<<shiftCount;
    226c:	bc a2 28 00 	sl r5,r5,r2
    *zExpPtr = 1 - shiftCount;
    2270:	c8 22 60 00 	sub r12,r1,r2
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return 0;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = ( ( aExp - 0x7F )>>1 ) + 0x7E;
    aSig = ( aSig | 0x00800000 )<<8;
    2274:	78 01 00 80 	mvhi r1,0x80
    2278:	38 21 00 00 	ori r1,r1,0x0
    227c:	b8 a1 08 00 	or r1,r5,r1
    2280:	3c 2d 00 08 	sli r13,r1,8
    };
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    if ( aExp & 1 ) {
    2284:	21 8e 00 01 	andi r14,r12,0x1
        0x0200, 0x0179, 0x0109, 0x00AF, 0x0068, 0x0034, 0x0012, 0x0002
    };
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    2288:	01 a1 00 1b 	srui r1,r13,27
    228c:	20 23 00 0f 	andi r3,r1,0xf
    if ( aExp & 1 ) {
    2290:	5d c0 00 2c 	bne r14,r0,2340 <float32_sqrt+0x198>
        z = 0x4000 + ( a>>17 ) - sqrtOddAdjustments[ index ];
        z = ( ( a / z )<<14 ) + ( z<<15 );
        a >>= 1;
    }
    else {
        z = 0x8000 + ( a>>17 ) - sqrtEvenAdjustments[ index ];
    2294:	78 01 00 00 	mvhi r1,0x0
    2298:	b4 63 10 00 	add r2,r3,r3
    229c:	38 21 3f 70 	ori r1,r1,0x3f70
    22a0:	b4 22 08 00 	add r1,r1,r2
    22a4:	2c 23 00 00 	lhu r3,(r1+0)
    22a8:	01 a2 00 11 	srui r2,r13,17
    22ac:	38 01 80 00 	mvu r1,0x8000
    22b0:	b4 41 10 00 	add r2,r2,r1
    22b4:	c8 43 10 00 	sub r2,r2,r3
        z = a / z + z;
    22b8:	8d a2 08 00 	divu r1,r13,r2
        z = ( 0x20000 <= z ) ? 0xFFFF8000 : ( z<<15 );
    22bc:	78 03 00 01 	mvhi r3,0x1
        z = ( ( a / z )<<14 ) + ( z<<15 );
        a >>= 1;
    }
    else {
        z = 0x8000 + ( a>>17 ) - sqrtEvenAdjustments[ index ];
        z = a / z + z;
    22c0:	b4 22 08 00 	add r1,r1,r2
        z = ( 0x20000 <= z ) ? 0xFFFF8000 : ( z<<15 );
    22c4:	38 63 ff ff 	ori r3,r3,0xffff
    22c8:	3c 2b 00 0f 	sli r11,r1,15
    22cc:	50 61 00 02 	bgeu r3,r1,22d4 <float32_sqrt+0x12c>
    22d0:	34 0b 80 00 	mvi r11,-32768
        if ( z <= a ) return (bits32) ( ( (sbits32) a )>>1 );
    22d4:	b9 a0 20 00 	mv r4,r13
    22d8:	55 6d 00 27 	bgu r11,r13,2374 <float32_sqrt+0x1cc>
    22dc:	15 a1 00 01 	sri r1,r13,1
    zSig = estimateSqrt32( aExp, aSig ) + 2;
    22e0:	34 26 00 02 	addi r6,r1,2
    if ( ( zSig & 0x7F ) <= 5 ) {
    22e4:	20 c2 00 7f 	andi r2,r6,0x7f
    22e8:	34 01 00 05 	mvi r1,5
    22ec:	50 22 00 2a 	bgeu r1,r2,2394 <float32_sqrt+0x1ec>
    22f0:	00 c2 00 01 	srui r2,r6,1
    22f4:	20 c1 00 01 	andi r1,r6,0x1
    22f8:	b8 22 18 00 	or r3,r1,r2
            }
            zSig |= ( ( rem0 | rem1 ) != 0 );
        }
    }
    shift32RightJamming( zSig, 1, &zSig );
    return roundAndPackFloat32( 0, zExp, zSig );
    22fc:	35 82 ff 81 	addi r2,r12,-127
    2300:	14 42 00 01 	sri r2,r2,1
    2304:	34 01 00 00 	mvi r1,0
    2308:	34 42 00 7e 	addi r2,r2,126
    230c:	fb ff fb 04 	calli f1c <roundAndPackFloat32>
    2310:	b8 20 20 00 	mv r4,r1

}
    2314:	b8 80 08 00 	mv r1,r4
    2318:	2b 9d 00 04 	lw ra,(sp+4)
    231c:	2b 8b 00 14 	lw r11,(sp+20)
    2320:	2b 8c 00 10 	lw r12,(sp+16)
    2324:	2b 8d 00 0c 	lw r13,(sp+12)
    2328:	2b 8e 00 08 	lw r14,(sp+8)
    232c:	37 9c 00 14 	addi sp,sp,20
    2330:	c3 a0 00 00 	ret

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, 0 );
    2334:	5c a0 00 43 	bne r5,r0,2440 <float32_sqrt+0x298>
        if ( ! aSign ) return a;
    2338:	5c 65 ff ae 	bne r3,r5,21f0 <float32_sqrt+0x48>
    233c:	e3 ff ff b3 	bi 2208 <float32_sqrt+0x60>
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    if ( aExp & 1 ) {
        z = 0x4000 + ( a>>17 ) - sqrtOddAdjustments[ index ];
    2340:	78 02 00 00 	mvhi r2,0x0
    2344:	b4 63 08 00 	add r1,r3,r3
    2348:	38 42 3f 90 	ori r2,r2,0x3f90
    234c:	b4 41 10 00 	add r2,r2,r1
    2350:	2c 43 00 00 	lhu r3,(r2+0)
    2354:	01 a1 00 11 	srui r1,r13,17
        z = ( ( a / z )<<14 ) + ( z<<15 );
        a >>= 1;
    2358:	01 a4 00 01 	srui r4,r13,1
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    if ( aExp & 1 ) {
        z = 0x4000 + ( a>>17 ) - sqrtOddAdjustments[ index ];
    235c:	34 21 40 00 	addi r1,r1,16384
    2360:	c8 23 08 00 	sub r1,r1,r3
        z = ( ( a / z )<<14 ) + ( z<<15 );
    2364:	8d a1 10 00 	divu r2,r13,r1
    2368:	3c 21 00 0f 	sli r1,r1,15
    236c:	3c 42 00 0e 	sli r2,r2,14
    2370:	b4 41 58 00 	add r11,r2,r1
        z = 0x8000 + ( a>>17 ) - sqrtEvenAdjustments[ index ];
        z = a / z + z;
        z = ( 0x20000 <= z ) ? 0xFFFF8000 : ( z<<15 );
        if ( z <= a ) return (bits32) ( ( (sbits32) a )>>1 );
    }
    return ( ( estimateDiv64To32( a, 0, z ) )>>1 ) + ( z>>1 );
    2374:	34 02 00 00 	mvi r2,0
    2378:	b8 80 08 00 	mv r1,r4
    237c:	b9 60 18 00 	mv r3,r11
    2380:	fb ff fa 4b 	calli cac <estimateDiv64To32>
    2384:	00 21 00 01 	srui r1,r1,1
    2388:	01 62 00 01 	srui r2,r11,1
    238c:	b4 41 08 00 	add r1,r2,r1
    2390:	e3 ff ff d4 	bi 22e0 <float32_sqrt+0x138>
    }
    zExp = ( ( aExp - 0x7F )>>1 ) + 0x7E;
    aSig = ( aSig | 0x00800000 )<<8;
    zSig = estimateSqrt32( aExp, aSig ) + 2;
    if ( ( zSig & 0x7F ) <= 5 ) {
        if ( zSig < 2 ) {
    2394:	34 01 00 01 	mvi r1,1
    2398:	54 c1 00 04 	bgu r6,r1,23a8 <float32_sqrt+0x200>
    239c:	78 03 7f ff 	mvhi r3,0x7fff
    23a0:	38 63 ff ff 	ori r3,r3,0xffff
    23a4:	e3 ff ff d6 	bi 22fc <float32_sqrt+0x154>
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    23a8:	00 c3 00 10 	srui r3,r6,16

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    23ac:	20 c4 ff ff 	andi r4,r6,0xffff
    zMiddleA = ( (bits32) aLow ) * bHigh;
    23b0:	88 64 08 00 	mul r1,r3,r4
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    23b4:	b4 21 28 00 	add r5,r1,r1
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    23b8:	54 25 00 2c 	bgu r1,r5,2468 <float32_sqrt+0x2c0>
    23bc:	34 07 00 00 	mvi r7,0

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    23c0:	88 84 20 00 	mul r4,r4,r4
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
    23c4:	3c a2 00 10 	sli r2,r5,16
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    23c8:	88 63 18 00 	mul r3,r3,r3
    23cc:	81 ae 08 00 	sru r1,r13,r14
    zMiddleA <<= 16;
    z1 += zMiddleA;
    23d0:	b4 44 20 00 	add r4,r2,r4
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    23d4:	00 a5 00 10 	srui r5,r5,16
    23d8:	c8 23 08 00 	sub r1,r1,r3
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    23dc:	f4 44 10 00 	cmpgu r2,r2,r4
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    23e0:	c8 25 08 00 	sub r1,r1,r5
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    23e4:	7c 83 00 00 	cmpnei r3,r4,0
    23e8:	c8 22 08 00 	sub r1,r1,r2
    23ec:	c8 23 08 00 	sub r1,r1,r3
    23f0:	c8 27 28 00 	sub r5,r1,r7
INLINE void
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    23f4:	c8 04 18 00 	sub r3,r0,r4
        }
        else {
            aSig >>= aExp & 1;
            mul32To64( zSig, zSig, &term0, &term1 );
            sub64( aSig, 0, term0, term1, &rem0, &rem1 );
            while ( (sbits32) rem0 < 0 ) {
    23f8:	4c a0 00 0b 	bge r5,r0,2424 <float32_sqrt+0x27c>
                --zSig;
    23fc:	34 c6 ff ff 	addi r6,r6,-1
 add64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{
    bits32 z1;

    z1 = a1 + b1;
    2400:	b4 c6 08 00 	add r1,r6,r6
    2404:	38 21 00 01 	ori r1,r1,0x1
        }
        else {
            aSig >>= aExp & 1;
            mul32To64( zSig, zSig, &term0, &term1 );
            sub64( aSig, 0, term0, term1, &rem0, &rem1 );
            while ( (sbits32) rem0 < 0 ) {
    2408:	b8 60 10 00 	mv r2,r3
    240c:	b4 23 18 00 	add r3,r1,r3
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
    2410:	f4 43 10 00 	cmpgu r2,r2,r3
    2414:	00 c1 00 1f 	srui r1,r6,31
    2418:	b4 22 08 00 	add r1,r1,r2
    241c:	b4 a1 28 00 	add r5,r5,r1
    2420:	48 05 ff f7 	bg r0,r5,23fc <float32_sqrt+0x254>
                --zSig;
                shortShift64Left( 0, zSig, 1, &term0, &term1 );
                term1 |= 1;
                add64( rem0, rem1, term0, term1, &rem0, &rem1 );
            }
            zSig |= ( ( rem0 | rem1 ) != 0 );
    2424:	b8 a3 08 00 	or r1,r5,r3
    2428:	7c 21 00 00 	cmpnei r1,r1,0
    242c:	b8 26 08 00 	or r1,r1,r6
    2430:	00 22 00 01 	srui r2,r1,1
    2434:	20 21 00 01 	andi r1,r1,0x1
    2438:	b8 22 18 00 	or r3,r1,r2
    243c:	e3 ff ff b0 	bi 22fc <float32_sqrt+0x154>

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, 0 );
    2440:	34 02 00 00 	mvi r2,0
    2444:	fb ff fa 87 	calli e60 <propagateFloat32NaN>
    2448:	b8 20 20 00 	mv r4,r1
    244c:	e3 ff ff 6f 	bi 2208 <float32_sqrt+0x60>
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    2450:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    2454:	3c a3 00 10 	sli r3,r5,16
    }
    if ( a < 0x1000000 ) {
    2458:	38 21 ff ff 	ori r1,r1,0xffff
    245c:	50 23 00 06 	bgeu r1,r3,2474 <float32_sqrt+0x2cc>
    2460:	34 04 00 08 	mvi r4,8
    2464:	e3 ff ff 7a 	bi 224c <float32_sqrt+0xa4>
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    2468:	78 07 00 01 	mvhi r7,0x1
    246c:	38 e7 00 00 	ori r7,r7,0x0
    2470:	e3 ff ff d4 	bi 23c0 <float32_sqrt+0x218>
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    2474:	34 02 00 18 	mvi r2,24
    2478:	e3 ff ff 73 	bi 2244 <float32_sqrt+0x9c>

0000247c <float32_eq>:
corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_eq( float32 a, float32 b )
{
    247c:	b8 20 20 00 	mv r4,r1

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2480:	00 21 00 17 	srui r1,r1,23
corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_eq( float32 a, float32 b )
{
    2484:	b8 40 28 00 	mv r5,r2

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2488:	20 21 00 ff 	andi r1,r1,0xff
    248c:	34 02 00 ff 	mvi r2,255
    2490:	44 22 00 0c 	be r1,r2,24c0 <float32_eq+0x44>
    2494:	00 a1 00 17 	srui r1,r5,23
    2498:	34 02 00 ff 	mvi r2,255
    249c:	20 21 00 ff 	andi r1,r1,0xff
    24a0:	44 22 00 16 	be r1,r2,24f8 <float32_eq+0x7c>
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );
    24a4:	34 03 00 01 	mvi r3,1
    24a8:	44 85 00 04 	be r4,r5,24b8 <float32_eq+0x3c>
    24ac:	b8 a4 08 00 	or r1,r5,r4
    24b0:	b4 21 08 00 	add r1,r1,r1
    24b4:	64 23 00 00 	cmpei r3,r1,0

}
    24b8:	b8 60 08 00 	mv r1,r3
    24bc:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_eq( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    24c0:	78 01 00 7f 	mvhi r1,0x7f
    24c4:	38 21 ff ff 	ori r1,r1,0xffff
    24c8:	a0 81 08 00 	and r1,r4,r1
    24cc:	44 20 ff f2 	be r1,r0,2494 <float32_eq+0x18>
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    24d0:	00 81 00 16 	srui r1,r4,22
    24d4:	34 02 01 fe 	mvi r2,510
    24d8:	20 21 01 ff 	andi r1,r1,0x1ff
    24dc:	44 22 00 0f 	be r1,r2,2518 <float32_eq+0x9c>
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );
    24e0:	00 a1 00 16 	srui r1,r5,22
    24e4:	34 02 01 fe 	mvi r2,510
    24e8:	20 21 01 ff 	andi r1,r1,0x1ff
    24ec:	44 22 00 17 	be r1,r2,2548 <float32_eq+0xcc>
    24f0:	34 03 00 00 	mvi r3,0
    24f4:	e3 ff ff f1 	bi 24b8 <float32_eq+0x3c>
-------------------------------------------------------------------------------
*/
flag float32_eq( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    24f8:	78 01 00 7f 	mvhi r1,0x7f
    24fc:	38 21 ff ff 	ori r1,r1,0xffff
    2500:	a0 a1 08 00 	and r1,r5,r1
    2504:	44 20 ff e8 	be r1,r0,24a4 <float32_eq+0x28>
    2508:	00 81 00 16 	srui r1,r4,22
    250c:	34 02 01 fe 	mvi r2,510
    2510:	20 21 01 ff 	andi r1,r1,0x1ff
    2514:	5c 22 ff f3 	bne r1,r2,24e0 <float32_eq+0x64>
    2518:	78 01 00 3f 	mvhi r1,0x3f
    251c:	38 21 ff ff 	ori r1,r1,0xffff
    2520:	a0 81 08 00 	and r1,r4,r1
    2524:	44 20 ff ef 	be r1,r0,24e0 <float32_eq+0x64>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    2528:	78 02 00 00 	mvhi r2,0x0
    252c:	38 42 40 2c 	ori r2,r2,0x402c
    2530:	28 41 00 00 	lw r1,(r2+0)
    2534:	34 03 00 00 	mvi r3,0
    2538:	38 21 00 10 	ori r1,r1,0x10
    253c:	58 41 00 00 	sw (r2+0),r1
        }
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );

}
    2540:	b8 60 08 00 	mv r1,r3
    2544:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    2548:	78 01 00 3f 	mvhi r1,0x3f
    254c:	38 21 ff ff 	ori r1,r1,0xffff
    2550:	a0 a1 08 00 	and r1,r5,r1
    2554:	5c 20 ff f5 	bne r1,r0,2528 <float32_eq+0xac>
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );
    2558:	34 03 00 00 	mvi r3,0
    255c:	e3 ff ff d7 	bi 24b8 <float32_eq+0x3c>

00002560 <float32_le>:
performed according to the IEC/IEEE Standard for Binary Floating-point
Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_le( float32 a, float32 b )
{
    2560:	b8 20 28 00 	mv r5,r1
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2564:	00 21 00 17 	srui r1,r1,23
performed according to the IEC/IEEE Standard for Binary Floating-point
Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_le( float32 a, float32 b )
{
    2568:	b8 40 20 00 	mv r4,r2
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    256c:	20 21 00 ff 	andi r1,r1,0xff
    2570:	34 02 00 ff 	mvi r2,255
    2574:	44 22 00 14 	be r1,r2,25c4 <float32_le+0x64>
    2578:	00 81 00 17 	srui r1,r4,23
    257c:	34 02 00 ff 	mvi r2,255
    2580:	20 21 00 ff 	andi r1,r1,0xff
    2584:	44 22 00 1c 	be r1,r2,25f4 <float32_le+0x94>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    2588:	00 a2 00 1f 	srui r2,r5,31
        float_raise( float_flag_invalid );
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    258c:	00 81 00 1f 	srui r1,r4,31
    2590:	44 41 00 07 	be r2,r1,25ac <float32_le+0x4c>
    2594:	5c 40 00 09 	bne r2,r0,25b8 <float32_le+0x58>
    2598:	b8 85 08 00 	or r1,r4,r5
    259c:	b4 21 08 00 	add r1,r1,r1
    25a0:	64 23 00 00 	cmpei r3,r1,0
    return ( a == b ) || ( aSign ^ ( a < b ) );

}
    25a4:	b8 60 08 00 	mv r1,r3
    25a8:	c3 a0 00 00 	ret
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );
    25ac:	f4 85 08 00 	cmpgu r1,r4,r5
    25b0:	fc 22 18 00 	cmpne r3,r1,r2
    25b4:	5c a4 ff fc 	bne r5,r4,25a4 <float32_le+0x44>
    25b8:	34 03 00 01 	mvi r3,1

}
    25bc:	b8 60 08 00 	mv r1,r3
    25c0:	c3 a0 00 00 	ret
*/
flag float32_le( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    25c4:	78 01 00 7f 	mvhi r1,0x7f
    25c8:	38 21 ff ff 	ori r1,r1,0xffff
    25cc:	a0 a1 08 00 	and r1,r5,r1
    25d0:	44 20 ff ea 	be r1,r0,2578 <float32_le+0x18>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    25d4:	78 02 00 00 	mvhi r2,0x0
    25d8:	38 42 40 2c 	ori r2,r2,0x402c
    25dc:	28 41 00 00 	lw r1,(r2+0)
    25e0:	34 03 00 00 	mvi r3,0
    25e4:	38 21 00 10 	ori r1,r1,0x10
    25e8:	58 41 00 00 	sw (r2+0),r1
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );

}
    25ec:	b8 60 08 00 	mv r1,r3
    25f0:	c3 a0 00 00 	ret
*/
flag float32_le( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    25f4:	78 01 00 7f 	mvhi r1,0x7f
    25f8:	38 21 ff ff 	ori r1,r1,0xffff
    25fc:	a0 81 08 00 	and r1,r4,r1
    2600:	44 20 ff e2 	be r1,r0,2588 <float32_le+0x28>
    2604:	78 02 00 00 	mvhi r2,0x0
    2608:	38 42 40 2c 	ori r2,r2,0x402c
    260c:	28 41 00 00 	lw r1,(r2+0)
    2610:	34 03 00 00 	mvi r3,0
    2614:	38 21 00 10 	ori r1,r1,0x10
    2618:	58 41 00 00 	sw (r2+0),r1
    261c:	e3 ff ff f4 	bi 25ec <float32_le+0x8c>

00002620 <float32_lt>:
the corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt( float32 a, float32 b )
{
    2620:	b8 20 28 00 	mv r5,r1
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2624:	00 21 00 17 	srui r1,r1,23
the corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt( float32 a, float32 b )
{
    2628:	b8 40 20 00 	mv r4,r2
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    262c:	20 21 00 ff 	andi r1,r1,0xff
    2630:	34 02 00 ff 	mvi r2,255
    2634:	44 22 00 11 	be r1,r2,2678 <float32_lt+0x58>
    2638:	00 81 00 17 	srui r1,r4,23
    263c:	34 02 00 ff 	mvi r2,255
    2640:	20 21 00 ff 	andi r1,r1,0xff
    2644:	44 22 00 19 	be r1,r2,26a8 <float32_lt+0x88>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    2648:	00 a2 00 1f 	srui r2,r5,31
        float_raise( float_flag_invalid );
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    264c:	00 81 00 1f 	srui r1,r4,31
    2650:	44 41 00 1d 	be r2,r1,26c4 <float32_lt+0xa4>
    2654:	5c 40 00 04 	bne r2,r0,2664 <float32_lt+0x44>
    return ( a != b ) && ( aSign ^ ( a < b ) );
    2658:	34 03 00 00 	mvi r3,0

}
    265c:	b8 60 08 00 	mv r1,r3
    2660:	c3 a0 00 00 	ret
        float_raise( float_flag_invalid );
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    2664:	b8 85 08 00 	or r1,r4,r5
    2668:	b4 21 08 00 	add r1,r1,r1
    266c:	7c 23 00 00 	cmpnei r3,r1,0
    return ( a != b ) && ( aSign ^ ( a < b ) );

}
    2670:	b8 60 08 00 	mv r1,r3
    2674:	c3 a0 00 00 	ret
*/
flag float32_lt( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2678:	78 01 00 7f 	mvhi r1,0x7f
    267c:	38 21 ff ff 	ori r1,r1,0xffff
    2680:	a0 a1 08 00 	and r1,r5,r1
    2684:	44 20 ff ed 	be r1,r0,2638 <float32_lt+0x18>
    2688:	78 02 00 00 	mvhi r2,0x0
    268c:	38 42 40 2c 	ori r2,r2,0x402c
    2690:	28 41 00 00 	lw r1,(r2+0)
    2694:	34 03 00 00 	mvi r3,0
    2698:	38 21 00 10 	ori r1,r1,0x10
    269c:	58 41 00 00 	sw (r2+0),r1
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    return ( a != b ) && ( aSign ^ ( a < b ) );

}
    26a0:	b8 60 08 00 	mv r1,r3
    26a4:	c3 a0 00 00 	ret
*/
flag float32_lt( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    26a8:	78 01 00 7f 	mvhi r1,0x7f
    26ac:	38 21 ff ff 	ori r1,r1,0xffff
    26b0:	a0 81 08 00 	and r1,r4,r1
    26b4:	5c 20 ff f5 	bne r1,r0,2688 <float32_lt+0x68>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    26b8:	00 a2 00 1f 	srui r2,r5,31
        float_raise( float_flag_invalid );
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    26bc:	00 81 00 1f 	srui r1,r4,31
    26c0:	5c 41 ff e5 	bne r2,r1,2654 <float32_lt+0x34>
    return ( a != b ) && ( aSign ^ ( a < b ) );
    26c4:	f4 85 08 00 	cmpgu r1,r4,r5
    26c8:	fc 22 18 00 	cmpne r3,r1,r2
    26cc:	44 a4 ff e3 	be r5,r4,2658 <float32_lt+0x38>

}
    26d0:	b8 60 08 00 	mv r1,r3
    26d4:	c3 a0 00 00 	ret

000026d8 <float32_eq_signaling>:
if either operand is a NaN.  Otherwise, the comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_eq_signaling( float32 a, float32 b )
{
    26d8:	b8 20 28 00 	mv r5,r1

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    26dc:	00 21 00 17 	srui r1,r1,23
if either operand is a NaN.  Otherwise, the comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_eq_signaling( float32 a, float32 b )
{
    26e0:	b8 40 20 00 	mv r4,r2

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    26e4:	20 21 00 ff 	andi r1,r1,0xff
    26e8:	34 02 00 ff 	mvi r2,255
    26ec:	44 22 00 0c 	be r1,r2,271c <float32_eq_signaling+0x44>
    26f0:	00 81 00 17 	srui r1,r4,23
    26f4:	34 02 00 ff 	mvi r2,255
    26f8:	20 21 00 ff 	andi r1,r1,0xff
    26fc:	44 22 00 14 	be r1,r2,274c <float32_eq_signaling+0x74>
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        float_raise( float_flag_invalid );
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );
    2700:	34 03 00 01 	mvi r3,1
    2704:	44 a4 00 04 	be r5,r4,2714 <float32_eq_signaling+0x3c>
    2708:	b8 85 08 00 	or r1,r4,r5
    270c:	b4 21 08 00 	add r1,r1,r1
    2710:	64 23 00 00 	cmpei r3,r1,0

}
    2714:	b8 60 08 00 	mv r1,r3
    2718:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_eq_signaling( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    271c:	78 01 00 7f 	mvhi r1,0x7f
    2720:	38 21 ff ff 	ori r1,r1,0xffff
    2724:	a0 a1 08 00 	and r1,r5,r1
    2728:	44 20 ff f2 	be r1,r0,26f0 <float32_eq_signaling+0x18>
    272c:	78 02 00 00 	mvhi r2,0x0
    2730:	38 42 40 2c 	ori r2,r2,0x402c
    2734:	28 41 00 00 	lw r1,(r2+0)
    2738:	34 03 00 00 	mvi r3,0
    273c:	38 21 00 10 	ori r1,r1,0x10
    2740:	58 41 00 00 	sw (r2+0),r1
        float_raise( float_flag_invalid );
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );

}
    2744:	b8 60 08 00 	mv r1,r3
    2748:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_eq_signaling( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    274c:	78 01 00 7f 	mvhi r1,0x7f
    2750:	38 21 ff ff 	ori r1,r1,0xffff
    2754:	a0 81 08 00 	and r1,r4,r1
    2758:	44 20 ff ea 	be r1,r0,2700 <float32_eq_signaling+0x28>
    275c:	78 02 00 00 	mvhi r2,0x0
    2760:	38 42 40 2c 	ori r2,r2,0x402c
    2764:	28 41 00 00 	lw r1,(r2+0)
    2768:	34 03 00 00 	mvi r3,0
    276c:	38 21 00 10 	ori r1,r1,0x10
    2770:	58 41 00 00 	sw (r2+0),r1
    2774:	e3 ff ff f4 	bi 2744 <float32_eq_signaling+0x6c>

00002778 <float32_le_quiet>:
cause an exception.  Otherwise, the comparison is performed according to the
IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_le_quiet( float32 a, float32 b )
{
    2778:	b8 20 18 00 	mv r3,r1
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    277c:	00 21 00 17 	srui r1,r1,23
cause an exception.  Otherwise, the comparison is performed according to the
IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_le_quiet( float32 a, float32 b )
{
    2780:	b8 40 28 00 	mv r5,r2
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2784:	20 21 00 ff 	andi r1,r1,0xff
    2788:	34 02 00 ff 	mvi r2,255
    278c:	44 22 00 14 	be r1,r2,27dc <float32_le_quiet+0x64>
    2790:	00 a1 00 17 	srui r1,r5,23
    2794:	34 02 00 ff 	mvi r2,255
    2798:	20 21 00 ff 	andi r1,r1,0xff
    279c:	44 22 00 1f 	be r1,r2,2818 <float32_le_quiet+0xa0>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    27a0:	00 62 00 1f 	srui r2,r3,31
        }
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    27a4:	00 a1 00 1f 	srui r1,r5,31
    27a8:	44 41 00 07 	be r2,r1,27c4 <float32_le_quiet+0x4c>
    27ac:	5c 40 00 09 	bne r2,r0,27d0 <float32_le_quiet+0x58>
    27b0:	b8 a3 08 00 	or r1,r5,r3
    27b4:	b4 21 08 00 	add r1,r1,r1
    27b8:	64 24 00 00 	cmpei r4,r1,0
    return ( a == b ) || ( aSign ^ ( a < b ) );

}
    27bc:	b8 80 08 00 	mv r1,r4
    27c0:	c3 a0 00 00 	ret
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );
    27c4:	f4 a3 08 00 	cmpgu r1,r5,r3
    27c8:	fc 22 20 00 	cmpne r4,r1,r2
    27cc:	5c 65 ff fc 	bne r3,r5,27bc <float32_le_quiet+0x44>
    27d0:	34 04 00 01 	mvi r4,1

}
    27d4:	b8 80 08 00 	mv r1,r4
    27d8:	c3 a0 00 00 	ret
*/
flag float32_le_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    27dc:	78 01 00 7f 	mvhi r1,0x7f
    27e0:	38 21 ff ff 	ori r1,r1,0xffff
    27e4:	a0 61 08 00 	and r1,r3,r1
    27e8:	44 20 ff ea 	be r1,r0,2790 <float32_le_quiet+0x18>
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    27ec:	00 61 00 16 	srui r1,r3,22
    27f0:	34 02 01 fe 	mvi r2,510
    27f4:	20 21 01 ff 	andi r1,r1,0x1ff
    27f8:	44 22 00 10 	be r1,r2,2838 <float32_le_quiet+0xc0>
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );
    27fc:	00 a1 00 16 	srui r1,r5,22
    2800:	34 02 01 fe 	mvi r2,510
    2804:	20 21 01 ff 	andi r1,r1,0x1ff
    2808:	44 22 00 18 	be r1,r2,2868 <float32_le_quiet+0xf0>
    280c:	34 04 00 00 	mvi r4,0

}
    2810:	b8 80 08 00 	mv r1,r4
    2814:	c3 a0 00 00 	ret
*/
flag float32_le_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2818:	78 01 00 7f 	mvhi r1,0x7f
    281c:	38 21 ff ff 	ori r1,r1,0xffff
    2820:	a0 a1 08 00 	and r1,r5,r1
    2824:	44 20 ff df 	be r1,r0,27a0 <float32_le_quiet+0x28>
    2828:	00 61 00 16 	srui r1,r3,22
    282c:	34 02 01 fe 	mvi r2,510
    2830:	20 21 01 ff 	andi r1,r1,0x1ff
    2834:	5c 22 ff f2 	bne r1,r2,27fc <float32_le_quiet+0x84>
    2838:	78 01 00 3f 	mvhi r1,0x3f
    283c:	38 21 ff ff 	ori r1,r1,0xffff
    2840:	a0 61 08 00 	and r1,r3,r1
    2844:	44 20 ff ee 	be r1,r0,27fc <float32_le_quiet+0x84>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    2848:	78 02 00 00 	mvhi r2,0x0
    284c:	38 42 40 2c 	ori r2,r2,0x402c
    2850:	28 41 00 00 	lw r1,(r2+0)
    2854:	34 04 00 00 	mvi r4,0
    2858:	38 21 00 10 	ori r1,r1,0x10
    285c:	58 41 00 00 	sw (r2+0),r1
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );

}
    2860:	b8 80 08 00 	mv r1,r4
    2864:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    2868:	78 01 00 3f 	mvhi r1,0x3f
    286c:	38 21 ff ff 	ori r1,r1,0xffff
    2870:	a0 a1 08 00 	and r1,r5,r1
    2874:	5c 20 ff f5 	bne r1,r0,2848 <float32_le_quiet+0xd0>
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );
    2878:	34 04 00 00 	mvi r4,0
    287c:	e3 ff ff e5 	bi 2810 <float32_le_quiet+0x98>

00002880 <float32_lt_quiet>:
exception.  Otherwise, the comparison is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt_quiet( float32 a, float32 b )
{
    2880:	b8 20 20 00 	mv r4,r1
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2884:	00 21 00 17 	srui r1,r1,23
exception.  Otherwise, the comparison is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt_quiet( float32 a, float32 b )
{
    2888:	b8 40 28 00 	mv r5,r2
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    288c:	20 21 00 ff 	andi r1,r1,0xff
    2890:	34 02 00 ff 	mvi r2,255
    2894:	44 22 00 14 	be r1,r2,28e4 <float32_lt_quiet+0x64>
    2898:	00 a1 00 17 	srui r1,r5,23
    289c:	34 02 00 ff 	mvi r2,255
    28a0:	20 21 00 ff 	andi r1,r1,0xff
    28a4:	44 22 00 28 	be r1,r2,2944 <float32_lt_quiet+0xc4>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    28a8:	00 82 00 1f 	srui r2,r4,31
        }
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    28ac:	00 a1 00 1f 	srui r1,r5,31
    28b0:	44 41 00 07 	be r2,r1,28cc <float32_lt_quiet+0x4c>
    28b4:	44 40 00 09 	be r2,r0,28d8 <float32_lt_quiet+0x58>
    28b8:	b8 a4 08 00 	or r1,r5,r4
    28bc:	b4 21 08 00 	add r1,r1,r1
    28c0:	7c 23 00 00 	cmpnei r3,r1,0
    return ( a != b ) && ( aSign ^ ( a < b ) );

}
    28c4:	b8 60 08 00 	mv r1,r3
    28c8:	c3 a0 00 00 	ret
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    return ( a != b ) && ( aSign ^ ( a < b ) );
    28cc:	f4 a4 08 00 	cmpgu r1,r5,r4
    28d0:	fc 22 18 00 	cmpne r3,r1,r2
    28d4:	5c 85 ff fc 	bne r4,r5,28c4 <float32_lt_quiet+0x44>
    28d8:	34 03 00 00 	mvi r3,0

}
    28dc:	b8 60 08 00 	mv r1,r3
    28e0:	c3 a0 00 00 	ret
*/
flag float32_lt_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    28e4:	78 01 00 7f 	mvhi r1,0x7f
    28e8:	38 21 ff ff 	ori r1,r1,0xffff
    28ec:	a0 81 08 00 	and r1,r4,r1
    28f0:	44 20 ff ea 	be r1,r0,2898 <float32_lt_quiet+0x18>
    28f4:	00 81 00 16 	srui r1,r4,22
    28f8:	34 02 01 fe 	mvi r2,510
    28fc:	20 21 01 ff 	andi r1,r1,0x1ff
    2900:	44 22 00 19 	be r1,r2,2964 <float32_lt_quiet+0xe4>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    2904:	00 a1 00 16 	srui r1,r5,22
    2908:	34 02 01 fe 	mvi r2,510
    290c:	20 21 01 ff 	andi r1,r1,0x1ff
    2910:	5c 22 ff f2 	bne r1,r2,28d8 <float32_lt_quiet+0x58>
    2914:	78 01 00 3f 	mvhi r1,0x3f
    2918:	38 21 ff ff 	ori r1,r1,0xffff
    291c:	a0 a1 08 00 	and r1,r5,r1
    2920:	44 20 ff ee 	be r1,r0,28d8 <float32_lt_quiet+0x58>
    2924:	78 02 00 00 	mvhi r2,0x0
    2928:	38 42 40 2c 	ori r2,r2,0x402c
    292c:	28 41 00 00 	lw r1,(r2+0)
    2930:	34 03 00 00 	mvi r3,0
    2934:	38 21 00 10 	ori r1,r1,0x10
    2938:	58 41 00 00 	sw (r2+0),r1
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    return ( a != b ) && ( aSign ^ ( a < b ) );

}
    293c:	b8 60 08 00 	mv r1,r3
    2940:	c3 a0 00 00 	ret
*/
flag float32_lt_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2944:	78 01 00 7f 	mvhi r1,0x7f
    2948:	38 21 ff ff 	ori r1,r1,0xffff
    294c:	a0 a1 08 00 	and r1,r5,r1
    2950:	44 20 ff d6 	be r1,r0,28a8 <float32_lt_quiet+0x28>
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    2954:	00 81 00 16 	srui r1,r4,22
    2958:	34 02 01 fe 	mvi r2,510
    295c:	20 21 01 ff 	andi r1,r1,0x1ff
    2960:	5c 22 ff e9 	bne r1,r2,2904 <float32_lt_quiet+0x84>
    2964:	78 01 00 3f 	mvhi r1,0x3f
    2968:	38 21 ff ff 	ori r1,r1,0xffff
    296c:	a0 81 08 00 	and r1,r4,r1
    2970:	44 20 ff e5 	be r1,r0,2904 <float32_lt_quiet+0x84>
    2974:	e3 ff ff ec 	bi 2924 <float32_lt_quiet+0xa4>

00002978 <float32_abs>:
-------------------------------------------------------------------------------
This is an abs function
-------------------------------------------------------------------------------
*/
float32 float32_abs(float32 a)
{
    2978:	37 9c ff fc 	addi sp,sp,-4
    297c:	5b 9d 00 04 	sw (sp+4),ra
    2980:	b8 20 10 00 	mv r2,r1
	if ( extractFloat32Sign( a )){
    2984:	4c 20 00 05 	bge r1,r0,2998 <float32_abs+0x20>
	return float32_mul( a, 0xBF800000 ) ;
    2988:	78 02 bf 80 	mvhi r2,0xbf80
    298c:	38 42 00 00 	ori r2,r2,0x0
    2990:	fb ff fb d6 	calli 18e8 <float32_mul>
    2994:	b8 20 10 00 	mv r2,r1
	}
	else {
	return a;
	}
}
    2998:	b8 40 08 00 	mv r1,r2
    299c:	2b 9d 00 04 	lw ra,(sp+4)
    29a0:	37 9c 00 04 	addi sp,sp,4
    29a4:	c3 a0 00 00 	ret

000029a8 <float32_artan>:
That formula was taken from equation 7
http://www.iro.umontreal.ca/~mignotte/IFT2425/Documents/EfficientApproximationArctgFunction.pdf
-------------------------------------------------------------------------------
*/
float32 float32_artan( float32 x )
{
    29a8:	37 9c ff f8 	addi sp,sp,-8
    29ac:	5b 8b 00 08 	sw (sp+8),r11
    29b0:	5b 9d 00 04 	sw (sp+4),ra
    29b4:	b8 20 58 00 	mv r11,r1
return	float32_mul(x,float32_add(0x3F490FD8,float32_mul(0x3E8BC6A8,float32_sub(0x3F800000,float32_abs(x)))));
    29b8:	fb ff ff f0 	calli 2978 <float32_abs>
    29bc:	b8 20 10 00 	mv r2,r1
    29c0:	78 01 3f 80 	mvhi r1,0x3f80
    29c4:	38 21 00 00 	ori r1,r1,0x0
    29c8:	fb ff fb b9 	calli 18ac <float32_sub>
    29cc:	b8 20 10 00 	mv r2,r1
    29d0:	78 01 3e 8b 	mvhi r1,0x3e8b
    29d4:	38 21 c6 a8 	ori r1,r1,0xc6a8
    29d8:	fb ff fb c4 	calli 18e8 <float32_mul>
    29dc:	b8 20 10 00 	mv r2,r1
    29e0:	78 01 3f 49 	mvhi r1,0x3f49
    29e4:	38 21 0f d8 	ori r1,r1,0xfd8
    29e8:	fb ff fb a2 	calli 1870 <float32_add>
    29ec:	b8 20 10 00 	mv r2,r1
    29f0:	b9 60 08 00 	mv r1,r11
    29f4:	fb ff fb bd 	calli 18e8 <float32_mul>
}
    29f8:	2b 9d 00 04 	lw ra,(sp+4)
    29fc:	2b 8b 00 08 	lw r11,(sp+8)
    2a00:	37 9c 00 08 	addi sp,sp,8
    2a04:	c3 a0 00 00 	ret

00002a08 <float32_pow2>:
-------------------------------------------------------------------------------
This is the square function
-------------------------------------------------------------------------------
*/
float32 float32_pow2( float32 a)
{
    2a08:	37 9c ff fc 	addi sp,sp,-4
    2a0c:	5b 9d 00 04 	sw (sp+4),ra
	return float32_mul(a,a);
    2a10:	b8 20 10 00 	mv r2,r1
    2a14:	fb ff fb b5 	calli 18e8 <float32_mul>
}
    2a18:	2b 9d 00 04 	lw ra,(sp+4)
    2a1c:	37 9c 00 04 	addi sp,sp,4
    2a20:	c3 a0 00 00 	ret

00002a24 <float32_filterKom>:
// - oldAngle: 	Previous measured angle
// - AGy:		Gyroscope angle
// - AAc:		Accelerometer angle
// - dt:		time
//-----------------------------------------------------------------------
float32 float32_filterKom(float32 oldAngle, float32 AGy, float32 AAc, float32 dt){
    2a24:	37 9c ff f0 	addi sp,sp,-16
    2a28:	5b 8b 00 10 	sw (sp+16),r11
    2a2c:	5b 8c 00 0c 	sw (sp+12),r12
    2a30:	5b 8d 00 08 	sw (sp+8),r13
    2a34:	5b 9d 00 04 	sw (sp+4),ra
    2a38:	b8 40 58 00 	mv r11,r2
	//Filter: newAngle= 0.98 *(oldAngle + AGy * dt) + 0.02 * AAc
	dt = float32_mul(dt, 0x322BCC77); //0,00000001
    2a3c:	78 02 32 2b 	mvhi r2,0x322b
// - oldAngle: 	Previous measured angle
// - AGy:		Gyroscope angle
// - AAc:		Accelerometer angle
// - dt:		time
//-----------------------------------------------------------------------
float32 float32_filterKom(float32 oldAngle, float32 AGy, float32 AAc, float32 dt){
    2a40:	b8 20 60 00 	mv r12,r1
	//Filter: newAngle= 0.98 *(oldAngle + AGy * dt) + 0.02 * AAc
	dt = float32_mul(dt, 0x322BCC77); //0,00000001
    2a44:	38 42 cc 77 	ori r2,r2,0xcc77
    2a48:	b8 80 08 00 	mv r1,r4
// - oldAngle: 	Previous measured angle
// - AGy:		Gyroscope angle
// - AAc:		Accelerometer angle
// - dt:		time
//-----------------------------------------------------------------------
float32 float32_filterKom(float32 oldAngle, float32 AGy, float32 AAc, float32 dt){
    2a4c:	b8 60 68 00 	mv r13,r3
	//Filter: newAngle= 0.98 *(oldAngle + AGy * dt) + 0.02 * AAc
	dt = float32_mul(dt, 0x322BCC77); //0,00000001
    2a50:	fb ff fb a6 	calli 18e8 <float32_mul>
    2a54:	b8 20 10 00 	mv r2,r1
	float32 newAngle = float32_mul(AGy, dt);
    2a58:	b9 60 08 00 	mv r1,r11
    2a5c:	fb ff fb a3 	calli 18e8 <float32_mul>
	newAngle = float32_add(newAngle, oldAngle);
    2a60:	b9 80 10 00 	mv r2,r12
    2a64:	fb ff fb 83 	calli 1870 <float32_add>
	newAngle = float32_mul(newAngle, alfa);
    2a68:	78 02 3f 4c 	mvhi r2,0x3f4c
    2a6c:	38 42 cc cd 	ori r2,r2,0xcccd
    2a70:	fb ff fb 9e 	calli 18e8 <float32_mul>
	float32 temp = float32_mul(AAc, beta);
    2a74:	78 02 3e 4c 	mvhi r2,0x3e4c
float32 float32_filterKom(float32 oldAngle, float32 AGy, float32 AAc, float32 dt){
	//Filter: newAngle= 0.98 *(oldAngle + AGy * dt) + 0.02 * AAc
	dt = float32_mul(dt, 0x322BCC77); //0,00000001
	float32 newAngle = float32_mul(AGy, dt);
	newAngle = float32_add(newAngle, oldAngle);
	newAngle = float32_mul(newAngle, alfa);
    2a78:	b8 20 58 00 	mv r11,r1
	float32 temp = float32_mul(AAc, beta);
    2a7c:	38 42 cc cd 	ori r2,r2,0xcccd
    2a80:	b9 a0 08 00 	mv r1,r13
    2a84:	fb ff fb 99 	calli 18e8 <float32_mul>
    2a88:	b8 20 10 00 	mv r2,r1
	return float32_add(newAngle, temp);
    2a8c:	b9 60 08 00 	mv r1,r11
    2a90:	fb ff fb 78 	calli 1870 <float32_add>
}
    2a94:	2b 9d 00 04 	lw ra,(sp+4)
    2a98:	2b 8b 00 10 	lw r11,(sp+16)
    2a9c:	2b 8c 00 0c 	lw r12,(sp+12)
    2aa0:	2b 8d 00 08 	lw r13,(sp+8)
    2aa4:	37 9c 00 10 	addi sp,sp,16
    2aa8:	c3 a0 00 00 	ret

00002aac <agWriteByte>:
{
	return I2CreadByte(agAddress, subAddress);
}

void agWriteByte(uint8_t subAddress,uint8_t data)
{
    2aac:	37 9c ff fc 	addi sp,sp,-4
    2ab0:	5b 9d 00 04 	sw (sp+4),ra
    2ab4:	20 21 00 ff 	andi r1,r1,0xff
    2ab8:	20 42 00 ff 	andi r2,r2,0xff
	I2CwriteByte(agAddress, subAddress, data);
    2abc:	b8 40 18 00 	mv r3,r2
    2ac0:	b8 20 10 00 	mv r2,r1
    2ac4:	34 01 00 6a 	mvi r1,106
    2ac8:	fb ff f7 c1 	calli 9cc <I2CwriteByte>
}
    2acc:	2b 9d 00 04 	lw ra,(sp+4)
    2ad0:	37 9c 00 04 	addi sp,sp,4
    2ad4:	c3 a0 00 00 	ret

00002ad8 <initGyro>:

void initGyro()
{
    2ad8:	37 9c ff fc 	addi sp,sp,-4
    2adc:	5b 9d 00 04 	sw (sp+4),ra
	return I2CreadByte(agAddress, subAddress);
}

void agWriteByte(uint8_t subAddress,uint8_t data)
{
	I2CwriteByte(agAddress, subAddress, data);
    2ae0:	34 01 00 6a 	mvi r1,106
    2ae4:	34 02 00 10 	mvi r2,16
    2ae8:	34 03 00 c0 	mvi r3,192
    2aec:	fb ff f7 b8 	calli 9cc <I2CwriteByte>
	agWriteByte(CTRL_REG2_G, ag_ctrl2_Default );

// TERCER REGISTRO
// Se dejara el valor por defecto
	agWriteByte(CTRL_REG3_G, ag_ctrl3_Default );
}
    2af0:	34 01 00 6a 	mvi r1,106
    2af4:	34 02 00 11 	mvi r2,17
    2af8:	34 03 00 00 	mvi r3,0
    2afc:	fb ff f7 b4 	calli 9cc <I2CwriteByte>
    2b00:	34 01 00 6a 	mvi r1,106
    2b04:	34 02 00 12 	mvi r2,18
    2b08:	34 03 00 00 	mvi r3,0
    2b0c:	fb ff f7 b0 	calli 9cc <I2CwriteByte>
    2b10:	2b 9d 00 04 	lw ra,(sp+4)
    2b14:	37 9c 00 04 	addi sp,sp,4
    2b18:	c3 a0 00 00 	ret

00002b1c <agReadByte>:
{
	return I2CreadByte(mAddress, subAddress);
}

uint8_t agReadByte(uint8_t subAddress)
{
    2b1c:	37 9c ff fc 	addi sp,sp,-4
    2b20:	5b 9d 00 04 	sw (sp+4),ra
    2b24:	20 21 00 ff 	andi r1,r1,0xff
	return I2CreadByte(agAddress, subAddress);
    2b28:	b8 20 10 00 	mv r2,r1
    2b2c:	34 01 00 6a 	mvi r1,106
    2b30:	fb ff f7 20 	calli 7b0 <I2CreadByte>
}
    2b34:	2b 9d 00 04 	lw ra,(sp+4)
    2b38:	37 9c 00 04 	addi sp,sp,4
    2b3c:	c3 a0 00 00 	ret

00002b40 <mReadByte>:
#include "LSM9DS1.h"
#include "soc-hw.h"

uint8_t mReadByte(uint8_t subAddress)
{
    2b40:	37 9c ff fc 	addi sp,sp,-4
    2b44:	5b 9d 00 04 	sw (sp+4),ra
    2b48:	20 21 00 ff 	andi r1,r1,0xff
	return I2CreadByte(mAddress, subAddress);
    2b4c:	b8 20 10 00 	mv r2,r1
    2b50:	34 01 00 1c 	mvi r1,28
    2b54:	fb ff f7 17 	calli 7b0 <I2CreadByte>
}
    2b58:	2b 9d 00 04 	lw ra,(sp+4)
    2b5c:	37 9c 00 04 	addi sp,sp,4
    2b60:	c3 a0 00 00 	ret

00002b64 <MPLReadBytes>:
{
	I2CwriteByte(MPL3115A2_ADDRESS, subAddress, data);
}

void MPLReadBytes(uint8_t subaddress, int *dest, uint8_t count)
{
    2b64:	37 9c ff fc 	addi sp,sp,-4
    2b68:	5b 9d 00 04 	sw (sp+4),ra
    2b6c:	b8 40 28 00 	mv r5,r2
    2b70:	20 21 00 ff 	andi r1,r1,0xff
    2b74:	20 64 00 ff 	andi r4,r3,0xff
	I2CreadBytes(MPL3115A2_ADDRESS, subaddress, dest, count);
    2b78:	b8 20 10 00 	mv r2,r1
    2b7c:	b8 a0 18 00 	mv r3,r5
    2b80:	34 01 00 60 	mvi r1,96
    2b84:	fb ff f7 47 	calli 8a0 <I2CreadBytes>
}
    2b88:	2b 9d 00 04 	lw ra,(sp+4)
    2b8c:	37 9c 00 04 	addi sp,sp,4
    2b90:	c3 a0 00 00 	ret

00002b94 <MPLWriteByte>:
{
	return I2CreadByte(MPL3115A2_ADDRESS, subAddress);
}

void MPLWriteByte(uint8_t subAddress,uint8_t data)
{
    2b94:	37 9c ff fc 	addi sp,sp,-4
    2b98:	5b 9d 00 04 	sw (sp+4),ra
    2b9c:	20 21 00 ff 	andi r1,r1,0xff
    2ba0:	20 42 00 ff 	andi r2,r2,0xff
	I2CwriteByte(MPL3115A2_ADDRESS, subAddress, data);
    2ba4:	b8 40 18 00 	mv r3,r2
    2ba8:	b8 20 10 00 	mv r2,r1
    2bac:	34 01 00 60 	mvi r1,96
    2bb0:	fb ff f7 87 	calli 9cc <I2CwriteByte>
}
    2bb4:	2b 9d 00 04 	lw ra,(sp+4)
    2bb8:	37 9c 00 04 	addi sp,sp,4
    2bbc:	c3 a0 00 00 	ret

00002bc0 <MPLBegin>:
/*!
    INICIALIZAR EL MODULO
*/
/**************************************************************************/

void MPLBegin(){
    2bc0:	37 9c ff fc 	addi sp,sp,-4
    2bc4:	5b 9d 00 04 	sw (sp+4),ra
	return I2CreadByte(MPL3115A2_ADDRESS, subAddress);
}

void MPLWriteByte(uint8_t subAddress,uint8_t data)
{
	I2CwriteByte(MPL3115A2_ADDRESS, subAddress, data);
    2bc8:	34 01 00 60 	mvi r1,96
    2bcc:	34 02 00 26 	mvi r2,38
    2bd0:	34 03 00 b8 	mvi r3,184
    2bd4:	fb ff f7 7e 	calli 9cc <I2CwriteByte>

	MPLWriteByte(MPL3115A2_PT_DATA_CFG,
		MPL3115A2_PT_DATA_CFG_TDEFE |
		MPL3115A2_PT_DATA_CFG_PDEFE |
		MPL3115A2_PT_DATA_CFG_DREM);
}
    2bd8:	34 01 00 60 	mvi r1,96
    2bdc:	34 02 00 13 	mvi r2,19
    2be0:	34 03 00 07 	mvi r3,7
    2be4:	fb ff f7 7a 	calli 9cc <I2CwriteByte>
    2be8:	2b 9d 00 04 	lw ra,(sp+4)
    2bec:	37 9c 00 04 	addi sp,sp,4
    2bf0:	c3 a0 00 00 	ret

00002bf4 <MPLReadByte>:
    DECLARACION DE FUNCIONES DE LECTURA Y ESCRITURA I2C
*/
/**************************************************************************/

uint8_t MPLReadByte(uint8_t subAddress)
{
    2bf4:	37 9c ff fc 	addi sp,sp,-4
    2bf8:	5b 9d 00 04 	sw (sp+4),ra
    2bfc:	20 21 00 ff 	andi r1,r1,0xff
	return I2CreadByte(MPL3115A2_ADDRESS, subAddress);
    2c00:	b8 20 10 00 	mv r2,r1
    2c04:	34 01 00 60 	mvi r1,96
    2c08:	fb ff f6 ea 	calli 7b0 <I2CreadByte>
}
    2c0c:	2b 9d 00 04 	lw ra,(sp+4)
    2c10:	37 9c 00 04 	addi sp,sp,4
    2c14:	c3 a0 00 00 	ret

00002c18 <MPLgetAltitude>:
		MPL3115A2_PT_DATA_CFG_TDEFE |
		MPL3115A2_PT_DATA_CFG_PDEFE |
		MPL3115A2_PT_DATA_CFG_DREM);
}

void MPLgetAltitude(){
    2c18:	37 9c ff f4 	addi sp,sp,-12
    2c1c:	5b 8b 00 0c 	sw (sp+12),r11
    2c20:	5b 8c 00 08 	sw (sp+8),r12
    2c24:	5b 9d 00 04 	sw (sp+4),ra
	return I2CreadByte(MPL3115A2_ADDRESS, subAddress);
}

void MPLWriteByte(uint8_t subAddress,uint8_t data)
{
	I2CwriteByte(MPL3115A2_ADDRESS, subAddress, data);
    2c28:	34 01 00 60 	mvi r1,96
    2c2c:	34 02 00 26 	mvi r2,38
    2c30:	34 03 00 b9 	mvi r3,185
    2c34:	fb ff f7 66 	calli 9cc <I2CwriteByte>
    sta = MPLReadByte(MPL3115A2_REGISTER_STATUS);
    //gpio0->oe  = 0x000000ff;
    //gpio0->out = 0xBB;
    //gpio0->out = sta;
    //gpio0->out = sta & 0x04;    
    uart_putstr("NNNN");
    2c38:	78 0c 00 00 	mvhi r12,0x0
*/
/**************************************************************************/

uint8_t MPLReadByte(uint8_t subAddress)
{
	return I2CreadByte(MPL3115A2_ADDRESS, subAddress);
    2c3c:	34 02 00 00 	mvi r2,0
    2c40:	34 01 00 60 	mvi r1,96
    2c44:	fb ff f6 db 	calli 7b0 <I2CreadByte>
    2c48:	b8 20 58 00 	mv r11,r1
    sta = MPLReadByte(MPL3115A2_REGISTER_STATUS);
    //gpio0->oe  = 0x000000ff;
    //gpio0->out = 0xBB;
    //gpio0->out = sta;
    //gpio0->out = sta & 0x04;    
    uart_putstr("NNNN");
    2c4c:	b9 80 08 00 	mv r1,r12
    2c50:	38 21 3f b0 	ori r1,r1,0x3fb0
    2c54:	fb ff f6 87 	calli 670 <uart_putstr>
    nsleep(20);
    2c58:	34 01 00 14 	mvi r1,20
		MPL3115A2_CTRL_REG1_OS128 |
		MPL3115A2_CTRL_REG1_ALT);

  uint8_t sta = 0;
//  while (sta & MPL3115A2_REGISTER_STATUS_PDR) {
  while (! (sta & 0x04)) {
    2c5c:	21 6b 00 04 	andi r11,r11,0x4
    //gpio0->oe  = 0x000000ff;
    //gpio0->out = 0xBB;
    //gpio0->out = sta;
    //gpio0->out = sta & 0x04;    
    uart_putstr("NNNN");
    nsleep(20);
    2c60:	fb ff f6 18 	calli 4c0 <nsleep>
		MPL3115A2_CTRL_REG1_OS128 |
		MPL3115A2_CTRL_REG1_ALT);

  uint8_t sta = 0;
//  while (sta & MPL3115A2_REGISTER_STATUS_PDR) {
  while (! (sta & 0x04)) {
    2c64:	45 60 ff f6 	be r11,r0,2c3c <MPLgetAltitude+0x24>
	I2CwriteByte(MPL3115A2_ADDRESS, subAddress, data);
}

void MPLReadBytes(uint8_t subaddress, int *dest, uint8_t count)
{
	I2CreadBytes(MPL3115A2_ADDRESS, subaddress, dest, count);
    2c68:	78 03 00 00 	mvhi r3,0x0
    2c6c:	38 63 40 34 	ori r3,r3,0x4034
    2c70:	34 02 00 01 	mvi r2,1
    2c74:	34 04 00 03 	mvi r4,3
    2c78:	34 01 00 60 	mvi r1,96
    2c7c:	fb ff f7 09 	calli 8a0 <I2CreadBytes>
	gpio0->out = temp[2];*/

// Prueba lectura tamaño


   nsleep(20);
    2c80:	34 01 00 14 	mvi r1,20
    2c84:	fb ff f6 0f 	calli 4c0 <nsleep>
   uart_putstr("SSSS");
    2c88:	78 01 00 00 	mvhi r1,0x0
    2c8c:	38 21 3f b8 	ori r1,r1,0x3fb8
   uart_putchar(temp[0]);
    2c90:	78 0b 00 00 	mvhi r11,0x0
    2c94:	39 6b 40 34 	ori r11,r11,0x4034

// Prueba lectura tamaño


   nsleep(20);
   uart_putstr("SSSS");
    2c98:	fb ff f6 76 	calli 670 <uart_putstr>
   uart_putchar(temp[0]);
    2c9c:	29 61 00 00 	lw r1,(r11+0)
    2ca0:	20 21 00 ff 	andi r1,r1,0xff
    2ca4:	fb ff f6 6a 	calli 64c <uart_putchar>
   uart_putchar(temp[0]);
    2ca8:	29 61 00 00 	lw r1,(r11+0)
    2cac:	20 21 00 ff 	andi r1,r1,0xff
    2cb0:	fb ff f6 67 	calli 64c <uart_putchar>
   uart_putchar(temp[0]);
    2cb4:	29 61 00 00 	lw r1,(r11+0)
    2cb8:	20 21 00 ff 	andi r1,r1,0xff
    2cbc:	fb ff f6 64 	calli 64c <uart_putchar>

   nsleep(20);
    2cc0:	34 01 00 14 	mvi r1,20
    2cc4:	fb ff f5 ff 	calli 4c0 <nsleep>
   uart_putstr("SSSS");
    2cc8:	78 01 00 00 	mvhi r1,0x0
    2ccc:	38 21 3f b8 	ori r1,r1,0x3fb8
    2cd0:	fb ff f6 68 	calli 670 <uart_putstr>
   uart_putchar(temp[1]);
    2cd4:	29 61 00 04 	lw r1,(r11+4)
    2cd8:	20 21 00 ff 	andi r1,r1,0xff
    2cdc:	fb ff f6 5c 	calli 64c <uart_putchar>
   uart_putchar(temp[1]);
    2ce0:	29 61 00 04 	lw r1,(r11+4)
    2ce4:	20 21 00 ff 	andi r1,r1,0xff
    2ce8:	fb ff f6 59 	calli 64c <uart_putchar>
   uart_putchar(temp[1]);
    2cec:	29 61 00 04 	lw r1,(r11+4)
    2cf0:	20 21 00 ff 	andi r1,r1,0xff
    2cf4:	fb ff f6 56 	calli 64c <uart_putchar>

   nsleep(20);
    2cf8:	34 01 00 14 	mvi r1,20
    2cfc:	fb ff f5 f1 	calli 4c0 <nsleep>
   uart_putstr("SSSS");
    2d00:	78 01 00 00 	mvhi r1,0x0
    2d04:	38 21 3f b8 	ori r1,r1,0x3fb8
    2d08:	fb ff f6 5a 	calli 670 <uart_putstr>
   uart_putchar(temp[2]);
    2d0c:	29 61 00 08 	lw r1,(r11+8)
    2d10:	20 21 00 ff 	andi r1,r1,0xff
    2d14:	fb ff f6 4e 	calli 64c <uart_putchar>
   uart_putchar(temp[2]);
    2d18:	29 61 00 08 	lw r1,(r11+8)
    2d1c:	20 21 00 ff 	andi r1,r1,0xff
    2d20:	fb ff f6 4b 	calli 64c <uart_putchar>
   uart_putchar(temp[2]);
    2d24:	29 61 00 08 	lw r1,(r11+8)
    2d28:	20 21 00 ff 	andi r1,r1,0xff
    2d2c:	fb ff f6 48 	calli 64c <uart_putchar>

}
    2d30:	2b 9d 00 04 	lw ra,(sp+4)
    2d34:	2b 8b 00 0c 	lw r11,(sp+12)
    2d38:	2b 8c 00 08 	lw r12,(sp+8)
    2d3c:	37 9c 00 0c 	addi sp,sp,12
    2d40:	c3 a0 00 00 	ret

00002d44 <ce>:
	gpio0-> ports;
}
*/

uint8_t ce(uint8_t level)
{
    2d44:	20 26 00 ff 	andi r6,r1,0xff
	if(level == (HIGH)){
    2d48:	34 01 00 01 	mvi r1,1
    2d4c:	44 c1 00 1c 	be r6,r1,2dbc <ce+0x78>
		ports |=_BV(CE);
		//gpio0-> oe =ports;
		gpio0->out = ports;
		spi0->ce= 1;
		ce_pin = 1;
	}else if(level == (LOW)){
    2d50:	44 c0 00 07 	be r6,r0,2d6c <ce+0x28>
		ports &=~_BV(CE);
		gpio0->out = ports;
		spi0->ce = 0;
		ce_pin = 0;
	} else{
		ce_pin = 0;
    2d54:	78 02 00 00 	mvhi r2,0x0
    2d58:	38 42 40 50 	ori r2,r2,0x4050
    2d5c:	34 01 00 00 	mvi r1,0
    2d60:	30 41 00 00 	sb (r2+0),r1
	}
	return ce_pin;
}
    2d64:	40 41 00 00 	lbu r1,(r2+0)
    2d68:	c3 a0 00 00 	ret
		//gpio0-> oe =ports;
		gpio0->out = ports;
		spi0->ce= 1;
		ce_pin = 1;
	}else if(level == (LOW)){
		ports &=~_BV(CE);
    2d6c:	78 03 00 00 	mvhi r3,0x0
    2d70:	38 63 40 d8 	ori r3,r3,0x40d8
    2d74:	28 61 00 00 	lw r1,(r3+0)
    2d78:	34 02 ff fd 	mvi r2,-3
		gpio0->out = ports;
    2d7c:	78 04 00 00 	mvhi r4,0x0
		//gpio0-> oe =ports;
		gpio0->out = ports;
		spi0->ce= 1;
		ce_pin = 1;
	}else if(level == (LOW)){
		ports &=~_BV(CE);
    2d80:	a0 22 08 00 	and r1,r1,r2
    2d84:	58 61 00 00 	sw (r3+0),r1
		gpio0->out = ports;
    2d88:	38 84 40 08 	ori r4,r4,0x4008
		spi0->ce = 0;
    2d8c:	78 01 00 00 	mvhi r1,0x0
		gpio0->out = ports;
		spi0->ce= 1;
		ce_pin = 1;
	}else if(level == (LOW)){
		ports &=~_BV(CE);
		gpio0->out = ports;
    2d90:	28 65 00 00 	lw r5,(r3+0)
    2d94:	28 82 00 00 	lw r2,(r4+0)
		spi0->ce = 0;
    2d98:	38 21 40 0c 	ori r1,r1,0x400c
    2d9c:	28 23 00 00 	lw r3,(r1+0)
		gpio0->out = ports;
		spi0->ce= 1;
		ce_pin = 1;
	}else if(level == (LOW)){
		ports &=~_BV(CE);
		gpio0->out = ports;
    2da0:	58 45 00 14 	sw (r2+20),r5
		spi0->ce = 0;
		ce_pin = 0;
    2da4:	78 02 00 00 	mvhi r2,0x0
		spi0->ce= 1;
		ce_pin = 1;
	}else if(level == (LOW)){
		ports &=~_BV(CE);
		gpio0->out = ports;
		spi0->ce = 0;
    2da8:	58 66 00 0c 	sw (r3+12),r6
		ce_pin = 0;
    2dac:	38 42 40 50 	ori r2,r2,0x4050
    2db0:	30 46 00 00 	sb (r2+0),r6
	} else{
		ce_pin = 0;
	}
	return ce_pin;
}
    2db4:	40 41 00 00 	lbu r1,(r2+0)
    2db8:	c3 a0 00 00 	ret
*/

uint8_t ce(uint8_t level)
{
	if(level == (HIGH)){
		ports |=_BV(CE);
    2dbc:	78 03 00 00 	mvhi r3,0x0
    2dc0:	38 63 40 d8 	ori r3,r3,0x40d8
    2dc4:	28 61 00 00 	lw r1,(r3+0)
		//gpio0-> oe =ports;
		gpio0->out = ports;
    2dc8:	78 04 00 00 	mvhi r4,0x0
    2dcc:	38 84 40 08 	ori r4,r4,0x4008
*/

uint8_t ce(uint8_t level)
{
	if(level == (HIGH)){
		ports |=_BV(CE);
    2dd0:	38 21 00 02 	ori r1,r1,0x2
    2dd4:	58 61 00 00 	sw (r3+0),r1
		//gpio0-> oe =ports;
		gpio0->out = ports;
		spi0->ce= 1;
    2dd8:	78 02 00 00 	mvhi r2,0x0
uint8_t ce(uint8_t level)
{
	if(level == (HIGH)){
		ports |=_BV(CE);
		//gpio0-> oe =ports;
		gpio0->out = ports;
    2ddc:	28 65 00 00 	lw r5,(r3+0)
    2de0:	28 81 00 00 	lw r1,(r4+0)
		spi0->ce= 1;
    2de4:	38 42 40 0c 	ori r2,r2,0x400c
    2de8:	28 43 00 00 	lw r3,(r2+0)
uint8_t ce(uint8_t level)
{
	if(level == (HIGH)){
		ports |=_BV(CE);
		//gpio0-> oe =ports;
		gpio0->out = ports;
    2dec:	58 25 00 14 	sw (r1+20),r5
		spi0->ce= 1;
		ce_pin = 1;
    2df0:	78 02 00 00 	mvhi r2,0x0
{
	if(level == (HIGH)){
		ports |=_BV(CE);
		//gpio0-> oe =ports;
		gpio0->out = ports;
		spi0->ce= 1;
    2df4:	58 66 00 0c 	sw (r3+12),r6
		ce_pin = 1;
    2df8:	38 42 40 50 	ori r2,r2,0x4050
    2dfc:	30 46 00 00 	sb (r2+0),r6
		ce_pin = 0;
	} else{
		ce_pin = 0;
	}
	return ce_pin;
}
    2e00:	40 41 00 00 	lbu r1,(r2+0)
    2e04:	c3 a0 00 00 	ret

00002e08 <nrf24_config>:
	nsleep(3);
	csn(HIGH);
}

void nrf24_config(void)
{
    2e08:	78 01 00 00 	mvhi r1,0x0
    2e0c:	38 21 40 4c 	ori r1,r1,0x404c
    2e10:	34 02 00 00 	mvi r2,0
    2e14:	58 22 00 00 	sw (r1+0),r2
	pipe0_reading_address=0;
}
    2e18:	c3 a0 00 00 	ret

00002e1c <spi_finish>:
	}
	return csn_pin;
}

void spi_finish()
{
    2e1c:	37 9c ff fc 	addi sp,sp,-4
    2e20:	5b 9d 00 04 	sw (sp+4),ra
	nsleep(10);
    2e24:	34 01 00 0a 	mvi r1,10
    2e28:	fb ff f5 a6 	calli 4c0 <nsleep>
	gpio0->out = DEFAULT;
    2e2c:	78 01 00 00 	mvhi r1,0x0
    2e30:	38 21 40 08 	ori r1,r1,0x4008
	spi0->ce = 0x00;
    2e34:	78 02 00 00 	mvhi r2,0x0
}

void spi_finish()
{
	nsleep(10);
	gpio0->out = DEFAULT;
    2e38:	28 24 00 00 	lw r4,(r1+0)
	spi0->ce = 0x00;
    2e3c:	38 42 40 0c 	ori r2,r2,0x400c
    2e40:	28 43 00 00 	lw r3,(r2+0)
}

void spi_finish()
{
	nsleep(10);
	gpio0->out = DEFAULT;
    2e44:	34 01 00 00 	mvi r1,0
    2e48:	58 81 00 14 	sw (r4+20),r1
	spi0->ce = 0x00;
    2e4c:	58 61 00 0c 	sw (r3+12),r1
	spi0->csn=0x00;
    2e50:	58 61 00 08 	sw (r3+8),r1
}
    2e54:	2b 9d 00 04 	lw ra,(sp+4)
    2e58:	37 9c 00 04 	addi sp,sp,4
    2e5c:	c3 a0 00 00 	ret

00002e60 <csn>:
	}
	return ce_pin;
}

uint8_t csn(uint8_t level)
{
    2e60:	37 9c ff f8 	addi sp,sp,-8
    2e64:	5b 8b 00 08 	sw (sp+8),r11
    2e68:	5b 9d 00 04 	sw (sp+4),ra
    2e6c:	20 2b 00 ff 	andi r11,r1,0xff
	if(level == HIGH){
    2e70:	34 01 00 01 	mvi r1,1
    2e74:	45 61 00 22 	be r11,r1,2efc <csn+0x9c>
		gpio0->out = ports;
		spi0->csn = 1;
		nsleep(1);
		csn_pin = 1;
	}else
	if(level == LOW){
    2e78:	45 60 00 0a 	be r11,r0,2ea0 <csn+0x40>
		ports &=~_BV(CSN);
		gpio0->out = ports;
		spi0->csn = 0;
		csn_pin = 0;
	} else {
		csn_pin = 0;
    2e7c:	78 02 00 00 	mvhi r2,0x0
    2e80:	38 42 40 49 	ori r2,r2,0x4049
    2e84:	34 01 00 00 	mvi r1,0
    2e88:	30 41 00 00 	sb (r2+0),r1
	}
	return csn_pin;
}
    2e8c:	40 41 00 00 	lbu r1,(r2+0)
    2e90:	2b 9d 00 04 	lw ra,(sp+4)
    2e94:	2b 8b 00 08 	lw r11,(sp+8)
    2e98:	37 9c 00 08 	addi sp,sp,8
    2e9c:	c3 a0 00 00 	ret
		spi0->csn = 1;
		nsleep(1);
		csn_pin = 1;
	}else
	if(level == LOW){
		ports &=~_BV(CSN);
    2ea0:	78 03 00 00 	mvhi r3,0x0
    2ea4:	38 63 40 d8 	ori r3,r3,0x40d8
    2ea8:	28 61 00 00 	lw r1,(r3+0)
    2eac:	34 02 ff fe 	mvi r2,-2
		gpio0->out = ports;
    2eb0:	78 04 00 00 	mvhi r4,0x0
		spi0->csn = 1;
		nsleep(1);
		csn_pin = 1;
	}else
	if(level == LOW){
		ports &=~_BV(CSN);
    2eb4:	a0 22 08 00 	and r1,r1,r2
    2eb8:	58 61 00 00 	sw (r3+0),r1
		gpio0->out = ports;
    2ebc:	38 84 40 08 	ori r4,r4,0x4008
		spi0->csn = 0;
    2ec0:	78 01 00 00 	mvhi r1,0x0
		nsleep(1);
		csn_pin = 1;
	}else
	if(level == LOW){
		ports &=~_BV(CSN);
		gpio0->out = ports;
    2ec4:	28 65 00 00 	lw r5,(r3+0)
    2ec8:	28 82 00 00 	lw r2,(r4+0)
		spi0->csn = 0;
    2ecc:	38 21 40 0c 	ori r1,r1,0x400c
    2ed0:	28 23 00 00 	lw r3,(r1+0)
		nsleep(1);
		csn_pin = 1;
	}else
	if(level == LOW){
		ports &=~_BV(CSN);
		gpio0->out = ports;
    2ed4:	58 45 00 14 	sw (r2+20),r5
		spi0->csn = 0;
		csn_pin = 0;
    2ed8:	78 02 00 00 	mvhi r2,0x0
		csn_pin = 1;
	}else
	if(level == LOW){
		ports &=~_BV(CSN);
		gpio0->out = ports;
		spi0->csn = 0;
    2edc:	58 6b 00 08 	sw (r3+8),r11
		csn_pin = 0;
    2ee0:	38 42 40 49 	ori r2,r2,0x4049
    2ee4:	30 4b 00 00 	sb (r2+0),r11
	} else {
		csn_pin = 0;
	}
	return csn_pin;
}
    2ee8:	40 41 00 00 	lbu r1,(r2+0)
    2eec:	2b 9d 00 04 	lw ra,(sp+4)
    2ef0:	2b 8b 00 08 	lw r11,(sp+8)
    2ef4:	37 9c 00 08 	addi sp,sp,8
    2ef8:	c3 a0 00 00 	ret
}

uint8_t csn(uint8_t level)
{
	if(level == HIGH){
		ports |=_BV(CSN);
    2efc:	78 03 00 00 	mvhi r3,0x0
    2f00:	38 63 40 d8 	ori r3,r3,0x40d8
    2f04:	28 61 00 00 	lw r1,(r3+0)
		gpio0->out = ports;
    2f08:	78 04 00 00 	mvhi r4,0x0
    2f0c:	38 84 40 08 	ori r4,r4,0x4008
}

uint8_t csn(uint8_t level)
{
	if(level == HIGH){
		ports |=_BV(CSN);
    2f10:	38 21 00 01 	ori r1,r1,0x1
    2f14:	58 61 00 00 	sw (r3+0),r1
		gpio0->out = ports;
		spi0->csn = 1;
    2f18:	78 02 00 00 	mvhi r2,0x0

uint8_t csn(uint8_t level)
{
	if(level == HIGH){
		ports |=_BV(CSN);
		gpio0->out = ports;
    2f1c:	28 65 00 00 	lw r5,(r3+0)
    2f20:	28 81 00 00 	lw r1,(r4+0)
		spi0->csn = 1;
    2f24:	38 42 40 0c 	ori r2,r2,0x400c
    2f28:	28 43 00 00 	lw r3,(r2+0)

uint8_t csn(uint8_t level)
{
	if(level == HIGH){
		ports |=_BV(CSN);
		gpio0->out = ports;
    2f2c:	58 25 00 14 	sw (r1+20),r5
		spi0->csn = 1;
		nsleep(1);
    2f30:	b9 60 08 00 	mv r1,r11
uint8_t csn(uint8_t level)
{
	if(level == HIGH){
		ports |=_BV(CSN);
		gpio0->out = ports;
		spi0->csn = 1;
    2f34:	58 6b 00 08 	sw (r3+8),r11
		nsleep(1);
    2f38:	fb ff f5 62 	calli 4c0 <nsleep>
		csn_pin = 1;
    2f3c:	78 02 00 00 	mvhi r2,0x0
    2f40:	38 42 40 49 	ori r2,r2,0x4049
    2f44:	30 4b 00 00 	sb (r2+0),r11
		csn_pin = 0;
	} else {
		csn_pin = 0;
	}
	return csn_pin;
}
    2f48:	40 41 00 00 	lbu r1,(r2+0)
    2f4c:	2b 9d 00 04 	lw ra,(sp+4)
    2f50:	2b 8b 00 08 	lw r11,(sp+8)
    2f54:	37 9c 00 08 	addi sp,sp,8
    2f58:	c3 a0 00 00 	ret

00002f5c <spi_enable>:
	spi0->ce = 0x00;
	spi0->csn=0x00;
}

void spi_enable()
{
    2f5c:	37 9c ff fc 	addi sp,sp,-4
    2f60:	5b 9d 00 04 	sw (sp+4),ra
	spi_finish();
    2f64:	fb ff ff ae 	calli 2e1c <spi_finish>
	csn(HIGH);
    2f68:	34 01 00 01 	mvi r1,1
    2f6c:	fb ff ff bd 	calli 2e60 <csn>
}
    2f70:	2b 9d 00 04 	lw ra,(sp+4)
    2f74:	37 9c 00 04 	addi sp,sp,4
    2f78:	c3 a0 00 00 	ret

00002f7c <spi_transmitD>:
	csn(HIGH);
	nsleep(5);
}

uint8_t spi_transmitD(uint8_t data)
{
    2f7c:	37 9c ff fc 	addi sp,sp,-4
    2f80:	5b 9d 00 04 	sw (sp+4),ra
	uint8_t receive;
	spi_putchar(data);
    2f84:	20 21 00 ff 	andi r1,r1,0xff
    2f88:	fb ff f6 fe 	calli b80 <spi_putchar>
	nsleep(1);
    2f8c:	34 01 00 01 	mvi r1,1
    2f90:	fb ff f5 4c 	calli 4c0 <nsleep>
	spi_init();
    2f94:	fb ff f6 c7 	calli ab0 <spi_init>
  receive = spi_getchar();
    2f98:	fb ff f6 ce 	calli ad0 <spi_getchar>
	return receive; 
}
    2f9c:	2b 9d 00 04 	lw ra,(sp+4)
    2fa0:	37 9c 00 04 	addi sp,sp,4
    2fa4:	c3 a0 00 00 	ret

00002fa8 <toggle_features>:
  return status;
}


void toggle_features(void)
{
    2fa8:	37 9c ff fc 	addi sp,sp,-4
    2fac:	5b 9d 00 04 	sw (sp+4),ra
	csn(LOW);
    2fb0:	34 01 00 00 	mvi r1,0
    2fb4:	fb ff ff ab 	calli 2e60 <csn>
	 spi_transmitD(ACTIVATE);
    2fb8:	34 01 00 50 	mvi r1,80
    2fbc:	fb ff ff f0 	calli 2f7c <spi_transmitD>
   spi_transmitD( 0x73 );
    2fc0:	34 01 00 73 	mvi r1,115
    2fc4:	fb ff ff ee 	calli 2f7c <spi_transmitD>
	nsleep(3);
    2fc8:	34 01 00 03 	mvi r1,3
    2fcc:	fb ff f5 3d 	calli 4c0 <nsleep>
	csn(HIGH);
    2fd0:	34 01 00 01 	mvi r1,1
    2fd4:	fb ff ff a3 	calli 2e60 <csn>
}
    2fd8:	2b 9d 00 04 	lw ra,(sp+4)
    2fdc:	37 9c 00 04 	addi sp,sp,4
    2fe0:	c3 a0 00 00 	ret

00002fe4 <read_payload>:
  csn(HIGH);
}

/****************************************************************************/
uint8_t read_payload(void *buf, uint8_t data_len)
{
    2fe4:	37 9c ff ec 	addi sp,sp,-20
    2fe8:	5b 8b 00 14 	sw (sp+20),r11
    2fec:	5b 8c 00 10 	sw (sp+16),r12
    2ff0:	5b 8d 00 0c 	sw (sp+12),r13
    2ff4:	5b 8e 00 08 	sw (sp+8),r14
    2ff8:	5b 9d 00 04 	sw (sp+4),ra
	uint8_t status;
  int *data = (int*) buf;
	if(data_len > payload_size) data_len = payload_size;
    2ffc:	78 03 00 00 	mvhi r3,0x0
    3000:	38 63 40 1c 	ori r3,r3,0x401c
    3004:	40 64 00 00 	lbu r4,(r3+0)
    3008:	20 4b 00 ff 	andi r11,r2,0xff
  csn(HIGH);
}

/****************************************************************************/
uint8_t read_payload(void *buf, uint8_t data_len)
{
    300c:	b8 20 68 00 	mv r13,r1
	uint8_t status;
  int *data = (int*) buf;
	if(data_len > payload_size) data_len = payload_size;
    3010:	50 8b 00 02 	bgeu r4,r11,3018 <read_payload+0x34>
    3014:	b8 80 58 00 	mv r11,r4
  uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
    3018:	78 01 00 00 	mvhi r1,0x0
    301c:	38 21 40 48 	ori r1,r1,0x4048
    3020:	40 23 00 00 	lbu r3,(r1+0)
    3024:	c8 8b 10 00 	sub r2,r4,r11
    3028:	20 4c 00 ff 	andi r12,r2,0xff
    302c:	44 60 00 02 	be r3,r0,3034 <read_payload+0x50>
    3030:	34 0c 00 00 	mvi r12,0

	csn(LOW);
    3034:	34 01 00 00 	mvi r1,0
    3038:	fb ff ff 8a 	calli 2e60 <csn>
  status = spi_transmitD( R_RX_PAYLOAD );
    303c:	34 01 00 61 	mvi r1,97
    3040:	fb ff ff cf 	calli 2f7c <spi_transmitD>
    3044:	b8 20 70 00 	mv r14,r1
  while ( data_len-- ) {
    3048:	45 60 00 0c 	be r11,r0,3078 <read_payload+0x94>
    304c:	35 61 ff ff 	addi r1,r11,-1
    3050:	20 21 00 ff 	andi r1,r1,0xff
    3054:	34 21 00 01 	addi r1,r1,1
    3058:	3c 21 00 02 	sli r1,r1,2

/****************************************************************************/
uint8_t read_payload(void *buf, uint8_t data_len)
{
	uint8_t status;
  int *data = (int*) buf;
    305c:	b9 a0 58 00 	mv r11,r13
	if(data_len > payload_size) data_len = payload_size;
  uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;

	csn(LOW);
  status = spi_transmitD( R_RX_PAYLOAD );
  while ( data_len-- ) {
    3060:	b5 a1 68 00 	add r13,r13,r1
    *data++ = spi_transmitD(0xff);
    3064:	34 01 00 ff 	mvi r1,255
    3068:	fb ff ff c5 	calli 2f7c <spi_transmitD>
    306c:	59 61 00 00 	sw (r11+0),r1
    3070:	35 6b 00 04 	addi r11,r11,4
	if(data_len > payload_size) data_len = payload_size;
  uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;

	csn(LOW);
  status = spi_transmitD( R_RX_PAYLOAD );
  while ( data_len-- ) {
    3074:	5d 6d ff fc 	bne r11,r13,3064 <read_payload+0x80>
    *data++ = spi_transmitD(0xff);
  }
  while ( blank_len-- ) {
    3078:	45 80 00 06 	be r12,r0,3090 <read_payload+0xac>
    spi_transmitD(0xff);
    307c:	34 01 00 ff 	mvi r1,255
    3080:	fb ff ff bf 	calli 2f7c <spi_transmitD>
    3084:	35 82 ff ff 	addi r2,r12,-1
    3088:	20 4c 00 ff 	andi r12,r2,0xff
	csn(LOW);
  status = spi_transmitD( R_RX_PAYLOAD );
  while ( data_len-- ) {
    *data++ = spi_transmitD(0xff);
  }
  while ( blank_len-- ) {
    308c:	5d 80 ff fc 	bne r12,r0,307c <read_payload+0x98>
    spi_transmitD(0xff);
  }
  nsleep(3);
    3090:	34 01 00 03 	mvi r1,3
    3094:	fb ff f5 0b 	calli 4c0 <nsleep>
	csn(HIGH);
    3098:	34 01 00 01 	mvi r1,1
    309c:	fb ff ff 71 	calli 2e60 <csn>

  return status;
}
    30a0:	b9 c0 08 00 	mv r1,r14
    30a4:	2b 9d 00 04 	lw ra,(sp+4)
    30a8:	2b 8b 00 14 	lw r11,(sp+20)
    30ac:	2b 8c 00 10 	lw r12,(sp+16)
    30b0:	2b 8d 00 0c 	lw r13,(sp+12)
    30b4:	2b 8e 00 08 	lw r14,(sp+8)
    30b8:	37 9c 00 14 	addi sp,sp,20
    30bc:	c3 a0 00 00 	ret

000030c0 <writeAckPayload>:
  return 0;
}

/****************************************************************************/
void writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
    30c0:	37 9c ff f0 	addi sp,sp,-16
    30c4:	5b 8b 00 10 	sw (sp+16),r11
    30c8:	5b 8c 00 0c 	sw (sp+12),r12
    30cc:	5b 8d 00 08 	sw (sp+8),r13
    30d0:	5b 9d 00 04 	sw (sp+4),ra
  const uint8_t* current = (uint8_t*)buf;

  uint8_t data_len = rf24_min(len,32);
    30d4:	20 6b 00 ff 	andi r11,r3,0xff
    30d8:	34 03 00 20 	mvi r3,32
  return 0;
}

/****************************************************************************/
void writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
    30dc:	b8 40 68 00 	mv r13,r2
    30e0:	20 2c 00 ff 	andi r12,r1,0xff
  const uint8_t* current = (uint8_t*)buf;

  uint8_t data_len = rf24_min(len,32);
    30e4:	50 6b 00 02 	bgeu r3,r11,30ec <writeAckPayload+0x2c>
    30e8:	b8 60 58 00 	mv r11,r3

  csn(LOW);
    30ec:	34 01 00 00 	mvi r1,0
    30f0:	fb ff ff 5c 	calli 2e60 <csn>
	nsleep(1);
    30f4:	34 01 00 01 	mvi r1,1
    30f8:	fb ff f4 f2 	calli 4c0 <nsleep>
  spi_transmitD(W_ACK_PAYLOAD | ( pipe & 0b111 ) );
    30fc:	21 81 00 07 	andi r1,r12,0x7
    3100:	38 21 00 a8 	ori r1,r1,0xa8
    3104:	fb ff ff 9e 	calli 2f7c <spi_transmitD>

  while ( data_len-- )
    3108:	45 60 00 0a 	be r11,r0,3130 <writeAckPayload+0x70>
    310c:	35 61 ff ff 	addi r1,r11,-1
    3110:	20 21 00 ff 	andi r1,r1,0xff
    3114:	34 21 00 01 	addi r1,r1,1
}

/****************************************************************************/
void writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
  const uint8_t* current = (uint8_t*)buf;
    3118:	b9 a0 58 00 	mv r11,r13

  csn(LOW);
	nsleep(1);
  spi_transmitD(W_ACK_PAYLOAD | ( pipe & 0b111 ) );

  while ( data_len-- )
    311c:	b5 a1 60 00 	add r12,r13,r1
    spi_transmitD(*current++);
    3120:	41 61 00 00 	lbu r1,(r11+0)
    3124:	35 6b 00 01 	addi r11,r11,1
    3128:	fb ff ff 95 	calli 2f7c <spi_transmitD>

  csn(LOW);
	nsleep(1);
  spi_transmitD(W_ACK_PAYLOAD | ( pipe & 0b111 ) );

  while ( data_len-- )
    312c:	5d 6c ff fd 	bne r11,r12,3120 <writeAckPayload+0x60>
    spi_transmitD(*current++);
	nsleep(4);
    3130:	34 01 00 04 	mvi r1,4
    3134:	fb ff f4 e3 	calli 4c0 <nsleep>
  csn(HIGH);
    3138:	34 01 00 01 	mvi r1,1
    313c:	fb ff ff 49 	calli 2e60 <csn>
}
    3140:	2b 9d 00 04 	lw ra,(sp+4)
    3144:	2b 8b 00 10 	lw r11,(sp+16)
    3148:	2b 8c 00 0c 	lw r12,(sp+12)
    314c:	2b 8d 00 08 	lw r13,(sp+8)
    3150:	37 9c 00 10 	addi sp,sp,16
    3154:	c3 a0 00 00 	ret

00003158 <write_register>:
	return status;
}

/****************************************************************************/
uint8_t write_register(uint8_t reg,const uint8_t *buf, uint8_t len)
{
    3158:	37 9c ff ec 	addi sp,sp,-20
    315c:	5b 8b 00 14 	sw (sp+20),r11
    3160:	5b 8c 00 10 	sw (sp+16),r12
    3164:	5b 8d 00 0c 	sw (sp+12),r13
    3168:	5b 8e 00 08 	sw (sp+8),r14
    316c:	5b 9d 00 04 	sw (sp+4),ra
    3170:	20 2b 00 ff 	andi r11,r1,0xff
	csn(LOW);
    3174:	34 01 00 00 	mvi r1,0
	return status;
}

/****************************************************************************/
uint8_t write_register(uint8_t reg,const uint8_t *buf, uint8_t len)
{
    3178:	b8 40 70 00 	mv r14,r2
    317c:	20 6c 00 ff 	andi r12,r3,0xff
	csn(LOW);
    3180:	fb ff ff 38 	calli 2e60 <csn>
	nsleep(1);
    3184:	34 01 00 01 	mvi r1,1
    3188:	fb ff f4 ce 	calli 4c0 <nsleep>
	status = spi_transmitD(W_REGISTER|(REGISTER_MASK & reg) );
    318c:	21 6b 00 1f 	andi r11,r11,0x1f
    3190:	39 61 00 20 	ori r1,r11,0x20
    3194:	78 0d 00 00 	mvhi r13,0x0
    3198:	39 ad 40 42 	ori r13,r13,0x4042
    319c:	fb ff ff 78 	calli 2f7c <spi_transmitD>
    31a0:	31 a1 00 00 	sb (r13+0),r1
	while(len--){
    31a4:	45 80 00 0a 	be r12,r0,31cc <write_register+0x74>
    31a8:	35 81 ff ff 	addi r1,r12,-1
    31ac:	20 21 00 ff 	andi r1,r1,0xff
    31b0:	34 21 00 01 	addi r1,r1,1
    31b4:	b9 c0 58 00 	mv r11,r14
    31b8:	b5 c1 60 00 	add r12,r14,r1
	spi_transmitD(*buf++);
    31bc:	41 61 00 00 	lbu r1,(r11+0)
    31c0:	35 6b 00 01 	addi r11,r11,1
    31c4:	fb ff ff 6e 	calli 2f7c <spi_transmitD>
uint8_t write_register(uint8_t reg,const uint8_t *buf, uint8_t len)
{
	csn(LOW);
	nsleep(1);
	status = spi_transmitD(W_REGISTER|(REGISTER_MASK & reg) );
	while(len--){
    31c8:	5d 6c ff fd 	bne r11,r12,31bc <write_register+0x64>
	spi_transmitD(*buf++);
	}
	nsleep(2);
    31cc:	34 01 00 02 	mvi r1,2
    31d0:	fb ff f4 bc 	calli 4c0 <nsleep>
	csn(HIGH);
    31d4:	34 01 00 01 	mvi r1,1
    31d8:	fb ff ff 22 	calli 2e60 <csn>
	nsleep(5);
    31dc:	34 01 00 05 	mvi r1,5
    31e0:	fb ff f4 b8 	calli 4c0 <nsleep>
	return status;
}
    31e4:	41 a1 00 00 	lbu r1,(r13+0)
    31e8:	2b 9d 00 04 	lw ra,(sp+4)
    31ec:	2b 8b 00 14 	lw r11,(sp+20)
    31f0:	2b 8c 00 10 	lw r12,(sp+16)
    31f4:	2b 8d 00 0c 	lw r13,(sp+12)
    31f8:	2b 8e 00 08 	lw r14,(sp+8)
    31fc:	37 9c 00 14 	addi sp,sp,20
    3200:	c3 a0 00 00 	ret

00003204 <write_register_basic>:
  return status;
}

/****************************************************************************/
uint8_t write_register_basic(uint8_t reg, uint8_t value)
{
    3204:	37 9c ff f0 	addi sp,sp,-16
    3208:	5b 8b 00 10 	sw (sp+16),r11
    320c:	5b 8c 00 0c 	sw (sp+12),r12
    3210:	5b 8d 00 08 	sw (sp+8),r13
    3214:	5b 9d 00 04 	sw (sp+4),ra
    3218:	20 2b 00 ff 	andi r11,r1,0xff
	csn(LOW);
    321c:	34 01 00 00 	mvi r1,0
  return status;
}

/****************************************************************************/
uint8_t write_register_basic(uint8_t reg, uint8_t value)
{
    3220:	20 4d 00 ff 	andi r13,r2,0xff
	csn(LOW);
	status = spi_transmitD(W_REGISTER|(REGISTER_MASK & reg) );
    3224:	21 6b 00 1f 	andi r11,r11,0x1f
}

/****************************************************************************/
uint8_t write_register_basic(uint8_t reg, uint8_t value)
{
	csn(LOW);
    3228:	fb ff ff 0e 	calli 2e60 <csn>
	status = spi_transmitD(W_REGISTER|(REGISTER_MASK & reg) );
    322c:	39 61 00 20 	ori r1,r11,0x20
    3230:	78 0c 00 00 	mvhi r12,0x0
    3234:	fb ff ff 52 	calli 2f7c <spi_transmitD>
    3238:	39 8c 40 42 	ori r12,r12,0x4042
    323c:	31 81 00 00 	sb (r12+0),r1
	spi_transmitD(value);
    3240:	b9 a0 08 00 	mv r1,r13
    3244:	fb ff ff 4e 	calli 2f7c <spi_transmitD>
	nsleep(3);
    3248:	34 01 00 03 	mvi r1,3
    324c:	fb ff f4 9d 	calli 4c0 <nsleep>
	csn(HIGH);
    3250:	34 01 00 01 	mvi r1,1
    3254:	fb ff ff 03 	calli 2e60 <csn>
	nsleep(5);
    3258:	34 01 00 05 	mvi r1,5
    325c:	fb ff f4 99 	calli 4c0 <nsleep>
	return status;
}
    3260:	41 81 00 00 	lbu r1,(r12+0)
    3264:	2b 9d 00 04 	lw ra,(sp+4)
    3268:	2b 8b 00 10 	lw r11,(sp+16)
    326c:	2b 8c 00 0c 	lw r12,(sp+12)
    3270:	2b 8d 00 08 	lw r13,(sp+8)
    3274:	37 9c 00 10 	addi sp,sp,16
    3278:	c3 a0 00 00 	ret

0000327c <setAutoAck>:
  write_register_basic(EN_RXADDR,read_register(EN_RXADDR) & ~_BV(child_pipe_enable[pipe]));
}

/****************************************************************************/
void setAutoAck(uint8_t enable)
{
    327c:	37 9c ff fc 	addi sp,sp,-4
    3280:	5b 9d 00 04 	sw (sp+4),ra
    3284:	20 22 00 ff 	andi r2,r1,0xff
  if ( enable ) 
    3288:	5c 40 00 06 	bne r2,r0,32a0 <setAutoAck+0x24>
    write_register_basic(EN_AA, 0b111111);
  else
    write_register_basic(EN_AA, 0);
    328c:	34 01 00 01 	mvi r1,1
    3290:	fb ff ff dd 	calli 3204 <write_register_basic>
}
    3294:	2b 9d 00 04 	lw ra,(sp+4)
    3298:	37 9c 00 04 	addi sp,sp,4
    329c:	c3 a0 00 00 	ret

/****************************************************************************/
void setAutoAck(uint8_t enable)
{
  if ( enable ) 
    write_register_basic(EN_AA, 0b111111);
    32a0:	34 02 00 3f 	mvi r2,63
    32a4:	34 01 00 01 	mvi r1,1
    32a8:	fb ff ff d7 	calli 3204 <write_register_basic>
  else
    write_register_basic(EN_AA, 0);
}
    32ac:	2b 9d 00 04 	lw ra,(sp+4)
    32b0:	37 9c 00 04 	addi sp,sp,4
    32b4:	c3 a0 00 00 	ret

000032b8 <openPipe0_tx>:
	write_register_basic(RF_SETUP, status);
}

/****************************************************************************/
void openPipe0_tx(const uint8_t * addres)
{
    32b8:	37 9c ff f8 	addi sp,sp,-8
    32bc:	5b 8b 00 08 	sw (sp+8),r11
    32c0:	5b 9d 00 04 	sw (sp+4),ra

  write_register(RX_ADDR_P0,addres, addr_width);
    32c4:	34 03 00 05 	mvi r3,5
	write_register_basic(RF_SETUP, status);
}

/****************************************************************************/
void openPipe0_tx(const uint8_t * addres)
{
    32c8:	b8 20 58 00 	mv r11,r1

  write_register(RX_ADDR_P0,addres, addr_width);
    32cc:	b8 20 10 00 	mv r2,r1
    32d0:	34 01 00 0a 	mvi r1,10
    32d4:	fb ff ff a1 	calli 3158 <write_register>
  write_register(TX_ADDR,addres, addr_width);
    32d8:	b9 60 10 00 	mv r2,r11
    32dc:	34 03 00 05 	mvi r3,5
    32e0:	34 01 00 10 	mvi r1,16
    32e4:	fb ff ff 9d 	calli 3158 <write_register>

  write_register_basic(RX_PW_P0,payload_size);
    32e8:	78 03 00 00 	mvhi r3,0x0
    32ec:	38 63 40 1c 	ori r3,r3,0x401c
    32f0:	40 62 00 00 	lbu r2,(r3+0)
    32f4:	34 01 00 11 	mvi r1,17
    32f8:	fb ff ff c3 	calli 3204 <write_register_basic>
}
    32fc:	2b 9d 00 04 	lw ra,(sp+4)
    3300:	2b 8b 00 08 	lw r11,(sp+8)
    3304:	37 9c 00 08 	addi sp,sp,8
    3308:	c3 a0 00 00 	ret

0000330c <setChannel>:
	write_register_basic(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
}

/****************************************************************************/
void setChannel(uint8_t channel)
{
    330c:	37 9c ff fc 	addi sp,sp,-4
    3310:	5b 9d 00 04 	sw (sp+4),ra
	const uint8_t max_channel=125;
	write_register_basic(RF_CH, rf24_min(channel, max_channel));
    3314:	20 22 00 ff 	andi r2,r1,0xff
    3318:	34 01 00 7d 	mvi r1,125
    331c:	50 22 00 02 	bgeu r1,r2,3324 <setChannel+0x18>
    3320:	b8 20 10 00 	mv r2,r1
    3324:	34 01 00 05 	mvi r1,5
    3328:	fb ff ff b7 	calli 3204 <write_register_basic>
}
    332c:	2b 9d 00 04 	lw ra,(sp+4)
    3330:	37 9c 00 04 	addi sp,sp,4
    3334:	c3 a0 00 00 	ret

00003338 <setRetries>:
	return status;
}

/****************************************************************************/
void setRetries(uint8_t delay, uint8_t count)
{
    3338:	37 9c ff fc 	addi sp,sp,-4
    333c:	5b 9d 00 04 	sw (sp+4),ra
    3340:	20 21 00 ff 	andi r1,r1,0xff
	write_register_basic(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
    3344:	3c 21 00 04 	sli r1,r1,4
    3348:	20 42 00 0f 	andi r2,r2,0xf
    334c:	b8 41 10 00 	or r2,r2,r1
    3350:	20 42 00 ff 	andi r2,r2,0xff
    3354:	34 01 00 04 	mvi r1,4
    3358:	fb ff ff ab 	calli 3204 <write_register_basic>
}
    335c:	2b 9d 00 04 	lw ra,(sp+4)
    3360:	37 9c 00 04 	addi sp,sp,4
    3364:	c3 a0 00 00 	ret

00003368 <read_register_buff>:
	csn(HIGH);
	nsleep(20);
	return result;	
}

uint8_t read_register_buff(uint8_t reg, uint8_t * buf, uint8_t len){
    3368:	37 9c ff ec 	addi sp,sp,-20
    336c:	5b 8b 00 14 	sw (sp+20),r11
    3370:	5b 8c 00 10 	sw (sp+16),r12
    3374:	5b 8d 00 0c 	sw (sp+12),r13
    3378:	5b 8e 00 08 	sw (sp+8),r14
    337c:	5b 9d 00 04 	sw (sp+4),ra
    3380:	20 2b 00 ff 	andi r11,r1,0xff
	uint8_t status;
	csn(LOW);
    3384:	34 01 00 00 	mvi r1,0
	csn(HIGH);
	nsleep(20);
	return result;	
}

uint8_t read_register_buff(uint8_t reg, uint8_t * buf, uint8_t len){
    3388:	b8 40 68 00 	mv r13,r2
    338c:	20 6c 00 ff 	andi r12,r3,0xff
	uint8_t status;
	csn(LOW);
    3390:	fb ff fe b4 	calli 2e60 <csn>
	nsleep(1);
    3394:	34 01 00 01 	mvi r1,1
    3398:	fb ff f4 4a 	calli 4c0 <nsleep>
	status = spi_transmitD( R_REGISTER | ( REGISTER_MASK & reg ) );
    339c:	21 61 00 1f 	andi r1,r11,0x1f
    33a0:	fb ff fe f7 	calli 2f7c <spi_transmitD>
    33a4:	b8 20 70 00 	mv r14,r1

	 while ( len-- ){
    33a8:	45 80 00 0b 	be r12,r0,33d4 <read_register_buff+0x6c>
    33ac:	35 81 ff ff 	addi r1,r12,-1
    33b0:	20 21 00 ff 	andi r1,r1,0xff
    33b4:	34 21 00 01 	addi r1,r1,1
    33b8:	b9 a0 58 00 	mv r11,r13
    33bc:	b5 a1 60 00 	add r12,r13,r1
    *buf++ = spi_transmitD(0xff);
    33c0:	34 01 00 ff 	mvi r1,255
    33c4:	fb ff fe ee 	calli 2f7c <spi_transmitD>
    33c8:	31 61 00 00 	sb (r11+0),r1
    33cc:	35 6b 00 01 	addi r11,r11,1
	uint8_t status;
	csn(LOW);
	nsleep(1);
	status = spi_transmitD( R_REGISTER | ( REGISTER_MASK & reg ) );

	 while ( len-- ){
    33d0:	5d 6c ff fc 	bne r11,r12,33c0 <read_register_buff+0x58>
    *buf++ = spi_transmitD(0xff);
  }
	nsleep(4);
    33d4:	34 01 00 04 	mvi r1,4
    33d8:	fb ff f4 3a 	calli 4c0 <nsleep>
  csn(HIGH);
    33dc:	34 01 00 01 	mvi r1,1
    33e0:	fb ff fe a0 	calli 2e60 <csn>
  return status;
}
    33e4:	b9 c0 08 00 	mv r1,r14
    33e8:	2b 9d 00 04 	lw ra,(sp+4)
    33ec:	2b 8b 00 14 	lw r11,(sp+20)
    33f0:	2b 8c 00 10 	lw r12,(sp+16)
    33f4:	2b 8d 00 0c 	lw r13,(sp+12)
    33f8:	2b 8e 00 08 	lw r14,(sp+8)
    33fc:	37 9c 00 14 	addi sp,sp,20
    3400:	c3 a0 00 00 	ret

00003404 <read_register>:
	return spi_transfer(0xff);
}

/****************************************************************************/
uint8_t read_register(uint8_t reg)
{
    3404:	37 9c ff f8 	addi sp,sp,-8
    3408:	5b 8b 00 08 	sw (sp+8),r11
    340c:	5b 9d 00 04 	sw (sp+4),ra
    3410:	20 2b 00 ff 	andi r11,r1,0xff
	uint8_t result;
	csn(LOW);
    3414:	34 01 00 00 	mvi r1,0
    3418:	fb ff fe 92 	calli 2e60 <csn>
	nsleep(1);
    341c:	34 01 00 01 	mvi r1,1
    3420:	fb ff f4 28 	calli 4c0 <nsleep>
	spi_transmitD(R_REGISTER|(REGISTER_MASK & reg));
    3424:	21 61 00 1f 	andi r1,r11,0x1f
    3428:	fb ff fe d5 	calli 2f7c <spi_transmitD>
	spi_transmitD(0xff);
    342c:	34 01 00 ff 	mvi r1,255
    3430:	fb ff fe d3 	calli 2f7c <spi_transmitD>
	result = spi_getchar();
    3434:	fb ff f5 a7 	calli ad0 <spi_getchar>
    3438:	b8 20 58 00 	mv r11,r1
	nsleep(3);
    343c:	34 01 00 03 	mvi r1,3
    3440:	fb ff f4 20 	calli 4c0 <nsleep>
	csn(HIGH);
    3444:	34 01 00 01 	mvi r1,1
    3448:	fb ff fe 86 	calli 2e60 <csn>
	nsleep(20);
    344c:	34 01 00 14 	mvi r1,20
    3450:	fb ff f4 1c 	calli 4c0 <nsleep>
	return result;	
}
    3454:	b9 60 08 00 	mv r1,r11
    3458:	2b 9d 00 04 	lw ra,(sp+4)
    345c:	2b 8b 00 08 	lw r11,(sp+8)
    3460:	37 9c 00 08 	addi sp,sp,8
    3464:	c3 a0 00 00 	ret

00003468 <available>:
	//se usa para negar la condicion de status, ya que no existe variables booleanas
	return status;
}

uint8_t available(void)
{
    3468:	37 9c ff fc 	addi sp,sp,-4
    346c:	5b 9d 00 04 	sw (sp+4),ra
  if (!( read_register(FIFO_STATUS) & _BV(RX_EMPTY) )){
    3470:	34 01 00 17 	mvi r1,23
    3474:	fb ff ff e4 	calli 3404 <read_register>
    3478:	18 21 00 01 	xori r1,r1,0x1
  	return 1;
  }
  return 0;
}
    347c:	20 21 00 01 	andi r1,r1,0x1
    3480:	2b 9d 00 04 	lw ra,(sp+4)
    3484:	37 9c 00 04 	addi sp,sp,4
    3488:	c3 a0 00 00 	ret

0000348c <isAckPayloadAvailable>:
  write_register_basic(EN_RXADDR,read_register(EN_RXADDR) | _BV(ERX_P0)); // Enable RX on pipe0
}

/****************************************************************************/
uint8_t isAckPayloadAvailable(void)
{
    348c:	37 9c ff fc 	addi sp,sp,-4
    3490:	5b 9d 00 04 	sw (sp+4),ra
	uint8_t status;
  status = (read_register(FIFO_STATUS) & _BV(RX_EMPTY))? false : true;
    3494:	34 01 00 17 	mvi r1,23
    3498:	fb ff ff db 	calli 3404 <read_register>
    349c:	18 21 00 01 	xori r1,r1,0x1
	//se usa para negar la condicion de status, ya que no existe variables booleanas
	return status;
}
    34a0:	20 21 00 01 	andi r1,r1,0x1
    34a4:	2b 9d 00 04 	lw ra,(sp+4)
    34a8:	37 9c 00 04 	addi sp,sp,4
    34ac:	c3 a0 00 00 	ret

000034b0 <enableDynamicAckPayloads>:
    write_register_basic(EN_AA, 0);
}

/****************************************************************************/
void enableDynamicAckPayloads(void)
{
    34b0:	37 9c ff fc 	addi sp,sp,-4
    34b4:	5b 9d 00 04 	sw (sp+4),ra
  write_register_basic(FEATURE,read_register(FEATURE) | _BV(EN_ACK_PAY) | _BV(EN_DPL) );
    34b8:	34 01 00 1d 	mvi r1,29
    34bc:	fb ff ff d2 	calli 3404 <read_register>
    34c0:	38 21 00 06 	ori r1,r1,0x6
    34c4:	20 22 00 ff 	andi r2,r1,0xff
    34c8:	34 01 00 1d 	mvi r1,29
    34cc:	fb ff ff 4e 	calli 3204 <write_register_basic>

  write_register_basic(DYNPD,read_register(DYNPD) | _BV(DPL_P5) | _BV(DPL_P4) | _BV(DPL_P3) | _BV(DPL_P2) | _BV(DPL_P1) | _BV(DPL_P0));
    34d0:	34 01 00 1c 	mvi r1,28
    34d4:	fb ff ff cc 	calli 3404 <read_register>
    34d8:	38 21 00 3f 	ori r1,r1,0x3f
    34dc:	20 22 00 ff 	andi r2,r1,0xff
    34e0:	34 01 00 1c 	mvi r1,28
    34e4:	fb ff ff 48 	calli 3204 <write_register_basic>

  dynamic_payloads_enabled = true;
    34e8:	78 02 00 00 	mvhi r2,0x0
    34ec:	38 42 40 48 	ori r2,r2,0x4048
    34f0:	34 01 00 01 	mvi r1,1
    34f4:	30 41 00 00 	sb (r2+0),r1
}
    34f8:	2b 9d 00 04 	lw ra,(sp+4)
    34fc:	37 9c 00 04 	addi sp,sp,4
    3500:	c3 a0 00 00 	ret

00003504 <closeReadingPipe>:
  //delayMicroseconds(100);
}

/****************************************************************************/
void closeReadingPipe( uint8_t pipe )
{
    3504:	37 9c ff f8 	addi sp,sp,-8
    3508:	5b 8b 00 08 	sw (sp+8),r11
    350c:	5b 9d 00 04 	sw (sp+4),ra
    3510:	20 2b 00 ff 	andi r11,r1,0xff
  write_register_basic(EN_RXADDR,read_register(EN_RXADDR) & ~_BV(child_pipe_enable[pipe]));
    3514:	34 01 00 02 	mvi r1,2
    3518:	fb ff ff bb 	calli 3404 <read_register>
    351c:	78 02 00 00 	mvhi r2,0x0
    3520:	38 42 3f e0 	ori r2,r2,0x3fe0
    3524:	b4 4b 10 00 	add r2,r2,r11
    3528:	40 43 00 00 	lbu r3,(r2+0)
    352c:	34 02 00 01 	mvi r2,1
    3530:	bc 43 10 00 	sl r2,r2,r3
    3534:	a4 40 10 00 	not r2,r2
    3538:	a0 41 10 00 	and r2,r2,r1
    353c:	20 42 00 ff 	andi r2,r2,0xff
    3540:	34 01 00 02 	mvi r1,2
    3544:	fb ff ff 30 	calli 3204 <write_register_basic>
}
    3548:	2b 9d 00 04 	lw ra,(sp+4)
    354c:	2b 8b 00 08 	lw r11,(sp+8)
    3550:	37 9c 00 08 	addi sp,sp,8
    3554:	c3 a0 00 00 	ret

00003558 <openpipe_rx>:



/****************************************************************************/
void openpipe_rx(uint8_t pipe,const uint8_t *address)
{
    3558:	37 9c ff f8 	addi sp,sp,-8
    355c:	5b 8b 00 08 	sw (sp+8),r11
    3560:	5b 9d 00 04 	sw (sp+4),ra
    3564:	20 2b 00 ff 	andi r11,r1,0xff
    3568:	b8 40 18 00 	mv r3,r2
de los datos de las otras antenas amenos que se verifique para que el PRX
pueda acpetar 6 antenas o simplemente se cierre el canal 0 a modo de que 
si la antena vuelve a ser PTX, la direccion TX_ADDR concuerde con la RX_ADDR_P0
mas infotmacion en el datasheet pag 39
*/
  if (pipe == 0){
    356c:	5d 60 00 23 	bne r11,r0,35f8 <openpipe_rx+0xa0>
    pipe0_reading_address=(uint8_t *)address;//periodo de prueba
    3570:	78 01 00 00 	mvhi r1,0x0
    3574:	38 21 40 4c 	ori r1,r1,0x404c
    3578:	58 22 00 00 	sw (r1+0),r2
  }
  if (pipe <= 6)
  {
    // Para los canales 2 y 5 solo se modifica el byte menos significatico LSB
    if ( pipe < 2 ){
      write_register((child_pipe[pipe]), (uint8_t *)address, addr_width);
    357c:	78 02 00 00 	mvhi r2,0x0
    3580:	38 42 3f e8 	ori r2,r2,0x3fe8
    3584:	b4 4b 10 00 	add r2,r2,r11
    3588:	40 41 00 00 	lbu r1,(r2+0)
    358c:	b8 60 10 00 	mv r2,r3
    3590:	34 03 00 05 	mvi r3,5
    3594:	fb ff fe f1 	calli 3158 <write_register>
    }else{
      write_register((child_pipe[pipe]), (uint8_t *)address, 1);
	}
    write_register_basic((child_payload_size[pipe]),payload_size);
    3598:	78 03 00 00 	mvhi r3,0x0
    359c:	38 63 3f f0 	ori r3,r3,0x3ff0
    35a0:	78 01 00 00 	mvhi r1,0x0
    35a4:	b4 6b 18 00 	add r3,r3,r11
    35a8:	38 21 40 1c 	ori r1,r1,0x401c
    35ac:	40 22 00 00 	lbu r2,(r1+0)
    35b0:	40 61 00 00 	lbu r1,(r3+0)
    35b4:	fb ff ff 14 	calli 3204 <write_register_basic>

    // Note it would be more efficient to set all of the bits for all open
    // pipes at once.  However, I thought it would make the calling code
    // more simple to do it this way.
    write_register_basic(EN_RXADDR,read_register(EN_RXADDR) | _BV(child_pipe_enable[pipe]));
    35b8:	34 01 00 02 	mvi r1,2
    35bc:	fb ff ff 92 	calli 3404 <read_register>
    35c0:	78 02 00 00 	mvhi r2,0x0
    35c4:	38 42 3f e0 	ori r2,r2,0x3fe0
    35c8:	b4 4b 10 00 	add r2,r2,r11
    35cc:	40 43 00 00 	lbu r3,(r2+0)
    35d0:	34 02 00 01 	mvi r2,1
    35d4:	bc 43 10 00 	sl r2,r2,r3
    35d8:	b8 41 10 00 	or r2,r2,r1
    35dc:	20 42 00 ff 	andi r2,r2,0xff
    35e0:	34 01 00 02 	mvi r1,2
    35e4:	fb ff ff 08 	calli 3204 <write_register_basic>

  }
}
    35e8:	2b 9d 00 04 	lw ra,(sp+4)
    35ec:	2b 8b 00 08 	lw r11,(sp+8)
    35f0:	37 9c 00 08 	addi sp,sp,8
    35f4:	c3 a0 00 00 	ret
mas infotmacion en el datasheet pag 39
*/
  if (pipe == 0){
    pipe0_reading_address=(uint8_t *)address;//periodo de prueba
  }
  if (pipe <= 6)
    35f8:	34 01 00 06 	mvi r1,6
    35fc:	55 61 ff fb 	bgu r11,r1,35e8 <openpipe_rx+0x90>
  {
    // Para los canales 2 y 5 solo se modifica el byte menos significatico LSB
    if ( pipe < 2 ){
    3600:	34 04 00 01 	mvi r4,1
    3604:	45 64 ff de 	be r11,r4,357c <openpipe_rx+0x24>
      write_register((child_pipe[pipe]), (uint8_t *)address, addr_width);
    }else{
      write_register((child_pipe[pipe]), (uint8_t *)address, 1);
    3608:	78 03 00 00 	mvhi r3,0x0
    360c:	38 63 3f e8 	ori r3,r3,0x3fe8
    3610:	b4 6b 18 00 	add r3,r3,r11
    3614:	40 61 00 00 	lbu r1,(r3+0)
    3618:	b8 80 18 00 	mv r3,r4
    361c:	fb ff fe cf 	calli 3158 <write_register>
    3620:	e3 ff ff de 	bi 3598 <openpipe_rx+0x40>

00003624 <setPaLevel>:
}


/****************************************************************************/
void setPaLevel(uint8_t level)
{
    3624:	37 9c ff f8 	addi sp,sp,-8
    3628:	5b 8b 00 08 	sw (sp+8),r11
    362c:	5b 9d 00 04 	sw (sp+4),ra
    3630:	20 2b 00 ff 	andi r11,r1,0xff
	status = read_register(RF_SETUP) & 0b11111000;
    3634:	34 01 00 06 	mvi r1,6
    3638:	fb ff ff 73 	calli 3404 <read_register>
    363c:	78 02 00 00 	mvhi r2,0x0
    3640:	20 23 00 f8 	andi r3,r1,0xf8
    3644:	38 42 40 42 	ori r2,r2,0x4042
    3648:	30 43 00 00 	sb (r2+0),r3
	if(level<7){
    364c:	34 01 00 06 	mvi r1,6
    3650:	55 61 00 03 	bgu r11,r1,365c <setPaLevel+0x38>
	status |=level;
    3654:	b8 6b 08 00 	or r1,r3,r11
    3658:	30 41 00 00 	sb (r2+0),r1
	}else{
	status |=0x00;
	//Deja por default la potencia de las antenas en -18dBm
	}
	write_register_basic(RF_SETUP, status);
    365c:	40 42 00 00 	lbu r2,(r2+0)
    3660:	34 01 00 06 	mvi r1,6
    3664:	fb ff fe e8 	calli 3204 <write_register_basic>
}
    3668:	2b 9d 00 04 	lw ra,(sp+4)
    366c:	2b 8b 00 08 	lw r11,(sp+8)
    3670:	37 9c 00 08 	addi sp,sp,8
    3674:	c3 a0 00 00 	ret

00003678 <power_up>:
  write_register_basic(NRF_CONFIG,read_register(NRF_CONFIG) & ~_BV(PWR_UP));
}

/****************************************************************************/
void power_up(void)
{
    3678:	37 9c ff fc 	addi sp,sp,-4
    367c:	5b 9d 00 04 	sw (sp+4),ra
   uint8_t cfg = read_register(NRF_CONFIG);
    3680:	34 01 00 00 	mvi r1,0
    3684:	fb ff ff 60 	calli 3404 <read_register>

   //si no se ha activado la senal PWR_UP, se ectiva y se verifica que el modulo este donectado
   if (!(cfg & _BV(PWR_UP))){
    3688:	20 23 00 02 	andi r3,r1,0x2
    368c:	5c 60 00 07 	bne r3,r0,36a8 <power_up+0x30>
      write_register_basic(NRF_CONFIG, cfg | _BV(PWR_UP));
    3690:	38 22 00 02 	ori r2,r1,0x2
    3694:	20 42 00 ff 	andi r2,r2,0xff
    3698:	b8 60 08 00 	mv r1,r3
    369c:	fb ff fe da 	calli 3204 <write_register_basic>
			//Espere 5ms para que el modulo pueda establecer el cambio del estado power down al estado StandBy-I
			//Ver datasheet tiempo tpd2stby
      msleep(5); //Para sintetizacion
    36a0:	34 01 00 05 	mvi r1,5
    36a4:	fb ff f3 79 	calli 488 <msleep>
   }
}
    36a8:	2b 9d 00 04 	lw ra,(sp+4)
    36ac:	37 9c 00 04 	addi sp,sp,4
    36b0:	c3 a0 00 00 	ret

000036b4 <power_down>:
	spi_transfer(FLUSH_TX);
}

/****************************************************************************/
void power_down(void)
{
    36b4:	37 9c ff fc 	addi sp,sp,-4
    36b8:	5b 9d 00 04 	sw (sp+4),ra
  ce(LOW); // Guarantee CE is low on powerDown
    36bc:	34 01 00 00 	mvi r1,0
    36c0:	fb ff fd a1 	calli 2d44 <ce>
  write_register_basic(NRF_CONFIG,read_register(NRF_CONFIG) & ~_BV(PWR_UP));
    36c4:	34 01 00 00 	mvi r1,0
    36c8:	fb ff ff 4f 	calli 3404 <read_register>
    36cc:	20 21 00 fd 	andi r1,r1,0xfd
    36d0:	b8 20 10 00 	mv r2,r1
    36d4:	34 01 00 00 	mvi r1,0
    36d8:	fb ff fe cb 	calli 3204 <write_register_basic>
}
    36dc:	2b 9d 00 04 	lw ra,(sp+4)
    36e0:	37 9c 00 04 	addi sp,sp,4
    36e4:	c3 a0 00 00 	ret

000036e8 <spi_putstr_nrf24>:
	nsleep(5);
	return receive; 
}

void spi_putstr_nrf24(const uint8_t *data)
{
    36e8:	37 9c ff f8 	addi sp,sp,-8
    36ec:	5b 8b 00 08 	sw (sp+8),r11
    36f0:	5b 9d 00 04 	sw (sp+4),ra
    36f4:	b8 20 58 00 	mv r11,r1
	csn(LOW);
    36f8:	34 01 00 00 	mvi r1,0
    36fc:	fb ff fd d9 	calli 2e60 <csn>
	nsleep(1);
    3700:	34 01 00 01 	mvi r1,1
    3704:	fb ff f3 6f 	calli 4c0 <nsleep>
	const uint8_t *c = data;
	while(*c){
    3708:	41 61 00 00 	lbu r1,(r11+0)
    370c:	44 20 00 05 	be r1,r0,3720 <spi_putstr_nrf24+0x38>
		spi_transmitD(*c);
		c++;
    3710:	35 6b 00 01 	addi r11,r11,1
{
	csn(LOW);
	nsleep(1);
	const uint8_t *c = data;
	while(*c){
		spi_transmitD(*c);
    3714:	fb ff fe 1a 	calli 2f7c <spi_transmitD>
void spi_putstr_nrf24(const uint8_t *data)
{
	csn(LOW);
	nsleep(1);
	const uint8_t *c = data;
	while(*c){
    3718:	41 61 00 00 	lbu r1,(r11+0)
    371c:	5c 20 ff fd 	bne r1,r0,3710 <spi_putstr_nrf24+0x28>
		spi_transmitD(*c);
		c++;
	}
	nsleep(3);
    3720:	34 01 00 03 	mvi r1,3
    3724:	fb ff f3 67 	calli 4c0 <nsleep>
	csn(HIGH);
    3728:	34 01 00 01 	mvi r1,1
    372c:	fb ff fd cd 	calli 2e60 <csn>
	nsleep(5);
    3730:	34 01 00 05 	mvi r1,5
    3734:	fb ff f3 63 	calli 4c0 <nsleep>
}
    3738:	2b 9d 00 04 	lw ra,(sp+4)
    373c:	2b 8b 00 08 	lw r11,(sp+8)
    3740:	37 9c 00 08 	addi sp,sp,8
    3744:	c3 a0 00 00 	ret

00003748 <spi_transfer>:
	return receive;
}
*/
//Para usar esta funcion no hay que olvidar que hay que habilitar el CSN y darle los restrasos adecuados al mismo
uint8_t spi_transfer(uint8_t data)
{
    3748:	37 9c ff f8 	addi sp,sp,-8
    374c:	5b 8b 00 08 	sw (sp+8),r11
    3750:	5b 9d 00 04 	sw (sp+4),ra
    3754:	20 2b 00 ff 	andi r11,r1,0xff
	uint8_t receive;
	csn(LOW);
    3758:	34 01 00 00 	mvi r1,0
    375c:	fb ff fd c1 	calli 2e60 <csn>
	receive = spi_transmitD(data);
    3760:	b9 60 08 00 	mv r1,r11
    3764:	fb ff fe 06 	calli 2f7c <spi_transmitD>
    3768:	b8 20 58 00 	mv r11,r1
	nsleep(3);
    376c:	34 01 00 03 	mvi r1,3
    3770:	fb ff f3 54 	calli 4c0 <nsleep>
	csn(HIGH);
    3774:	34 01 00 01 	mvi r1,1
    3778:	fb ff fd ba 	calli 2e60 <csn>
	nsleep(5);
    377c:	34 01 00 05 	mvi r1,5
    3780:	fb ff f3 50 	calli 4c0 <nsleep>
	return receive; 
}
    3784:	b9 60 08 00 	mv r1,r11
    3788:	2b 9d 00 04 	lw ra,(sp+4)
    378c:	2b 8b 00 08 	lw r11,(sp+8)
    3790:	37 9c 00 08 	addi sp,sp,8
    3794:	c3 a0 00 00 	ret

00003798 <flush_tx>:
	spi_transfer(FLUSH_RX);
}

/****************************************************************************/
void flush_tx()
{
    3798:	37 9c ff fc 	addi sp,sp,-4
    379c:	5b 9d 00 04 	sw (sp+4),ra
	spi_transfer(FLUSH_TX);
    37a0:	34 01 00 e1 	mvi r1,225
    37a4:	fb ff ff e9 	calli 3748 <spi_transfer>
}
    37a8:	2b 9d 00 04 	lw ra,(sp+4)
    37ac:	37 9c 00 04 	addi sp,sp,4
    37b0:	c3 a0 00 00 	ret

000037b4 <startRx_mode>:



/***************************************************************************/
void startRx_mode(void)
{
    37b4:	37 9c ff fc 	addi sp,sp,-4
    37b8:	5b 9d 00 04 	sw (sp+4),ra
  power_up();
    37bc:	fb ff ff af 	calli 3678 <power_up>

  write_register_basic(NRF_CONFIG, read_register(NRF_CONFIG) | _BV(PRIM_RX));
    37c0:	34 01 00 00 	mvi r1,0
    37c4:	fb ff ff 10 	calli 3404 <read_register>
    37c8:	38 21 00 01 	ori r1,r1,0x1
    37cc:	20 22 00 ff 	andi r2,r1,0xff
    37d0:	34 01 00 00 	mvi r1,0
    37d4:	fb ff fe 8c 	calli 3204 <write_register_basic>
  write_register_basic(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
    37d8:	34 02 00 70 	mvi r2,112
    37dc:	34 01 00 07 	mvi r1,7
    37e0:	fb ff fe 89 	calli 3204 <write_register_basic>
  ce(HIGH);
    37e4:	34 01 00 01 	mvi r1,1
    37e8:	fb ff fd 57 	calli 2d44 <ce>
    write_register(RX_ADDR_P0, pipe0_reading_address, addr_width);	
  }else{
	closeReadingPipe(0);
  }
*/
	closeReadingPipe(0);
    37ec:	34 01 00 00 	mvi r1,0
    37f0:	fb ff ff 45 	calli 3504 <closeReadingPipe>

  // Flush buffers
  //flush_rx();
  if(read_register(FEATURE) & _BV(EN_ACK_PAY)){
    37f4:	34 01 00 1d 	mvi r1,29
    37f8:	fb ff ff 03 	calli 3404 <read_register>
    37fc:	20 21 00 02 	andi r1,r1,0x2
    3800:	44 20 00 02 	be r1,r0,3808 <startRx_mode+0x54>
	flush_tx();
    3804:	fb ff ff e5 	calli 3798 <flush_tx>
  }

  // Go!
  //delayMicroseconds(100);
}
    3808:	2b 9d 00 04 	lw ra,(sp+4)
    380c:	37 9c 00 04 	addi sp,sp,4
    3810:	c3 a0 00 00 	ret

00003814 <flush_rx>:
	write_register_basic(RF_CH, rf24_min(channel, max_channel));
}

/****************************************************************************/
void flush_rx()
{
    3814:	37 9c ff fc 	addi sp,sp,-4
    3818:	5b 9d 00 04 	sw (sp+4),ra
	spi_transfer(FLUSH_RX);
    381c:	34 01 00 e2 	mvi r1,226
    3820:	fb ff ff ca 	calli 3748 <spi_transfer>
}
    3824:	2b 9d 00 04 	lw ra,(sp+4)
    3828:	37 9c 00 04 	addi sp,sp,4
    382c:	c3 a0 00 00 	ret

00003830 <stopTransmission>:
}
*/

/****************************************************************************/
void stopTransmission(void)
{
    3830:	37 9c ff f8 	addi sp,sp,-8
    3834:	5b 8b 00 08 	sw (sp+8),r11
    3838:	5b 9d 00 04 	sw (sp+4),ra
	ce(LOW);
    383c:	34 01 00 00 	mvi r1,0

	nsleep(wxrxDelay);
    3840:	78 0b 00 00 	mvhi r11,0x0
*/

/****************************************************************************/
void stopTransmission(void)
{
	ce(LOW);
    3844:	fb ff fd 40 	calli 2d44 <ce>

	nsleep(wxrxDelay);
    3848:	39 6b 40 51 	ori r11,r11,0x4051
    384c:	41 61 00 00 	lbu r1,(r11+0)
    3850:	fb ff f3 1c 	calli 4c0 <nsleep>
  
  if(read_register(FEATURE) & _BV(EN_ACK_PAY)){
    3854:	34 01 00 1d 	mvi r1,29
    3858:	fb ff fe eb 	calli 3404 <read_register>
    385c:	20 21 00 02 	andi r1,r1,0x2
    3860:	44 20 00 04 	be r1,r0,3870 <stopTransmission+0x40>
		nsleep(wxrxDelay);
    3864:	41 61 00 00 	lbu r1,(r11+0)
    3868:	fb ff f3 16 	calli 4c0 <nsleep>
		flush_tx(); //Limpia el TX_	FIFO luego que ha terminado el tiempo de espera
    386c:	fb ff ff cb 	calli 3798 <flush_tx>
  }
	flush_rx();
    3870:	fb ff ff e9 	calli 3814 <flush_rx>
  write_register_basic(NRF_CONFIG, ( read_register(NRF_CONFIG) ) & ~_BV(PRIM_RX) );
    3874:	34 01 00 00 	mvi r1,0
    3878:	fb ff fe e3 	calli 3404 <read_register>
    387c:	20 21 00 fe 	andi r1,r1,0xfe
    3880:	b8 20 10 00 	mv r2,r1
    3884:	34 01 00 00 	mvi r1,0
    3888:	fb ff fe 5f 	calli 3204 <write_register_basic>
 
  write_register_basic(EN_RXADDR,read_register(EN_RXADDR) | _BV(ERX_P0)); // Enable RX on pipe0
    388c:	34 01 00 02 	mvi r1,2
    3890:	fb ff fe dd 	calli 3404 <read_register>
    3894:	38 21 00 01 	ori r1,r1,0x1
    3898:	20 22 00 ff 	andi r2,r1,0xff
    389c:	34 01 00 02 	mvi r1,2
    38a0:	fb ff fe 59 	calli 3204 <write_register_basic>
}
    38a4:	2b 9d 00 04 	lw ra,(sp+4)
    38a8:	2b 8b 00 08 	lw r11,(sp+8)
    38ac:	37 9c 00 08 	addi sp,sp,8
    38b0:	c3 a0 00 00 	ret

000038b4 <nrf24_begin>:
static uint8_t setup;   //almacena el estado actual del registro
static uint8_t delay_t; //Retraso necesario que se debe esperar despues de cada transmision
static uint8_t status;  //almacena el status de las antenas

void nrf24_begin(void)
{
    38b4:	37 9c ff fc 	addi sp,sp,-4
    38b8:	5b 9d 00 04 	sw (sp+4),ra
	gpio_init_write(); //Habilita el gpio en forma de escritura
    38bc:	fb ff f2 be 	calli 3b4 <gpio_init_write>
//	spi_finish();
	csn(HIGH);
    38c0:	34 01 00 01 	mvi r1,1
    38c4:	fb ff fd 67 	calli 2e60 <csn>
	ce(LOW);
    38c8:	34 01 00 00 	mvi r1,0
    38cc:	fb ff fd 1e 	calli 2d44 <ce>
	msleep(100); //usar para sintetizacion
    38d0:	34 01 00 64 	mvi r1,100
    38d4:	fb ff f2 ed 	calli 488 <msleep>
	//nsleep(10);	 //usar para simulacion
	
  // Reset NRF_CONFIG and enable 16-bit CRC.
  write_register_basic( NRF_CONFIG, 0b00001100 );
    38d8:	34 02 00 0c 	mvi r2,12
    38dc:	34 01 00 00 	mvi r1,0
    38e0:	fb ff fe 49 	calli 3204 <write_register_basic>
	//Tiempo de reenvio entre cada paquete 250uS, se reenvia 15 veces
	setRetries(5,15);
    38e4:	34 02 00 0f 	mvi r2,15
    38e8:	34 01 00 05 	mvi r1,5
    38ec:	fb ff fe 93 	calli 3338 <setRetries>
	//Se configura la velocidad de transmision de las antenas
	setup = read_register( RF_SETUP );
    38f0:	34 01 00 06 	mvi r1,6
    38f4:	fb ff fe c4 	calli 3404 <read_register>
  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
	setup |= 0x00; //-0b00101000Se configura la antena para que transmita a una velocidad de 1MBits
    38f8:	78 03 00 00 	mvhi r3,0x0
	//Tiempo de reenvio entre cada paquete 250uS, se reenvia 15 veces
	setRetries(5,15);
	//Se configura la velocidad de transmision de las antenas
	setup = read_register( RF_SETUP );
  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
    38fc:	20 24 00 d7 	andi r4,r1,0xd7
	setup |= 0x00; //-0b00101000Se configura la antena para que transmita a una velocidad de 1MBits
    3900:	38 63 40 40 	ori r3,r3,0x4040
	write_register_basic( RF_SETUP, setup);
    3904:	b8 80 10 00 	mv r2,r4
	setRetries(5,15);
	//Se configura la velocidad de transmision de las antenas
	setup = read_register( RF_SETUP );
  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
	setup |= 0x00; //-0b00101000Se configura la antena para que transmita a una velocidad de 1MBits
    3908:	30 64 00 00 	sb (r3+0),r4
	write_register_basic( RF_SETUP, setup);
    390c:	34 01 00 06 	mvi r1,6
    3910:	fb ff fe 3d 	calli 3204 <write_register_basic>
	delay_t = 85; 
    3914:	78 02 00 00 	mvhi r2,0x0
    3918:	38 42 40 41 	ori r2,r2,0x4041
    391c:	34 01 00 55 	mvi r1,85
    3920:	30 41 00 00 	sb (r2+0),r1
	//Configura la senal de acknowledge y los dinamicos payaloads de la antena
	toggle_features();
    3924:	fb ff fd a1 	calli 2fa8 <toggle_features>
	write_register_basic(FEATURE,0); //Permite que se adjunte un payload a la senal de ack, proveniente del PRX
    3928:	34 02 00 00 	mvi r2,0
    392c:	34 01 00 1d 	mvi r1,29
    3930:	fb ff fe 35 	calli 3204 <write_register_basic>
  write_register_basic(DYNPD,0);			//Desactiva el payload dinamico de todos los canales
    3934:	34 02 00 00 	mvi r2,0
    3938:	34 01 00 1c 	mvi r1,28
    393c:	fb ff fe 32 	calli 3204 <write_register_basic>
	//resetea las senales de control, provenientes de la recepcion de un paquete PRX
	//Del recibimiento de una senal de ACK PTX
	//De una maximo de envios de un payload PTX  
	write_register_basic(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
    3940:	34 02 00 70 	mvi r2,112
    3944:	34 01 00 07 	mvi r1,7
    3948:	fb ff fe 2f 	calli 3204 <write_register_basic>
	//Configuracion de la frecuencia de transmision del dato
	setChannel(110);
    394c:	34 01 00 6e 	mvi r1,110
    3950:	fb ff fe 6f 	calli 330c <setChannel>
	//Limpia los buffers
	flush_rx();
    3954:	fb ff ff b0 	calli 3814 <flush_rx>
	flush_tx();
    3958:	fb ff ff 90 	calli 3798 <flush_tx>

	power_up();
    395c:	fb ff ff 47 	calli 3678 <power_up>

	//Se configura la antena para que sea receptora	
	write_register_basic(NRF_CONFIG, ( read_register(NRF_CONFIG) ) | _BV(PRIM_RX) );
    3960:	34 01 00 00 	mvi r1,0
    3964:	fb ff fe a8 	calli 3404 <read_register>
    3968:	38 21 00 01 	ori r1,r1,0x1
    396c:	20 22 00 ff 	andi r2,r1,0xff
    3970:	34 01 00 00 	mvi r1,0
    3974:	fb ff fe 24 	calli 3204 <write_register_basic>
	
	//Configura la potencia de trasnmision a -6dBm
	setPaLevel(RF_HIGH_PWR);	
    3978:	34 01 00 04 	mvi r1,4
    397c:	fb ff ff 2a 	calli 3624 <setPaLevel>

	//abre el canal 0
	//openPipe0_tx(channel0);
}
    3980:	2b 9d 00 04 	lw ra,(sp+4)
    3984:	37 9c 00 04 	addi sp,sp,4
    3988:	c3 a0 00 00 	ret

0000398c <get_status>:
	data++;
}
*/
/****************************************************************************/
uint8_t get_status()
{
    398c:	37 9c ff fc 	addi sp,sp,-4
    3990:	5b 9d 00 04 	sw (sp+4),ra
	return spi_transfer(0xff);
    3994:	34 01 00 ff 	mvi r1,255
    3998:	fb ff ff 6c 	calli 3748 <spi_transfer>
}
    399c:	2b 9d 00 04 	lw ra,(sp+4)
    39a0:	37 9c 00 04 	addi sp,sp,4
    39a4:	c3 a0 00 00 	ret

000039a8 <load_payload>:
	//openPipe0_tx(channel0);
}

/****************************************************************************/
uint8_t load_payload(const void *spi_txbuff, uint8_t writeType, uint8_t len)
{
    39a8:	37 9c ff ec 	addi sp,sp,-20
    39ac:	5b 8b 00 14 	sw (sp+20),r11
    39b0:	5b 8c 00 10 	sw (sp+16),r12
    39b4:	5b 8d 00 0c 	sw (sp+12),r13
    39b8:	5b 8e 00 08 	sw (sp+8),r14
    39bc:	5b 9d 00 04 	sw (sp+4),ra
	uint8_t status;
	const uint8_t *data = (const uint8_t *)spi_txbuff;
  uint8_t data_len = rf24_min(len, payload_size);
    39c0:	78 04 00 00 	mvhi r4,0x0
    39c4:	38 84 40 1c 	ori r4,r4,0x401c
    39c8:	40 84 00 00 	lbu r4,(r4+0)
    39cc:	20 6b 00 ff 	andi r11,r3,0xff
	//openPipe0_tx(channel0);
}

/****************************************************************************/
uint8_t load_payload(const void *spi_txbuff, uint8_t writeType, uint8_t len)
{
    39d0:	b8 20 70 00 	mv r14,r1
    39d4:	20 4c 00 ff 	andi r12,r2,0xff
	uint8_t status;
	const uint8_t *data = (const uint8_t *)spi_txbuff;
  uint8_t data_len = rf24_min(len, payload_size);
    39d8:	50 8b 00 02 	bgeu r4,r11,39e0 <load_payload+0x38>
    39dc:	b8 80 58 00 	mv r11,r4
  uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size- data_len;
    39e0:	78 01 00 00 	mvhi r1,0x0
    39e4:	38 21 40 48 	ori r1,r1,0x4048
    39e8:	40 23 00 00 	lbu r3,(r1+0)
    39ec:	c8 8b 10 00 	sub r2,r4,r11
    39f0:	20 4d 00 ff 	andi r13,r2,0xff
    39f4:	44 60 00 02 	be r3,r0,39fc <load_payload+0x54>
    39f8:	34 0d 00 00 	mvi r13,0


	csn(LOW);
    39fc:	34 01 00 00 	mvi r1,0
    3a00:	fb ff fd 18 	calli 2e60 <csn>
	nsleep(1);
    3a04:	34 01 00 01 	mvi r1,1
    3a08:	fb ff f2 ae 	calli 4c0 <nsleep>
	if(writeType == W_TX_PAYLOAD){
    3a0c:	34 01 00 a0 	mvi r1,160
    3a10:	45 81 00 37 	be r12,r1,3aec <load_payload+0x144>
		spi_transmitD(W_TX_PAYLOAD);
	}else{
		spi_transmitD(W_TX_PAYLOAD_NO_ACK);
    3a14:	34 01 00 b0 	mvi r1,176
    3a18:	fb ff fd 59 	calli 2f7c <spi_transmitD>
	}
	while(data_len--){
    3a1c:	45 60 00 0a 	be r11,r0,3a44 <load_payload+0x9c>
    3a20:	35 61 ff ff 	addi r1,r11,-1
    3a24:	20 21 00 ff 	andi r1,r1,0xff
    3a28:	34 21 00 01 	addi r1,r1,1

/****************************************************************************/
uint8_t load_payload(const void *spi_txbuff, uint8_t writeType, uint8_t len)
{
	uint8_t status;
	const uint8_t *data = (const uint8_t *)spi_txbuff;
    3a2c:	b9 c0 58 00 	mv r11,r14
	if(writeType == W_TX_PAYLOAD){
		spi_transmitD(W_TX_PAYLOAD);
	}else{
		spi_transmitD(W_TX_PAYLOAD_NO_ACK);
	}
	while(data_len--){
    3a30:	b5 c1 60 00 	add r12,r14,r1
		spi_transmitD(*data);
    3a34:	41 61 00 00 	lbu r1,(r11+0)
		data++;
    3a38:	35 6b 00 01 	addi r11,r11,1
		spi_transmitD(W_TX_PAYLOAD);
	}else{
		spi_transmitD(W_TX_PAYLOAD_NO_ACK);
	}
	while(data_len--){
		spi_transmitD(*data);
    3a3c:	fb ff fd 50 	calli 2f7c <spi_transmitD>
	if(writeType == W_TX_PAYLOAD){
		spi_transmitD(W_TX_PAYLOAD);
	}else{
		spi_transmitD(W_TX_PAYLOAD_NO_ACK);
	}
	while(data_len--){
    3a40:	5d 6c ff fd 	bne r11,r12,3a34 <load_payload+0x8c>
		spi_transmitD(*data);
		data++;
	}
	while(blank_len--){
    3a44:	45 a0 00 06 	be r13,r0,3a5c <load_payload+0xb4>
		spi_transmitD(0x00);
    3a48:	34 01 00 00 	mvi r1,0
    3a4c:	fb ff fd 4c 	calli 2f7c <spi_transmitD>
    3a50:	35 a2 ff ff 	addi r2,r13,-1
    3a54:	20 4d 00 ff 	andi r13,r2,0xff
	}
	while(data_len--){
		spi_transmitD(*data);
		data++;
	}
	while(blank_len--){
    3a58:	5d a0 ff fc 	bne r13,r0,3a48 <load_payload+0xa0>
		spi_transmitD(0x00);
	}
	nsleep(1);
    3a5c:	34 01 00 01 	mvi r1,1
    3a60:	fb ff f2 98 	calli 4c0 <nsleep>
	csn(HIGH);
    3a64:	34 01 00 01 	mvi r1,1
    3a68:	fb ff fc fe 	calli 2e60 <csn>
	ce(HIGH);
    3a6c:	34 01 00 01 	mvi r1,1
    3a70:	fb ff fc b5 	calli 2d44 <ce>
	init_watch();
    3a74:	fb ff f2 d1 	calli 5b8 <init_watch>
	while( ! ( get_status()  & ( _BV(TX_DS) | _BV(MAX_RT) ))) {

		if(time_happened_millis(95)==1){
    3a78:	34 0b 00 01 	mvi r11,1
	}
	nsleep(1);
	csn(HIGH);
	ce(HIGH);
	init_watch();
	while( ! ( get_status()  & ( _BV(TX_DS) | _BV(MAX_RT) ))) {
    3a7c:	fb ff ff c4 	calli 398c <get_status>
    3a80:	20 22 00 30 	andi r2,r1,0x30

		if(time_happened_millis(95)==1){
    3a84:	34 01 00 5f 	mvi r1,95
	}
	nsleep(1);
	csn(HIGH);
	ce(HIGH);
	init_watch();
	while( ! ( get_status()  & ( _BV(TX_DS) | _BV(MAX_RT) ))) {
    3a88:	5c 40 00 07 	bne r2,r0,3aa4 <load_payload+0xfc>

		if(time_happened_millis(95)==1){
    3a8c:	fb ff f2 b7 	calli 568 <time_happened_millis>
    3a90:	5c 2b ff fb 	bne r1,r11,3a7c <load_payload+0xd4>
			uart_putstr("\nLa transmision fallo");
    3a94:	78 01 00 00 	mvhi r1,0x0
    3a98:	38 21 3f c0 	ori r1,r1,0x3fc0
    3a9c:	fb ff f2 f5 	calli 670 <uart_putstr>
			init_watch();
    3aa0:	fb ff f2 c6 	calli 5b8 <init_watch>
			goto cont;
		}

	}
  cont:
	ce(LOW);
    3aa4:	34 01 00 00 	mvi r1,0
    3aa8:	fb ff fc a7 	calli 2d44 <ce>
	status = write_register_basic	(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
    3aac:	34 02 00 70 	mvi r2,112
    3ab0:	34 01 00 07 	mvi r1,7
    3ab4:	fb ff fd d4 	calli 3204 <write_register_basic>

  if( status & _BV(MAX_RT)){
    3ab8:	20 21 00 10 	andi r1,r1,0x10
    3abc:	34 02 00 01 	mvi r2,1
    3ac0:	44 20 00 03 	be r1,r0,3acc <load_payload+0x124>
  	flush_tx(); //Cuando se excede el maximo de intentos, se limpia el TX_FIFO
    3ac4:	fb ff ff 35 	calli 3798 <flush_tx>
    3ac8:	34 02 00 00 	mvi r2,0
  	return 0;
  }
	//TX OK 1 or 0
  return 1;
}
    3acc:	b8 40 08 00 	mv r1,r2
    3ad0:	2b 9d 00 04 	lw ra,(sp+4)
    3ad4:	2b 8b 00 14 	lw r11,(sp+20)
    3ad8:	2b 8c 00 10 	lw r12,(sp+16)
    3adc:	2b 8d 00 0c 	lw r13,(sp+12)
    3ae0:	2b 8e 00 08 	lw r14,(sp+8)
    3ae4:	37 9c 00 14 	addi sp,sp,20
    3ae8:	c3 a0 00 00 	ret


	csn(LOW);
	nsleep(1);
	if(writeType == W_TX_PAYLOAD){
		spi_transmitD(W_TX_PAYLOAD);
    3aec:	b9 80 08 00 	mv r1,r12
    3af0:	fb ff fd 23 	calli 2f7c <spi_transmitD>
    3af4:	e3 ff ff ca 	bi 3a1c <load_payload+0x74>
