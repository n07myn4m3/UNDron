
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005f0  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .data         00000018  000005f0  000005f0  00000644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000088  00000608  00000608  0000065c  2**2
                  ALLOC
  3 .debug_abbrev 00000218  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000006e5  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000004be  00000000  00000000  00000f59  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000190  00000000  00000000  00001418  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000001c6  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000040  00000000  00000000  0000176e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000277  00000000  00000000  000017ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      00000024  00000000  00000000  00001a25  2**0
                  CONTENTS, READONLY
 11 .debug_loc    00000139  00000000  00000000  00001a49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001b82  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 67 	calli 268 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 3f fc 	ori sp,sp,0x3ffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 06 10 	ori gp,gp,0x610
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 06 08 	ori r1,r1,0x608
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 06 90 	ori r3,r3,0x690

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:

#include "soc-hw.h"
#include "softfloat.h"

int main(){
 208:	37 9c ff fc 	addi sp,sp,-4
 20c:	5b 9d 00 04 	sw (sp+4),ra
//    irq_set_mask( 0x00000002 );
//    irq_enable();


  for(;;){
    uart_putchar(0x20);
 210:	34 01 00 20 	mvi r1,32
 214:	f8 00 00 8c 	calli 444 <uart_putchar>
    pwm_init();
 218:	f8 00 00 e3 	calli 5a4 <pwm_init>

    // BasicIO
    //uart_putstr( "** BasicIO **\n" );
 	i2c_putrwaddr(0x00, 0x30);   
 21c:	34 02 00 30 	mvi r2,48
 220:	34 01 00 00 	mvi r1,0
 224:	f8 00 00 a8 	calli 4c4 <i2c_putrwaddr>
    pwm_enable(1);
 228:	34 01 00 01 	mvi r1,1
 22c:	f8 00 00 eb 	calli 5d8 <pwm_enable>
    pwm_duty(10);
 230:	34 01 00 0a 	mvi r1,10
 234:	f8 00 00 e3 	calli 5c0 <pwm_duty>
    nsleep(1);
 238:	34 01 00 01 	mvi r1,1
 23c:	f8 00 00 4a 	calli 364 <nsleep>
    pwm_duty(20);
 240:	34 01 00 14 	mvi r1,20
 244:	f8 00 00 df 	calli 5c0 <pwm_duty>
    //nsleep(100);
    pwm_duty(30);
 248:	34 01 00 1e 	mvi r1,30
 24c:	f8 00 00 dd 	calli 5c0 <pwm_duty>
    //nsleep(100);
    pwm_duty(40);
 250:	34 01 00 28 	mvi r1,40
 254:	f8 00 00 db 	calli 5c0 <pwm_duty>
    //nsleep(100);
    pwm_duty(50);
 258:	34 01 00 32 	mvi r1,50
 25c:	f8 00 00 d9 	calli 5c0 <pwm_duty>
 260:	e3 ff ff ec 	bi 210 <main+0x8>

00000264 <isr_null>:
void tic_isr();
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
 264:	c3 a0 00 00 	ret

00000268 <irq_handler>:
}

void irq_handler(uint32_t pending)
{
 268:	37 9c ff f0 	addi sp,sp,-16
 26c:	5b 8b 00 10 	sw (sp+16),r11
 270:	5b 8c 00 0c 	sw (sp+12),r12
 274:	5b 8d 00 08 	sw (sp+8),r13
 278:	5b 9d 00 04 	sw (sp+4),ra
 27c:	78 0b 00 00 	mvhi r11,0x0
 280:	39 6b 06 0c 	ori r11,r11,0x60c
 284:	b8 20 60 00 	mv r12,r1
 288:	35 6d 00 80 	addi r13,r11,128
 28c:	e0 00 00 03 	bi 298 <irq_handler+0x30>
    int i;

    for(i=0; i<32; i++) {
        if (pending & 0x01) (*isr_table[i])();
 290:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
    int i;

    for(i=0; i<32; i++) {
 294:	45 6d 00 08 	be r11,r13,2b4 <irq_handler+0x4c>
        if (pending & 0x01) (*isr_table[i])();
 298:	21 81 00 01 	andi r1,r12,0x1
        pending >>= 1;
 29c:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
    int i;

    for(i=0; i<32; i++) {
        if (pending & 0x01) (*isr_table[i])();
 2a0:	44 20 ff fc 	be r1,r0,290 <irq_handler+0x28>
 2a4:	29 61 00 00 	lw r1,(r11+0)
 2a8:	35 6b 00 04 	addi r11,r11,4
 2ac:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
    int i;

    for(i=0; i<32; i++) {
 2b0:	5d 6d ff fa 	bne r11,r13,298 <irq_handler+0x30>
        if (pending & 0x01) (*isr_table[i])();
        pending >>= 1;
    }
}
 2b4:	2b 9d 00 04 	lw ra,(sp+4)
 2b8:	2b 8b 00 10 	lw r11,(sp+16)
 2bc:	2b 8c 00 0c 	lw r12,(sp+12)
 2c0:	2b 8d 00 08 	lw r13,(sp+8)
 2c4:	37 9c 00 10 	addi sp,sp,16
 2c8:	c3 a0 00 00 	ret

000002cc <isr_init>:

void isr_init()
{
 2cc:	78 01 00 00 	mvhi r1,0x0
 2d0:	38 21 06 0c 	ori r1,r1,0x60c
 2d4:	78 02 00 00 	mvhi r2,0x0
 2d8:	38 42 02 64 	ori r2,r2,0x264
 2dc:	34 23 00 80 	addi r3,r1,128
    int i;
    for(i=0; i<32; i++)
        isr_table[i] = &isr_null;
 2e0:	58 22 00 00 	sw (r1+0),r2
 2e4:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
    int i;
    for(i=0; i<32; i++)
 2e8:	5c 23 ff fe 	bne r1,r3,2e0 <isr_init+0x14>
        isr_table[i] = &isr_null;
}
 2ec:	c3 a0 00 00 	ret

000002f0 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
 2f0:	3c 21 00 02 	sli r1,r1,2
 2f4:	78 03 00 00 	mvhi r3,0x0
 2f8:	38 63 06 0c 	ori r3,r3,0x60c
 2fc:	b4 61 18 00 	add r3,r3,r1
 300:	58 62 00 00 	sw (r3+0),r2
    isr_table[irq] = isr;
}
 304:	c3 a0 00 00 	ret

00000308 <isr_unregister>:

void isr_unregister(int irq)
{
 308:	3c 21 00 02 	sli r1,r1,2
 30c:	78 03 00 00 	mvhi r3,0x0
 310:	38 63 06 0c 	ori r3,r3,0x60c
 314:	78 02 00 00 	mvhi r2,0x0
 318:	b4 61 18 00 	add r3,r3,r1
 31c:	38 42 02 64 	ori r2,r2,0x264
 320:	58 62 00 00 	sw (r3+0),r2
    isr_table[irq] = &isr_null;
}
 324:	c3 a0 00 00 	ret

00000328 <msleep>:
 * TIMER Functions
 */
uint32_t tic_msec;

void msleep(uint32_t msec)
{
 328:	78 03 00 00 	mvhi r3,0x0
 32c:	78 02 00 01 	mvhi r2,0x1
 330:	38 42 86 a0 	ori r2,r2,0x86a0
 334:	38 63 05 f4 	ori r3,r3,0x5f4
 338:	88 22 08 00 	mul r1,r1,r2
 33c:	28 63 00 00 	lw r3,(r3+0)
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000)*msec;
    timer0->counter1 = 0;
    timer0->tcr1 = TIMER_EN;
 340:	34 02 00 08 	mvi r2,8
void msleep(uint32_t msec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000)*msec;
 344:	58 61 00 10 	sw (r3+16),r1
    timer0->counter1 = 0;
 348:	34 01 00 00 	mvi r1,0
 34c:	58 61 00 14 	sw (r3+20),r1
    timer0->tcr1 = TIMER_EN;
 350:	58 62 00 0c 	sw (r3+12),r2

    do {
        //halt();
         tcr = timer0->tcr1;
 354:	28 61 00 0c 	lw r1,(r3+12)
     } while ( ! (tcr & TIMER_TRIG) );
 358:	20 21 00 01 	andi r1,r1,0x1
 35c:	44 20 ff fe 	be r1,r0,354 <msleep+0x2c>
}
 360:	c3 a0 00 00 	ret

00000364 <nsleep>:

void nsleep(uint32_t nsec)
{
 364:	b4 21 10 00 	add r2,r1,r1
 368:	b4 41 10 00 	add r2,r2,r1
 36c:	78 03 00 00 	mvhi r3,0x0
 370:	38 63 05 f4 	ori r3,r3,0x5f4
 374:	3c 44 00 05 	sli r4,r2,5
 378:	28 63 00 00 	lw r3,(r3+0)
 37c:	b4 44 10 00 	add r2,r2,r4
 380:	b4 41 10 00 	add r2,r2,r1
 384:	58 62 00 10 	sw (r3+16),r2
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
    timer0->counter1 = 0;
 388:	34 01 00 00 	mvi r1,0
 38c:	58 61 00 14 	sw (r3+20),r1
    timer0->tcr1 = TIMER_EN;
 390:	34 02 00 08 	mvi r2,8
 394:	58 62 00 0c 	sw (r3+12),r2

    do {
        //halt();
         tcr = timer0->tcr1;
 398:	28 61 00 0c 	lw r1,(r3+12)
     } while ( ! (tcr & TIMER_TRIG) );
 39c:	20 21 00 01 	andi r1,r1,0x1
 3a0:	44 20 ff fe 	be r1,r0,398 <nsleep+0x34>
}
 3a4:	c3 a0 00 00 	ret

000003a8 <tic_isr>:

void tic_isr()
{
 3a8:	78 03 00 00 	mvhi r3,0x0
 3ac:	38 63 06 8c 	ori r3,r3,0x68c
 3b0:	28 62 00 00 	lw r2,(r3+0)
    tic_msec++;
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 3b4:	78 01 00 00 	mvhi r1,0x0
 3b8:	38 21 05 f4 	ori r1,r1,0x5f4
 3bc:	28 24 00 00 	lw r4,(r1+0)
     } while ( ! (tcr & TIMER_TRIG) );
}

void tic_isr()
{
    tic_msec++;
 3c0:	34 42 00 01 	addi r2,r2,1
 3c4:	58 62 00 00 	sw (r3+0),r2
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 3c8:	34 01 00 0e 	mvi r1,14
 3cc:	58 81 00 00 	sw (r4+0),r1
}
 3d0:	c3 a0 00 00 	ret

000003d4 <tic_init>:

void tic_init()
{
 3d4:	78 01 00 00 	mvhi r1,0x0
 3d8:	38 21 05 f4 	ori r1,r1,0x5f4
 3dc:	28 24 00 00 	lw r4,(r1+0)
    tic_msec = 0;
 3e0:	78 02 00 00 	mvhi r2,0x0
 3e4:	38 42 06 8c 	ori r2,r2,0x68c
 3e8:	34 05 00 00 	mvi r5,0
 3ec:	58 45 00 00 	sw (r2+0),r5

    // Setup timer0.0
    timer0->compare0 = (FCPU/10000);
 3f0:	34 01 27 10 	mvi r1,10000
 3f4:	58 81 00 04 	sw (r4+4),r1
        isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
    isr_table[irq] = isr;
 3f8:	78 03 00 00 	mvhi r3,0x0
 3fc:	78 02 00 00 	mvhi r2,0x0
{
    tic_msec = 0;

    // Setup timer0.0
    timer0->compare0 = (FCPU/10000);
    timer0->counter0 = 0;
 400:	58 85 00 08 	sw (r4+8),r5
        isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
    isr_table[irq] = isr;
 404:	38 63 06 0c 	ori r3,r3,0x60c
 408:	38 42 03 a8 	ori r2,r2,0x3a8
    tic_msec = 0;

    // Setup timer0.0
    timer0->compare0 = (FCPU/10000);
    timer0->counter0 = 0;
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 40c:	34 01 00 0e 	mvi r1,14
 410:	58 81 00 00 	sw (r4+0),r1
        isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
    isr_table[irq] = isr;
 414:	58 62 00 04 	sw (r3+4),r2
    timer0->compare0 = (FCPU/10000);
    timer0->counter0 = 0;
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

    isr_register(1, &tic_isr);
}
 418:	c3 a0 00 00 	ret

0000041c <uart_init>:

/***************************************************************************
 * UART Functions
 */
void uart_init()
{
 41c:	c3 a0 00 00 	ret

00000420 <uart_getchar>:
    // Setup Divisor register (Fclk / Baud)
    //uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
 420:	78 01 00 00 	mvhi r1,0x0
 424:	38 21 05 f0 	ori r1,r1,0x5f0
 428:	28 22 00 00 	lw r2,(r1+0)
 42c:	28 41 00 00 	lw r1,(r2+0)
 430:	20 21 00 01 	andi r1,r1,0x1
 434:	44 20 ff fe 	be r1,r0,42c <uart_getchar+0xc>
    while (! (uart0->ucr & UART_DR)) ;
    return uart0->rxtx;
 438:	28 41 00 04 	lw r1,(r2+4)
}
 43c:	20 21 00 ff 	andi r1,r1,0xff
 440:	c3 a0 00 00 	ret

00000444 <uart_putchar>:

void uart_putchar(char c)
{
 444:	78 02 00 00 	mvhi r2,0x0
 448:	38 42 05 f0 	ori r2,r2,0x5f0
 44c:	28 42 00 00 	lw r2,(r2+0)
 450:	20 23 00 ff 	andi r3,r1,0xff
    while (uart0->ucr & UART_BUSY) ;
 454:	28 41 00 00 	lw r1,(r2+0)
 458:	20 21 00 10 	andi r1,r1,0x10
 45c:	5c 20 ff fe 	bne r1,r0,454 <uart_putchar+0x10>
    uart0->rxtx = c;
 460:	58 43 00 04 	sw (r2+4),r3
}
 464:	c3 a0 00 00 	ret

00000468 <uart_putstr>:

void uart_putstr(char *str)
{
 468:	40 24 00 00 	lbu r4,(r1+0)
 46c:	b8 20 18 00 	mv r3,r1
    char *c = str;
    while(*c) {
 470:	44 80 00 0b 	be r4,r0,49c <uart_putstr+0x34>
    return uart0->rxtx;
}

void uart_putchar(char c)
{
    while (uart0->ucr & UART_BUSY) ;
 474:	78 01 00 00 	mvhi r1,0x0
 478:	38 21 05 f0 	ori r1,r1,0x5f0
 47c:	28 22 00 00 	lw r2,(r1+0)
 480:	28 41 00 00 	lw r1,(r2+0)
 484:	20 21 00 10 	andi r1,r1,0x10
 488:	5c 20 ff fe 	bne r1,r0,480 <uart_putstr+0x18>
    uart0->rxtx = c;
 48c:	58 44 00 04 	sw (r2+4),r4
void uart_putstr(char *str)
{
    char *c = str;
    while(*c) {
        uart_putchar(*c);
        c++;
 490:	34 63 00 01 	addi r3,r3,1
}

void uart_putstr(char *str)
{
    char *c = str;
    while(*c) {
 494:	40 64 00 00 	lbu r4,(r3+0)
 498:	5c 81 ff fa 	bne r4,r1,480 <uart_putstr+0x18>
 49c:	c3 a0 00 00 	ret

000004a0 <i2c_putchar>:
//static uint8_t ena;
//static uint8_t rw;


void i2c_putchar(uint8_t c)
{
 4a0:	78 02 00 00 	mvhi r2,0x0
 4a4:	38 42 06 00 	ori r2,r2,0x600
 4a8:	28 44 00 00 	lw r4,(r2+0)
    data = c;
 4ac:	78 03 00 00 	mvhi r3,0x0
//static uint8_t ena;
//static uint8_t rw;


void i2c_putchar(uint8_t c)
{
 4b0:	20 21 00 ff 	andi r1,r1,0xff
    data = c;
 4b4:	38 63 06 08 	ori r3,r3,0x608
 4b8:	30 61 00 00 	sb (r3+0),r1
	//while ((i2c0->ucr & !I2C_BUSY));
	//i2c0->wxrx = data;
    i2c0 -> rwaddr = c;
 4bc:	58 81 00 08 	sw (r4+8),r1
}
 4c0:	c3 a0 00 00 	ret

000004c4 <i2c_putrwaddr>:

void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
{
 4c4:	78 03 00 00 	mvhi r3,0x0
 4c8:	20 21 00 ff 	andi r1,r1,0xff
 4cc:	20 42 00 ff 	andi r2,r2,0xff
	i2c0 -> rwaddr = ((rw<<7)|addrs>>1);
 4d0:	38 63 06 00 	ori r3,r3,0x600
 4d4:	28 64 00 00 	lw r4,(r3+0)
 4d8:	00 42 00 01 	srui r2,r2,1
 4dc:	3c 21 00 07 	sli r1,r1,7
 4e0:	b8 41 10 00 	or r2,r2,r1
 4e4:	58 82 00 08 	sw (r4+8),r2
}
 4e8:	c3 a0 00 00 	ret

000004ec <i2c_putdatas>:

void i2c_putdatas(char *str)	
{
 4ec:	40 22 00 00 	lbu r2,(r1+0)
 4f0:	b8 20 18 00 	mv r3,r1
	char *c= str;
	while (*c) {
 4f4:	44 40 00 0d 	be r2,r0,528 <i2c_putdatas+0x3c>
void i2c_putchar(uint8_t c)
{
    data = c;
	//while ((i2c0->ucr & !I2C_BUSY));
	//i2c0->wxrx = data;
    i2c0 -> rwaddr = c;
 4f8:	78 01 00 00 	mvhi r1,0x0
 4fc:	38 21 06 00 	ori r1,r1,0x600
 500:	28 24 00 00 	lw r4,(r1+0)
 504:	b8 60 08 00 	mv r1,r3
 508:	58 82 00 08 	sw (r4+8),r2
void i2c_putdatas(char *str)	
{
	char *c= str;
	while (*c) {
		i2c_putchar(*c);
    c++;
 50c:	34 21 00 01 	addi r1,r1,1
void i2c_putchar(uint8_t c)
{
    data = c;
	//while ((i2c0->ucr & !I2C_BUSY));
	//i2c0->wxrx = data;
    i2c0 -> rwaddr = c;
 510:	b8 40 18 00 	mv r3,r2
}

void i2c_putdatas(char *str)	
{
	char *c= str;
	while (*c) {
 514:	40 22 00 00 	lbu r2,(r1+0)
 518:	5c 40 ff fc 	bne r2,r0,508 <i2c_putdatas+0x1c>
 51c:	78 01 00 00 	mvhi r1,0x0
 520:	38 21 06 08 	ori r1,r1,0x608
 524:	30 23 00 00 	sb (r1+0),r3
 528:	c3 a0 00 00 	ret

0000052c <i2c_init>:
    c++;
	}
}

void i2c_init()
{
 52c:	78 01 00 00 	mvhi r1,0x0
 530:	38 21 06 00 	ori r1,r1,0x600
 534:	28 23 00 00 	lw r3,(r1+0)
 538:	34 02 00 08 	mvi r2,8
 53c:	58 62 00 00 	sw (r3+0),r2
 i2c0->ucr = I2C_ENA;  
}
 540:	c3 a0 00 00 	ret

00000544 <i2c_sleep>:

void i2c_sleep()
{
 544:	78 01 00 00 	mvhi r1,0x0
 548:	38 21 06 00 	ori r1,r1,0x600
 54c:	28 23 00 00 	lw r3,(r1+0)
 550:	28 62 00 00 	lw r2,(r3+0)
 554:	20 42 00 01 	andi r2,r2,0x1
 558:	44 40 00 06 	be r2,r0,570 <i2c_sleep+0x2c>
	while((i2c0->ucr & I2C_BUSY))
	i2c0->ucr = 0x00;
 55c:	34 02 00 00 	mvi r2,0
 560:	58 62 00 00 	sw (r3+0),r2
 i2c0->ucr = I2C_ENA;  
}

void i2c_sleep()
{
	while((i2c0->ucr & I2C_BUSY))
 564:	28 61 00 00 	lw r1,(r3+0)
 568:	20 21 00 01 	andi r1,r1,0x1
 56c:	5c 20 ff fd 	bne r1,r0,560 <i2c_sleep+0x1c>
 570:	c3 a0 00 00 	ret

00000574 <i2c_getdata>:
	i2c0->ucr = 0x00;
}

char i2c_getdata()
{
 574:	78 01 00 00 	mvhi r1,0x0
 578:	38 21 06 00 	ori r1,r1,0x600
 57c:	28 22 00 00 	lw r2,(r1+0)
 580:	28 41 00 00 	lw r1,(r2+0)
 584:	20 21 00 01 	andi r1,r1,0x1
 588:	44 20 00 04 	be r1,r0,598 <i2c_getdata+0x24>
 58c:	28 41 00 00 	lw r1,(r2+0)
 590:	20 21 00 02 	andi r1,r1,0x2
 594:	44 20 ff fb 	be r1,r0,580 <i2c_getdata+0xc>
	while ( (i2c0->ucr & I2C_BUSY) && (!(i2c0->ucr & I2C_ERROR)));
	return i2c0-> wxrx;
 598:	28 41 00 04 	lw r1,(r2+4)
}
 59c:	20 21 00 ff 	andi r1,r1,0xff
 5a0:	c3 a0 00 00 	ret

000005a4 <pwm_init>:

/***************************************************************************
 * PWM Functions
 */
void pwm_init(void)
{
 5a4:	78 01 00 00 	mvhi r1,0x0
 5a8:	38 21 06 04 	ori r1,r1,0x604
 5ac:	28 23 00 00 	lw r3,(r1+0)
 5b0:	34 02 00 00 	mvi r2,0
 5b4:	58 62 00 00 	sw (r3+0),r2
  pwm0->duty = 0;
  pwm0->enable = 0;
 5b8:	58 62 00 04 	sw (r3+4),r2
}
 5bc:	c3 a0 00 00 	ret

000005c0 <pwm_duty>:

void pwm_duty(uint8_t duty0)
{
 5c0:	78 02 00 00 	mvhi r2,0x0
 5c4:	38 42 06 04 	ori r2,r2,0x604
 5c8:	28 43 00 00 	lw r3,(r2+0)
 5cc:	20 21 00 ff 	andi r1,r1,0xff
  pwm0->duty = duty0;
 5d0:	58 61 00 00 	sw (r3+0),r1
}
 5d4:	c3 a0 00 00 	ret

000005d8 <pwm_enable>:

void pwm_enable(uint8_t enable0)
{
 5d8:	78 02 00 00 	mvhi r2,0x0
 5dc:	38 42 06 04 	ori r2,r2,0x604
 5e0:	28 43 00 00 	lw r3,(r2+0)
 5e4:	20 21 00 ff 	andi r1,r1,0xff
  pwm0->enable = enable0;
 5e8:	58 61 00 04 	sw (r3+4),r1
}
 5ec:	c3 a0 00 00 	ret
