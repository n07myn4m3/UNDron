
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000558  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .data         00000018  00000558  00000558  000005ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000088  00000570  00000570  000005c4  2**2
                  ALLOC
  3 .debug_abbrev 00000227  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000644  00000000  00000000  000007eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000045a  00000000  00000000  00000e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000150  00000000  00000000  0000128c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000018b  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000040  00000000  00000000  00001567  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000024d  00000000  00000000  000015a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      00000024  00000000  00000000  000017f4  2**0
                  CONTENTS, READONLY
 11 .debug_loc    000000d7  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000018ef  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 70 	calli 28c <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 3f fc 	ori sp,sp,0x3ffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 05 70 	ori gp,gp,0x570
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 05 70 	ori r1,r1,0x570
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 05 f8 	ori r3,r3,0x5f8

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:

#include "soc-hw.h"
#include "softfloat.h"

int main(){
 208:	37 9c ff fc 	addi sp,sp,-4
 20c:	5b 9d 00 04 	sw (sp+4),ra
//    irq_set_mask( 0x00000002 );
//    irq_enable();


  for(;;){
    uart_putchar(0x20);
 210:	34 01 00 20 	mvi r1,32
 214:	f8 00 00 95 	calli 468 <uart_putchar>
    pwm_init();
 218:	f8 00 00 bd 	calli 50c <pwm_init>

    // BasicIO
    //uart_putstr( "** BasicIO **\n" );
//Prueba registros
    i2c_test_wxrx(0x20);  
 21c:	34 01 00 20 	mvi r1,32
 220:	f8 00 00 a9 	calli 4c4 <i2c_test_wxrx>
    i2c_test_wxrx(0x40);
 224:	34 01 00 40 	mvi r1,64
 228:	f8 00 00 a7 	calli 4c4 <i2c_test_wxrx>
    i2c_test_wxrx(0x80);
 22c:	34 01 00 80 	mvi r1,128
 230:	f8 00 00 a5 	calli 4c4 <i2c_test_wxrx>
//Prueba registros
    i2c_test_ucr(0x08);
 234:	34 01 00 08 	mvi r1,8
 238:	f8 00 00 ac 	calli 4e8 <i2c_test_ucr>
    i2c_test_ucr(0x38);
 23c:	34 01 00 38 	mvi r1,56
 240:	f8 00 00 aa 	calli 4e8 <i2c_test_ucr>
    i2c_test_ucr(0x50);
 244:	34 01 00 50 	mvi r1,80
 248:	f8 00 00 a8 	calli 4e8 <i2c_test_ucr>
    //nsleep(20);
    pwm_enable(1);
 24c:	34 01 00 01 	mvi r1,1
 250:	f8 00 00 bc 	calli 540 <pwm_enable>
    pwm_duty(10);
 254:	34 01 00 0a 	mvi r1,10
 258:	f8 00 00 b4 	calli 528 <pwm_duty>
    nsleep(1);
 25c:	34 01 00 01 	mvi r1,1
 260:	f8 00 00 4a 	calli 388 <nsleep>
    pwm_duty(20);
 264:	34 01 00 14 	mvi r1,20
 268:	f8 00 00 b0 	calli 528 <pwm_duty>
    //nsleep(100);
    pwm_duty(30);
 26c:	34 01 00 1e 	mvi r1,30
 270:	f8 00 00 ae 	calli 528 <pwm_duty>
    //nsleep(100);
    pwm_duty(40);
 274:	34 01 00 28 	mvi r1,40
 278:	f8 00 00 ac 	calli 528 <pwm_duty>
    //nsleep(100);
    pwm_duty(50);
 27c:	34 01 00 32 	mvi r1,50
 280:	f8 00 00 aa 	calli 528 <pwm_duty>
 284:	e3 ff ff e3 	bi 210 <main+0x8>

00000288 <isr_null>:
void tic_isr();
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
 288:	c3 a0 00 00 	ret

0000028c <irq_handler>:
}

void irq_handler(uint32_t pending)
{
 28c:	37 9c ff f0 	addi sp,sp,-16
 290:	5b 8b 00 10 	sw (sp+16),r11
 294:	5b 8c 00 0c 	sw (sp+12),r12
 298:	5b 8d 00 08 	sw (sp+8),r13
 29c:	5b 9d 00 04 	sw (sp+4),ra
 2a0:	78 0b 00 00 	mvhi r11,0x0
 2a4:	39 6b 05 74 	ori r11,r11,0x574
 2a8:	b8 20 60 00 	mv r12,r1
 2ac:	35 6d 00 80 	addi r13,r11,128
 2b0:	e0 00 00 03 	bi 2bc <irq_handler+0x30>
    int i;

    for(i=0; i<32; i++) {
        if (pending & 0x01) (*isr_table[i])();
 2b4:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
    int i;

    for(i=0; i<32; i++) {
 2b8:	45 6d 00 08 	be r11,r13,2d8 <irq_handler+0x4c>
        if (pending & 0x01) (*isr_table[i])();
 2bc:	21 81 00 01 	andi r1,r12,0x1
        pending >>= 1;
 2c0:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
    int i;

    for(i=0; i<32; i++) {
        if (pending & 0x01) (*isr_table[i])();
 2c4:	44 20 ff fc 	be r1,r0,2b4 <irq_handler+0x28>
 2c8:	29 61 00 00 	lw r1,(r11+0)
 2cc:	35 6b 00 04 	addi r11,r11,4
 2d0:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
    int i;

    for(i=0; i<32; i++) {
 2d4:	5d 6d ff fa 	bne r11,r13,2bc <irq_handler+0x30>
        if (pending & 0x01) (*isr_table[i])();
        pending >>= 1;
    }
}
 2d8:	2b 9d 00 04 	lw ra,(sp+4)
 2dc:	2b 8b 00 10 	lw r11,(sp+16)
 2e0:	2b 8c 00 0c 	lw r12,(sp+12)
 2e4:	2b 8d 00 08 	lw r13,(sp+8)
 2e8:	37 9c 00 10 	addi sp,sp,16
 2ec:	c3 a0 00 00 	ret

000002f0 <isr_init>:

void isr_init()
{
 2f0:	78 01 00 00 	mvhi r1,0x0
 2f4:	38 21 05 74 	ori r1,r1,0x574
 2f8:	78 02 00 00 	mvhi r2,0x0
 2fc:	38 42 02 88 	ori r2,r2,0x288
 300:	34 23 00 80 	addi r3,r1,128
    int i;
    for(i=0; i<32; i++)
        isr_table[i] = &isr_null;
 304:	58 22 00 00 	sw (r1+0),r2
 308:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
    int i;
    for(i=0; i<32; i++)
 30c:	5c 23 ff fe 	bne r1,r3,304 <isr_init+0x14>
        isr_table[i] = &isr_null;
}
 310:	c3 a0 00 00 	ret

00000314 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
 314:	3c 21 00 02 	sli r1,r1,2
 318:	78 03 00 00 	mvhi r3,0x0
 31c:	38 63 05 74 	ori r3,r3,0x574
 320:	b4 61 18 00 	add r3,r3,r1
 324:	58 62 00 00 	sw (r3+0),r2
    isr_table[irq] = isr;
}
 328:	c3 a0 00 00 	ret

0000032c <isr_unregister>:

void isr_unregister(int irq)
{
 32c:	3c 21 00 02 	sli r1,r1,2
 330:	78 03 00 00 	mvhi r3,0x0
 334:	38 63 05 74 	ori r3,r3,0x574
 338:	78 02 00 00 	mvhi r2,0x0
 33c:	b4 61 18 00 	add r3,r3,r1
 340:	38 42 02 88 	ori r2,r2,0x288
 344:	58 62 00 00 	sw (r3+0),r2
    isr_table[irq] = &isr_null;
}
 348:	c3 a0 00 00 	ret

0000034c <msleep>:
 * TIMER Functions
 */
uint32_t tic_msec;

void msleep(uint32_t msec)
{
 34c:	78 03 00 00 	mvhi r3,0x0
 350:	78 02 00 01 	mvhi r2,0x1
 354:	38 42 86 a0 	ori r2,r2,0x86a0
 358:	38 63 05 5c 	ori r3,r3,0x55c
 35c:	88 22 08 00 	mul r1,r1,r2
 360:	28 63 00 00 	lw r3,(r3+0)
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000)*msec;
    timer0->counter1 = 0;
    timer0->tcr1 = TIMER_EN;
 364:	34 02 00 08 	mvi r2,8
void msleep(uint32_t msec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000)*msec;
 368:	58 61 00 10 	sw (r3+16),r1
    timer0->counter1 = 0;
 36c:	34 01 00 00 	mvi r1,0
 370:	58 61 00 14 	sw (r3+20),r1
    timer0->tcr1 = TIMER_EN;
 374:	58 62 00 0c 	sw (r3+12),r2

    do {
        //halt();
         tcr = timer0->tcr1;
 378:	28 61 00 0c 	lw r1,(r3+12)
     } while ( ! (tcr & TIMER_TRIG) );
 37c:	20 21 00 01 	andi r1,r1,0x1
 380:	44 20 ff fe 	be r1,r0,378 <msleep+0x2c>
}
 384:	c3 a0 00 00 	ret

00000388 <nsleep>:

void nsleep(uint32_t nsec)
{
 388:	b4 21 10 00 	add r2,r1,r1
 38c:	b4 41 10 00 	add r2,r2,r1
 390:	78 03 00 00 	mvhi r3,0x0
 394:	38 63 05 5c 	ori r3,r3,0x55c
 398:	3c 44 00 05 	sli r4,r2,5
 39c:	28 63 00 00 	lw r3,(r3+0)
 3a0:	b4 44 10 00 	add r2,r2,r4
 3a4:	b4 41 10 00 	add r2,r2,r1
 3a8:	58 62 00 10 	sw (r3+16),r2
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
    timer0->counter1 = 0;
 3ac:	34 01 00 00 	mvi r1,0
 3b0:	58 61 00 14 	sw (r3+20),r1
    timer0->tcr1 = TIMER_EN;
 3b4:	34 02 00 08 	mvi r2,8
 3b8:	58 62 00 0c 	sw (r3+12),r2

    do {
        //halt();
         tcr = timer0->tcr1;
 3bc:	28 61 00 0c 	lw r1,(r3+12)
     } while ( ! (tcr & TIMER_TRIG) );
 3c0:	20 21 00 01 	andi r1,r1,0x1
 3c4:	44 20 ff fe 	be r1,r0,3bc <nsleep+0x34>
}
 3c8:	c3 a0 00 00 	ret

000003cc <tic_isr>:

void tic_isr()
{
 3cc:	78 03 00 00 	mvhi r3,0x0
 3d0:	38 63 05 f4 	ori r3,r3,0x5f4
 3d4:	28 62 00 00 	lw r2,(r3+0)
    tic_msec++;
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 3d8:	78 01 00 00 	mvhi r1,0x0
 3dc:	38 21 05 5c 	ori r1,r1,0x55c
 3e0:	28 24 00 00 	lw r4,(r1+0)
     } while ( ! (tcr & TIMER_TRIG) );
}

void tic_isr()
{
    tic_msec++;
 3e4:	34 42 00 01 	addi r2,r2,1
 3e8:	58 62 00 00 	sw (r3+0),r2
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 3ec:	34 01 00 0e 	mvi r1,14
 3f0:	58 81 00 00 	sw (r4+0),r1
}
 3f4:	c3 a0 00 00 	ret

000003f8 <tic_init>:

void tic_init()
{
 3f8:	78 01 00 00 	mvhi r1,0x0
 3fc:	38 21 05 5c 	ori r1,r1,0x55c
 400:	28 24 00 00 	lw r4,(r1+0)
    tic_msec = 0;
 404:	78 02 00 00 	mvhi r2,0x0
 408:	38 42 05 f4 	ori r2,r2,0x5f4
 40c:	34 05 00 00 	mvi r5,0
 410:	58 45 00 00 	sw (r2+0),r5

    // Setup timer0.0
    timer0->compare0 = (FCPU/10000);
 414:	34 01 27 10 	mvi r1,10000
 418:	58 81 00 04 	sw (r4+4),r1
        isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
    isr_table[irq] = isr;
 41c:	78 03 00 00 	mvhi r3,0x0
 420:	78 02 00 00 	mvhi r2,0x0
{
    tic_msec = 0;

    // Setup timer0.0
    timer0->compare0 = (FCPU/10000);
    timer0->counter0 = 0;
 424:	58 85 00 08 	sw (r4+8),r5
        isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
    isr_table[irq] = isr;
 428:	38 63 05 74 	ori r3,r3,0x574
 42c:	38 42 03 cc 	ori r2,r2,0x3cc
    tic_msec = 0;

    // Setup timer0.0
    timer0->compare0 = (FCPU/10000);
    timer0->counter0 = 0;
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 430:	34 01 00 0e 	mvi r1,14
 434:	58 81 00 00 	sw (r4+0),r1
        isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
    isr_table[irq] = isr;
 438:	58 62 00 04 	sw (r3+4),r2
    timer0->compare0 = (FCPU/10000);
    timer0->counter0 = 0;
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

    isr_register(1, &tic_isr);
}
 43c:	c3 a0 00 00 	ret

00000440 <uart_init>:

/***************************************************************************
 * UART Functions
 */
void uart_init()
{
 440:	c3 a0 00 00 	ret

00000444 <uart_getchar>:
    // Setup Divisor register (Fclk / Baud)
    //uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
 444:	78 01 00 00 	mvhi r1,0x0
 448:	38 21 05 58 	ori r1,r1,0x558
 44c:	28 22 00 00 	lw r2,(r1+0)
 450:	28 41 00 00 	lw r1,(r2+0)
 454:	20 21 00 01 	andi r1,r1,0x1
 458:	44 20 ff fe 	be r1,r0,450 <uart_getchar+0xc>
    while (! (uart0->ucr & UART_DR)) ;
    return uart0->rxtx;
 45c:	28 41 00 04 	lw r1,(r2+4)
}
 460:	20 21 00 ff 	andi r1,r1,0xff
 464:	c3 a0 00 00 	ret

00000468 <uart_putchar>:

void uart_putchar(char c)
{
 468:	78 02 00 00 	mvhi r2,0x0
 46c:	38 42 05 58 	ori r2,r2,0x558
 470:	28 42 00 00 	lw r2,(r2+0)
 474:	20 23 00 ff 	andi r3,r1,0xff
    while (uart0->ucr & UART_BUSY) ;
 478:	28 41 00 00 	lw r1,(r2+0)
 47c:	20 21 00 10 	andi r1,r1,0x10
 480:	5c 20 ff fe 	bne r1,r0,478 <uart_putchar+0x10>
    uart0->rxtx = c;
 484:	58 43 00 04 	sw (r2+4),r3
}
 488:	c3 a0 00 00 	ret

0000048c <uart_putstr>:

void uart_putstr(char *str)
{
 48c:	40 24 00 00 	lbu r4,(r1+0)
 490:	b8 20 18 00 	mv r3,r1
    char *c = str;
    while(*c) {
 494:	44 80 00 0b 	be r4,r0,4c0 <uart_putstr+0x34>
    return uart0->rxtx;
}

void uart_putchar(char c)
{
    while (uart0->ucr & UART_BUSY) ;
 498:	78 01 00 00 	mvhi r1,0x0
 49c:	38 21 05 58 	ori r1,r1,0x558
 4a0:	28 22 00 00 	lw r2,(r1+0)
 4a4:	28 41 00 00 	lw r1,(r2+0)
 4a8:	20 21 00 10 	andi r1,r1,0x10
 4ac:	5c 20 ff fe 	bne r1,r0,4a4 <uart_putstr+0x18>
    uart0->rxtx = c;
 4b0:	58 44 00 04 	sw (r2+4),r4
void uart_putstr(char *str)
{
    char *c = str;
    while(*c) {
        uart_putchar(*c);
        c++;
 4b4:	34 63 00 01 	addi r3,r3,1
}

void uart_putstr(char *str)
{
    char *c = str;
    while(*c) {
 4b8:	40 64 00 00 	lbu r4,(r3+0)
 4bc:	5c 81 ff fa 	bne r4,r1,4a4 <uart_putstr+0x18>
 4c0:	c3 a0 00 00 	ret

000004c4 <i2c_test_wxrx>:

static uint8_t data;


void i2c_test_wxrx(uint8_t c)
{
 4c4:	78 02 00 00 	mvhi r2,0x0
 4c8:	38 42 05 68 	ori r2,r2,0x568
 4cc:	28 44 00 00 	lw r4,(r2+0)
    data = c;
 4d0:	78 03 00 00 	mvhi r3,0x0

static uint8_t data;


void i2c_test_wxrx(uint8_t c)
{
 4d4:	20 21 00 ff 	andi r1,r1,0xff
    data = c;
 4d8:	38 63 05 70 	ori r3,r3,0x570
 4dc:	30 61 00 00 	sb (r3+0),r1
    i2c0 -> wxrx = c;
 4e0:	58 81 00 04 	sw (r4+4),r1
}
 4e4:	c3 a0 00 00 	ret

000004e8 <i2c_test_ucr>:

void i2c_test_ucr(uint8_t c)
{
 4e8:	78 02 00 00 	mvhi r2,0x0
 4ec:	38 42 05 68 	ori r2,r2,0x568
 4f0:	28 44 00 00 	lw r4,(r2+0)
    data = c;
 4f4:	78 03 00 00 	mvhi r3,0x0
    data = c;
    i2c0 -> wxrx = c;
}

void i2c_test_ucr(uint8_t c)
{
 4f8:	20 21 00 ff 	andi r1,r1,0xff
    data = c;
 4fc:	38 63 05 70 	ori r3,r3,0x570
 500:	30 61 00 00 	sb (r3+0),r1
    i2c0 -> ucr = c;
 504:	58 81 00 00 	sw (r4+0),r1
}
 508:	c3 a0 00 00 	ret

0000050c <pwm_init>:

/***************************************************************************
 * PWM Functions
 */
void pwm_init(void)
{
 50c:	78 01 00 00 	mvhi r1,0x0
 510:	38 21 05 6c 	ori r1,r1,0x56c
 514:	28 23 00 00 	lw r3,(r1+0)
 518:	34 02 00 00 	mvi r2,0
 51c:	58 62 00 00 	sw (r3+0),r2
  pwm0->duty = 0;
  pwm0->enable = 0;
 520:	58 62 00 04 	sw (r3+4),r2
}
 524:	c3 a0 00 00 	ret

00000528 <pwm_duty>:

void pwm_duty(uint8_t duty0)
{
 528:	78 02 00 00 	mvhi r2,0x0
 52c:	38 42 05 6c 	ori r2,r2,0x56c
 530:	28 43 00 00 	lw r3,(r2+0)
 534:	20 21 00 ff 	andi r1,r1,0xff
  pwm0->duty = duty0;
 538:	58 61 00 00 	sw (r3+0),r1
}
 53c:	c3 a0 00 00 	ret

00000540 <pwm_enable>:

void pwm_enable(uint8_t enable0)
{
 540:	78 02 00 00 	mvhi r2,0x0
 544:	38 42 05 6c 	ori r2,r2,0x56c
 548:	28 43 00 00 	lw r3,(r2+0)
 54c:	20 21 00 ff 	andi r1,r1,0xff
  pwm0->enable = enable0;
 550:	58 61 00 04 	sw (r3+4),r1
}
 554:	c3 a0 00 00 	ret
