
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002790  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000450  00002790  00002790  000027e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         0000001c  00002be0  00002be0  00002c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000000ac  00002bfc  00002bfc  00002c50  2**2
                  ALLOC
  4 .debug_abbrev 000006e8  00000000  00000000  00002c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002a4d  00000000  00000000  00003338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000026af  00000000  00000000  00005d85  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000003f0  00000000  00000000  00008434  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000487  00000000  00000000  00008824  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000080  00000000  00000000  00008cab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000963  00000000  00000000  00008d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000048  00000000  00000000  0000968e  2**0
                  CONTENTS, READONLY
 12 .debug_loc    0000217b  00000000  00000000  000096d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000bb0  00000000  00000000  0000b851  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <_ftext>:
       0:	98 00 00 00 	xor r0,r0,r0
       4:	d0 00 00 00 	wcsr IE,r0
       8:	78 01 00 00 	mvhi r1,0x0
       c:	38 21 00 00 	ori r1,r1,0x0
      10:	d0 e1 00 00 	wcsr EBA,r1
      14:	f8 00 00 3b 	calli 100 <_crt0>
      18:	34 00 00 00 	nop
      1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
      20:	34 00 00 00 	nop
      24:	34 00 00 00 	nop
      28:	34 00 00 00 	nop
      2c:	34 00 00 00 	nop
      30:	34 00 00 00 	nop
      34:	34 00 00 00 	nop
      38:	34 00 00 00 	nop
      3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
      40:	34 00 00 00 	nop
      44:	34 00 00 00 	nop
      48:	34 00 00 00 	nop
      4c:	34 00 00 00 	nop
      50:	34 00 00 00 	nop
      54:	34 00 00 00 	nop
      58:	34 00 00 00 	nop
      5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
      60:	34 00 00 00 	nop
      64:	34 00 00 00 	nop
      68:	34 00 00 00 	nop
      6c:	34 00 00 00 	nop
      70:	34 00 00 00 	nop
      74:	34 00 00 00 	nop
      78:	34 00 00 00 	nop
      7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
      80:	34 00 00 00 	nop
      84:	34 00 00 00 	nop
      88:	34 00 00 00 	nop
      8c:	34 00 00 00 	nop
      90:	34 00 00 00 	nop
      94:	34 00 00 00 	nop
      98:	34 00 00 00 	nop
      9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
      a0:	34 00 00 00 	nop
      a4:	34 00 00 00 	nop
      a8:	34 00 00 00 	nop
      ac:	34 00 00 00 	nop
      b0:	34 00 00 00 	nop
      b4:	34 00 00 00 	nop
      b8:	34 00 00 00 	nop
      bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
      c0:	5b 9d 00 00 	sw (sp+0),ra
      c4:	f8 00 00 2b 	calli 170 <_save_all>
      c8:	90 40 08 00 	rcsr r1,IP
      cc:	f8 00 00 a8 	calli 36c <irq_handler>
      d0:	78 01 ff ff 	mvhi r1,0xffff
      d4:	38 21 ff ff 	ori r1,r1,0xffff
      d8:	d0 41 00 00 	wcsr IP,r1
      dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
      e0:	34 00 00 00 	nop
      e4:	34 00 00 00 	nop
      e8:	34 00 00 00 	nop
      ec:	34 00 00 00 	nop
      f0:	34 00 00 00 	nop
      f4:	34 00 00 00 	nop
      f8:	34 00 00 00 	nop
      fc:	34 00 00 00 	nop

00000100 <_crt0>:
     100:	78 1c 00 00 	mvhi sp,0x0
     104:	3b 9c 3f fc 	ori sp,sp,0x3ffc
     108:	78 1a 00 00 	mvhi gp,0x0
     10c:	3b 5a 2c 00 	ori gp,gp,0x2c00
     110:	78 01 00 00 	mvhi r1,0x0
     114:	38 21 2b fc 	ori r1,r1,0x2bfc
     118:	78 03 00 00 	mvhi r3,0x0
     11c:	38 63 2c a8 	ori r3,r3,0x2ca8

00000120 <.clearBSS>:
     120:	44 23 00 04 	be r1,r3,130 <.callMain>
     124:	58 20 00 00 	sw (r1+0),r0
     128:	34 21 00 04 	addi r1,r1,4
     12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
     130:	34 01 00 00 	mvi r1,0
     134:	34 02 00 00 	mvi r2,0
     138:	34 03 00 00 	mvi r3,0
     13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
     140:	34 01 00 01 	mvi r1,1
     144:	d0 01 00 00 	wcsr IE,r1
     148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
     14c:	34 01 00 00 	mvi r1,0
     150:	d0 01 00 00 	wcsr IE,r1
     154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
     158:	d0 21 00 00 	wcsr IM,r1
     15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
     160:	90 20 08 00 	rcsr r1,IM
     164:	c3 a0 00 00 	ret

00000168 <jump>:
     168:	c0 20 00 00 	b r1

0000016c <halt>:
     16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
     170:	37 9c ff 80 	addi sp,sp,-128
     174:	5b 81 00 04 	sw (sp+4),r1
     178:	5b 82 00 08 	sw (sp+8),r2
     17c:	5b 83 00 0c 	sw (sp+12),r3
     180:	5b 84 00 10 	sw (sp+16),r4
     184:	5b 85 00 14 	sw (sp+20),r5
     188:	5b 86 00 18 	sw (sp+24),r6
     18c:	5b 87 00 1c 	sw (sp+28),r7
     190:	5b 88 00 20 	sw (sp+32),r8
     194:	5b 89 00 24 	sw (sp+36),r9
     198:	5b 8a 00 28 	sw (sp+40),r10
     19c:	5b 9e 00 78 	sw (sp+120),ea
     1a0:	5b 9f 00 7c 	sw (sp+124),ba
     1a4:	2b 81 00 80 	lw r1,(sp+128)
     1a8:	5b 81 00 74 	sw (sp+116),r1
     1ac:	bb 80 08 00 	mv r1,sp
     1b0:	34 21 00 80 	addi r1,r1,128
     1b4:	5b 81 00 70 	sw (sp+112),r1
     1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
     1bc:	2b 81 00 04 	lw r1,(sp+4)
     1c0:	2b 82 00 08 	lw r2,(sp+8)
     1c4:	2b 83 00 0c 	lw r3,(sp+12)
     1c8:	2b 84 00 10 	lw r4,(sp+16)
     1cc:	2b 85 00 14 	lw r5,(sp+20)
     1d0:	2b 86 00 18 	lw r6,(sp+24)
     1d4:	2b 87 00 1c 	lw r7,(sp+28)
     1d8:	2b 88 00 20 	lw r8,(sp+32)
     1dc:	2b 89 00 24 	lw r9,(sp+36)
     1e0:	2b 8a 00 28 	lw r10,(sp+40)
     1e4:	2b 9d 00 74 	lw ra,(sp+116)
     1e8:	2b 9e 00 78 	lw ea,(sp+120)
     1ec:	2b 9f 00 7c 	lw ba,(sp+124)
     1f0:	2b 9c 00 70 	lw sp,(sp+112)
     1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
     1f8:	bb 80 08 00 	mv r1,sp
     1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
     200:	bb 40 08 00 	mv r1,gp
     204:	c3 a0 00 00 	ret

00000208 <main>:
#include "soc-hw.h"
#include "softfloat.h"
#include "LSM9DS1.h"

int main(){
     208:	37 9c ff cc 	addi sp,sp,-52
     20c:	5b 8b 00 34 	sw (sp+52),r11
     210:	5b 8c 00 30 	sw (sp+48),r12
     214:	5b 8d 00 2c 	sw (sp+44),r13
     218:	5b 8e 00 28 	sw (sp+40),r14
     21c:	5b 8f 00 24 	sw (sp+36),r15
     220:	5b 90 00 20 	sw (sp+32),r16
     224:	5b 91 00 1c 	sw (sp+28),r17
     228:	5b 92 00 18 	sw (sp+24),r18
     22c:	5b 93 00 14 	sw (sp+20),r19
     230:	5b 94 00 10 	sw (sp+16),r20
     234:	5b 95 00 0c 	sw (sp+12),r21
     238:	5b 96 00 08 	sw (sp+8),r22
     23c:	5b 9d 00 04 	sw (sp+4),ra
     240:	78 01 00 00 	mvhi r1,0x0
     244:	78 0c 00 00 	mvhi r12,0x0
     248:	b8 20 58 00 	mv r11,r1
     24c:	39 8c 2b e8 	ori r12,r12,0x2be8
//=======================================================================
    uart_putstr("Prueba Lab \r\n");

	static int temp[6]; 

   I2CreadBytes(0x30, 0x35, temp, 6);
     250:	b8 20 b0 00 	mv r22,r1
     254:	39 6b 2b fc 	ori r11,r11,0x2bfc
    msleep(1000); 
*/
//=======================================================================
// Pruebas modulo I2C leer un arreglo de bytes
//=======================================================================
    uart_putstr("Prueba Lab \r\n");
     258:	78 15 00 00 	mvhi r21,0x0
	static int temp[6]; 

   I2CreadBytes(0x30, 0x35, temp, 6);
   //lectura_array(temp, 6); 

   gpio0->oe  = 0x000000ff;
     25c:	34 14 00 ff 	mvi r20,255

   gpio0->out = 0xAA;
     260:	34 13 00 aa 	mvi r19,170


   gpio0->out = 0x00;
     264:	34 12 00 00 	mvi r18,0
   gpio0->out = temp[0];
   gpio0->out = 0x01;
     268:	34 11 00 01 	mvi r17,1
	gpio0->out = temp[1];
   gpio0->out = 0x02;
     26c:	34 10 00 02 	mvi r16,2
	gpio0->out = temp[2];
   gpio0->out = 0x03;
     270:	34 0f 00 03 	mvi r15,3
	gpio0->out = temp[3];
   gpio0->out = 0x04;
     274:	34 0e 00 04 	mvi r14,4
	gpio0->out = temp[4];
   gpio0->out = 0x05;
     278:	34 0d 00 05 	mvi r13,5
    msleep(1000); 
*/
//=======================================================================
// Pruebas modulo I2C leer un arreglo de bytes
//=======================================================================
    uart_putstr("Prueba Lab \r\n");
     27c:	ba a0 08 00 	mv r1,r21
     280:	38 21 27 90 	ori r1,r1,0x2790
     284:	f8 00 00 b5 	calli 558 <uart_putstr>

	static int temp[6]; 

   I2CreadBytes(0x30, 0x35, temp, 6);
     288:	ba c0 18 00 	mv r3,r22
     28c:	38 63 2b fc 	ori r3,r3,0x2bfc
     290:	34 01 00 30 	mvi r1,48
     294:	34 02 00 35 	mvi r2,53
     298:	34 04 00 06 	mvi r4,6
     29c:	f8 00 01 3b 	calli 788 <I2CreadBytes>
   //lectura_array(temp, 6); 

   gpio0->oe  = 0x000000ff;
     2a0:	29 86 00 00 	lw r6,(r12+0)
   gpio0->out = 0x05;
	gpio0->out = temp[5];

   //--------------------------------------------------------

   I2CreadBytes(0x30, 0x35, temp, 6);
     2a4:	b9 60 18 00 	mv r3,r11
     2a8:	34 01 00 30 	mvi r1,48
	static int temp[6]; 

   I2CreadBytes(0x30, 0x35, temp, 6);
   //lectura_array(temp, 6); 

   gpio0->oe  = 0x000000ff;
     2ac:	58 d4 00 18 	sw (r6+24),r20

   gpio0->out = 0xAA;
     2b0:	58 d3 00 14 	sw (r6+20),r19


   gpio0->out = 0x00;
     2b4:	58 d2 00 14 	sw (r6+20),r18
   gpio0->out = temp[0];
     2b8:	29 65 00 00 	lw r5,(r11+0)
   gpio0->out = 0x05;
	gpio0->out = temp[5];

   //--------------------------------------------------------

   I2CreadBytes(0x30, 0x35, temp, 6);
     2bc:	34 02 00 35 	mvi r2,53
     2c0:	34 04 00 06 	mvi r4,6

   gpio0->out = 0xAA;


   gpio0->out = 0x00;
   gpio0->out = temp[0];
     2c4:	58 c5 00 14 	sw (r6+20),r5
   gpio0->out = 0x01;
     2c8:	58 d1 00 14 	sw (r6+20),r17
	gpio0->out = temp[1];
     2cc:	29 65 00 04 	lw r5,(r11+4)
     2d0:	58 c5 00 14 	sw (r6+20),r5
   gpio0->out = 0x02;
     2d4:	58 d0 00 14 	sw (r6+20),r16
	gpio0->out = temp[2];
     2d8:	29 65 00 08 	lw r5,(r11+8)
     2dc:	58 c5 00 14 	sw (r6+20),r5
   gpio0->out = 0x03;
     2e0:	58 cf 00 14 	sw (r6+20),r15
	gpio0->out = temp[3];
     2e4:	29 65 00 0c 	lw r5,(r11+12)
     2e8:	58 c5 00 14 	sw (r6+20),r5
   gpio0->out = 0x04;
     2ec:	58 ce 00 14 	sw (r6+20),r14
	gpio0->out = temp[4];
     2f0:	29 65 00 10 	lw r5,(r11+16)
     2f4:	58 c5 00 14 	sw (r6+20),r5
   gpio0->out = 0x05;
     2f8:	58 cd 00 14 	sw (r6+20),r13
	gpio0->out = temp[5];
     2fc:	29 65 00 14 	lw r5,(r11+20)
     300:	58 c5 00 14 	sw (r6+20),r5

   //--------------------------------------------------------

   I2CreadBytes(0x30, 0x35, temp, 6);
     304:	f8 00 01 21 	calli 788 <I2CreadBytes>
   //lectura_array(temp, 6); 

   gpio0->oe  = 0x000000ff;
     308:	29 82 00 00 	lw r2,(r12+0)
   gpio0->out = 0x05;
	gpio0->out = temp[5];



   msleep(1000);
     30c:	34 01 03 e8 	mvi r1,1000
   //--------------------------------------------------------

   I2CreadBytes(0x30, 0x35, temp, 6);
   //lectura_array(temp, 6); 

   gpio0->oe  = 0x000000ff;
     310:	58 54 00 18 	sw (r2+24),r20

   gpio0->out = 0xAA;
     314:	58 53 00 14 	sw (r2+20),r19


   gpio0->out = 0x00;
     318:	58 52 00 14 	sw (r2+20),r18
   gpio0->out = temp[0];
     31c:	29 63 00 00 	lw r3,(r11+0)
     320:	58 43 00 14 	sw (r2+20),r3
   gpio0->out = 0x01;
     324:	58 51 00 14 	sw (r2+20),r17
	gpio0->out = temp[1];
     328:	29 63 00 04 	lw r3,(r11+4)
     32c:	58 43 00 14 	sw (r2+20),r3
   gpio0->out = 0x02;
     330:	58 50 00 14 	sw (r2+20),r16
	gpio0->out = temp[2];
     334:	29 63 00 08 	lw r3,(r11+8)
     338:	58 43 00 14 	sw (r2+20),r3
   gpio0->out = 0x03;
     33c:	58 4f 00 14 	sw (r2+20),r15
	gpio0->out = temp[3];
     340:	29 63 00 0c 	lw r3,(r11+12)
     344:	58 43 00 14 	sw (r2+20),r3
   gpio0->out = 0x04;
     348:	58 4e 00 14 	sw (r2+20),r14
	gpio0->out = temp[4];
     34c:	29 63 00 10 	lw r3,(r11+16)
     350:	58 43 00 14 	sw (r2+20),r3
   gpio0->out = 0x05;
     354:	58 4d 00 14 	sw (r2+20),r13
	gpio0->out = temp[5];
     358:	29 63 00 14 	lw r3,(r11+20)
     35c:	58 43 00 14 	sw (r2+20),r3



   msleep(1000);
     360:	f8 00 00 33 	calli 42c <msleep>
     364:	e3 ff ff c6 	bi 27c <main+0x74>

00000368 <isr_null>:
void tic_isr();
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
     368:	c3 a0 00 00 	ret

0000036c <irq_handler>:
}

void irq_handler(uint32_t pending)
{
     36c:	37 9c ff f0 	addi sp,sp,-16
     370:	5b 8b 00 10 	sw (sp+16),r11
     374:	5b 8c 00 0c 	sw (sp+12),r12
     378:	5b 8d 00 08 	sw (sp+8),r13
     37c:	5b 9d 00 04 	sw (sp+4),ra
     380:	78 0b 00 00 	mvhi r11,0x0
     384:	39 6b 2c 24 	ori r11,r11,0x2c24
     388:	b8 20 60 00 	mv r12,r1
     38c:	35 6d 00 80 	addi r13,r11,128
     390:	e0 00 00 03 	bi 39c <irq_handler+0x30>
    int i;

    for(i=0; i<32; i++) {
        if (pending & 0x01) (*isr_table[i])();
     394:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
    int i;

    for(i=0; i<32; i++) {
     398:	45 6d 00 08 	be r11,r13,3b8 <irq_handler+0x4c>
        if (pending & 0x01) (*isr_table[i])();
     39c:	21 81 00 01 	andi r1,r12,0x1
        pending >>= 1;
     3a0:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
    int i;

    for(i=0; i<32; i++) {
        if (pending & 0x01) (*isr_table[i])();
     3a4:	44 20 ff fc 	be r1,r0,394 <irq_handler+0x28>
     3a8:	29 61 00 00 	lw r1,(r11+0)
     3ac:	35 6b 00 04 	addi r11,r11,4
     3b0:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
    int i;

    for(i=0; i<32; i++) {
     3b4:	5d 6d ff fa 	bne r11,r13,39c <irq_handler+0x30>
        if (pending & 0x01) (*isr_table[i])();
        pending >>= 1;
    }
}
     3b8:	2b 9d 00 04 	lw ra,(sp+4)
     3bc:	2b 8b 00 10 	lw r11,(sp+16)
     3c0:	2b 8c 00 0c 	lw r12,(sp+12)
     3c4:	2b 8d 00 08 	lw r13,(sp+8)
     3c8:	37 9c 00 10 	addi sp,sp,16
     3cc:	c3 a0 00 00 	ret

000003d0 <isr_init>:

void isr_init()
{
     3d0:	78 01 00 00 	mvhi r1,0x0
     3d4:	38 21 2c 24 	ori r1,r1,0x2c24
     3d8:	78 02 00 00 	mvhi r2,0x0
     3dc:	38 42 03 68 	ori r2,r2,0x368
     3e0:	34 23 00 80 	addi r3,r1,128
    int i;
    for(i=0; i<32; i++)
        isr_table[i] = &isr_null;
     3e4:	58 22 00 00 	sw (r1+0),r2
     3e8:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
    int i;
    for(i=0; i<32; i++)
     3ec:	5c 23 ff fe 	bne r1,r3,3e4 <isr_init+0x14>
        isr_table[i] = &isr_null;
}
     3f0:	c3 a0 00 00 	ret

000003f4 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
     3f4:	3c 21 00 02 	sli r1,r1,2
     3f8:	78 03 00 00 	mvhi r3,0x0
     3fc:	38 63 2c 24 	ori r3,r3,0x2c24
     400:	b4 61 18 00 	add r3,r3,r1
     404:	58 62 00 00 	sw (r3+0),r2
    isr_table[irq] = isr;
}
     408:	c3 a0 00 00 	ret

0000040c <isr_unregister>:

void isr_unregister(int irq)
{
     40c:	3c 21 00 02 	sli r1,r1,2
     410:	78 03 00 00 	mvhi r3,0x0
     414:	38 63 2c 24 	ori r3,r3,0x2c24
     418:	78 02 00 00 	mvhi r2,0x0
     41c:	b4 61 18 00 	add r3,r3,r1
     420:	38 42 03 68 	ori r2,r2,0x368
     424:	58 62 00 00 	sw (r3+0),r2
    isr_table[irq] = &isr_null;
}
     428:	c3 a0 00 00 	ret

0000042c <msleep>:
 * TIMER Functions
 */
uint32_t tic_msec;

void msleep(uint32_t msec)
{
     42c:	78 02 00 00 	mvhi r2,0x0
     430:	38 42 2b e4 	ori r2,r2,0x2be4
     434:	38 03 c3 50 	mvu r3,0xc350
     438:	88 23 08 00 	mul r1,r1,r3
     43c:	28 43 00 00 	lw r3,(r2+0)
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000)*msec;
    timer0->counter1 = 0;
    timer0->tcr1 = TIMER_EN;
     440:	34 02 00 08 	mvi r2,8
void msleep(uint32_t msec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000)*msec;
     444:	58 61 00 10 	sw (r3+16),r1
    timer0->counter1 = 0;
     448:	34 01 00 00 	mvi r1,0
     44c:	58 61 00 14 	sw (r3+20),r1
    timer0->tcr1 = TIMER_EN;
     450:	58 62 00 0c 	sw (r3+12),r2

    do {
        //halt();
         tcr = timer0->tcr1;
     454:	28 61 00 0c 	lw r1,(r3+12)
     } while ( ! (tcr & TIMER_TRIG) );
     458:	20 21 00 01 	andi r1,r1,0x1
     45c:	44 20 ff fe 	be r1,r0,454 <msleep+0x28>
}
     460:	c3 a0 00 00 	ret

00000464 <nsleep>:

void nsleep(uint32_t nsec)
{
     464:	78 02 00 00 	mvhi r2,0x0
     468:	38 42 2b e4 	ori r2,r2,0x2be4
     46c:	28 43 00 00 	lw r3,(r2+0)
     470:	08 21 00 32 	muli r1,r1,50
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
    timer0->counter1 = 0;
    timer0->tcr1 = TIMER_EN;
     474:	34 02 00 08 	mvi r2,8
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     478:	58 61 00 10 	sw (r3+16),r1
    timer0->counter1 = 0;
     47c:	34 01 00 00 	mvi r1,0
     480:	58 61 00 14 	sw (r3+20),r1
    timer0->tcr1 = TIMER_EN;
     484:	58 62 00 0c 	sw (r3+12),r2

    do {
        //halt();
         tcr = timer0->tcr1;
     488:	28 61 00 0c 	lw r1,(r3+12)
     } while ( ! (tcr & TIMER_TRIG) );
     48c:	20 21 00 01 	andi r1,r1,0x1
     490:	44 20 ff fe 	be r1,r0,488 <nsleep+0x24>
}
     494:	c3 a0 00 00 	ret

00000498 <tic_isr>:

void tic_isr()
{
     498:	78 03 00 00 	mvhi r3,0x0
     49c:	38 63 2c a4 	ori r3,r3,0x2ca4
     4a0:	28 62 00 00 	lw r2,(r3+0)
    tic_msec++;
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     4a4:	78 01 00 00 	mvhi r1,0x0
     4a8:	38 21 2b e4 	ori r1,r1,0x2be4
     4ac:	28 24 00 00 	lw r4,(r1+0)
     } while ( ! (tcr & TIMER_TRIG) );
}

void tic_isr()
{
    tic_msec++;
     4b0:	34 42 00 01 	addi r2,r2,1
     4b4:	58 62 00 00 	sw (r3+0),r2
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     4b8:	34 01 00 0e 	mvi r1,14
     4bc:	58 81 00 00 	sw (r4+0),r1
}
     4c0:	c3 a0 00 00 	ret

000004c4 <tic_init>:

void tic_init()
{
     4c4:	78 01 00 00 	mvhi r1,0x0
     4c8:	38 21 2b e4 	ori r1,r1,0x2be4
     4cc:	28 24 00 00 	lw r4,(r1+0)
    tic_msec = 0;
     4d0:	78 02 00 00 	mvhi r2,0x0
     4d4:	38 42 2c a4 	ori r2,r2,0x2ca4
     4d8:	34 05 00 00 	mvi r5,0
     4dc:	58 45 00 00 	sw (r2+0),r5

    // Setup timer0.0
    timer0->compare0 = (FCPU/10000);
     4e0:	34 01 13 88 	mvi r1,5000
     4e4:	58 81 00 04 	sw (r4+4),r1
        isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
    isr_table[irq] = isr;
     4e8:	78 03 00 00 	mvhi r3,0x0
     4ec:	78 02 00 00 	mvhi r2,0x0
{
    tic_msec = 0;

    // Setup timer0.0
    timer0->compare0 = (FCPU/10000);
    timer0->counter0 = 0;
     4f0:	58 85 00 08 	sw (r4+8),r5
        isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
    isr_table[irq] = isr;
     4f4:	38 63 2c 24 	ori r3,r3,0x2c24
     4f8:	38 42 04 98 	ori r2,r2,0x498
    tic_msec = 0;

    // Setup timer0.0
    timer0->compare0 = (FCPU/10000);
    timer0->counter0 = 0;
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     4fc:	34 01 00 0e 	mvi r1,14
     500:	58 81 00 00 	sw (r4+0),r1
        isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
    isr_table[irq] = isr;
     504:	58 62 00 04 	sw (r3+4),r2
    timer0->compare0 = (FCPU/10000);
    timer0->counter0 = 0;
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

    isr_register(1, &tic_isr);
}
     508:	c3 a0 00 00 	ret

0000050c <uart_init>:

/***************************************************************************
 * UART Functions
 */
void uart_init()
{
     50c:	c3 a0 00 00 	ret

00000510 <uart_getchar>:
    // Setup Divisor register (Fclk / Baud)
    //uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
     510:	78 01 00 00 	mvhi r1,0x0
     514:	38 21 2b e0 	ori r1,r1,0x2be0
     518:	28 22 00 00 	lw r2,(r1+0)
     51c:	28 41 00 00 	lw r1,(r2+0)
     520:	20 21 00 01 	andi r1,r1,0x1
     524:	44 20 ff fe 	be r1,r0,51c <uart_getchar+0xc>
    while (! (uart0->ucr & UART_DR)) ;
    return uart0->rxtx;
     528:	28 41 00 04 	lw r1,(r2+4)
}
     52c:	20 21 00 ff 	andi r1,r1,0xff
     530:	c3 a0 00 00 	ret

00000534 <uart_putchar>:

void uart_putchar(char c)
{
     534:	78 02 00 00 	mvhi r2,0x0
     538:	38 42 2b e0 	ori r2,r2,0x2be0
     53c:	28 42 00 00 	lw r2,(r2+0)
     540:	20 23 00 ff 	andi r3,r1,0xff
    while (uart0->ucr & UART_BUSY) ;
     544:	28 41 00 00 	lw r1,(r2+0)
     548:	20 21 00 10 	andi r1,r1,0x10
     54c:	5c 20 ff fe 	bne r1,r0,544 <uart_putchar+0x10>
    uart0->rxtx = c;
     550:	58 43 00 04 	sw (r2+4),r3
}
     554:	c3 a0 00 00 	ret

00000558 <uart_putstr>:

void uart_putstr(char *str)
{
     558:	40 24 00 00 	lbu r4,(r1+0)
     55c:	b8 20 18 00 	mv r3,r1
    char *c = str;
    while(*c) {
     560:	44 80 00 0b 	be r4,r0,58c <uart_putstr+0x34>
    return uart0->rxtx;
}

void uart_putchar(char c)
{
    while (uart0->ucr & UART_BUSY) ;
     564:	78 01 00 00 	mvhi r1,0x0
     568:	38 21 2b e0 	ori r1,r1,0x2be0
     56c:	28 22 00 00 	lw r2,(r1+0)
     570:	28 41 00 00 	lw r1,(r2+0)
     574:	20 21 00 10 	andi r1,r1,0x10
     578:	5c 20 ff fe 	bne r1,r0,570 <uart_putstr+0x18>
    uart0->rxtx = c;
     57c:	58 44 00 04 	sw (r2+4),r4
void uart_putstr(char *str)
{
    char *c = str;
    while(*c) {
        uart_putchar(*c);
        c++;
     580:	34 63 00 01 	addi r3,r3,1
}

void uart_putstr(char *str)
{
    char *c = str;
    while(*c) {
     584:	40 64 00 00 	lbu r4,(r3+0)
     588:	5c 81 ff fa 	bne r4,r1,570 <uart_putstr+0x18>
     58c:	c3 a0 00 00 	ret

00000590 <i2c_putdata>:
	static uint8_t data;
    static uint8_t data_LSB;
    static uint8_t data_MSB;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
     590:	78 02 00 00 	mvhi r2,0x0
     594:	38 42 2b f4 	ori r2,r2,0x2bf4
     598:	28 44 00 00 	lw r4,(r2+0)
	  data = c;
     59c:	78 03 00 00 	mvhi r3,0x0
	static uint8_t data;
    static uint8_t data_LSB;
    static uint8_t data_MSB;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
     5a0:	20 21 00 ff 	andi r1,r1,0xff
	  data = c;
     5a4:	38 63 2c 14 	ori r3,r3,0x2c14
     5a8:	30 61 00 00 	sb (r3+0),r1
		while ((i2c0->ucr & !I2C_BUSY));
     5ac:	28 82 00 00 	lw r2,(r4+0)
		i2c0->wxrx = data;
     5b0:	58 81 00 04 	sw (r4+4),r1
	}
     5b4:	c3 a0 00 00 	ret

000005b8 <i2c_putrwaddr>:
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
     5b8:	78 03 00 00 	mvhi r3,0x0
     5bc:	20 21 00 ff 	andi r1,r1,0xff
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     5c0:	38 63 2b f4 	ori r3,r3,0x2bf4
     5c4:	28 64 00 00 	lw r4,(r3+0)
     5c8:	3c 21 00 07 	sli r1,r1,7
		while ((i2c0->ucr & !I2C_BUSY));
		i2c0->wxrx = data;
	}
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
     5cc:	20 42 00 ff 	andi r2,r2,0xff
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     5d0:	b8 41 10 00 	or r2,r2,r1
     5d4:	58 82 00 08 	sw (r4+8),r2
	}
     5d8:	c3 a0 00 00 	ret

000005dc <i2c_putdatas>:
    //----------------------------------------------------------------
	void i2c_putdatas(char *str)	
	{
     5dc:	40 22 00 00 	lbu r2,(r1+0)
     5e0:	b8 20 20 00 	mv r4,r1
		char *c= str;
		while (*c) {
     5e4:	44 40 00 0e 	be r2,r0,61c <i2c_putdatas+0x40>
    static uint8_t data_MSB;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
		while ((i2c0->ucr & !I2C_BUSY));
     5e8:	78 01 00 00 	mvhi r1,0x0
     5ec:	38 21 2b f4 	ori r1,r1,0x2bf4
     5f0:	28 23 00 00 	lw r3,(r1+0)
     5f4:	b8 80 08 00 	mv r1,r4
		i2c0->wxrx = data;
     5f8:	b8 40 20 00 	mv r4,r2
	void i2c_putdatas(char *str)	
	{
		char *c= str;
		while (*c) {
			i2c_putdata(*c);
		c++;
     5fc:	34 21 00 01 	addi r1,r1,1
    static uint8_t data_MSB;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
		while ((i2c0->ucr & !I2C_BUSY));
     600:	28 62 00 00 	lw r2,(r3+0)
		i2c0->wxrx = data;
     604:	58 64 00 04 	sw (r3+4),r4
	}
    //----------------------------------------------------------------
	void i2c_putdatas(char *str)	
	{
		char *c= str;
		while (*c) {
     608:	40 22 00 00 	lbu r2,(r1+0)
     60c:	5c 40 ff fb 	bne r2,r0,5f8 <i2c_putdatas+0x1c>
     610:	78 01 00 00 	mvhi r1,0x0
     614:	38 21 2c 14 	ori r1,r1,0x2c14
     618:	30 24 00 00 	sb (r1+0),r4
     61c:	c3 a0 00 00 	ret

00000620 <i2c_init>:
		c++;
		}
	}
    //----------------------------------------------------------------
	void i2c_init()
	{
     620:	78 01 00 00 	mvhi r1,0x0
     624:	38 21 2b f4 	ori r1,r1,0x2bf4
     628:	28 23 00 00 	lw r3,(r1+0)
     62c:	34 02 00 08 	mvi r2,8
     630:	58 62 00 00 	sw (r3+0),r2
	 i2c0->ucr = I2C_ENA;  
	}
     634:	c3 a0 00 00 	ret

00000638 <i2c_sleep>:
    //----------------------------------------------------------------
	void i2c_sleep()
	{
     638:	78 01 00 00 	mvhi r1,0x0
     63c:	38 21 2b f4 	ori r1,r1,0x2bf4
     640:	28 23 00 00 	lw r3,(r1+0)
     644:	28 62 00 00 	lw r2,(r3+0)
     648:	20 42 00 01 	andi r2,r2,0x1
     64c:	44 40 00 06 	be r2,r0,664 <i2c_sleep+0x2c>
		while((i2c0->ucr & I2C_BUSY))
		i2c0->ucr = 0x00;
     650:	34 02 00 00 	mvi r2,0
     654:	58 62 00 00 	sw (r3+0),r2
	 i2c0->ucr = I2C_ENA;  
	}
    //----------------------------------------------------------------
	void i2c_sleep()
	{
		while((i2c0->ucr & I2C_BUSY))
     658:	28 61 00 00 	lw r1,(r3+0)
     65c:	20 21 00 01 	andi r1,r1,0x1
     660:	5c 20 ff fd 	bne r1,r0,654 <i2c_sleep+0x1c>
     664:	c3 a0 00 00 	ret

00000668 <i2c_getdata>:
		i2c0->ucr = 0x00;
	}
    //----------------------------------------------------------------
	uint8_t i2c_getdata()
	{
     668:	78 01 00 00 	mvhi r1,0x0
     66c:	38 21 2b f4 	ori r1,r1,0x2bf4
     670:	28 22 00 00 	lw r2,(r1+0)
     674:	28 41 00 00 	lw r1,(r2+0)
     678:	20 21 00 01 	andi r1,r1,0x1
     67c:	44 20 00 04 	be r1,r0,68c <i2c_getdata+0x24>
     680:	28 41 00 00 	lw r1,(r2+0)
     684:	20 21 00 02 	andi r1,r1,0x2
     688:	44 20 ff fb 	be r1,r0,674 <i2c_getdata+0xc>
		while ( (i2c0->ucr & I2C_BUSY) && (!(i2c0->ucr & I2C_ERROR)));
		return i2c0-> wxrx;
     68c:	28 41 00 04 	lw r1,(r2+4)
	}
     690:	20 21 00 ff 	andi r1,r1,0xff
     694:	c3 a0 00 00 	ret

00000698 <I2CreadByte>:
    //----------------------------------------------------------------
    uint8_t I2CreadByte(uint8_t address, uint8_t subaddress)
    {
     698:	78 03 00 00 	mvhi r3,0x0
     69c:	38 63 2b f4 	ori r3,r3,0x2bf4
     6a0:	28 65 00 00 	lw r5,(r3+0)
     6a4:	20 26 00 ff 	andi r6,r1,0xff
    static uint8_t data_LSB;
    static uint8_t data_MSB;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
     6a8:	78 01 00 00 	mvhi r1,0x0
		i2c0->wxrx = data;
	}
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     6ac:	58 a6 00 08 	sw (r5+8),r6
		while ( (i2c0->ucr & I2C_BUSY) && (!(i2c0->ucr & I2C_ERROR)));
		return i2c0-> wxrx;
	}
    //----------------------------------------------------------------
    uint8_t I2CreadByte(uint8_t address, uint8_t subaddress)
    {
     6b0:	20 42 00 ff 	andi r2,r2,0xff
    static uint8_t data_LSB;
    static uint8_t data_MSB;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
     6b4:	38 21 2c 14 	ori r1,r1,0x2c14
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     6b8:	78 03 00 00 	mvhi r3,0x0
    static uint8_t data_LSB;
    static uint8_t data_MSB;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
     6bc:	30 22 00 00 	sb (r1+0),r2
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     6c0:	38 63 2b e4 	ori r3,r3,0x2be4
    static uint8_t data_MSB;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
		while ((i2c0->ucr & !I2C_BUSY));
     6c4:	28 a1 00 00 	lw r1,(r5+0)
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     6c8:	28 64 00 00 	lw r4,(r3+0)
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
		while ((i2c0->ucr & !I2C_BUSY));
		i2c0->wxrx = data;
     6cc:	58 a2 00 04 	sw (r5+4),r2
		}
	}
    //----------------------------------------------------------------
	void i2c_init()
	{
	 i2c0->ucr = I2C_ENA;  
     6d0:	34 03 00 08 	mvi r3,8
     6d4:	58 a3 00 00 	sw (r5+0),r3
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     6d8:	34 01 03 e8 	mvi r1,1000
     6dc:	58 81 00 10 	sw (r4+16),r1
    timer0->counter1 = 0;
     6e0:	34 02 00 00 	mvi r2,0
     6e4:	58 82 00 14 	sw (r4+20),r2
    timer0->tcr1 = TIMER_EN;
     6e8:	58 83 00 0c 	sw (r4+12),r3

    do {
        //halt();
         tcr = timer0->tcr1;
     6ec:	28 81 00 0c 	lw r1,(r4+12)
     } while ( ! (tcr & TIMER_TRIG) );
     6f0:	20 21 00 01 	andi r1,r1,0x1
     6f4:	44 20 ff fe 	be r1,r0,6ec <I2CreadByte+0x54>
		  //Indicar la direccion interna que se desea leer    
      i2c_putrwaddr (I2C_WRITE, address);
      i2c_putdata(subaddress);
      i2c_init(); 
      nsleep(20);
	  i2c0->ucr = 0x00;
     6f8:	34 01 00 00 	mvi r1,0
     6fc:	58 a1 00 00 	sw (r5+0),r1
		  //Pausa para que el esclavo procese la orden
      while((i2c0->ucr & I2C_BUSY));
     700:	28 a1 00 00 	lw r1,(r5+0)
     704:	20 22 00 01 	andi r2,r1,0x1
     708:	5c 40 ff fe 	bne r2,r0,700 <I2CreadByte+0x68>
void msleep(uint32_t msec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000)*msec;
     70c:	38 01 c3 50 	mvu r1,0xc350
     710:	58 81 00 10 	sw (r4+16),r1
    timer0->counter1 = 0;
     714:	58 82 00 14 	sw (r4+20),r2
    timer0->tcr1 = TIMER_EN;
     718:	34 01 00 08 	mvi r1,8
     71c:	58 81 00 0c 	sw (r4+12),r1

    do {
        //halt();
         tcr = timer0->tcr1;
     720:	28 81 00 0c 	lw r1,(r4+12)
     } while ( ! (tcr & TIMER_TRIG) );
     724:	20 21 00 01 	andi r1,r1,0x1
     728:	44 20 ff fe 	be r1,r0,720 <I2CreadByte+0x88>
		i2c0->wxrx = data;
	}
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     72c:	38 c1 00 80 	ori r1,r6,0x80
     730:	58 a1 00 08 	sw (r5+8),r1
		}
	}
    //----------------------------------------------------------------
	void i2c_init()
	{
	 i2c0->ucr = I2C_ENA;  
     734:	34 03 00 08 	mvi r3,8
     738:	58 a3 00 00 	sw (r5+0),r3
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     73c:	34 02 03 e8 	mvi r2,1000
     740:	58 82 00 10 	sw (r4+16),r2
    timer0->counter1 = 0;
     744:	34 01 00 00 	mvi r1,0
     748:	58 81 00 14 	sw (r4+20),r1
    timer0->tcr1 = TIMER_EN;
     74c:	58 83 00 0c 	sw (r4+12),r3

    do {
        //halt();
         tcr = timer0->tcr1;
     750:	28 81 00 0c 	lw r1,(r4+12)
     } while ( ! (tcr & TIMER_TRIG) );
     754:	20 21 00 01 	andi r1,r1,0x1
     758:	44 20 ff fe 	be r1,r0,750 <I2CreadByte+0xb8>
		  //gpio0->out = 0x65;
		  //Lectura de la informacion otorgada por el esclavo
      i2c_putrwaddr(I2C_READ, address);
      i2c_init();  
      nsleep(20);
      i2c0->ucr = 0x00;
     75c:	34 01 00 00 	mvi r1,0
     760:	58 a1 00 00 	sw (r5+0),r1
	  while ( (i2c0->ucr & I2C_BUSY) && (!(i2c0->ucr & I2C_ERROR)));
     764:	28 a1 00 00 	lw r1,(r5+0)
     768:	20 21 00 01 	andi r1,r1,0x1
     76c:	44 20 00 04 	be r1,r0,77c <I2CreadByte+0xe4>
     770:	28 a1 00 00 	lw r1,(r5+0)
     774:	20 21 00 02 	andi r1,r1,0x2
     778:	44 20 ff fb 	be r1,r0,764 <I2CreadByte+0xcc>
		  //gpio0->oe  = 0x000000ff;
		  //gpio0->out = 0x66;
	  return i2c0-> wxrx;     
     77c:	28 a1 00 04 	lw r1,(r5+4)
    }
     780:	20 21 00 ff 	andi r1,r1,0xff
     784:	c3 a0 00 00 	ret

00000788 <I2CreadBytes>:
    //----------------------------------------------------------------
    void I2CreadBytes(uint8_t address, uint8_t subaddress, int *dest, uint8_t count)
    {
     788:	37 9c ff fc 	addi sp,sp,-4
     78c:	5b 8b 00 04 	sw (sp+4),r11
		i2c0->wxrx = data;
	}
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     790:	78 05 00 00 	mvhi r5,0x0
     794:	38 a5 2b f4 	ori r5,r5,0x2bf4
     798:	28 a7 00 00 	lw r7,(r5+0)
		  //gpio0->out = 0x66;
	  return i2c0-> wxrx;     
    }
    //----------------------------------------------------------------
    void I2CreadBytes(uint8_t address, uint8_t subaddress, int *dest, uint8_t count)
    {
     79c:	20 28 00 ff 	andi r8,r1,0xff
    static uint8_t data_LSB;
    static uint8_t data_MSB;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
     7a0:	78 01 00 00 	mvhi r1,0x0
		i2c0->wxrx = data;
	}
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     7a4:	58 e8 00 08 	sw (r7+8),r8
		  //gpio0->out = 0x66;
	  return i2c0-> wxrx;     
    }
    //----------------------------------------------------------------
    void I2CreadBytes(uint8_t address, uint8_t subaddress, int *dest, uint8_t count)
    {
     7a8:	20 42 00 ff 	andi r2,r2,0xff
    static uint8_t data_LSB;
    static uint8_t data_MSB;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
     7ac:	38 21 2c 14 	ori r1,r1,0x2c14
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     7b0:	78 05 00 00 	mvhi r5,0x0
    static uint8_t data_LSB;
    static uint8_t data_MSB;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
     7b4:	30 22 00 00 	sb (r1+0),r2
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     7b8:	38 a5 2b e4 	ori r5,r5,0x2be4
    static uint8_t data_MSB;
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
		while ((i2c0->ucr & !I2C_BUSY));
     7bc:	28 e1 00 00 	lw r1,(r7+0)
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     7c0:	28 a6 00 00 	lw r6,(r5+0)
    //----------------------------------------------------------------
	void i2c_putdata(uint8_t c)
	{
	  data = c;
		while ((i2c0->ucr & !I2C_BUSY));
		i2c0->wxrx = data;
     7c4:	58 e2 00 04 	sw (r7+4),r2
		}
	}
    //----------------------------------------------------------------
	void i2c_init()
	{
	 i2c0->ucr = I2C_ENA;  
     7c8:	34 05 00 08 	mvi r5,8
     7cc:	58 e5 00 00 	sw (r7+0),r5
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     7d0:	34 01 03 e8 	mvi r1,1000
     7d4:	58 c1 00 10 	sw (r6+16),r1
    timer0->counter1 = 0;
     7d8:	34 02 00 00 	mvi r2,0
     7dc:	58 c2 00 14 	sw (r6+20),r2
    timer0->tcr1 = TIMER_EN;
     7e0:	58 c5 00 0c 	sw (r6+12),r5
		  //gpio0->out = 0x66;
	  return i2c0-> wxrx;     
    }
    //----------------------------------------------------------------
    void I2CreadBytes(uint8_t address, uint8_t subaddress, int *dest, uint8_t count)
    {
     7e4:	20 84 00 ff 	andi r4,r4,0xff
    timer0->counter1 = 0;
    timer0->tcr1 = TIMER_EN;

    do {
        //halt();
         tcr = timer0->tcr1;
     7e8:	28 c1 00 0c 	lw r1,(r6+12)
     } while ( ! (tcr & TIMER_TRIG) );
     7ec:	20 21 00 01 	andi r1,r1,0x1
     7f0:	44 20 ff fe 	be r1,r0,7e8 <I2CreadBytes+0x60>
    {
		i2c_putrwaddr (I2C_WRITE, address);
		i2c_putdata(subaddress);
		i2c_init(); 
		nsleep(20);
		i2c0->ucr = 0x00;
     7f4:	34 01 00 00 	mvi r1,0
     7f8:	58 e1 00 00 	sw (r7+0),r1
		  //Pausa para que el esclavo procese la orden
		while((i2c0->ucr & I2C_BUSY));
     7fc:	28 e1 00 00 	lw r1,(r7+0)
     800:	20 22 00 01 	andi r2,r1,0x1
     804:	5c 40 ff fe 	bne r2,r0,7fc <I2CreadBytes+0x74>
void msleep(uint32_t msec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000)*msec;
     808:	38 01 c3 50 	mvu r1,0xc350
     80c:	58 c1 00 10 	sw (r6+16),r1
    timer0->counter1 = 0;
     810:	58 c2 00 14 	sw (r6+20),r2
    timer0->tcr1 = TIMER_EN;
     814:	34 01 00 08 	mvi r1,8
     818:	58 c1 00 0c 	sw (r6+12),r1

    do {
        //halt();
         tcr = timer0->tcr1;
     81c:	28 c1 00 0c 	lw r1,(r6+12)
     } while ( ! (tcr & TIMER_TRIG) );
     820:	20 21 00 01 	andi r1,r1,0x1
     824:	44 20 ff fe 	be r1,r0,81c <I2CreadBytes+0x94>
		i2c0->wxrx = data;
	}
    //----------------------------------------------------------------
	void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
	{
		i2c0 -> rwaddr = ((rw<<7)|addrs);
     828:	39 01 00 80 	ori r1,r8,0x80
     82c:	58 e1 00 08 	sw (r7+8),r1
		}
	}
    //----------------------------------------------------------------
	void i2c_init()
	{
	 i2c0->ucr = I2C_ENA;  
     830:	34 01 00 08 	mvi r1,8
     834:	58 e1 00 00 	sw (r7+0),r1
		  //Lectura de la informacion otorgada por el esclavo
		i2c_putrwaddr(I2C_READ, address);
		i2c_init();  
		//-------------------------------------
      uint8_t i;
		for (i=0; i<count;)
     838:	44 80 00 19 	be r4,r0,89c <I2CreadBytes+0x114>
     83c:	34 05 00 00 	mvi r5,0
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
    timer0->counter1 = 0;
    timer0->tcr1 = TIMER_EN;
     840:	b8 20 58 00 	mv r11,r1
		  //Lectura de la informacion otorgada por el esclavo
		i2c_putrwaddr(I2C_READ, address);
		i2c_init();  
		//-------------------------------------
      uint8_t i;
		for (i=0; i<count;)
     844:	34 88 ff ff 	addi r8,r4,-1
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     848:	34 0a 03 e8 	mvi r10,1000
    timer0->counter1 = 0;
     84c:	b8 a0 48 00 	mv r9,r5
void nsleep(uint32_t nsec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
     850:	58 ca 00 10 	sw (r6+16),r10
    timer0->counter1 = 0;
     854:	58 c9 00 14 	sw (r6+20),r9
    timer0->tcr1 = TIMER_EN;
     858:	58 cb 00 0c 	sw (r6+12),r11

    do {
        //halt();
         tcr = timer0->tcr1;
     85c:	28 c1 00 0c 	lw r1,(r6+12)
     } while ( ! (tcr & TIMER_TRIG) );
     860:	20 21 00 01 	andi r1,r1,0x1
     864:	44 20 ff fe 	be r1,r0,85c <I2CreadBytes+0xd4>
		//-------------------------------------
      uint8_t i;
		for (i=0; i<count;)
		{
			nsleep(20);
         if (i==count-1) i2c0->ucr = 0x00;
     868:	44 a8 00 10 	be r5,r8,8a8 <I2CreadBytes+0x120>

			while ( (i2c0->ucr & I2C_BUSY) && (!(i2c0->ucr & I2C_ERROR)));
     86c:	28 e1 00 00 	lw r1,(r7+0)
     870:	20 21 00 01 	andi r1,r1,0x1
     874:	44 20 00 04 	be r1,r0,884 <I2CreadBytes+0xfc>
     878:	28 e1 00 00 	lw r1,(r7+0)
     87c:	20 21 00 02 	andi r1,r1,0x2
     880:	44 20 ff fb 	be r1,r0,86c <I2CreadBytes+0xe4>
            dest[i++] = i2c0-> wxrx;
     884:	28 e1 00 04 	lw r1,(r7+4)
     888:	34 a5 00 01 	addi r5,r5,1
		  //Lectura de la informacion otorgada por el esclavo
		i2c_putrwaddr(I2C_READ, address);
		i2c_init();  
		//-------------------------------------
      uint8_t i;
		for (i=0; i<count;)
     88c:	20 a2 00 ff 	andi r2,r5,0xff
		{
			nsleep(20);
         if (i==count-1) i2c0->ucr = 0x00;

			while ( (i2c0->ucr & I2C_BUSY) && (!(i2c0->ucr & I2C_ERROR)));
            dest[i++] = i2c0-> wxrx;
     890:	58 61 00 00 	sw (r3+0),r1
     894:	34 63 00 04 	addi r3,r3,4
		  //Lectura de la informacion otorgada por el esclavo
		i2c_putrwaddr(I2C_READ, address);
		i2c_init();  
		//-------------------------------------
      uint8_t i;
		for (i=0; i<count;)
     898:	54 82 ff ee 	bgu r4,r2,850 <I2CreadBytes+0xc8>

			while ( (i2c0->ucr & I2C_BUSY) && (!(i2c0->ucr & I2C_ERROR)));
            dest[i++] = i2c0-> wxrx;
		}
		//-------------------------------------
    }
     89c:	2b 8b 00 04 	lw r11,(sp+4)
     8a0:	37 9c 00 04 	addi sp,sp,4
     8a4:	c3 a0 00 00 	ret
		//-------------------------------------
      uint8_t i;
		for (i=0; i<count;)
		{
			nsleep(20);
         if (i==count-1) i2c0->ucr = 0x00;
     8a8:	34 01 00 00 	mvi r1,0
     8ac:	58 e1 00 00 	sw (r7+0),r1
     8b0:	e3 ff ff ef 	bi 86c <I2CreadBytes+0xe4>

000008b4 <everloop_putdata_1>:

/***************************************************************************
 * everloop functions
 */
	void everloop_putdata_1(uint8_t data1)
	{
     8b4:	78 02 00 00 	mvhi r2,0x0
     8b8:	38 42 2b f0 	ori r2,r2,0x2bf0
     8bc:	28 43 00 00 	lw r3,(r2+0)
     8c0:	20 21 00 ff 	andi r1,r1,0xff
	  everloop0->prueba_1 = data1;
     8c4:	30 61 00 00 	sb (r3+0),r1
	}
     8c8:	c3 a0 00 00 	ret

000008cc <everloop_putdata_2>:

	void everloop_putdata_2(uint8_t data2)
	{
     8cc:	78 02 00 00 	mvhi r2,0x0
     8d0:	38 42 2b f0 	ori r2,r2,0x2bf0
     8d4:	28 43 00 00 	lw r3,(r2+0)
     8d8:	20 21 00 ff 	andi r1,r1,0xff
	  everloop0->prueba_2 = data2;
     8dc:	30 61 00 01 	sb (r3+1),r1
	}
     8e0:	c3 a0 00 00 	ret

000008e4 <everloop_putdata_3>:

	void everloop_putdata_3(uint8_t data3)
	{
     8e4:	78 02 00 00 	mvhi r2,0x0
     8e8:	38 42 2b f0 	ori r2,r2,0x2bf0
     8ec:	28 43 00 00 	lw r3,(r2+0)
     8f0:	20 21 00 ff 	andi r1,r1,0xff
	  everloop0->prueba_3 = data3;
     8f4:	30 61 00 02 	sb (r3+2),r1
	}
     8f8:	c3 a0 00 00 	ret

000008fc <pwm_init>:
/***************************************************************************
 * PWM Functions
 */
void pwm_init(void)
{
     8fc:	78 01 00 00 	mvhi r1,0x0
     900:	38 21 2b f8 	ori r1,r1,0x2bf8
     904:	28 23 00 00 	lw r3,(r1+0)
     908:	34 02 00 00 	mvi r2,0
     90c:	58 62 00 00 	sw (r3+0),r2
  pwm0->duty = 0;
  pwm0->enable = 0;
     910:	58 62 00 04 	sw (r3+4),r2
}
     914:	c3 a0 00 00 	ret

00000918 <pwm_duty>:

void pwm_duty(uint8_t duty0)
{
     918:	78 02 00 00 	mvhi r2,0x0
     91c:	38 42 2b f8 	ori r2,r2,0x2bf8
     920:	28 43 00 00 	lw r3,(r2+0)
     924:	20 21 00 ff 	andi r1,r1,0xff
  pwm0->duty = duty0;
     928:	58 61 00 00 	sw (r3+0),r1
}
     92c:	c3 a0 00 00 	ret

00000930 <pwm_enable>:

void pwm_enable(uint8_t enable0)
{
     930:	78 02 00 00 	mvhi r2,0x0
     934:	38 42 2b f8 	ori r2,r2,0x2bf8
     938:	28 43 00 00 	lw r3,(r2+0)
     93c:	20 21 00 ff 	andi r1,r1,0xff
  pwm0->enable = enable0;
     940:	58 61 00 04 	sw (r3+4),r1
}
     944:	c3 a0 00 00 	ret

00000948 <estimateDiv64To32>:
the exact quotient q is larger than 32 bits, the maximum positive 32-bit
unsigned integer is returned.
-------------------------------------------------------------------------------
*/
static bits32 estimateDiv64To32( bits32 a0, bits32 a1, bits32 b )
{
     948:	37 9c ff f0 	addi sp,sp,-16
     94c:	5b 8b 00 10 	sw (sp+16),r11
     950:	5b 8c 00 0c 	sw (sp+12),r12
     954:	5b 8d 00 08 	sw (sp+8),r13
     958:	5b 8e 00 04 	sw (sp+4),r14
     95c:	b8 20 38 00 	mv r7,r1
     960:	b8 60 60 00 	mv r12,r3
     964:	b8 40 68 00 	mv r13,r2
    bits32 b0, b1;
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
     968:	54 61 00 08 	bgu r3,r1,988 <estimateDiv64To32+0x40>
     96c:	34 01 ff ff 	mvi r1,-1
    }
    rem0 = ( rem0<<16 ) | ( rem1>>16 );
    z |= ( b0<<16 <= rem0 ) ? 0xFFFF : rem0 / b0;
    return z;

}
     970:	2b 8b 00 10 	lw r11,(sp+16)
     974:	2b 8c 00 0c 	lw r12,(sp+12)
     978:	2b 8d 00 08 	lw r13,(sp+8)
     97c:	2b 8e 00 04 	lw r14,(sp+4)
     980:	37 9c 00 10 	addi sp,sp,16
     984:	c3 a0 00 00 	ret
    bits32 b0, b1;
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
     988:	00 69 00 10 	srui r9,r3,16
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
     98c:	3d 2e 00 10 	sli r14,r9,16
     990:	55 c1 00 2f 	bgu r14,r1,a4c <estimateDiv64To32+0x104>
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
     994:	20 61 ff ff 	andi r1,r3,0xffff
     998:	3c 22 00 10 	sli r2,r1,16
     99c:	34 0b 00 00 	mvi r11,0
     9a0:	78 08 ff ff 	mvhi r8,0xffff
     9a4:	c8 41 28 00 	sub r5,r2,r1
     9a8:	39 08 00 00 	ori r8,r8,0x0
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
     9ac:	21 2a ff ff 	andi r10,r9,0xffff
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
     9b0:	b9 60 20 00 	mv r4,r11
     9b4:	38 06 ff ff 	mvu r6,0xffff
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
     9b8:	3c a2 00 10 	sli r2,r5,16
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
     9bc:	89 46 08 00 	mul r1,r10,r6
    zMiddleA <<= 16;
    z1 += zMiddleA;
     9c0:	b4 44 18 00 	add r3,r2,r4
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
     9c4:	00 a5 00 10 	srui r5,r5,16
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
     9c8:	f4 43 10 00 	cmpgu r2,r2,r3
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
     9cc:	c8 e1 08 00 	sub r1,r7,r1
     9d0:	c8 25 08 00 	sub r1,r1,r5
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
     9d4:	f4 6d 20 00 	cmpgu r4,r3,r13
     9d8:	c8 22 08 00 	sub r1,r1,r2
     9dc:	c8 24 08 00 	sub r1,r1,r4
     9e0:	c8 2b 28 00 	sub r5,r1,r11
INLINE void
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
     9e4:	c9 a3 10 00 	sub r2,r13,r3
    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    mul32To64( b, z, &term0, &term1 );
    sub64( a0, a1, term0, term1, &rem0, &rem1 );
    while ( ( (sbits32) rem0 ) < 0 ) {
     9e8:	4c a0 00 0d 	bge r5,r0,a1c <estimateDiv64To32+0xd4>
     9ec:	78 07 ff ff 	mvhi r7,0xffff
     9f0:	3d 83 00 10 	sli r3,r12,16
        z -= 0x10000;
     9f4:	38 e7 00 00 	ori r7,r7,0x0
 add64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{
    bits32 z1;

    z1 = a1 + b1;
     9f8:	b4 43 30 00 	add r6,r2,r3
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
     9fc:	f4 46 08 00 	cmpgu r1,r2,r6
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    mul32To64( b, z, &term0, &term1 );
    sub64( a0, a1, term0, term1, &rem0, &rem1 );
    while ( ( (sbits32) rem0 ) < 0 ) {
        z -= 0x10000;
     a00:	b5 07 40 00 	add r8,r8,r7
{
    bits32 z1;

    z1 = a1 + b1;
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
     a04:	b4 29 08 00 	add r1,r1,r9
     a08:	b4 a1 28 00 	add r5,r5,r1
    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    mul32To64( b, z, &term0, &term1 );
    sub64( a0, a1, term0, term1, &rem0, &rem1 );
    while ( ( (sbits32) rem0 ) < 0 ) {
     a0c:	b8 c0 10 00 	mv r2,r6
     a10:	4c a0 00 02 	bge r5,r0,a18 <estimateDiv64To32+0xd0>
     a14:	e3 ff ff f9 	bi 9f8 <estimateDiv64To32+0xb0>
     a18:	b8 c0 10 00 	mv r2,r6
        z -= 0x10000;
        b1 = b<<16;
        add64( rem0, rem1, b0, b1, &rem0, &rem1 );
    }
    rem0 = ( rem0<<16 ) | ( rem1>>16 );
     a1c:	00 42 00 10 	srui r2,r2,16
     a20:	3c a1 00 10 	sli r1,r5,16
     a24:	b8 41 08 00 	or r1,r2,r1
    z |= ( b0<<16 <= rem0 ) ? 0xFFFF : rem0 / b0;
     a28:	55 c1 00 19 	bgu r14,r1,a8c <estimateDiv64To32+0x144>
     a2c:	38 01 ff ff 	mvu r1,0xffff
     a30:	b8 28 08 00 	or r1,r1,r8
    return z;

}
     a34:	2b 8b 00 10 	lw r11,(sp+16)
     a38:	2b 8c 00 0c 	lw r12,(sp+12)
     a3c:	2b 8d 00 08 	lw r13,(sp+8)
     a40:	2b 8e 00 04 	lw r14,(sp+4)
     a44:	37 9c 00 10 	addi sp,sp,16
     a48:	c3 a0 00 00 	ret
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
     a4c:	8c 29 08 00 	divu r1,r1,r9
     a50:	20 64 ff ff 	andi r4,r3,0xffff
     a54:	3c 28 00 10 	sli r8,r1,16
     a58:	21 2a ff ff 	andi r10,r9,0xffff
     a5c:	01 06 00 10 	srui r6,r8,16
     a60:	21 01 ff ff 	andi r1,r8,0xffff
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
     a64:	88 86 10 00 	mul r2,r4,r6
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
     a68:	88 2a 18 00 	mul r3,r1,r10
     a6c:	88 24 20 00 	mul r4,r1,r4
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
     a70:	b4 43 28 00 	add r5,r2,r3
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
     a74:	54 65 00 03 	bgu r3,r5,a80 <estimateDiv64To32+0x138>
     a78:	34 0b 00 00 	mvi r11,0
     a7c:	e3 ff ff cf 	bi 9b8 <estimateDiv64To32+0x70>
     a80:	78 0b 00 01 	mvhi r11,0x1
     a84:	39 6b 00 00 	ori r11,r11,0x0
     a88:	e3 ff ff cc 	bi 9b8 <estimateDiv64To32+0x70>
        z -= 0x10000;
        b1 = b<<16;
        add64( rem0, rem1, b0, b1, &rem0, &rem1 );
    }
    rem0 = ( rem0<<16 ) | ( rem1>>16 );
    z |= ( b0<<16 <= rem0 ) ? 0xFFFF : rem0 / b0;
     a8c:	8c 29 08 00 	divu r1,r1,r9
     a90:	b8 28 08 00 	or r1,r1,r8
     a94:	e3 ff ff e8 	bi a34 <estimateDiv64To32+0xec>

00000a98 <float_raise>:
substitute a result value.  If traps are not implemented, this routine
should be simply `float_exception_flags |= flags;'.
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{
     a98:	78 02 00 00 	mvhi r2,0x0
     a9c:	38 42 2c 1c 	ori r2,r2,0x2c1c
     aa0:	28 43 00 00 	lw r3,(r2+0)
     aa4:	b8 23 08 00 	or r1,r1,r3
     aa8:	58 41 00 00 	sw (r2+0),r1

    float_exception_flags |= flags;

}
     aac:	c3 a0 00 00 	ret

00000ab0 <float32_is_nan>:
Returns 1 if the single-precision floating-point value `a' is a NaN;
otherwise returns 0.
-------------------------------------------------------------------------------
*/
flag float32_is_nan( float32 a )
{
     ab0:	78 02 ff 00 	mvhi r2,0xff00
     ab4:	38 42 00 00 	ori r2,r2,0x0
     ab8:	b4 21 08 00 	add r1,r1,r1

    return ( 0xFF000000 < (bits32) ( a<<1 ) );

}
     abc:	f4 22 08 00 	cmpgu r1,r1,r2
     ac0:	c3 a0 00 00 	ret

00000ac4 <float32_is_signaling_nan>:
Returns 1 if the single-precision floating-point value `a' is a signaling
NaN; otherwise returns 0.
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{
     ac4:	b8 20 20 00 	mv r4,r1

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     ac8:	00 21 00 16 	srui r1,r1,22
     acc:	34 02 01 fe 	mvi r2,510
     ad0:	20 21 01 ff 	andi r1,r1,0x1ff
     ad4:	34 03 00 00 	mvi r3,0
     ad8:	44 22 00 03 	be r1,r2,ae4 <float32_is_signaling_nan+0x20>

}
     adc:	b8 60 08 00 	mv r1,r3
     ae0:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     ae4:	78 01 00 3f 	mvhi r1,0x3f
     ae8:	38 21 ff ff 	ori r1,r1,0xffff
     aec:	a0 81 08 00 	and r1,r4,r1
     af0:	7c 23 00 00 	cmpnei r3,r1,0

}
     af4:	b8 60 08 00 	mv r1,r3
     af8:	c3 a0 00 00 	ret

00000afc <propagateFloat32NaN>:
is a NaN, and returns the appropriate NaN result.  If either `a' or `b' is a
signaling NaN, the invalid exception is raised.
-------------------------------------------------------------------------------
*/
static float32 propagateFloat32NaN( float32 a, float32 b )
{
     afc:	00 23 00 16 	srui r3,r1,22
     b00:	b8 20 30 00 	mv r6,r1
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     b04:	20 63 01 ff 	andi r3,r3,0x1ff
     b08:	34 01 01 fe 	mvi r1,510
is a NaN, and returns the appropriate NaN result.  If either `a' or `b' is a
signaling NaN, the invalid exception is raised.
-------------------------------------------------------------------------------
*/
static float32 propagateFloat32NaN( float32 a, float32 b )
{
     b0c:	b8 40 20 00 	mv r4,r2
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     b10:	34 07 00 00 	mvi r7,0
     b14:	44 61 00 24 	be r3,r1,ba4 <propagateFloat32NaN+0xa8>
    aIsNaN = float32_is_nan( a );
    aIsSignalingNaN = float32_is_signaling_nan( a );
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
    b |= 0x00400000;
     b18:	00 81 00 16 	srui r1,r4,22
     b1c:	34 02 01 fe 	mvi r2,510
     b20:	20 21 01 ff 	andi r1,r1,0x1ff
     b24:	34 03 00 00 	mvi r3,0
     b28:	44 22 00 1a 	be r1,r2,b90 <propagateFloat32NaN+0x94>
     b2c:	78 05 00 40 	mvhi r5,0x40
     b30:	b8 a0 08 00 	mv r1,r5
    if ( aIsSignalingNaN | bIsSignalingNaN ) float_raise( float_flag_invalid );
     b34:	b8 67 10 00 	or r2,r3,r7
    aIsNaN = float32_is_nan( a );
    aIsSignalingNaN = float32_is_signaling_nan( a );
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
    b |= 0x00400000;
     b38:	38 21 00 00 	ori r1,r1,0x0
     b3c:	b8 81 18 00 	or r3,r4,r1
    if ( aIsSignalingNaN | bIsSignalingNaN ) float_raise( float_flag_invalid );
     b40:	44 40 00 06 	be r2,r0,b58 <propagateFloat32NaN+0x5c>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
     b44:	78 02 00 00 	mvhi r2,0x0
     b48:	38 42 2c 1c 	ori r2,r2,0x2c1c
     b4c:	28 41 00 00 	lw r1,(r2+0)
     b50:	38 21 00 10 	ori r1,r1,0x10
     b54:	58 41 00 00 	sw (r2+0),r1
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
    b |= 0x00400000;
    if ( aIsSignalingNaN | bIsSignalingNaN ) float_raise( float_flag_invalid );
    if ( aIsNaN ) {
     b58:	78 02 ff 00 	mvhi r2,0xff00
     b5c:	38 42 00 00 	ori r2,r2,0x0
     b60:	b4 c6 08 00 	add r1,r6,r6
     b64:	50 41 00 05 	bgeu r2,r1,b78 <propagateFloat32NaN+0x7c>
        return ( aIsSignalingNaN & bIsNaN ) ? b : a;
     b68:	b4 84 08 00 	add r1,r4,r4
     b6c:	f4 22 08 00 	cmpgu r1,r1,r2
     b70:	a0 e1 08 00 	and r1,r7,r1
     b74:	44 20 00 03 	be r1,r0,b80 <propagateFloat32NaN+0x84>
    }
    else {
        return b;
    }

}
     b78:	b8 60 08 00 	mv r1,r3
     b7c:	c3 a0 00 00 	ret

    aIsNaN = float32_is_nan( a );
    aIsSignalingNaN = float32_is_signaling_nan( a );
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
     b80:	38 a5 00 00 	ori r5,r5,0x0
     b84:	b8 c5 18 00 	or r3,r6,r5
    }
    else {
        return b;
    }

}
     b88:	b8 60 08 00 	mv r1,r3
     b8c:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     b90:	78 01 00 3f 	mvhi r1,0x3f
     b94:	38 21 ff ff 	ori r1,r1,0xffff
     b98:	a0 81 08 00 	and r1,r4,r1
     b9c:	7c 23 00 00 	cmpnei r3,r1,0
     ba0:	e3 ff ff e3 	bi b2c <propagateFloat32NaN+0x30>
     ba4:	78 01 00 3f 	mvhi r1,0x3f
     ba8:	38 21 ff ff 	ori r1,r1,0xffff
     bac:	a0 c1 08 00 	and r1,r6,r1
     bb0:	7c 27 00 00 	cmpnei r7,r1,0
     bb4:	e3 ff ff d9 	bi b18 <propagateFloat32NaN+0x1c>

00000bb8 <roundAndPackFloat32>:
The handling of underflow and overflow follows the IEC/IEEE Standard for
Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 roundAndPackFloat32( flag zSign, int16 zExp, bits32 zSig )
{
     bb8:	78 04 00 00 	mvhi r4,0x0
     bbc:	38 84 2c 18 	ori r4,r4,0x2c18
     bc0:	28 84 00 00 	lw r4,(r4+0)
     bc4:	b8 20 48 00 	mv r9,r1
     bc8:	b8 40 30 00 	mv r6,r2
    flag roundNearestEven;
    int8 roundIncrement, roundBits;
    flag isTiny;

    roundingMode = float_rounding_mode;
    roundNearestEven = roundingMode == float_round_nearest_even;
     bcc:	64 88 00 00 	cmpei r8,r4,0
The handling of underflow and overflow follows the IEC/IEEE Standard for
Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 roundAndPackFloat32( flag zSign, int16 zExp, bits32 zSig )
{
     bd0:	b8 60 38 00 	mv r7,r3
    flag isTiny;

    roundingMode = float_rounding_mode;
    roundNearestEven = roundingMode == float_round_nearest_even;
    roundIncrement = 0x40;
    if ( ! roundNearestEven ) {
     bd4:	34 05 00 40 	mvi r5,64
     bd8:	5d 00 00 07 	bne r8,r0,bf4 <roundAndPackFloat32+0x3c>
        if ( roundingMode == float_round_to_zero ) {
     bdc:	34 01 00 01 	mvi r1,1
     be0:	44 81 00 37 	be r4,r1,cbc <roundAndPackFloat32+0x104>
            roundIncrement = 0;
        }
        else {
            roundIncrement = 0x7F;
            if ( zSign ) {
     be4:	45 28 00 34 	be r9,r8,cb4 <roundAndPackFloat32+0xfc>
                if ( roundingMode == float_round_up ) roundIncrement = 0;
     be8:	34 01 00 02 	mvi r1,2
     bec:	44 81 00 34 	be r4,r1,cbc <roundAndPackFloat32+0x104>
            }
            else {
                if ( roundingMode == float_round_down ) roundIncrement = 0;
     bf0:	34 05 00 7f 	mvi r5,127
            }
        }
    }
    roundBits = zSig & 0x7F;
    if ( 0xFD <= (bits16) zExp ) {
     bf4:	20 c2 ff ff 	andi r2,r6,0xffff
     bf8:	34 01 00 fc 	mvi r1,252
            else {
                if ( roundingMode == float_round_down ) roundIncrement = 0;
            }
        }
    }
    roundBits = zSig & 0x7F;
     bfc:	20 e3 00 7f 	andi r3,r7,0x7f
     c00:	b4 a7 20 00 	add r4,r5,r7
    if ( 0xFD <= (bits16) zExp ) {
     c04:	50 22 00 05 	bgeu r1,r2,c18 <roundAndPackFloat32+0x60>
        if (    ( 0xFD < zExp )
     c08:	34 01 00 fd 	mvi r1,253
     c0c:	48 c1 00 1e 	bg r6,r1,c84 <roundAndPackFloat32+0xcc>
     c10:	44 c1 00 1c 	be r6,r1,c80 <roundAndPackFloat32+0xc8>
                  && ( (sbits32) ( zSig + roundIncrement ) < 0 ) )
           ) {
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
        }
        if ( zExp < 0 ) {
     c14:	48 06 00 2c 	bg r0,r6,cc4 <roundAndPackFloat32+0x10c>
            zExp = 0;
            roundBits = zSig & 0x7F;
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
        }
    }
    if ( roundBits ) float_exception_flags |= float_flag_inexact;
     c18:	5c 60 00 0d 	bne r3,r0,c4c <roundAndPackFloat32+0x94>
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
     c1c:	64 61 00 40 	cmpei r1,r3,64
     c20:	00 82 00 07 	srui r2,r4,7
     c24:	a0 28 08 00 	and r1,r1,r8
     c28:	a4 20 08 00 	not r1,r1
     c2c:	a0 22 10 00 	and r2,r1,r2
    if ( zSig == 0 ) zExp = 0;
     c30:	3c c3 00 17 	sli r3,r6,23
     c34:	5c 40 00 02 	bne r2,r0,c3c <roundAndPackFloat32+0x84>
     c38:	b8 40 18 00 	mv r3,r2
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
     c3c:	3d 21 00 1f 	sli r1,r9,31
     c40:	b4 41 08 00 	add r1,r2,r1
     c44:	b4 23 08 00 	add r1,r1,r3
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
    if ( zSig == 0 ) zExp = 0;
    return packFloat32( zSign, zExp, zSig );

}
     c48:	c3 a0 00 00 	ret
     c4c:	78 02 00 00 	mvhi r2,0x0
     c50:	38 42 2c 1c 	ori r2,r2,0x2c1c
            zExp = 0;
            roundBits = zSig & 0x7F;
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
        }
    }
    if ( roundBits ) float_exception_flags |= float_flag_inexact;
     c54:	28 41 00 00 	lw r1,(r2+0)
     c58:	38 21 00 01 	ori r1,r1,0x1
     c5c:	58 41 00 00 	sw (r2+0),r1
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
     c60:	64 61 00 40 	cmpei r1,r3,64
     c64:	00 82 00 07 	srui r2,r4,7
     c68:	a0 28 08 00 	and r1,r1,r8
     c6c:	a4 20 08 00 	not r1,r1
     c70:	a0 22 10 00 	and r2,r1,r2
    if ( zSig == 0 ) zExp = 0;
     c74:	3c c3 00 17 	sli r3,r6,23
     c78:	5c 40 ff f1 	bne r2,r0,c3c <roundAndPackFloat32+0x84>
     c7c:	e3 ff ff ef 	bi c38 <roundAndPackFloat32+0x80>
            }
        }
    }
    roundBits = zSig & 0x7F;
    if ( 0xFD <= (bits16) zExp ) {
        if (    ( 0xFD < zExp )
     c80:	4c 80 ff e6 	bge r4,r0,c18 <roundAndPackFloat32+0x60>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
     c84:	78 04 00 00 	mvhi r4,0x0
     c88:	38 84 2c 1c 	ori r4,r4,0x2c1c
     c8c:	28 82 00 00 	lw r2,(r4+0)
             || (    ( zExp == 0xFD )
                  && ( (sbits32) ( zSig + roundIncrement ) < 0 ) )
           ) {
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
     c90:	3d 23 00 1f 	sli r3,r9,31
     c94:	78 01 7f 80 	mvhi r1,0x7f80
     c98:	38 21 00 00 	ori r1,r1,0x0
     c9c:	64 a5 00 00 	cmpei r5,r5,0
     ca0:	b4 61 18 00 	add r3,r3,r1
     ca4:	38 42 00 09 	ori r2,r2,0x9
     ca8:	58 82 00 00 	sw (r4+0),r2
     cac:	c8 65 08 00 	sub r1,r3,r5
     cb0:	c3 a0 00 00 	ret
            roundIncrement = 0x7F;
            if ( zSign ) {
                if ( roundingMode == float_round_up ) roundIncrement = 0;
            }
            else {
                if ( roundingMode == float_round_down ) roundIncrement = 0;
     cb4:	34 01 00 03 	mvi r1,3
     cb8:	5c 81 ff ce 	bne r4,r1,bf0 <roundAndPackFloat32+0x38>
     cbc:	34 05 00 00 	mvi r5,0
     cc0:	e3 ff ff cd 	bi bf4 <roundAndPackFloat32+0x3c>
           ) {
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
        }
        if ( zExp < 0 ) {
            isTiny =
     cc4:	78 01 00 00 	mvhi r1,0x0
     cc8:	38 21 2c 20 	ori r1,r1,0x2c20
     ccc:	28 22 00 00 	lw r2,(r1+0)
     cd0:	34 03 ff ff 	mvi r3,-1
     cd4:	e8 66 18 00 	cmpg r3,r3,r6
     cd8:	64 42 00 01 	cmpei r2,r2,1
     cdc:	34 0a 00 01 	mvi r10,1
     ce0:	b8 43 10 00 	or r2,r2,r3
     ce4:	5c 40 00 02 	bne r2,r0,cec <roundAndPackFloat32+0x134>
     ce8:	6c 8a 00 00 	cmpgei r10,r4,0
                   ( float_detect_tininess == float_tininess_before_rounding )
                || ( zExp < -1 )
                || ( zSig + roundIncrement < 0x80000000 );
            shift32RightJamming( zSig, - zExp, &zSig );
     cec:	c8 06 10 00 	sub r2,r0,r6
    bits32 z;

    if ( count == 0 ) {
        z = a;
    }
    else if ( count < 32 ) {
     cf0:	34 01 00 1f 	mvi r1,31
     cf4:	48 41 00 06 	bg r2,r1,d0c <roundAndPackFloat32+0x154>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
     cf8:	bc e6 08 00 	sl r1,r7,r6
     cfc:	80 e2 10 00 	sru r2,r7,r2
     d00:	7c 21 00 00 	cmpnei r1,r1,0
     d04:	b8 22 38 00 	or r7,r1,r2
     d08:	e0 00 00 02 	bi d10 <roundAndPackFloat32+0x158>
    }
    else {
        z = ( a != 0 );
     d0c:	7c e7 00 00 	cmpnei r7,r7,0
            zExp = 0;
            roundBits = zSig & 0x7F;
     d10:	20 e3 00 7f 	andi r3,r7,0x7f
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
     d14:	7c 61 00 00 	cmpnei r1,r3,0
     d18:	b4 a7 20 00 	add r4,r5,r7
     d1c:	a1 41 08 00 	and r1,r10,r1
     d20:	b8 20 30 00 	mv r6,r1
     d24:	44 20 ff bd 	be r1,r0,c18 <roundAndPackFloat32+0x60>
     d28:	78 02 00 00 	mvhi r2,0x0
     d2c:	38 42 2c 1c 	ori r2,r2,0x2c1c
     d30:	28 41 00 00 	lw r1,(r2+0)
     d34:	b4 a7 20 00 	add r4,r5,r7
     d38:	34 06 00 00 	mvi r6,0
     d3c:	38 21 00 04 	ori r1,r1,0x4
     d40:	58 41 00 00 	sw (r2+0),r1
     d44:	e3 ff ff c4 	bi c54 <roundAndPackFloat32+0x9c>

00000d48 <normalizeRoundAndPackFloat32>:
point exponent.
-------------------------------------------------------------------------------
*/
static float32
 normalizeRoundAndPackFloat32( flag zSign, int16 zExp, bits32 zSig )
{
     d48:	37 9c ff fc 	addi sp,sp,-4
     d4c:	5b 9d 00 04 	sw (sp+4),ra
     d50:	b8 20 30 00 	mv r6,r1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
     d54:	38 01 ff ff 	mvu r1,0xffff
     d58:	b8 40 38 00 	mv r7,r2
     d5c:	b8 60 28 00 	mv r5,r3
        shiftCount += 16;
        a <<= 16;
     d60:	3c 62 00 10 	sli r2,r3,16
     d64:	34 04 00 10 	mvi r4,16
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
     d68:	50 23 00 03 	bgeu r1,r3,d74 <normalizeRoundAndPackFloat32+0x2c>
     d6c:	b8 60 10 00 	mv r2,r3
     d70:	34 04 00 00 	mvi r4,0
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
     d74:	78 01 00 ff 	mvhi r1,0xff
     d78:	38 21 ff ff 	ori r1,r1,0xffff
     d7c:	54 41 00 03 	bgu r2,r1,d88 <normalizeRoundAndPackFloat32+0x40>
        shiftCount += 8;
        a <<= 8;
     d80:	3c 42 00 08 	sli r2,r2,8
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
     d84:	34 84 00 08 	addi r4,r4,8
    int8 shiftCount;
	
    shiftCount = countLeadingZeros32( zSig ) - 1;
     d88:	00 42 00 18 	srui r2,r2,24
     d8c:	78 01 00 00 	mvhi r1,0x0
     d90:	3c 42 00 02 	sli r2,r2,2
     d94:	38 21 27 a0 	ori r1,r1,0x27a0
     d98:	b4 22 08 00 	add r1,r1,r2
     d9c:	28 23 00 00 	lw r3,(r1+0)
     da0:	34 82 ff ff 	addi r2,r4,-1
    return roundAndPackFloat32( zSign, zExp - shiftCount, zSig<<shiftCount );
     da4:	b8 c0 08 00 	mv r1,r6
static float32
 normalizeRoundAndPackFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    int8 shiftCount;
	
    shiftCount = countLeadingZeros32( zSig ) - 1;
     da8:	b4 43 10 00 	add r2,r2,r3
    return roundAndPackFloat32( zSign, zExp - shiftCount, zSig<<shiftCount );
     dac:	bc a2 18 00 	sl r3,r5,r2
     db0:	c8 e2 10 00 	sub r2,r7,r2
     db4:	fb ff ff 81 	calli bb8 <roundAndPackFloat32>

}
     db8:	2b 9d 00 04 	lw ra,(sp+4)
     dbc:	37 9c 00 04 	addi sp,sp,4
     dc0:	c3 a0 00 00 	ret

00000dc4 <int32_to_float32>:
the single-precision floating-point format.  The conversion is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 int32_to_float32( int32 a )
{
     dc4:	37 9c ff fc 	addi sp,sp,-4
     dc8:	5b 9d 00 04 	sw (sp+4),ra
     dcc:	b8 20 18 00 	mv r3,r1
    flag zSign;

    if ( a == 0 ) return 0;
     dd0:	44 60 00 09 	be r3,r0,df4 <int32_to_float32+0x30>
    if ( a == 0x80000000 ) return packFloat32( 1, 0x9E, 0 );
     dd4:	78 01 80 00 	mvhi r1,0x8000
     dd8:	38 21 00 00 	ori r1,r1,0x0
     ddc:	44 61 00 09 	be r3,r1,e00 <int32_to_float32+0x3c>
    zSign = ( a < 0 );
     de0:	00 61 00 1f 	srui r1,r3,31
    return normalizeRoundAndPackFloat32( zSign, 0x9C, zSign ? - a : a );
     de4:	44 20 00 02 	be r1,r0,dec <int32_to_float32+0x28>
     de8:	c8 03 18 00 	sub r3,r0,r3
     dec:	34 02 00 9c 	mvi r2,156
     df0:	fb ff ff d6 	calli d48 <normalizeRoundAndPackFloat32>

}
     df4:	2b 9d 00 04 	lw ra,(sp+4)
     df8:	37 9c 00 04 	addi sp,sp,4
     dfc:	c3 a0 00 00 	ret
float32 int32_to_float32( int32 a )
{
    flag zSign;

    if ( a == 0 ) return 0;
    if ( a == 0x80000000 ) return packFloat32( 1, 0x9E, 0 );
     e00:	78 01 cf 00 	mvhi r1,0xcf00
     e04:	38 21 00 00 	ori r1,r1,0x0
    zSign = ( a < 0 );
    return normalizeRoundAndPackFloat32( zSign, 0x9C, zSign ? - a : a );

}
     e08:	2b 9d 00 04 	lw ra,(sp+4)
     e0c:	37 9c 00 04 	addi sp,sp,4
     e10:	c3 a0 00 00 	ret

00000e14 <float32_to_int32>:
positive integer is returned.  Otherwise, if the conversion overflows, the
largest integer with the same sign as `a' is returned.
-------------------------------------------------------------------------------
*/
int32 float32_to_int32( float32 a )
{
     e14:	00 22 00 17 	srui r2,r1,23
     e18:	b8 20 18 00 	mv r3,r1
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
     e1c:	20 45 00 ff 	andi r5,r2,0xff
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
     e20:	78 01 00 7f 	mvhi r1,0x7f
     e24:	38 21 ff ff 	ori r1,r1,0xffff
    int8 roundingMode;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x96;
     e28:	34 a4 ff 6a 	addi r4,r5,-150
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
     e2c:	a0 61 30 00 	and r6,r3,r1
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
     e30:	00 67 00 1f 	srui r7,r3,31

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x96;
    if ( 0 <= shiftCount ) {
     e34:	48 04 00 1c 	bg r0,r4,ea4 <float32_to_int32+0x90>
        if ( 0x9E <= aExp ) {
     e38:	34 01 00 9d 	mvi r1,157
     e3c:	4c 25 00 12 	bge r1,r5,e84 <float32_to_int32+0x70>
            if ( a == 0xCF000000 ) return 0x80000000;
     e40:	78 01 cf 00 	mvhi r1,0xcf00
     e44:	38 21 00 00 	ori r1,r1,0x0
     e48:	44 61 00 40 	be r3,r1,f48 <float32_to_int32+0x134>
     e4c:	78 02 00 00 	mvhi r2,0x0
     e50:	38 42 2c 1c 	ori r2,r2,0x2c1c
     e54:	28 41 00 00 	lw r1,(r2+0)
     e58:	38 21 00 10 	ori r1,r1,0x10
     e5c:	58 41 00 00 	sw (r2+0),r1
            float_raise( float_flag_invalid );
            if ( ! aSign || ( ( aExp == 0xFF ) && aSig ) ) return 0x7FFFFFFF;
     e60:	44 e0 00 05 	be r7,r0,e74 <float32_to_int32+0x60>
     e64:	64 a1 00 ff 	cmpei r1,r5,255
     e68:	7c c2 00 00 	cmpnei r2,r6,0
     e6c:	a0 22 08 00 	and r1,r1,r2
     e70:	44 20 00 36 	be r1,r0,f48 <float32_to_int32+0x134>
            if ( aSign ) {
                z += ( roundingMode == float_round_down ) & zExtra;
                z = - z;
            }
            else {
                z += ( roundingMode == float_round_up ) & zExtra;
     e74:	78 03 7f ff 	mvhi r3,0x7fff
     e78:	38 63 ff ff 	ori r3,r3,0xffff
            }
        }
    }
    return z;

}
     e7c:	b8 60 08 00 	mv r1,r3
     e80:	c3 a0 00 00 	ret
            if ( a == 0xCF000000 ) return 0x80000000;
            float_raise( float_flag_invalid );
            if ( ! aSign || ( ( aExp == 0xFF ) && aSig ) ) return 0x7FFFFFFF;
            return 0x80000000;
        }
        z = ( aSig | 0x00800000 )<<shiftCount;
     e84:	78 01 00 80 	mvhi r1,0x80
     e88:	38 21 00 00 	ori r1,r1,0x0
     e8c:	b8 c1 08 00 	or r1,r6,r1
     e90:	bc 24 18 00 	sl r3,r1,r4
        if ( aSign ) z = - z;
     e94:	44 e0 ff fa 	be r7,r0,e7c <float32_to_int32+0x68>
        if ( roundingMode == float_round_nearest_even ) {
            if ( (sbits32) zExtra < 0 ) {
                ++z;
                if ( (bits32) ( zExtra<<1 ) == 0 ) z &= ~1;
            }
            if ( aSign ) z = - z;
     e98:	c8 03 18 00 	sub r3,r0,r3
            }
        }
    }
    return z;

}
     e9c:	b8 60 08 00 	mv r1,r3
     ea0:	c3 a0 00 00 	ret
        }
        z = ( aSig | 0x00800000 )<<shiftCount;
        if ( aSign ) z = - z;
    }
    else {
        if ( aExp < 0x7E ) {
     ea4:	34 01 00 7d 	mvi r1,125
     ea8:	48 a1 00 16 	bg r5,r1,f00 <float32_to_int32+0xec>
            zExtra = aExp | aSig;
     eac:	b8 a6 20 00 	or r4,r5,r6
     eb0:	34 03 00 00 	mvi r3,0
        else {
            aSig |= 0x00800000;
            zExtra = aSig<<( shiftCount & 31 );
            z = aSig>>( - shiftCount );
        }
        if ( zExtra ) float_exception_flags |= float_flag_inexact;
     eb4:	44 80 00 06 	be r4,r0,ecc <float32_to_int32+0xb8>
     eb8:	78 02 00 00 	mvhi r2,0x0
     ebc:	38 42 2c 1c 	ori r2,r2,0x2c1c
     ec0:	28 41 00 00 	lw r1,(r2+0)
     ec4:	38 21 00 01 	ori r1,r1,0x1
     ec8:	58 41 00 00 	sw (r2+0),r1
        roundingMode = float_rounding_mode;
     ecc:	78 01 00 00 	mvhi r1,0x0
     ed0:	38 21 2c 18 	ori r1,r1,0x2c18
     ed4:	28 21 00 00 	lw r1,(r1+0)
        if ( roundingMode == float_round_nearest_even ) {
     ed8:	5c 20 00 11 	bne r1,r0,f1c <float32_to_int32+0x108>
            if ( (sbits32) zExtra < 0 ) {
     edc:	4c 81 00 06 	bge r4,r1,ef4 <float32_to_int32+0xe0>
                ++z;
                if ( (bits32) ( zExtra<<1 ) == 0 ) z &= ~1;
     ee0:	b4 84 08 00 	add r1,r4,r4
        }
        if ( zExtra ) float_exception_flags |= float_flag_inexact;
        roundingMode = float_rounding_mode;
        if ( roundingMode == float_round_nearest_even ) {
            if ( (sbits32) zExtra < 0 ) {
                ++z;
     ee4:	34 63 00 01 	addi r3,r3,1
                if ( (bits32) ( zExtra<<1 ) == 0 ) z &= ~1;
     ee8:	5c 20 00 03 	bne r1,r0,ef4 <float32_to_int32+0xe0>
     eec:	34 01 ff fe 	mvi r1,-2
     ef0:	a0 61 18 00 	and r3,r3,r1
            }
            if ( aSign ) z = - z;
     ef4:	44 e0 ff e2 	be r7,r0,e7c <float32_to_int32+0x68>
     ef8:	c8 03 18 00 	sub r3,r0,r3
     efc:	e3 ff ff e8 	bi e9c <float32_to_int32+0x88>
        if ( aExp < 0x7E ) {
            zExtra = aExp | aSig;
            z = 0;
        }
        else {
            aSig |= 0x00800000;
     f00:	78 01 00 80 	mvhi r1,0x80
     f04:	38 21 00 00 	ori r1,r1,0x0
     f08:	b8 c1 08 00 	or r1,r6,r1
            zExtra = aSig<<( shiftCount & 31 );
            z = aSig>>( - shiftCount );
     f0c:	c8 04 10 00 	sub r2,r0,r4
     f10:	80 22 18 00 	sru r3,r1,r2
            zExtra = aExp | aSig;
            z = 0;
        }
        else {
            aSig |= 0x00800000;
            zExtra = aSig<<( shiftCount & 31 );
     f14:	bc 24 20 00 	sl r4,r1,r4
     f18:	e3 ff ff e7 	bi eb4 <float32_to_int32+0xa0>
                if ( (bits32) ( zExtra<<1 ) == 0 ) z &= ~1;
            }
            if ( aSign ) z = - z;
        }
        else {
            zExtra = ( zExtra != 0 );
     f1c:	7c 82 00 00 	cmpnei r2,r4,0
            if ( aSign ) {
     f20:	44 e0 00 06 	be r7,r0,f38 <float32_to_int32+0x124>
                z += ( roundingMode == float_round_down ) & zExtra;
     f24:	64 21 00 03 	cmpei r1,r1,3
     f28:	a0 41 08 00 	and r1,r2,r1
     f2c:	b4 23 08 00 	add r1,r1,r3
                z = - z;
     f30:	c8 01 18 00 	sub r3,r0,r1
     f34:	e3 ff ff d2 	bi e7c <float32_to_int32+0x68>
            }
            else {
                z += ( roundingMode == float_round_up ) & zExtra;
     f38:	64 21 00 02 	cmpei r1,r1,2
     f3c:	a0 41 08 00 	and r1,r2,r1
     f40:	b4 23 18 00 	add r3,r1,r3
     f44:	e3 ff ff ce 	bi e7c <float32_to_int32+0x68>
    shiftCount = aExp - 0x96;
    if ( 0 <= shiftCount ) {
        if ( 0x9E <= aExp ) {
            if ( a == 0xCF000000 ) return 0x80000000;
            float_raise( float_flag_invalid );
            if ( ! aSign || ( ( aExp == 0xFF ) && aSig ) ) return 0x7FFFFFFF;
     f48:	78 03 80 00 	mvhi r3,0x8000
     f4c:	38 63 00 00 	ori r3,r3,0x0
     f50:	e3 ff ff cb 	bi e7c <float32_to_int32+0x68>

00000f54 <float32_to_int32_round_to_zero>:
conversion overflows, the largest integer with the same sign as `a' is
returned.
-------------------------------------------------------------------------------
*/
int32 float32_to_int32_round_to_zero( float32 a )
{
     f54:	00 22 00 17 	srui r2,r1,23
     f58:	b8 20 18 00 	mv r3,r1
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
     f5c:	20 45 00 ff 	andi r5,r2,0xff
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
     f60:	78 01 00 7f 	mvhi r1,0x7f
     f64:	38 21 ff ff 	ori r1,r1,0xffff
    int32 z;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x9E;
     f68:	34 a4 ff 62 	addi r4,r5,-158
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
     f6c:	a0 61 30 00 	and r6,r3,r1
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
     f70:	00 67 00 1f 	srui r7,r3,31

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x9E;
    if ( 0 <= shiftCount ) {
     f74:	48 04 00 11 	bg r0,r4,fb8 <float32_to_int32_round_to_zero+0x64>
        if ( a == 0xCF000000 ) return 0x80000000;
     f78:	78 01 cf 00 	mvhi r1,0xcf00
     f7c:	38 21 00 00 	ori r1,r1,0x0
     f80:	44 61 00 0b 	be r3,r1,fac <float32_to_int32_round_to_zero+0x58>
     f84:	78 02 00 00 	mvhi r2,0x0
     f88:	38 42 2c 1c 	ori r2,r2,0x2c1c
     f8c:	28 41 00 00 	lw r1,(r2+0)
     f90:	38 21 00 10 	ori r1,r1,0x10
     f94:	58 41 00 00 	sw (r2+0),r1
        float_raise( float_flag_invalid );
        if ( ! aSign || ( ( aExp == 0xFF ) && aSig ) ) return 0x7FFFFFFF;
     f98:	44 e0 00 26 	be r7,r0,1030 <float32_to_int32_round_to_zero+0xdc>
     f9c:	64 a1 00 ff 	cmpei r1,r5,255
     fa0:	7c c2 00 00 	cmpnei r2,r6,0
     fa4:	a0 22 08 00 	and r1,r1,r2
     fa8:	5c 20 00 22 	bne r1,r0,1030 <float32_to_int32_round_to_zero+0xdc>
     fac:	78 04 80 00 	mvhi r4,0x8000
     fb0:	38 84 00 00 	ori r4,r4,0x0
     fb4:	e0 00 00 0c 	bi fe4 <float32_to_int32_round_to_zero+0x90>
        return 0x80000000;
    }
    else if ( aExp <= 0x7E ) {
     fb8:	34 01 00 7e 	mvi r1,126
     fbc:	48 a1 00 0c 	bg r5,r1,fec <float32_to_int32_round_to_zero+0x98>
        if ( aExp | aSig ) float_exception_flags |= float_flag_inexact;
     fc0:	b8 a6 08 00 	or r1,r5,r6
     fc4:	b8 20 20 00 	mv r4,r1
     fc8:	44 20 00 07 	be r1,r0,fe4 <float32_to_int32_round_to_zero+0x90>
     fcc:	78 02 00 00 	mvhi r2,0x0
     fd0:	38 42 2c 1c 	ori r2,r2,0x2c1c
     fd4:	28 41 00 00 	lw r1,(r2+0)
     fd8:	34 04 00 00 	mvi r4,0
     fdc:	38 21 00 01 	ori r1,r1,0x1
     fe0:	58 41 00 00 	sw (r2+0),r1
    if ( (bits32) ( aSig<<( shiftCount & 31 ) ) ) {
        float_exception_flags |= float_flag_inexact;
    }
    return aSign ? - z : z;

}
     fe4:	b8 80 08 00 	mv r1,r4
     fe8:	c3 a0 00 00 	ret
    }
    else if ( aExp <= 0x7E ) {
        if ( aExp | aSig ) float_exception_flags |= float_flag_inexact;
        return 0;
    }
    aSig = ( aSig | 0x00800000 )<<8;
     fec:	78 01 00 80 	mvhi r1,0x80
     ff0:	38 21 00 00 	ori r1,r1,0x0
     ff4:	b8 c1 08 00 	or r1,r6,r1
     ff8:	3c 21 00 08 	sli r1,r1,8
    z = aSig>>( - shiftCount );
     ffc:	c8 04 10 00 	sub r2,r0,r4
    if ( (bits32) ( aSig<<( shiftCount & 31 ) ) ) {
    1000:	bc 24 18 00 	sl r3,r1,r4
    else if ( aExp <= 0x7E ) {
        if ( aExp | aSig ) float_exception_flags |= float_flag_inexact;
        return 0;
    }
    aSig = ( aSig | 0x00800000 )<<8;
    z = aSig>>( - shiftCount );
    1004:	80 22 20 00 	sru r4,r1,r2
    if ( (bits32) ( aSig<<( shiftCount & 31 ) ) ) {
    1008:	44 60 00 06 	be r3,r0,1020 <float32_to_int32_round_to_zero+0xcc>
        float_exception_flags |= float_flag_inexact;
    100c:	78 02 00 00 	mvhi r2,0x0
    1010:	38 42 2c 1c 	ori r2,r2,0x2c1c
    1014:	28 41 00 00 	lw r1,(r2+0)
    1018:	38 21 00 01 	ori r1,r1,0x1
    101c:	58 41 00 00 	sw (r2+0),r1
    }
    return aSign ? - z : z;
    1020:	44 e0 ff f1 	be r7,r0,fe4 <float32_to_int32_round_to_zero+0x90>
    1024:	c8 04 20 00 	sub r4,r0,r4

}
    1028:	b8 80 08 00 	mv r1,r4
    102c:	c3 a0 00 00 	ret
    aSig = ( aSig | 0x00800000 )<<8;
    z = aSig>>( - shiftCount );
    if ( (bits32) ( aSig<<( shiftCount & 31 ) ) ) {
        float_exception_flags |= float_flag_inexact;
    }
    return aSign ? - z : z;
    1030:	78 04 7f ff 	mvhi r4,0x7fff
    1034:	38 84 ff ff 	ori r4,r4,0xffff
    1038:	e3 ff ff eb 	bi fe4 <float32_to_int32_round_to_zero+0x90>

0000103c <float32_round_to_int>:
operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_round_to_int( float32 a )
{
    103c:	37 9c ff fc 	addi sp,sp,-4
    1040:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1044:	00 22 00 17 	srui r2,r1,23
    bits32 lastBitMask, roundBitsMask;
    int8 roundingMode;
    float32 z;

    aExp = extractFloat32Exp( a );
    if ( 0x96 <= aExp ) {
    1048:	34 03 00 95 	mvi r3,149
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    104c:	20 44 00 ff 	andi r4,r2,0xff
operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_round_to_int( float32 a )
{
    1050:	b8 20 28 00 	mv r5,r1
    bits32 lastBitMask, roundBitsMask;
    int8 roundingMode;
    float32 z;

    aExp = extractFloat32Exp( a );
    if ( 0x96 <= aExp ) {
    1054:	4c 64 00 07 	bge r3,r4,1070 <float32_round_to_int+0x34>
        if ( ( aExp == 0xFF ) && extractFloat32Frac( a ) ) {
    1058:	34 02 00 ff 	mvi r2,255
    105c:	44 82 00 34 	be r4,r2,112c <float32_round_to_int+0xf0>
    }
    z &= ~ roundBitsMask;
    if ( z != a ) float_exception_flags |= float_flag_inexact;
    return z;

}
    1060:	b8 a0 08 00 	mv r1,r5
    1064:	2b 9d 00 04 	lw ra,(sp+4)
    1068:	37 9c 00 04 	addi sp,sp,4
    106c:	c3 a0 00 00 	ret
        if ( ( aExp == 0xFF ) && extractFloat32Frac( a ) ) {
            return propagateFloat32NaN( a, a );
        }
        return a;
    }
    if ( aExp <= 0x7E ) {
    1070:	34 07 00 7e 	mvi r7,126
    1074:	48 87 00 13 	bg r4,r7,10c0 <float32_round_to_int+0x84>
        if ( (bits32) ( a<<1 ) == 0 ) return a;
    1078:	b4 21 08 00 	add r1,r1,r1
    107c:	44 20 ff f9 	be r1,r0,1060 <float32_round_to_int+0x24>
        float_exception_flags |= float_flag_inexact;
    1080:	78 03 00 00 	mvhi r3,0x0
    1084:	38 63 2c 1c 	ori r3,r3,0x2c1c
    1088:	28 62 00 00 	lw r2,(r3+0)
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
    108c:	78 01 00 00 	mvhi r1,0x0
    1090:	38 21 2c 18 	ori r1,r1,0x2c18
    1094:	28 26 00 00 	lw r6,(r1+0)
        }
        return a;
    }
    if ( aExp <= 0x7E ) {
        if ( (bits32) ( a<<1 ) == 0 ) return a;
        float_exception_flags |= float_flag_inexact;
    1098:	38 42 00 01 	ori r2,r2,0x1
    109c:	58 62 00 00 	sw (r3+0),r2
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
    10a0:	34 01 00 02 	mvi r1,2
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    10a4:	00 a2 00 1f 	srui r2,r5,31
    }
    if ( aExp <= 0x7E ) {
        if ( (bits32) ( a<<1 ) == 0 ) return a;
        float_exception_flags |= float_flag_inexact;
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
    10a8:	44 c1 00 41 	be r6,r1,11ac <float32_round_to_int+0x170>
    10ac:	34 01 00 03 	mvi r1,3
    10b0:	44 c1 00 3a 	be r6,r1,1198 <float32_round_to_int+0x15c>
    10b4:	44 c0 00 2f 	be r6,r0,1170 <float32_round_to_int+0x134>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    10b8:	3c 45 00 1f 	sli r5,r2,31
    10bc:	e3 ff ff e9 	bi 1060 <float32_round_to_int+0x24>
    }
    lastBitMask = 1;
    lastBitMask <<= 0x96 - aExp;
    roundBitsMask = lastBitMask - 1;
    z = a;
    roundingMode = float_rounding_mode;
    10c0:	78 01 00 00 	mvhi r1,0x0
    10c4:	38 21 2c 18 	ori r1,r1,0x2c18
            return aSign ? 0x80000000 : 0x3F800000;
        }
        return packFloat32( aSign, 0, 0 );
    }
    lastBitMask = 1;
    lastBitMask <<= 0x96 - aExp;
    10c8:	34 02 00 96 	mvi r2,150
    10cc:	c8 44 10 00 	sub r2,r2,r4
    roundBitsMask = lastBitMask - 1;
    z = a;
    roundingMode = float_rounding_mode;
    10d0:	28 24 00 00 	lw r4,(r1+0)
            return aSign ? 0x80000000 : 0x3F800000;
        }
        return packFloat32( aSign, 0, 0 );
    }
    lastBitMask = 1;
    lastBitMask <<= 0x96 - aExp;
    10d4:	34 01 00 01 	mvi r1,1
    10d8:	bc 22 18 00 	sl r3,r1,r2
    roundBitsMask = lastBitMask - 1;
    10dc:	34 67 ff ff 	addi r7,r3,-1
    z = a;
    roundingMode = float_rounding_mode;
    if ( roundingMode == float_round_nearest_even ) {
    10e0:	44 80 00 1b 	be r4,r0,114c <float32_round_to_int+0x110>
        z += lastBitMask>>1;
        if ( ( z & roundBitsMask ) == 0 ) z &= ~ lastBitMask;
    }
    else if ( roundingMode != float_round_to_zero ) {
    10e4:	44 81 00 21 	be r4,r1,1168 <float32_round_to_int+0x12c>
        if ( extractFloat32Sign( z ) ^ ( roundingMode == float_round_up ) ) {
    10e8:	64 82 00 02 	cmpei r2,r4,2
    10ec:	00 a1 00 1f 	srui r1,r5,31
            z += roundBitsMask;
    10f0:	b4 e5 30 00 	add r6,r7,r5
    if ( roundingMode == float_round_nearest_even ) {
        z += lastBitMask>>1;
        if ( ( z & roundBitsMask ) == 0 ) z &= ~ lastBitMask;
    }
    else if ( roundingMode != float_round_to_zero ) {
        if ( extractFloat32Sign( z ) ^ ( roundingMode == float_round_up ) ) {
    10f4:	44 41 00 1d 	be r2,r1,1168 <float32_round_to_int+0x12c>
            z += roundBitsMask;
        }
    }
    z &= ~ roundBitsMask;
    10f8:	a4 e0 08 00 	not r1,r7
    10fc:	a0 c1 18 00 	and r3,r6,r1
    if ( z != a ) float_exception_flags |= float_flag_inexact;
    1100:	44 65 ff d8 	be r3,r5,1060 <float32_round_to_int+0x24>
    1104:	78 02 00 00 	mvhi r2,0x0
    1108:	38 42 2c 1c 	ori r2,r2,0x2c1c
    110c:	28 41 00 00 	lw r1,(r2+0)
    1110:	b8 60 28 00 	mv r5,r3
    1114:	38 21 00 01 	ori r1,r1,0x1
    1118:	58 41 00 00 	sw (r2+0),r1
    return z;

}
    111c:	b8 a0 08 00 	mv r1,r5
    1120:	2b 9d 00 04 	lw ra,(sp+4)
    1124:	37 9c 00 04 	addi sp,sp,4
    1128:	c3 a0 00 00 	ret
    int8 roundingMode;
    float32 z;

    aExp = extractFloat32Exp( a );
    if ( 0x96 <= aExp ) {
        if ( ( aExp == 0xFF ) && extractFloat32Frac( a ) ) {
    112c:	78 02 00 7f 	mvhi r2,0x7f
    1130:	38 42 ff ff 	ori r2,r2,0xffff
    1134:	a0 22 10 00 	and r2,r1,r2
    1138:	44 40 ff ca 	be r2,r0,1060 <float32_round_to_int+0x24>
            return propagateFloat32NaN( a, a );
    113c:	b8 20 10 00 	mv r2,r1
    1140:	fb ff fe 6f 	calli afc <propagateFloat32NaN>
    1144:	b8 20 28 00 	mv r5,r1
    1148:	e3 ff ff c6 	bi 1060 <float32_round_to_int+0x24>
    lastBitMask <<= 0x96 - aExp;
    roundBitsMask = lastBitMask - 1;
    z = a;
    roundingMode = float_rounding_mode;
    if ( roundingMode == float_round_nearest_even ) {
        z += lastBitMask>>1;
    114c:	80 61 08 00 	sru r1,r3,r1
    1150:	b4 25 30 00 	add r6,r1,r5
        if ( ( z & roundBitsMask ) == 0 ) z &= ~ lastBitMask;
    1154:	a0 c7 10 00 	and r2,r6,r7
    1158:	5c 44 ff e8 	bne r2,r4,10f8 <float32_round_to_int+0xbc>
    115c:	a4 60 08 00 	not r1,r3
    1160:	a0 c1 30 00 	and r6,r6,r1
    1164:	e3 ff ff e5 	bi 10f8 <float32_round_to_int+0xbc>
    }
    else if ( roundingMode != float_round_to_zero ) {
        if ( extractFloat32Sign( z ) ^ ( roundingMode == float_round_up ) ) {
            z += roundBitsMask;
    1168:	b8 a0 30 00 	mv r6,r5
    116c:	e3 ff ff e3 	bi 10f8 <float32_round_to_int+0xbc>
        if ( (bits32) ( a<<1 ) == 0 ) return a;
        float_exception_flags |= float_flag_inexact;
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
         case float_round_nearest_even:
            if ( ( aExp == 0x7E ) && extractFloat32Frac( a ) ) {
    1170:	5c 87 ff d2 	bne r4,r7,10b8 <float32_round_to_int+0x7c>
    1174:	78 01 00 7f 	mvhi r1,0x7f
    1178:	38 21 ff ff 	ori r1,r1,0xffff
    117c:	a0 a1 08 00 	and r1,r5,r1
    1180:	44 20 ff ce 	be r1,r0,10b8 <float32_round_to_int+0x7c>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1184:	3c 42 00 1f 	sli r2,r2,31
    1188:	78 01 3f 80 	mvhi r1,0x3f80
    118c:	38 21 00 00 	ori r1,r1,0x0
    1190:	b4 41 28 00 	add r5,r2,r1
    1194:	e3 ff ff b3 	bi 1060 <float32_round_to_int+0x24>
            if ( ( aExp == 0x7E ) && extractFloat32Frac( a ) ) {
                return packFloat32( aSign, 0x7F, 0 );
            }
            break;
         case float_round_down:
            return aSign ? 0xBF800000 : 0;
    1198:	b8 40 28 00 	mv r5,r2
    119c:	44 40 ff b1 	be r2,r0,1060 <float32_round_to_int+0x24>
    11a0:	78 05 bf 80 	mvhi r5,0xbf80
    11a4:	38 a5 00 00 	ori r5,r5,0x0
    11a8:	e3 ff ff ae 	bi 1060 <float32_round_to_int+0x24>
         case float_round_up:
            return aSign ? 0x80000000 : 0x3F800000;
    11ac:	5c 40 00 04 	bne r2,r0,11bc <float32_round_to_int+0x180>
    11b0:	78 05 3f 80 	mvhi r5,0x3f80
    11b4:	38 a5 00 00 	ori r5,r5,0x0
    11b8:	e3 ff ff aa 	bi 1060 <float32_round_to_int+0x24>
    11bc:	78 05 80 00 	mvhi r5,0x8000
    11c0:	38 a5 00 00 	ori r5,r5,0x0
    11c4:	e3 ff ff a7 	bi 1060 <float32_round_to_int+0x24>

000011c8 <addFloat32Sigs>:
addition is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 addFloat32Sigs( float32 a, float32 b, flag zSign )
{
    11c8:	37 9c ff fc 	addi sp,sp,-4
    11cc:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    11d0:	00 26 00 17 	srui r6,r1,23
    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 6;
    11d4:	00 47 00 17 	srui r7,r2,23
    11d8:	78 04 00 7f 	mvhi r4,0x7f
    11dc:	38 84 ff ff 	ori r4,r4,0xffff
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    11e0:	20 c6 00 ff 	andi r6,r6,0xff
    11e4:	20 e7 00 ff 	andi r7,r7,0xff
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 6;
    bSig <<= 6;
    11e8:	a0 44 28 00 	and r5,r2,r4

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    11ec:	c8 c7 48 00 	sub r9,r6,r7
    aSig <<= 6;
    11f0:	a0 24 20 00 	and r4,r1,r4
    11f4:	3c 8a 00 06 	sli r10,r4,6
addition is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 addFloat32Sigs( float32 a, float32 b, flag zSign )
{
    11f8:	b8 20 40 00 	mv r8,r1
    11fc:	b8 60 e8 00 	mv ra,r3
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 6;
    bSig <<= 6;
    1200:	3c a4 00 06 	sli r4,r5,6
    if ( 0 < expDiff ) {
    1204:	4c 09 00 1b 	bge r0,r9,1270 <addFloat32Sigs+0xa8>
        if ( aExp == 0xFF ) {
    1208:	34 03 00 ff 	mvi r3,255
    120c:	44 c3 00 15 	be r6,r3,1260 <addFloat32Sigs+0x98>
            if ( aSig ) return propagateFloat32NaN( a, b );
            return a;
        }
        if ( bExp == 0 ) {
    1210:	5c e0 00 21 	bne r7,r0,1294 <addFloat32Sigs+0xcc>
            --expDiff;
    1214:	35 29 ff ff 	addi r9,r9,-1
    1218:	78 08 20 00 	mvhi r8,0x2000
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
    121c:	5d 27 00 22 	bne r9,r7,12a4 <addFloat32Sigs+0xdc>
    1220:	78 08 20 00 	mvhi r8,0x2000
        zSig = 0x40000000 + aSig + bSig;
        zExp = aExp;
        goto roundAndPack;
    }
    aSig |= 0x20000000;
    zSig = ( aSig + bSig )<<1;
    1224:	39 08 00 00 	ori r8,r8,0x0
    1228:	b9 48 08 00 	or r1,r10,r8
    122c:	b4 24 18 00 	add r3,r1,r4
    1230:	b4 63 08 00 	add r1,r3,r3
    --zExp;
    if ( (sbits32) zSig < 0 ) {
    1234:	48 01 00 03 	bg r0,r1,1240 <addFloat32Sigs+0x78>
        zExp = aExp;
        goto roundAndPack;
    }
    aSig |= 0x20000000;
    zSig = ( aSig + bSig )<<1;
    --zExp;
    1238:	34 c6 ff ff 	addi r6,r6,-1
    123c:	b8 20 18 00 	mv r3,r1
    if ( (sbits32) zSig < 0 ) {
        zSig = aSig + bSig;
        ++zExp;
    }
 roundAndPack:
    return roundAndPackFloat32( zSign, zExp, zSig );
    1240:	bb a0 08 00 	mv r1,ra
    1244:	b8 c0 10 00 	mv r2,r6
    1248:	fb ff fe 5c 	calli bb8 <roundAndPackFloat32>
    124c:	b8 20 40 00 	mv r8,r1

}
    1250:	b9 00 08 00 	mv r1,r8
    1254:	2b 9d 00 04 	lw ra,(sp+4)
    1258:	37 9c 00 04 	addi sp,sp,4
    125c:	c3 a0 00 00 	ret
    expDiff = aExp - bExp;
    aSig <<= 6;
    bSig <<= 6;
    if ( 0 < expDiff ) {
        if ( aExp == 0xFF ) {
            if ( aSig ) return propagateFloat32NaN( a, b );
    1260:	45 40 ff fc 	be r10,r0,1250 <addFloat32Sigs+0x88>
        shift32RightJamming( aSig, - expDiff, &aSig );
        zExp = bExp;
    }
    else {
        if ( aExp == 0xFF ) {
            if ( aSig | bSig ) return propagateFloat32NaN( a, b );
    1264:	fb ff fe 26 	calli afc <propagateFloat32NaN>
    1268:	b8 20 40 00 	mv r8,r1
    126c:	e3 ff ff f9 	bi 1250 <addFloat32Sigs+0x88>
            bSig |= 0x20000000;
        }
        shift32RightJamming( bSig, expDiff, &bSig );
        zExp = aExp;
    }
    else if ( expDiff < 0 ) {
    1270:	5d 20 00 1a 	bne r9,r0,12d8 <addFloat32Sigs+0x110>
        }
        shift32RightJamming( aSig, - expDiff, &aSig );
        zExp = bExp;
    }
    else {
        if ( aExp == 0xFF ) {
    1274:	34 03 00 ff 	mvi r3,255
    1278:	44 c3 00 15 	be r6,r3,12cc <addFloat32Sigs+0x104>
            if ( aSig | bSig ) return propagateFloat32NaN( a, b );
            return a;
        }
        if ( aExp == 0 ) return packFloat32( zSign, 0, ( aSig + bSig )>>6 );
    127c:	44 c0 00 28 	be r6,r0,131c <addFloat32Sigs+0x154>
        zSig = 0x40000000 + aSig + bSig;
    1280:	78 01 40 00 	mvhi r1,0x4000
    1284:	38 21 00 00 	ori r1,r1,0x0
    1288:	b5 41 08 00 	add r1,r10,r1
    128c:	b4 24 18 00 	add r3,r1,r4
    1290:	e3 ff ff ec 	bi 1240 <addFloat32Sigs+0x78>
        }
        if ( bExp == 0 ) {
            --expDiff;
        }
        else {
            bSig |= 0x20000000;
    1294:	78 08 20 00 	mvhi r8,0x2000
    1298:	b9 00 08 00 	mv r1,r8
    129c:	38 21 00 00 	ori r1,r1,0x0
    12a0:	b8 81 20 00 	or r4,r4,r1
        z = a;
    }
    else if ( count < 32 ) {
    12a4:	34 01 00 1f 	mvi r1,31
    12a8:	49 21 00 07 	bg r9,r1,12c4 <addFloat32Sigs+0xfc>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    12ac:	c8 09 08 00 	sub r1,r0,r9
    12b0:	bc 81 08 00 	sl r1,r4,r1
    12b4:	80 89 10 00 	sru r2,r4,r9
    12b8:	7c 21 00 00 	cmpnei r1,r1,0
    12bc:	b8 22 20 00 	or r4,r1,r2
    12c0:	e3 ff ff d9 	bi 1224 <addFloat32Sigs+0x5c>
    }
    else {
        z = ( a != 0 );
    12c4:	7c 84 00 00 	cmpnei r4,r4,0
    12c8:	e3 ff ff d7 	bi 1224 <addFloat32Sigs+0x5c>
        shift32RightJamming( aSig, - expDiff, &aSig );
        zExp = bExp;
    }
    else {
        if ( aExp == 0xFF ) {
            if ( aSig | bSig ) return propagateFloat32NaN( a, b );
    12cc:	b8 8a 18 00 	or r3,r4,r10
    12d0:	44 60 ff e0 	be r3,r0,1250 <addFloat32Sigs+0x88>
    12d4:	e3 ff ff e4 	bi 1264 <addFloat32Sigs+0x9c>
        }
        shift32RightJamming( bSig, expDiff, &bSig );
        zExp = aExp;
    }
    else if ( expDiff < 0 ) {
        if ( bExp == 0xFF ) {
    12d8:	34 03 00 ff 	mvi r3,255
    12dc:	44 e3 00 18 	be r7,r3,133c <addFloat32Sigs+0x174>
            if ( bSig ) return propagateFloat32NaN( a, b );
            return packFloat32( zSign, 0xFF, 0 );
        }
        if ( aExp == 0 ) {
    12e0:	44 c0 00 14 	be r6,r0,1330 <addFloat32Sigs+0x168>
            ++expDiff;
        }
        else {
            aSig |= 0x20000000;
    12e4:	78 08 20 00 	mvhi r8,0x2000
    12e8:	b9 00 08 00 	mv r1,r8
    12ec:	38 21 00 00 	ori r1,r1,0x0
    12f0:	b9 41 50 00 	or r10,r10,r1
        }
        shift32RightJamming( aSig, - expDiff, &aSig );
    12f4:	c8 09 10 00 	sub r2,r0,r9
            return a;
        }
        if ( aExp == 0 ) return packFloat32( zSign, 0, ( aSig + bSig )>>6 );
        zSig = 0x40000000 + aSig + bSig;
        zExp = aExp;
        goto roundAndPack;
    12f8:	b8 e0 30 00 	mv r6,r7
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
    12fc:	44 40 ff ca 	be r2,r0,1224 <addFloat32Sigs+0x5c>
        z = a;
    }
    else if ( count < 32 ) {
    1300:	34 01 00 1f 	mvi r1,31
    1304:	48 41 00 14 	bg r2,r1,1354 <addFloat32Sigs+0x18c>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    1308:	bd 49 08 00 	sl r1,r10,r9
    130c:	81 42 10 00 	sru r2,r10,r2
    1310:	7c 21 00 00 	cmpnei r1,r1,0
    1314:	b8 22 50 00 	or r10,r1,r2
    1318:	e3 ff ff c3 	bi 1224 <addFloat32Sigs+0x5c>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    131c:	b4 8a 08 00 	add r1,r4,r10
    1320:	00 21 00 06 	srui r1,r1,6
    1324:	3f a2 00 1f 	sli r2,ra,31
    1328:	b4 22 40 00 	add r8,r1,r2
    132c:	e3 ff ff c9 	bi 1250 <addFloat32Sigs+0x88>
        if ( bExp == 0xFF ) {
            if ( bSig ) return propagateFloat32NaN( a, b );
            return packFloat32( zSign, 0xFF, 0 );
        }
        if ( aExp == 0 ) {
            ++expDiff;
    1330:	35 29 00 01 	addi r9,r9,1
    1334:	78 08 20 00 	mvhi r8,0x2000
    1338:	e3 ff ff ef 	bi 12f4 <addFloat32Sigs+0x12c>
        shift32RightJamming( bSig, expDiff, &bSig );
        zExp = aExp;
    }
    else if ( expDiff < 0 ) {
        if ( bExp == 0xFF ) {
            if ( bSig ) return propagateFloat32NaN( a, b );
    133c:	5c 80 ff ca 	bne r4,r0,1264 <addFloat32Sigs+0x9c>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1340:	3f a2 00 1f 	sli r2,ra,31
    1344:	78 01 7f 80 	mvhi r1,0x7f80
    1348:	38 21 00 00 	ori r1,r1,0x0
    134c:	b4 41 40 00 	add r8,r2,r1
    1350:	e3 ff ff c0 	bi 1250 <addFloat32Sigs+0x88>
    }
    else {
        z = ( a != 0 );
    1354:	7d 4a 00 00 	cmpnei r10,r10,0
    1358:	e3 ff ff b3 	bi 1224 <addFloat32Sigs+0x5c>

0000135c <subFloat32Sigs>:
result is a NaN.  The subtraction is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 subFloat32Sigs( float32 a, float32 b, flag zSign )
{
    135c:	37 9c ff fc 	addi sp,sp,-4
    1360:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1364:	00 26 00 17 	srui r6,r1,23
    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 7;
    1368:	00 47 00 17 	srui r7,r2,23
    136c:	78 04 00 7f 	mvhi r4,0x7f
    1370:	38 84 ff ff 	ori r4,r4,0xffff
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1374:	20 c6 00 ff 	andi r6,r6,0xff
    1378:	20 e7 00 ff 	andi r7,r7,0xff
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 7;
    bSig <<= 7;
    137c:	a0 44 28 00 	and r5,r2,r4

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    1380:	c8 c7 48 00 	sub r9,r6,r7
    aSig <<= 7;
    1384:	a0 24 20 00 	and r4,r1,r4
result is a NaN.  The subtraction is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 subFloat32Sigs( float32 a, float32 b, flag zSign )
{
    1388:	b8 20 40 00 	mv r8,r1
    138c:	b8 60 50 00 	mv r10,r3
    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 7;
    1390:	3c 84 00 07 	sli r4,r4,7
    bSig <<= 7;
    1394:	3c a5 00 07 	sli r5,r5,7
    if ( 0 < expDiff ) goto aExpBigger;
    1398:	49 20 00 0f 	bg r9,r0,13d4 <subFloat32Sigs+0x78>
    if ( expDiff < 0 ) goto bExpBigger;
    139c:	5d 20 00 3b 	bne r9,r0,1488 <subFloat32Sigs+0x12c>
    if ( aExp == 0xFF ) {
    13a0:	34 03 00 ff 	mvi r3,255
    13a4:	44 c3 00 30 	be r6,r3,1464 <subFloat32Sigs+0x108>
        if ( aSig | bSig ) return propagateFloat32NaN( a, b );
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( aExp == 0 ) {
    13a8:	5c c0 00 03 	bne r6,r0,13b4 <subFloat32Sigs+0x58>
    13ac:	34 06 00 01 	mvi r6,1
    13b0:	b8 c0 38 00 	mv r7,r6
        aExp = 1;
        bExp = 1;
    }
    if ( bSig < aSig ) goto aBigger;
    13b4:	54 85 00 10 	bgu r4,r5,13f4 <subFloat32Sigs+0x98>
    if ( aSig < bSig ) goto bBigger;
    13b8:	54 a4 00 45 	bgu r5,r4,14cc <subFloat32Sigs+0x170>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    13bc:	78 01 00 00 	mvhi r1,0x0
    13c0:	38 21 2c 18 	ori r1,r1,0x2c18
    13c4:	28 22 00 00 	lw r2,(r1+0)
    13c8:	64 42 00 03 	cmpei r2,r2,3
    13cc:	3c 48 00 1f 	sli r8,r2,31
    13d0:	e0 00 00 0f 	bi 140c <subFloat32Sigs+0xb0>
    zSig = bSig - aSig;
    zExp = bExp;
    zSign ^= 1;
    goto normalizeRoundAndPack;
 aExpBigger:
    if ( aExp == 0xFF ) {
    13d4:	34 03 00 ff 	mvi r3,255
    13d8:	44 c3 00 11 	be r6,r3,141c <subFloat32Sigs+0xc0>
        if ( aSig ) return propagateFloat32NaN( a, b );
        return a;
    }
    if ( bExp == 0 ) {
    13dc:	5c e0 00 14 	bne r7,r0,142c <subFloat32Sigs+0xd0>
        --expDiff;
    13e0:	35 29 ff ff 	addi r9,r9,-1
    13e4:	78 08 40 00 	mvhi r8,0x4000
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
    13e8:	5d 27 00 15 	bne r9,r7,143c <subFloat32Sigs+0xe0>
    }
    else {
        bSig |= 0x40000000;
    }
    shift32RightJamming( bSig, expDiff, &bSig );
    aSig |= 0x40000000;
    13ec:	39 08 00 00 	ori r8,r8,0x0
    13f0:	b8 88 20 00 	or r4,r4,r8
 aBigger:
    zSig = aSig - bSig;
    13f4:	c8 85 18 00 	sub r3,r4,r5
    13f8:	b8 c0 10 00 	mv r2,r6
    zExp = aExp;
 normalizeRoundAndPack:
    --zExp;
    return normalizeRoundAndPackFloat32( zSign, zExp, zSig );
    13fc:	b9 40 08 00 	mv r1,r10
    1400:	34 42 ff ff 	addi r2,r2,-1
    1404:	fb ff fe 51 	calli d48 <normalizeRoundAndPackFloat32>
    1408:	b8 20 40 00 	mv r8,r1

}
    140c:	b9 00 08 00 	mv r1,r8
    1410:	2b 9d 00 04 	lw ra,(sp+4)
    1414:	37 9c 00 04 	addi sp,sp,4
    1418:	c3 a0 00 00 	ret
    zExp = bExp;
    zSign ^= 1;
    goto normalizeRoundAndPack;
 aExpBigger:
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, b );
    141c:	44 80 ff fc 	be r4,r0,140c <subFloat32Sigs+0xb0>
    1420:	fb ff fd b7 	calli afc <propagateFloat32NaN>
    1424:	b8 20 40 00 	mv r8,r1
    1428:	e3 ff ff f9 	bi 140c <subFloat32Sigs+0xb0>
    }
    if ( bExp == 0 ) {
        --expDiff;
    }
    else {
        bSig |= 0x40000000;
    142c:	78 08 40 00 	mvhi r8,0x4000
    1430:	b9 00 08 00 	mv r1,r8
    1434:	38 21 00 00 	ori r1,r1,0x0
    1438:	b8 a1 28 00 	or r5,r5,r1
        z = a;
    }
    else if ( count < 32 ) {
    143c:	34 01 00 1f 	mvi r1,31
    1440:	49 21 00 07 	bg r9,r1,145c <subFloat32Sigs+0x100>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    1444:	c8 09 08 00 	sub r1,r0,r9
    1448:	bc a1 08 00 	sl r1,r5,r1
    144c:	80 a9 10 00 	sru r2,r5,r9
    1450:	7c 21 00 00 	cmpnei r1,r1,0
    1454:	b8 22 28 00 	or r5,r1,r2
    1458:	e3 ff ff e5 	bi 13ec <subFloat32Sigs+0x90>
    }
    else {
        z = ( a != 0 );
    145c:	7c a5 00 00 	cmpnei r5,r5,0
    1460:	e3 ff ff e3 	bi 13ec <subFloat32Sigs+0x90>
    aSig <<= 7;
    bSig <<= 7;
    if ( 0 < expDiff ) goto aExpBigger;
    if ( expDiff < 0 ) goto bExpBigger;
    if ( aExp == 0xFF ) {
        if ( aSig | bSig ) return propagateFloat32NaN( a, b );
    1464:	b8 a4 18 00 	or r3,r5,r4
    1468:	5c 60 ff ee 	bne r3,r0,1420 <subFloat32Sigs+0xc4>
    146c:	78 02 00 00 	mvhi r2,0x0
    1470:	38 42 2c 1c 	ori r2,r2,0x2c1c
    1474:	28 41 00 00 	lw r1,(r2+0)
    1478:	34 08 ff ff 	mvi r8,-1
    147c:	38 21 00 10 	ori r1,r1,0x10
    1480:	58 41 00 00 	sw (r2+0),r1
    1484:	e3 ff ff e2 	bi 140c <subFloat32Sigs+0xb0>
    }
    if ( bSig < aSig ) goto aBigger;
    if ( aSig < bSig ) goto bBigger;
    return packFloat32( float_rounding_mode == float_round_down, 0, 0 );
 bExpBigger:
    if ( bExp == 0xFF ) {
    1488:	34 03 00 ff 	mvi r3,255
    148c:	44 e3 00 17 	be r7,r3,14e8 <subFloat32Sigs+0x18c>
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign ^ 1, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
    1490:	44 c0 00 13 	be r6,r0,14dc <subFloat32Sigs+0x180>
        ++expDiff;
    }
    else {
        aSig |= 0x40000000;
    1494:	78 08 40 00 	mvhi r8,0x4000
    1498:	b9 00 08 00 	mv r1,r8
    149c:	38 21 00 00 	ori r1,r1,0x0
    14a0:	b8 81 20 00 	or r4,r4,r1
    }
    shift32RightJamming( aSig, - expDiff, &aSig );
    14a4:	c8 09 10 00 	sub r2,r0,r9
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
    14a8:	44 40 00 07 	be r2,r0,14c4 <subFloat32Sigs+0x168>
        z = a;
    }
    else if ( count < 32 ) {
    14ac:	34 01 00 1f 	mvi r1,31
    14b0:	48 41 00 15 	bg r2,r1,1504 <subFloat32Sigs+0x1a8>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    14b4:	bc 89 08 00 	sl r1,r4,r9
    14b8:	80 82 10 00 	sru r2,r4,r2
    14bc:	7c 21 00 00 	cmpnei r1,r1,0
    14c0:	b8 22 20 00 	or r4,r1,r2
    bSig |= 0x40000000;
    14c4:	39 08 00 00 	ori r8,r8,0x0
    14c8:	b8 a8 28 00 	or r5,r5,r8
 bBigger:
    zSig = bSig - aSig;
    14cc:	c8 a4 18 00 	sub r3,r5,r4
    zExp = bExp;
    zSign ^= 1;
    14d0:	19 4a 00 01 	xori r10,r10,0x1
    14d4:	b8 e0 10 00 	mv r2,r7
    14d8:	e3 ff ff c9 	bi 13fc <subFloat32Sigs+0xa0>
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign ^ 1, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
        ++expDiff;
    14dc:	35 29 00 01 	addi r9,r9,1
    14e0:	78 08 40 00 	mvhi r8,0x4000
    14e4:	e3 ff ff f0 	bi 14a4 <subFloat32Sigs+0x148>
    if ( bSig < aSig ) goto aBigger;
    if ( aSig < bSig ) goto bBigger;
    return packFloat32( float_rounding_mode == float_round_down, 0, 0 );
 bExpBigger:
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    14e8:	5c a0 ff ce 	bne r5,r0,1420 <subFloat32Sigs+0xc4>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    14ec:	19 42 00 01 	xori r2,r10,0x1
    14f0:	3c 42 00 1f 	sli r2,r2,31
    14f4:	78 01 7f 80 	mvhi r1,0x7f80
    14f8:	38 21 00 00 	ori r1,r1,0x0
    14fc:	b4 41 40 00 	add r8,r2,r1
    1500:	e3 ff ff c3 	bi 140c <subFloat32Sigs+0xb0>
    }
    else {
        z = ( a != 0 );
    1504:	7c 84 00 00 	cmpnei r4,r4,0
    1508:	e3 ff ff ef 	bi 14c4 <subFloat32Sigs+0x168>

0000150c <float32_add>:
and `b'.  The operation is performed according to the IEC/IEEE Standard for
Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_add( float32 a, float32 b )
{
    150c:	37 9c ff fc 	addi sp,sp,-4
    1510:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    1514:	00 24 00 1f 	srui r4,r1,31
{
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
    1518:	00 43 00 1f 	srui r3,r2,31
    151c:	44 83 00 06 	be r4,r3,1534 <float32_add+0x28>
        return addFloat32Sigs( a, b, aSign );
    }
    else {
        return subFloat32Sigs( a, b, aSign );
    1520:	b8 80 18 00 	mv r3,r4
    1524:	fb ff ff 8e 	calli 135c <subFloat32Sigs>
    }

}
    1528:	2b 9d 00 04 	lw ra,(sp+4)
    152c:	37 9c 00 04 	addi sp,sp,4
    1530:	c3 a0 00 00 	ret
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
        return addFloat32Sigs( a, b, aSign );
    1534:	b8 80 18 00 	mv r3,r4
    1538:	fb ff ff 24 	calli 11c8 <addFloat32Sigs>
    }
    else {
        return subFloat32Sigs( a, b, aSign );
    }

}
    153c:	2b 9d 00 04 	lw ra,(sp+4)
    1540:	37 9c 00 04 	addi sp,sp,4
    1544:	c3 a0 00 00 	ret

00001548 <float32_sub>:
`a' and `b'.  The operation is performed according to the IEC/IEEE Standard
for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_sub( float32 a, float32 b )
{
    1548:	37 9c ff fc 	addi sp,sp,-4
    154c:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    1550:	00 24 00 1f 	srui r4,r1,31
{
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
    1554:	00 43 00 1f 	srui r3,r2,31
    1558:	44 83 00 06 	be r4,r3,1570 <float32_sub+0x28>
        return subFloat32Sigs( a, b, aSign );
    }
    else {
        return addFloat32Sigs( a, b, aSign );
    155c:	b8 80 18 00 	mv r3,r4
    1560:	fb ff ff 1a 	calli 11c8 <addFloat32Sigs>
    }

}
    1564:	2b 9d 00 04 	lw ra,(sp+4)
    1568:	37 9c 00 04 	addi sp,sp,4
    156c:	c3 a0 00 00 	ret
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
        return subFloat32Sigs( a, b, aSign );
    1570:	b8 80 18 00 	mv r3,r4
    1574:	fb ff ff 7a 	calli 135c <subFloat32Sigs>
    }
    else {
        return addFloat32Sigs( a, b, aSign );
    }

}
    1578:	2b 9d 00 04 	lw ra,(sp+4)
    157c:	37 9c 00 04 	addi sp,sp,4
    1580:	c3 a0 00 00 	ret

00001584 <float32_mul>:
`a' and `b'.  The operation is performed according to the IEC/IEEE Standard
for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_mul( float32 a, float32 b )
{
    1584:	37 9c ff f4 	addi sp,sp,-12
    1588:	5b 8b 00 0c 	sw (sp+12),r11
    158c:	5b 8c 00 08 	sw (sp+8),r12
    1590:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1594:	00 24 00 17 	srui r4,r1,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1598:	78 03 00 7f 	mvhi r3,0x7f
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    159c:	00 46 00 17 	srui r6,r2,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    15a0:	38 63 ff ff 	ori r3,r3,0xffff
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    15a4:	20 8a 00 ff 	andi r10,r4,0xff
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    15a8:	98 22 28 00 	xor r5,r1,r2
    if ( aExp == 0xFF ) {
    15ac:	34 09 00 ff 	mvi r9,255
`a' and `b'.  The operation is performed according to the IEC/IEEE Standard
for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_mul( float32 a, float32 b )
{
    15b0:	b8 20 38 00 	mv r7,r1
    15b4:	b8 40 40 00 	mv r8,r2
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    15b8:	a0 43 58 00 	and r11,r2,r3
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    15bc:	a0 c9 20 00 	and r4,r6,r9
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    15c0:	00 ac 00 1f 	srui r12,r5,31
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    15c4:	a0 23 e8 00 	and ra,r1,r3
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
    15c8:	45 49 00 61 	be r10,r9,174c <float32_mul+0x1c8>
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
    15cc:	44 89 00 51 	be r4,r9,1710 <float32_mul+0x18c>
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
    15d0:	5d 40 00 13 	bne r10,r0,161c <float32_mul+0x98>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    15d4:	3d 85 00 1f 	sli r5,r12,31
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
    15d8:	47 aa 00 48 	be ra,r10,16f8 <float32_mul+0x174>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    15dc:	38 01 ff ff 	mvu r1,0xffff
    15e0:	50 3d 00 77 	bgeu r1,ra,17bc <float32_mul+0x238>
    15e4:	bb a0 18 00 	mv r3,ra
    15e8:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    15ec:	3c 63 00 08 	sli r3,r3,8
    15f0:	34 45 ff f8 	addi r5,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    15f4:	00 63 00 18 	srui r3,r3,24
    15f8:	78 01 00 00 	mvhi r1,0x0
    15fc:	3c 63 00 02 	sli r3,r3,2
    1600:	38 21 27 a0 	ori r1,r1,0x27a0
    1604:	b4 23 08 00 	add r1,r1,r3
    1608:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    160c:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1610:	b4 a2 10 00 	add r2,r5,r2
    *zSigPtr = aSig<<shiftCount;
    1614:	bf a2 e8 00 	sl ra,ra,r2
    *zExpPtr = 1 - shiftCount;
    1618:	c8 22 50 00 	sub r10,r1,r2
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    if ( bExp == 0 ) {
    161c:	5c 80 00 13 	bne r4,r0,1668 <float32_mul+0xe4>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1620:	3d 85 00 1f 	sli r5,r12,31
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
    1624:	45 64 00 35 	be r11,r4,16f8 <float32_mul+0x174>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    1628:	38 01 ff ff 	mvu r1,0xffff
    162c:	50 2b 00 6a 	bgeu r1,r11,17d4 <float32_mul+0x250>
    1630:	b9 60 18 00 	mv r3,r11
    1634:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    1638:	3c 63 00 08 	sli r3,r3,8
    163c:	34 44 ff f8 	addi r4,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1640:	00 63 00 18 	srui r3,r3,24
    1644:	78 01 00 00 	mvhi r1,0x0
    1648:	3c 63 00 02 	sli r3,r3,2
    164c:	38 21 27 a0 	ori r1,r1,0x27a0
    1650:	b4 23 08 00 	add r1,r1,r3
    1654:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    1658:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    165c:	b4 82 10 00 	add r2,r4,r2
    *zSigPtr = aSig<<shiftCount;
    1660:	bd 62 58 00 	sl r11,r11,r2
    *zExpPtr = 1 - shiftCount;
    1664:	c8 22 20 00 	sub r4,r1,r2
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    zExp = aExp + bExp - 0x7F;
    aSig = ( aSig | 0x00800000 )<<7;
    1668:	78 01 00 80 	mvhi r1,0x80
    166c:	38 21 00 00 	ori r1,r1,0x0
    bSig = ( bSig | 0x00800000 )<<8;
    1670:	b9 61 10 00 	or r2,r11,r1
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    zExp = aExp + bExp - 0x7F;
    aSig = ( aSig | 0x00800000 )<<7;
    1674:	bb a1 08 00 	or r1,ra,r1
    1678:	3c 21 00 07 	sli r1,r1,7
    bSig = ( bSig | 0x00800000 )<<8;
    167c:	3c 42 00 08 	sli r2,r2,8
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    1680:	00 3d 00 10 	srui ra,r1,16
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    1684:	00 4b 00 10 	srui r11,r2,16

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    1688:	20 29 ff ff 	andi r9,r1,0xffff
    168c:	20 48 ff ff 	andi r8,r2,0xffff
    zMiddleA = ( (bits32) aLow ) * bHigh;
    1690:	89 69 18 00 	mul r3,r11,r9
    zMiddleB = ( (bits32) aHigh ) * bLow;
    1694:	89 1d 10 00 	mul r2,r8,ra
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    zExp = aExp + bExp - 0x7F;
    1698:	35 41 ff 81 	addi r1,r10,-127
    169c:	b4 24 30 00 	add r6,r1,r4
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    16a0:	b4 62 08 00 	add r1,r3,r2
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    16a4:	54 41 00 36 	bgu r2,r1,177c <float32_mul+0x1f8>
    16a8:	34 07 00 00 	mvi r7,0

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    16ac:	89 09 18 00 	mul r3,r8,r9
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
    16b0:	3c 22 00 10 	sli r2,r1,16
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    16b4:	89 7d 20 00 	mul r4,r11,ra
    zMiddleA <<= 16;
    z1 += zMiddleA;
    16b8:	b4 43 18 00 	add r3,r2,r3
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    16bc:	00 21 00 10 	srui r1,r1,16
    16c0:	f4 43 10 00 	cmpgu r2,r2,r3
    16c4:	b4 24 08 00 	add r1,r1,r4
    16c8:	b4 22 08 00 	add r1,r1,r2
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    mul32To64( aSig, bSig, &zSig0, &zSig1 );
    zSig0 |= ( zSig1 != 0 );
    16cc:	7c 63 00 00 	cmpnei r3,r3,0
    16d0:	b4 27 08 00 	add r1,r1,r7
    16d4:	b8 23 18 00 	or r3,r1,r3
    if ( 0 <= (sbits32) ( zSig0<<1 ) ) {
    16d8:	b4 63 08 00 	add r1,r3,r3
    16dc:	48 01 00 03 	bg r0,r1,16e8 <float32_mul+0x164>
        zSig0 <<= 1;
        --zExp;
    16e0:	34 c6 ff ff 	addi r6,r6,-1
    16e4:	b8 20 18 00 	mv r3,r1
    }
    return roundAndPackFloat32( zSign, zExp, zSig0 );
    16e8:	b9 80 08 00 	mv r1,r12
    16ec:	b8 c0 10 00 	mv r2,r6
    16f0:	fb ff fd 32 	calli bb8 <roundAndPackFloat32>
    16f4:	b8 20 28 00 	mv r5,r1

}
    16f8:	b8 a0 08 00 	mv r1,r5
    16fc:	2b 9d 00 04 	lw ra,(sp+4)
    1700:	2b 8b 00 0c 	lw r11,(sp+12)
    1704:	2b 8c 00 08 	lw r12,(sp+8)
    1708:	37 9c 00 0c 	addi sp,sp,12
    170c:	c3 a0 00 00 	ret
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    1710:	5d 60 00 28 	bne r11,r0,17b0 <float32_mul+0x22c>
        if ( ( aExp | aSig ) == 0 ) {
    1714:	b9 5d 08 00 	or r1,r10,ra
    1718:	5c 2b 00 14 	bne r1,r11,1768 <float32_mul+0x1e4>
    171c:	78 02 00 00 	mvhi r2,0x0
    1720:	38 42 2c 1c 	ori r2,r2,0x2c1c
    1724:	28 41 00 00 	lw r1,(r2+0)
    1728:	34 05 ff ff 	mvi r5,-1
    172c:	38 21 00 10 	ori r1,r1,0x10
    1730:	58 41 00 00 	sw (r2+0),r1
        zSig0 <<= 1;
        --zExp;
    }
    return roundAndPackFloat32( zSign, zExp, zSig0 );

}
    1734:	b8 a0 08 00 	mv r1,r5
    1738:	2b 9d 00 04 	lw ra,(sp+4)
    173c:	2b 8b 00 0c 	lw r11,(sp+12)
    1740:	2b 8c 00 08 	lw r12,(sp+8)
    1744:	37 9c 00 0c 	addi sp,sp,12
    1748:	c3 a0 00 00 	ret
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig || ( ( bExp == 0xFF ) && bSig ) ) {
    174c:	5f a0 00 0f 	bne ra,r0,1788 <float32_mul+0x204>
    1750:	e4 89 10 00 	cmpe r2,r4,r9
    1754:	7d 61 00 00 	cmpnei r1,r11,0
    1758:	a0 41 10 00 	and r2,r2,r1
    175c:	5c 5d 00 0b 	bne r2,ra,1788 <float32_mul+0x204>
            return propagateFloat32NaN( a, b );
        }
        if ( ( bExp | bSig ) == 0 ) {
    1760:	b8 8b 08 00 	or r1,r4,r11
    1764:	44 22 ff ee 	be r1,r2,171c <float32_mul+0x198>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1768:	3d 82 00 1f 	sli r2,r12,31
    176c:	78 01 7f 80 	mvhi r1,0x7f80
    1770:	38 21 00 00 	ori r1,r1,0x0
    1774:	b4 41 28 00 	add r5,r2,r1
    1778:	e3 ff ff e0 	bi 16f8 <float32_mul+0x174>
    177c:	78 07 00 01 	mvhi r7,0x1
    1780:	38 e7 00 00 	ori r7,r7,0x0
    1784:	e3 ff ff ca 	bi 16ac <float32_mul+0x128>
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig || ( ( bExp == 0xFF ) && bSig ) ) {
            return propagateFloat32NaN( a, b );
    1788:	b8 e0 08 00 	mv r1,r7
    178c:	b9 00 10 00 	mv r2,r8
    1790:	fb ff fc db 	calli afc <propagateFloat32NaN>
    1794:	b8 20 28 00 	mv r5,r1
        zSig0 <<= 1;
        --zExp;
    }
    return roundAndPackFloat32( zSign, zExp, zSig0 );

}
    1798:	b8 a0 08 00 	mv r1,r5
    179c:	2b 9d 00 04 	lw ra,(sp+4)
    17a0:	2b 8b 00 0c 	lw r11,(sp+12)
    17a4:	2b 8c 00 08 	lw r12,(sp+8)
    17a8:	37 9c 00 0c 	addi sp,sp,12
    17ac:	c3 a0 00 00 	ret
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    17b0:	fb ff fc d3 	calli afc <propagateFloat32NaN>
    17b4:	b8 20 28 00 	mv r5,r1
    17b8:	e3 ff ff d0 	bi 16f8 <float32_mul+0x174>
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    17bc:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    17c0:	3f a3 00 10 	sli r3,ra,16
    }
    if ( a < 0x1000000 ) {
    17c4:	38 21 ff ff 	ori r1,r1,0xffff
    17c8:	50 23 00 09 	bgeu r1,r3,17ec <float32_mul+0x268>
    17cc:	34 05 00 08 	mvi r5,8
    17d0:	e3 ff ff 89 	bi 15f4 <float32_mul+0x70>
    17d4:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    17d8:	3d 63 00 10 	sli r3,r11,16
    }
    if ( a < 0x1000000 ) {
    17dc:	38 21 ff ff 	ori r1,r1,0xffff
    17e0:	50 23 00 05 	bgeu r1,r3,17f4 <float32_mul+0x270>
    17e4:	34 04 00 08 	mvi r4,8
    17e8:	e3 ff ff 96 	bi 1640 <float32_mul+0xbc>
    17ec:	34 02 00 18 	mvi r2,24
    17f0:	e3 ff ff 7f 	bi 15ec <float32_mul+0x68>
    17f4:	34 02 00 18 	mvi r2,24
    17f8:	e3 ff ff 90 	bi 1638 <float32_mul+0xb4>

000017fc <float32_div>:
by the corresponding value `b'.  The operation is performed according to
the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_div( float32 a, float32 b )
{
    17fc:	37 9c ff ec 	addi sp,sp,-20
    1800:	5b 8b 00 14 	sw (sp+20),r11
    1804:	5b 8c 00 10 	sw (sp+16),r12
    1808:	5b 8d 00 0c 	sw (sp+12),r13
    180c:	5b 8e 00 08 	sw (sp+8),r14
    1810:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1814:	00 26 00 17 	srui r6,r1,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1818:	78 03 00 7f 	mvhi r3,0x7f
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    181c:	00 47 00 17 	srui r7,r2,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1820:	38 63 ff ff 	ori r3,r3,0xffff
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    1824:	98 22 40 00 	xor r8,r1,r2
    if ( aExp == 0xFF ) {
    1828:	34 09 00 ff 	mvi r9,255
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    182c:	20 c6 00 ff 	andi r6,r6,0xff
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1830:	a0 43 50 00 	and r10,r2,r3
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1834:	a0 e9 38 00 	and r7,r7,r9
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    1838:	01 0e 00 1f 	srui r14,r8,31
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    183c:	a0 23 28 00 	and r5,r1,r3
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
    1840:	44 c9 00 73 	be r6,r9,1a0c <float32_div+0x210>
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
    1844:	44 e9 00 58 	be r7,r9,19a4 <float32_div+0x1a8>
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign, 0, 0 );
    }
    if ( bExp == 0 ) {
    1848:	5c e0 00 12 	bne r7,r0,1890 <float32_div+0x94>
        if ( bSig == 0 ) {
    184c:	45 47 00 7e 	be r10,r7,1a44 <float32_div+0x248>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    1850:	38 01 ff ff 	mvu r1,0xffff
    1854:	50 2a 00 9a 	bgeu r1,r10,1abc <float32_div+0x2c0>
    1858:	b9 40 18 00 	mv r3,r10
    185c:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    1860:	3c 63 00 08 	sli r3,r3,8
    1864:	34 44 ff f8 	addi r4,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1868:	00 63 00 18 	srui r3,r3,24
    186c:	78 01 00 00 	mvhi r1,0x0
    1870:	3c 63 00 02 	sli r3,r3,2
    1874:	38 21 27 a0 	ori r1,r1,0x27a0
    1878:	b4 23 08 00 	add r1,r1,r3
    187c:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    1880:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1884:	b4 82 10 00 	add r2,r4,r2
    *zSigPtr = aSig<<shiftCount;
    1888:	bd 42 50 00 	sl r10,r10,r2
    *zExpPtr = 1 - shiftCount;
    188c:	c8 22 38 00 	sub r7,r1,r2
            float_raise( float_flag_divbyzero );
            return packFloat32( zSign, 0xFF, 0 );
        }
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    if ( aExp == 0 ) {
    1890:	5c c0 00 13 	bne r6,r0,18dc <float32_div+0xe0>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1894:	3d c4 00 1f 	sli r4,r14,31
            return packFloat32( zSign, 0xFF, 0 );
        }
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
    1898:	44 a6 00 45 	be r5,r6,19ac <float32_div+0x1b0>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    189c:	38 01 ff ff 	mvu r1,0xffff
    18a0:	50 25 00 8d 	bgeu r1,r5,1ad4 <float32_div+0x2d8>
    18a4:	b8 a0 18 00 	mv r3,r5
    18a8:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    18ac:	3c 63 00 08 	sli r3,r3,8
    18b0:	34 44 ff f8 	addi r4,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    18b4:	00 63 00 18 	srui r3,r3,24
    18b8:	78 01 00 00 	mvhi r1,0x0
    18bc:	3c 63 00 02 	sli r3,r3,2
    18c0:	38 21 27 a0 	ori r1,r1,0x27a0
    18c4:	b4 23 08 00 	add r1,r1,r3
    18c8:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    18cc:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    18d0:	b4 82 10 00 	add r2,r4,r2
    *zSigPtr = aSig<<shiftCount;
    18d4:	bc a2 28 00 	sl r5,r5,r2
    *zExpPtr = 1 - shiftCount;
    18d8:	c8 22 30 00 	sub r6,r1,r2
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = aExp - bExp + 0x7D;
    aSig = ( aSig | 0x00800000 )<<7;
    18dc:	78 01 00 80 	mvhi r1,0x80
    18e0:	38 21 00 00 	ori r1,r1,0x0
    18e4:	b8 a1 10 00 	or r2,r5,r1
    18e8:	3c 4c 00 07 	sli r12,r2,7
    bSig = ( bSig | 0x00800000 )<<8;
    18ec:	b9 41 08 00 	or r1,r10,r1
    18f0:	3c 2b 00 08 	sli r11,r1,8
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = aExp - bExp + 0x7D;
    18f4:	c8 c7 10 00 	sub r2,r6,r7
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    if ( bSig <= ( aSig + aSig ) ) {
    18f8:	b5 8c 08 00 	add r1,r12,r12
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = aExp - bExp + 0x7D;
    18fc:	34 4d 00 7d 	addi r13,r2,125
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    if ( bSig <= ( aSig + aSig ) ) {
    1900:	55 61 00 03 	bgu r11,r1,190c <float32_div+0x110>
        aSig >>= 1;
    1904:	01 8c 00 01 	srui r12,r12,1
        ++zExp;
    1908:	35 ad 00 01 	addi r13,r13,1
    }
    zSig = estimateDiv64To32( aSig, 0, bSig );
    190c:	34 02 00 00 	mvi r2,0
    1910:	b9 80 08 00 	mv r1,r12
    1914:	b9 60 18 00 	mv r3,r11
    1918:	fb ff fc 0c 	calli 948 <estimateDiv64To32>
    191c:	b8 20 38 00 	mv r7,r1
    if ( ( zSig & 0x3F ) <= 2 ) {
    1920:	20 22 00 3f 	andi r2,r1,0x3f
    1924:	34 01 00 02 	mvi r1,2
    1928:	54 41 00 2c 	bgu r2,r1,19d8 <float32_div+0x1dc>
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    192c:	00 e9 00 10 	srui r9,r7,16
    zMiddleB = ( (bits32) aHigh ) * bLow;
    1930:	01 68 00 10 	srui r8,r11,16

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    1934:	21 64 ff ff 	andi r4,r11,0xffff
    1938:	20 e3 ff ff 	andi r3,r7,0xffff
    zMiddleA = ( (bits32) aLow ) * bHigh;
    193c:	89 24 10 00 	mul r2,r9,r4
    zMiddleB = ( (bits32) aHigh ) * bLow;
    1940:	88 68 08 00 	mul r1,r3,r8
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    1944:	b4 41 28 00 	add r5,r2,r1
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1948:	54 25 00 5a 	bgu r1,r5,1ab0 <float32_div+0x2b4>
    194c:	34 06 00 00 	mvi r6,0

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    1950:	88 64 18 00 	mul r3,r3,r4
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
    1954:	3c a2 00 10 	sli r2,r5,16
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1958:	89 28 08 00 	mul r1,r9,r8
    zMiddleA <<= 16;
    z1 += zMiddleA;
    195c:	b4 43 18 00 	add r3,r2,r3
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1960:	00 a5 00 10 	srui r5,r5,16
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    1964:	7c 64 00 00 	cmpnei r4,r3,0
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1968:	c9 81 08 00 	sub r1,r12,r1
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    196c:	f4 43 10 00 	cmpgu r2,r2,r3
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1970:	c8 25 08 00 	sub r1,r1,r5
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    1974:	c8 24 08 00 	sub r1,r1,r4
    1978:	c8 22 08 00 	sub r1,r1,r2
    197c:	c8 26 10 00 	sub r2,r1,r6
INLINE void
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    1980:	c8 03 18 00 	sub r3,r0,r3
        mul32To64( bSig, zSig, &term0, &term1 );
        sub64( aSig, 0, term0, term1, &rem0, &rem1 );
        while ( (sbits32) rem0 < 0 ) {
    1984:	4c 40 00 13 	bge r2,r0,19d0 <float32_div+0x1d4>
 add64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{
    bits32 z1;

    z1 = a1 + b1;
    1988:	b4 6b 20 00 	add r4,r3,r11
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
    198c:	f4 64 08 00 	cmpgu r1,r3,r4
            --zSig;
    1990:	34 e7 ff ff 	addi r7,r7,-1
    1994:	b4 41 10 00 	add r2,r2,r1
    }
    zSig = estimateDiv64To32( aSig, 0, bSig );
    if ( ( zSig & 0x3F ) <= 2 ) {
        mul32To64( bSig, zSig, &term0, &term1 );
        sub64( aSig, 0, term0, term1, &rem0, &rem1 );
        while ( (sbits32) rem0 < 0 ) {
    1998:	b8 80 18 00 	mv r3,r4
    199c:	4c 40 00 0c 	bge r2,r0,19cc <float32_div+0x1d0>
    19a0:	e3 ff ff fa 	bi 1988 <float32_div+0x18c>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    19a4:	3d c4 00 1f 	sli r4,r14,31
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    19a8:	5d 40 00 38 	bne r10,r0,1a88 <float32_div+0x28c>
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    19ac:	b8 80 08 00 	mv r1,r4
    19b0:	2b 9d 00 04 	lw ra,(sp+4)
    19b4:	2b 8b 00 14 	lw r11,(sp+20)
    19b8:	2b 8c 00 10 	lw r12,(sp+16)
    19bc:	2b 8d 00 0c 	lw r13,(sp+12)
    19c0:	2b 8e 00 08 	lw r14,(sp+8)
    19c4:	37 9c 00 14 	addi sp,sp,20
    19c8:	c3 a0 00 00 	ret
    }
    zSig = estimateDiv64To32( aSig, 0, bSig );
    if ( ( zSig & 0x3F ) <= 2 ) {
        mul32To64( bSig, zSig, &term0, &term1 );
        sub64( aSig, 0, term0, term1, &rem0, &rem1 );
        while ( (sbits32) rem0 < 0 ) {
    19cc:	b8 80 18 00 	mv r3,r4
            --zSig;
            add64( rem0, rem1, 0, bSig, &rem0, &rem1 );
        }
        zSig |= ( rem1 != 0 );
    19d0:	7c 61 00 00 	cmpnei r1,r3,0
    19d4:	b8 e1 38 00 	or r7,r7,r1
    }
    return roundAndPackFloat32( zSign, zExp, zSig );
    19d8:	b9 c0 08 00 	mv r1,r14
    19dc:	b9 a0 10 00 	mv r2,r13
    19e0:	b8 e0 18 00 	mv r3,r7
    19e4:	fb ff fc 75 	calli bb8 <roundAndPackFloat32>
    19e8:	b8 20 20 00 	mv r4,r1

}
    19ec:	b8 80 08 00 	mv r1,r4
    19f0:	2b 9d 00 04 	lw ra,(sp+4)
    19f4:	2b 8b 00 14 	lw r11,(sp+20)
    19f8:	2b 8c 00 10 	lw r12,(sp+16)
    19fc:	2b 8d 00 0c 	lw r13,(sp+12)
    1a00:	2b 8e 00 08 	lw r14,(sp+8)
    1a04:	37 9c 00 14 	addi sp,sp,20
    1a08:	c3 a0 00 00 	ret
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, b );
    1a0c:	5c a0 00 1f 	bne r5,r0,1a88 <float32_div+0x28c>
        if ( bExp == 0xFF ) {
    1a10:	44 e6 00 1d 	be r7,r6,1a84 <float32_div+0x288>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1a14:	3d c2 00 1f 	sli r2,r14,31
    1a18:	78 01 7f 80 	mvhi r1,0x7f80
    1a1c:	38 21 00 00 	ori r1,r1,0x0
    1a20:	b4 41 20 00 	add r4,r2,r1
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    1a24:	b8 80 08 00 	mv r1,r4
    1a28:	2b 9d 00 04 	lw ra,(sp+4)
    1a2c:	2b 8b 00 14 	lw r11,(sp+20)
    1a30:	2b 8c 00 10 	lw r12,(sp+16)
    1a34:	2b 8d 00 0c 	lw r13,(sp+12)
    1a38:	2b 8e 00 08 	lw r14,(sp+8)
    1a3c:	37 9c 00 14 	addi sp,sp,20
    1a40:	c3 a0 00 00 	ret
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign, 0, 0 );
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) {
            if ( ( aExp | aSig ) == 0 ) {
    1a44:	b8 c5 08 00 	or r1,r6,r5
    1a48:	5c 2a 00 29 	bne r1,r10,1aec <float32_div+0x2f0>
    1a4c:	78 02 00 00 	mvhi r2,0x0
    1a50:	38 42 2c 1c 	ori r2,r2,0x2c1c
    1a54:	28 41 00 00 	lw r1,(r2+0)
    1a58:	34 04 ff ff 	mvi r4,-1
    1a5c:	38 21 00 10 	ori r1,r1,0x10
    1a60:	58 41 00 00 	sw (r2+0),r1
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    1a64:	b8 80 08 00 	mv r1,r4
    1a68:	2b 9d 00 04 	lw ra,(sp+4)
    1a6c:	2b 8b 00 14 	lw r11,(sp+20)
    1a70:	2b 8c 00 10 	lw r12,(sp+16)
    1a74:	2b 8d 00 0c 	lw r13,(sp+12)
    1a78:	2b 8e 00 08 	lw r14,(sp+8)
    1a7c:	37 9c 00 14 	addi sp,sp,20
    1a80:	c3 a0 00 00 	ret
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, b );
        if ( bExp == 0xFF ) {
            if ( bSig ) return propagateFloat32NaN( a, b );
    1a84:	45 40 ff f2 	be r10,r0,1a4c <float32_div+0x250>
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    1a88:	fb ff fc 1d 	calli afc <propagateFloat32NaN>
    1a8c:	b8 20 20 00 	mv r4,r1
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    1a90:	b8 80 08 00 	mv r1,r4
    1a94:	2b 9d 00 04 	lw ra,(sp+4)
    1a98:	2b 8b 00 14 	lw r11,(sp+20)
    1a9c:	2b 8c 00 10 	lw r12,(sp+16)
    1aa0:	2b 8d 00 0c 	lw r13,(sp+12)
    1aa4:	2b 8e 00 08 	lw r14,(sp+8)
    1aa8:	37 9c 00 14 	addi sp,sp,20
    1aac:	c3 a0 00 00 	ret
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1ab0:	78 06 00 01 	mvhi r6,0x1
    1ab4:	38 c6 00 00 	ori r6,r6,0x0
    1ab8:	e3 ff ff a6 	bi 1950 <float32_div+0x154>
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    1abc:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    1ac0:	3d 43 00 10 	sli r3,r10,16
    }
    if ( a < 0x1000000 ) {
    1ac4:	38 21 ff ff 	ori r1,r1,0xffff
    1ac8:	50 23 00 13 	bgeu r1,r3,1b14 <float32_div+0x318>
    1acc:	34 04 00 08 	mvi r4,8
    1ad0:	e3 ff ff 66 	bi 1868 <float32_div+0x6c>
    1ad4:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    1ad8:	3c a3 00 10 	sli r3,r5,16
    }
    if ( a < 0x1000000 ) {
    1adc:	38 21 ff ff 	ori r1,r1,0xffff
    1ae0:	50 23 00 0f 	bgeu r1,r3,1b1c <float32_div+0x320>
    1ae4:	34 04 00 08 	mvi r4,8
    1ae8:	e3 ff ff 73 	bi 18b4 <float32_div+0xb8>
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) {
            if ( ( aExp | aSig ) == 0 ) {
                float_raise( float_flag_invalid );
                return float32_default_nan;
    1aec:	78 03 00 00 	mvhi r3,0x0
    1af0:	38 63 2c 1c 	ori r3,r3,0x2c1c
    1af4:	28 62 00 00 	lw r2,(r3+0)
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1af8:	3d c4 00 1f 	sli r4,r14,31
    1afc:	78 01 7f 80 	mvhi r1,0x7f80
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) {
            if ( ( aExp | aSig ) == 0 ) {
                float_raise( float_flag_invalid );
                return float32_default_nan;
    1b00:	38 42 00 02 	ori r2,r2,0x2
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1b04:	38 21 00 00 	ori r1,r1,0x0
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) {
            if ( ( aExp | aSig ) == 0 ) {
                float_raise( float_flag_invalid );
                return float32_default_nan;
    1b08:	58 62 00 00 	sw (r3+0),r2
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1b0c:	b4 81 20 00 	add r4,r4,r1
    1b10:	e3 ff ff a7 	bi 19ac <float32_div+0x1b0>
    1b14:	34 02 00 18 	mvi r2,24
    1b18:	e3 ff ff 52 	bi 1860 <float32_div+0x64>
    1b1c:	34 02 00 18 	mvi r2,24
    1b20:	e3 ff ff 63 	bi 18ac <float32_div+0xb0>

00001b24 <float32_rem>:
with respect to the corresponding value `b'.  The operation is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_rem( float32 a, float32 b )
{
    1b24:	37 9c ff d8 	addi sp,sp,-40
    1b28:	5b 8b 00 28 	sw (sp+40),r11
    1b2c:	5b 8c 00 24 	sw (sp+36),r12
    1b30:	5b 8d 00 20 	sw (sp+32),r13
    1b34:	5b 8e 00 1c 	sw (sp+28),r14
    1b38:	5b 8f 00 18 	sw (sp+24),r15
    1b3c:	5b 90 00 14 	sw (sp+20),r16
    1b40:	5b 91 00 10 	sw (sp+16),r17
    1b44:	5b 92 00 0c 	sw (sp+12),r18
    1b48:	5b 93 00 08 	sw (sp+8),r19
    1b4c:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1b50:	00 23 00 17 	srui r3,r1,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1b54:	78 04 00 7f 	mvhi r4,0x7f
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1b58:	00 45 00 17 	srui r5,r2,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1b5c:	38 84 ff ff 	ori r4,r4,0xffff
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1b60:	20 67 00 ff 	andi r7,r3,0xff
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    if ( aExp == 0xFF ) {
    1b64:	34 03 00 ff 	mvi r3,255
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1b68:	a0 44 40 00 	and r8,r2,r4
with respect to the corresponding value `b'.  The operation is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_rem( float32 a, float32 b )
{
    1b6c:	b8 20 80 00 	mv r16,r1
    1b70:	b8 40 30 00 	mv r6,r2
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1b74:	a0 a3 88 00 	and r17,r5,r3
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1b78:	a0 24 20 00 	and r4,r1,r4
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    if ( aExp == 0xFF ) {
    1b7c:	44 e3 00 82 	be r7,r3,1d84 <float32_rem+0x260>
            return propagateFloat32NaN( a, b );
        }
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( bExp == 0xFF ) {
    1b80:	46 23 00 16 	be r17,r3,1bd8 <float32_rem+0xb4>
        if ( bSig ) return propagateFloat32NaN( a, b );
        return a;
    }
    if ( bExp == 0 ) {
    1b84:	5e 20 00 29 	bne r17,r0,1c28 <float32_rem+0x104>
        if ( bSig == 0 ) {
    1b88:	5d 11 00 18 	bne r8,r17,1be8 <float32_rem+0xc4>
    1b8c:	78 02 00 00 	mvhi r2,0x0
    1b90:	38 42 2c 1c 	ori r2,r2,0x2c1c
    1b94:	28 41 00 00 	lw r1,(r2+0)
    1b98:	34 10 ff ff 	mvi r16,-1
    1b9c:	38 21 00 10 	ori r1,r1,0x10
    1ba0:	58 41 00 00 	sw (r2+0),r1
    }
    zSign = ( (sbits32) aSig < 0 );
    if ( zSign ) aSig = - aSig;
    return normalizeRoundAndPackFloat32( aSign ^ zSign, bExp, aSig );

}
    1ba4:	ba 00 08 00 	mv r1,r16
    1ba8:	2b 9d 00 04 	lw ra,(sp+4)
    1bac:	2b 8b 00 28 	lw r11,(sp+40)
    1bb0:	2b 8c 00 24 	lw r12,(sp+36)
    1bb4:	2b 8d 00 20 	lw r13,(sp+32)
    1bb8:	2b 8e 00 1c 	lw r14,(sp+28)
    1bbc:	2b 8f 00 18 	lw r15,(sp+24)
    1bc0:	2b 90 00 14 	lw r16,(sp+20)
    1bc4:	2b 91 00 10 	lw r17,(sp+16)
    1bc8:	2b 92 00 0c 	lw r18,(sp+12)
    1bcc:	2b 93 00 08 	lw r19,(sp+8)
    1bd0:	37 9c 00 28 	addi sp,sp,40
    1bd4:	c3 a0 00 00 	ret
        }
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    1bd8:	45 00 ff f3 	be r8,r0,1ba4 <float32_rem+0x80>
    1bdc:	fb ff fb c8 	calli afc <propagateFloat32NaN>
    1be0:	b8 20 80 00 	mv r16,r1
    1be4:	e3 ff ff f0 	bi 1ba4 <float32_rem+0x80>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    1be8:	38 01 ff ff 	mvu r1,0xffff
    1bec:	50 28 00 8c 	bgeu r1,r8,1e1c <float32_rem+0x2f8>
    1bf0:	b9 00 18 00 	mv r3,r8
    1bf4:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    1bf8:	3c 63 00 08 	sli r3,r3,8
    1bfc:	34 45 ff f8 	addi r5,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1c00:	00 63 00 18 	srui r3,r3,24
    1c04:	78 01 00 00 	mvhi r1,0x0
    1c08:	3c 63 00 02 	sli r3,r3,2
    1c0c:	38 21 27 a0 	ori r1,r1,0x27a0
    1c10:	b4 23 08 00 	add r1,r1,r3
    1c14:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    1c18:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1c1c:	b4 a2 10 00 	add r2,r5,r2
    *zSigPtr = aSig<<shiftCount;
    1c20:	bd 02 40 00 	sl r8,r8,r2
    *zExpPtr = 1 - shiftCount;
    1c24:	c8 22 88 00 	sub r17,r1,r2
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    if ( aExp == 0 ) {
    1c28:	5c e0 00 12 	bne r7,r0,1c70 <float32_rem+0x14c>
        if ( aSig == 0 ) return a;
    1c2c:	44 87 ff de 	be r4,r7,1ba4 <float32_rem+0x80>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    1c30:	38 01 ff ff 	mvu r1,0xffff
    1c34:	50 24 00 74 	bgeu r1,r4,1e04 <float32_rem+0x2e0>
    1c38:	b8 80 18 00 	mv r3,r4
    1c3c:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    1c40:	3c 63 00 08 	sli r3,r3,8
    1c44:	34 45 ff f8 	addi r5,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1c48:	00 63 00 18 	srui r3,r3,24
    1c4c:	78 01 00 00 	mvhi r1,0x0
    1c50:	3c 63 00 02 	sli r3,r3,2
    1c54:	38 21 27 a0 	ori r1,r1,0x27a0
    1c58:	b4 23 08 00 	add r1,r1,r3
    1c5c:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    1c60:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1c64:	b4 a2 10 00 	add r2,r5,r2
    *zSigPtr = aSig<<shiftCount;
    1c68:	bc 82 20 00 	sl r4,r4,r2
    *zExpPtr = 1 - shiftCount;
    1c6c:	c8 22 38 00 	sub r7,r1,r2
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return a;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    expDiff = aExp - bExp;
    aSig = ( aSig | 0x00800000 )<<8;
    1c70:	78 02 00 80 	mvhi r2,0x80
    1c74:	b8 40 08 00 	mv r1,r2
    1c78:	38 21 00 00 	ori r1,r1,0x0
    1c7c:	b8 81 08 00 	or r1,r4,r1
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return a;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    expDiff = aExp - bExp;
    1c80:	c8 f1 98 00 	sub r19,r7,r17
    aSig = ( aSig | 0x00800000 )<<8;
    1c84:	3c 2c 00 08 	sli r12,r1,8
    bSig = ( bSig | 0x00800000 )<<8;
    if ( expDiff < 0 ) {
    1c88:	4e 60 00 04 	bge r19,r0,1c98 <float32_rem+0x174>
        if ( expDiff < -1 ) return a;
    1c8c:	34 01 ff ff 	mvi r1,-1
    1c90:	5e 61 ff c5 	bne r19,r1,1ba4 <float32_rem+0x80>
        aSig >>= 1;
    1c94:	01 8c 00 01 	srui r12,r12,1
        if ( aSig == 0 ) return a;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    expDiff = aExp - bExp;
    aSig = ( aSig | 0x00800000 )<<8;
    bSig = ( bSig | 0x00800000 )<<8;
    1c98:	38 42 00 00 	ori r2,r2,0x0
    1c9c:	b9 02 08 00 	or r1,r8,r2
    1ca0:	3c 2d 00 08 	sli r13,r1,8
    if ( expDiff < 0 ) {
        if ( expDiff < -1 ) return a;
        aSig >>= 1;
    }
    q = ( bSig <= aSig );
    1ca4:	f1 8d 28 00 	cmpgeu r5,r12,r13
    if ( q ) aSig -= bSig;
    1ca8:	44 a0 00 02 	be r5,r0,1cb0 <float32_rem+0x18c>
    1cac:	c9 8d 60 00 	sub r12,r12,r13
    expDiff -= 32;
    1cb0:	36 6f ff e0 	addi r15,r19,-32
    while ( 0 < expDiff ) {
    1cb4:	01 ae 00 02 	srui r14,r13,2
    1cb8:	b9 e0 58 00 	mv r11,r15
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
    1cbc:	34 12 00 02 	mvi r18,2
        aSig >>= 1;
    }
    q = ( bSig <= aSig );
    if ( q ) aSig -= bSig;
    expDiff -= 32;
    while ( 0 < expDiff ) {
    1cc0:	49 e0 00 02 	bg r15,r0,1cc8 <float32_rem+0x1a4>
    1cc4:	e0 00 00 14 	bi 1d14 <float32_rem+0x1f0>
        q = estimateDiv64To32( aSig, 0, bSig );
    1cc8:	b9 80 08 00 	mv r1,r12
    1ccc:	34 02 00 00 	mvi r2,0
    1cd0:	b9 a0 18 00 	mv r3,r13
    1cd4:	fb ff fb 1d 	calli 948 <estimateDiv64To32>
        q = ( 2 < q ) ? q - 2 : 0;
    1cd8:	34 25 ff fe 	addi r5,r1,-2
    1cdc:	89 c5 10 00 	mul r2,r14,r5
    1ce0:	34 0c 00 00 	mvi r12,0
    1ce4:	54 32 00 26 	bgu r1,r18,1d7c <float32_rem+0x258>
    1ce8:	b9 80 28 00 	mv r5,r12
        aSig = - ( ( bSig>>2 ) * q );
        expDiff -= 30;
    1cec:	35 6b ff e2 	addi r11,r11,-30
        aSig >>= 1;
    }
    q = ( bSig <= aSig );
    if ( q ) aSig -= bSig;
    expDiff -= 32;
    while ( 0 < expDiff ) {
    1cf0:	49 60 ff f6 	bg r11,r0,1cc8 <float32_rem+0x1a4>
with respect to the corresponding value `b'.  The operation is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_rem( float32 a, float32 b )
{
    1cf4:	34 02 00 1e 	mvi r2,30
    1cf8:	36 61 ff df 	addi r1,r19,-33
    1cfc:	8c 22 08 00 	divu r1,r1,r2
    1d00:	35 e3 ff e2 	addi r3,r15,-30
    1d04:	3c 22 00 05 	sli r2,r1,5
    1d08:	b4 21 08 00 	add r1,r1,r1
    1d0c:	c8 22 08 00 	sub r1,r1,r2
    1d10:	b4 61 78 00 	add r15,r3,r1
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
        aSig = - ( ( bSig>>2 ) * q );
        expDiff -= 30;
    }
    expDiff += 32;
    1d14:	35 eb 00 20 	addi r11,r15,32
        q >>= 32 - expDiff;
        bSig >>= 2;
        aSig = ( ( aSig>>1 )<<( expDiff - 1 ) ) - bSig * q;
    }
    else {
        aSig >>= 2;
    1d18:	01 83 00 02 	srui r3,r12,2
        q = ( 2 < q ) ? q - 2 : 0;
        aSig = - ( ( bSig>>2 ) * q );
        expDiff -= 30;
    }
    expDiff += 32;
    if ( 0 < expDiff ) {
    1d1c:	4c 0b 00 0e 	bge r0,r11,1d54 <float32_rem+0x230>
        q = estimateDiv64To32( aSig, 0, bSig );
    1d20:	34 02 00 00 	mvi r2,0
    1d24:	b9 a0 18 00 	mv r3,r13
    1d28:	b9 80 08 00 	mv r1,r12
    1d2c:	fb ff fb 07 	calli 948 <estimateDiv64To32>
    1d30:	b8 20 10 00 	mv r2,r1
        q = ( 2 < q ) ? q - 2 : 0;
    1d34:	34 01 00 02 	mvi r1,2
    1d38:	54 41 00 2e 	bgu r2,r1,1df0 <float32_rem+0x2cc>
    1d3c:	34 05 00 00 	mvi r5,0
    1d40:	b8 a0 18 00 	mv r3,r5
        q >>= 32 - expDiff;
        bSig >>= 2;
        aSig = ( ( aSig>>1 )<<( expDiff - 1 ) ) - bSig * q;
    1d44:	01 81 00 01 	srui r1,r12,1
    1d48:	35 62 ff ff 	addi r2,r11,-1
    1d4c:	bc 22 08 00 	sl r1,r1,r2
    1d50:	c8 23 18 00 	sub r3,r1,r3
    }
    else {
        aSig >>= 2;
    1d54:	c8 0e 30 00 	sub r6,r0,r14
    1d58:	c8 6e 10 00 	sub r2,r3,r14
        bSig >>= 2;
    }
    do {
        alternateASig = aSig;
        ++q;
    1d5c:	b8 40 38 00 	mv r7,r2
    1d60:	b4 46 10 00 	add r2,r2,r6
        aSig -= bSig;
    } while ( 0 <= (sbits32) aSig );
    1d64:	b4 4e 08 00 	add r1,r2,r14
        aSig >>= 2;
        bSig >>= 2;
    }
    do {
        alternateASig = aSig;
        ++q;
    1d68:	34 a5 00 01 	addi r5,r5,1
    1d6c:	b4 c3 20 00 	add r4,r6,r3
        aSig -= bSig;
    } while ( 0 <= (sbits32) aSig );
    1d70:	48 01 00 0f 	bg r0,r1,1dac <float32_rem+0x288>
    1d74:	b8 80 18 00 	mv r3,r4
    1d78:	e3 ff ff f9 	bi 1d5c <float32_rem+0x238>
    q = ( bSig <= aSig );
    if ( q ) aSig -= bSig;
    expDiff -= 32;
    while ( 0 < expDiff ) {
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
    1d7c:	c8 02 60 00 	sub r12,r0,r2
    1d80:	e3 ff ff db 	bi 1cec <float32_rem+0x1c8>
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    if ( aExp == 0xFF ) {
        if ( aSig || ( ( bExp == 0xFF ) && bSig ) ) {
    1d84:	5c 80 00 05 	bne r4,r0,1d98 <float32_rem+0x274>
    1d88:	e6 23 08 00 	cmpe r1,r17,r3
    1d8c:	7d 02 00 00 	cmpnei r2,r8,0
    1d90:	a0 22 08 00 	and r1,r1,r2
    1d94:	44 24 ff 7e 	be r1,r4,1b8c <float32_rem+0x68>
            return propagateFloat32NaN( a, b );
    1d98:	ba 00 08 00 	mv r1,r16
    1d9c:	b8 c0 10 00 	mv r2,r6
    1da0:	fb ff fb 57 	calli afc <propagateFloat32NaN>
    1da4:	b8 20 80 00 	mv r16,r1
    1da8:	e3 ff ff 7f 	bi 1ba4 <float32_rem+0x80>
    do {
        alternateASig = aSig;
        ++q;
        aSig -= bSig;
    } while ( 0 <= (sbits32) aSig );
    sigMean = aSig + alternateASig;
    1dac:	b4 64 30 00 	add r6,r3,r4
    if ( ( sigMean < 0 ) || ( ( sigMean == 0 ) && ( q & 1 ) ) ) {
    1db0:	48 06 00 04 	bg r0,r6,1dc0 <float32_rem+0x29c>
    1db4:	5c c0 00 0d 	bne r6,r0,1de8 <float32_rem+0x2c4>
    1db8:	20 a1 00 01 	andi r1,r5,0x1
    1dbc:	44 26 00 0b 	be r1,r6,1de8 <float32_rem+0x2c4>
    1dc0:	b8 60 38 00 	mv r7,r3
        aSig = alternateASig;
    }
    zSign = ( (sbits32) aSig < 0 );
    1dc4:	00 e4 00 1f 	srui r4,r7,31
    if ( zSign ) aSig = - aSig;
    1dc8:	44 80 00 02 	be r4,r0,1dd0 <float32_rem+0x2ac>
    1dcc:	c8 03 18 00 	sub r3,r0,r3
    return normalizeRoundAndPackFloat32( aSign ^ zSign, bExp, aSig );
    1dd0:	02 01 00 1f 	srui r1,r16,31
    1dd4:	ba 20 10 00 	mv r2,r17
    1dd8:	98 81 08 00 	xor r1,r4,r1
    1ddc:	fb ff fb db 	calli d48 <normalizeRoundAndPackFloat32>
    1de0:	b8 20 80 00 	mv r16,r1
    1de4:	e3 ff ff 70 	bi 1ba4 <float32_rem+0x80>
        alternateASig = aSig;
        ++q;
        aSig -= bSig;
    } while ( 0 <= (sbits32) aSig );
    sigMean = aSig + alternateASig;
    if ( ( sigMean < 0 ) || ( ( sigMean == 0 ) && ( q & 1 ) ) ) {
    1de8:	b8 80 18 00 	mv r3,r4
    1dec:	e3 ff ff f6 	bi 1dc4 <float32_rem+0x2a0>
        expDiff -= 30;
    }
    expDiff += 32;
    if ( 0 < expDiff ) {
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
    1df0:	34 42 ff fe 	addi r2,r2,-2
    1df4:	c8 0b 08 00 	sub r1,r0,r11
    1df8:	80 41 28 00 	sru r5,r2,r1
    1dfc:	88 ae 18 00 	mul r3,r5,r14
    1e00:	e3 ff ff d1 	bi 1d44 <float32_rem+0x220>
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    1e04:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    1e08:	3c 83 00 10 	sli r3,r4,16
    }
    if ( a < 0x1000000 ) {
    1e0c:	38 21 ff ff 	ori r1,r1,0xffff
    1e10:	50 23 00 09 	bgeu r1,r3,1e34 <float32_rem+0x310>
    1e14:	34 05 00 08 	mvi r5,8
    1e18:	e3 ff ff 8c 	bi 1c48 <float32_rem+0x124>
    1e1c:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    1e20:	3d 03 00 10 	sli r3,r8,16
    }
    if ( a < 0x1000000 ) {
    1e24:	38 21 ff ff 	ori r1,r1,0xffff
    1e28:	50 23 00 05 	bgeu r1,r3,1e3c <float32_rem+0x318>
    1e2c:	34 05 00 08 	mvi r5,8
    1e30:	e3 ff ff 74 	bi 1c00 <float32_rem+0xdc>
    1e34:	34 02 00 18 	mvi r2,24
    1e38:	e3 ff ff 82 	bi 1c40 <float32_rem+0x11c>
    1e3c:	34 02 00 18 	mvi r2,24
    1e40:	e3 ff ff 6e 	bi 1bf8 <float32_rem+0xd4>

00001e44 <float32_sqrt>:
The operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_sqrt( float32 a )
{
    1e44:	37 9c ff ec 	addi sp,sp,-20
    1e48:	5b 8b 00 14 	sw (sp+20),r11
    1e4c:	5b 8c 00 10 	sw (sp+16),r12
    1e50:	5b 8d 00 0c 	sw (sp+12),r13
    1e54:	5b 8e 00 08 	sw (sp+8),r14
    1e58:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1e5c:	00 22 00 17 	srui r2,r1,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1e60:	78 03 00 7f 	mvhi r3,0x7f
    1e64:	38 63 ff ff 	ori r3,r3,0xffff
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1e68:	20 4c 00 ff 	andi r12,r2,0xff
    bits32 term0, term1;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
    1e6c:	34 02 00 ff 	mvi r2,255
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1e70:	a0 23 28 00 	and r5,r1,r3
The operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_sqrt( float32 a )
{
    1e74:	b8 20 20 00 	mv r4,r1
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    1e78:	00 23 00 1f 	srui r3,r1,31
    bits32 term0, term1;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
    1e7c:	45 82 00 55 	be r12,r2,1fd0 <float32_sqrt+0x18c>
        if ( aSig ) return propagateFloat32NaN( a, 0 );
        if ( ! aSign ) return a;
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( aSign ) {
    1e80:	44 60 00 11 	be r3,r0,1ec4 <float32_sqrt+0x80>
        if ( ( aExp | aSig ) == 0 ) return a;
    1e84:	b9 85 08 00 	or r1,r12,r5
    1e88:	44 20 00 07 	be r1,r0,1ea4 <float32_sqrt+0x60>
    1e8c:	78 02 00 00 	mvhi r2,0x0
    1e90:	38 42 2c 1c 	ori r2,r2,0x2c1c
    1e94:	28 41 00 00 	lw r1,(r2+0)
    1e98:	34 04 ff ff 	mvi r4,-1
    1e9c:	38 21 00 10 	ori r1,r1,0x10
    1ea0:	58 41 00 00 	sw (r2+0),r1
        }
    }
    shift32RightJamming( zSig, 1, &zSig );
    return roundAndPackFloat32( 0, zExp, zSig );

}
    1ea4:	b8 80 08 00 	mv r1,r4
    1ea8:	2b 9d 00 04 	lw ra,(sp+4)
    1eac:	2b 8b 00 14 	lw r11,(sp+20)
    1eb0:	2b 8c 00 10 	lw r12,(sp+16)
    1eb4:	2b 8d 00 0c 	lw r13,(sp+12)
    1eb8:	2b 8e 00 08 	lw r14,(sp+8)
    1ebc:	37 9c 00 14 	addi sp,sp,20
    1ec0:	c3 a0 00 00 	ret
    if ( aSign ) {
        if ( ( aExp | aSig ) == 0 ) return a;
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( aExp == 0 ) {
    1ec4:	5d 83 00 13 	bne r12,r3,1f10 <float32_sqrt+0xcc>
        if ( aSig == 0 ) return 0;
    1ec8:	b8 a0 20 00 	mv r4,r5
    1ecc:	44 ac ff f6 	be r5,r12,1ea4 <float32_sqrt+0x60>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    1ed0:	38 01 ff ff 	mvu r1,0xffff
    1ed4:	50 25 00 86 	bgeu r1,r5,20ec <float32_sqrt+0x2a8>
    1ed8:	b8 a0 18 00 	mv r3,r5
    1edc:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    1ee0:	3c 63 00 08 	sli r3,r3,8
    1ee4:	34 44 ff f8 	addi r4,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1ee8:	00 63 00 18 	srui r3,r3,24
    1eec:	78 01 00 00 	mvhi r1,0x0
    1ef0:	3c 63 00 02 	sli r3,r3,2
    1ef4:	38 21 27 a0 	ori r1,r1,0x27a0
    1ef8:	b4 23 08 00 	add r1,r1,r3
    1efc:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    1f00:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1f04:	b4 82 10 00 	add r2,r4,r2
    *zSigPtr = aSig<<shiftCount;
    1f08:	bc a2 28 00 	sl r5,r5,r2
    *zExpPtr = 1 - shiftCount;
    1f0c:	c8 22 60 00 	sub r12,r1,r2
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return 0;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = ( ( aExp - 0x7F )>>1 ) + 0x7E;
    aSig = ( aSig | 0x00800000 )<<8;
    1f10:	78 01 00 80 	mvhi r1,0x80
    1f14:	38 21 00 00 	ori r1,r1,0x0
    1f18:	b8 a1 08 00 	or r1,r5,r1
    1f1c:	3c 2d 00 08 	sli r13,r1,8
    };
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    if ( aExp & 1 ) {
    1f20:	21 8e 00 01 	andi r14,r12,0x1
        0x0200, 0x0179, 0x0109, 0x00AF, 0x0068, 0x0034, 0x0012, 0x0002
    };
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    1f24:	01 a1 00 1b 	srui r1,r13,27
    1f28:	20 23 00 0f 	andi r3,r1,0xf
    if ( aExp & 1 ) {
    1f2c:	5d c0 00 2c 	bne r14,r0,1fdc <float32_sqrt+0x198>
        z = 0x4000 + ( a>>17 ) - sqrtOddAdjustments[ index ];
        z = ( ( a / z )<<14 ) + ( z<<15 );
        a >>= 1;
    }
    else {
        z = 0x8000 + ( a>>17 ) - sqrtEvenAdjustments[ index ];
    1f30:	78 01 00 00 	mvhi r1,0x0
    1f34:	b4 63 10 00 	add r2,r3,r3
    1f38:	38 21 2b a0 	ori r1,r1,0x2ba0
    1f3c:	b4 22 08 00 	add r1,r1,r2
    1f40:	2c 23 00 00 	lhu r3,(r1+0)
    1f44:	01 a2 00 11 	srui r2,r13,17
    1f48:	38 01 80 00 	mvu r1,0x8000
    1f4c:	b4 41 10 00 	add r2,r2,r1
    1f50:	c8 43 10 00 	sub r2,r2,r3
        z = a / z + z;
    1f54:	8d a2 08 00 	divu r1,r13,r2
        z = ( 0x20000 <= z ) ? 0xFFFF8000 : ( z<<15 );
    1f58:	78 03 00 01 	mvhi r3,0x1
        z = ( ( a / z )<<14 ) + ( z<<15 );
        a >>= 1;
    }
    else {
        z = 0x8000 + ( a>>17 ) - sqrtEvenAdjustments[ index ];
        z = a / z + z;
    1f5c:	b4 22 08 00 	add r1,r1,r2
        z = ( 0x20000 <= z ) ? 0xFFFF8000 : ( z<<15 );
    1f60:	38 63 ff ff 	ori r3,r3,0xffff
    1f64:	3c 2b 00 0f 	sli r11,r1,15
    1f68:	50 61 00 02 	bgeu r3,r1,1f70 <float32_sqrt+0x12c>
    1f6c:	34 0b 80 00 	mvi r11,-32768
        if ( z <= a ) return (bits32) ( ( (sbits32) a )>>1 );
    1f70:	b9 a0 20 00 	mv r4,r13
    1f74:	55 6d 00 27 	bgu r11,r13,2010 <float32_sqrt+0x1cc>
    1f78:	15 a1 00 01 	sri r1,r13,1
    zSig = estimateSqrt32( aExp, aSig ) + 2;
    1f7c:	34 26 00 02 	addi r6,r1,2
    if ( ( zSig & 0x7F ) <= 5 ) {
    1f80:	20 c2 00 7f 	andi r2,r6,0x7f
    1f84:	34 01 00 05 	mvi r1,5
    1f88:	50 22 00 2a 	bgeu r1,r2,2030 <float32_sqrt+0x1ec>
    1f8c:	00 c2 00 01 	srui r2,r6,1
    1f90:	20 c1 00 01 	andi r1,r6,0x1
    1f94:	b8 22 18 00 	or r3,r1,r2
            }
            zSig |= ( ( rem0 | rem1 ) != 0 );
        }
    }
    shift32RightJamming( zSig, 1, &zSig );
    return roundAndPackFloat32( 0, zExp, zSig );
    1f98:	35 82 ff 81 	addi r2,r12,-127
    1f9c:	14 42 00 01 	sri r2,r2,1
    1fa0:	34 01 00 00 	mvi r1,0
    1fa4:	34 42 00 7e 	addi r2,r2,126
    1fa8:	fb ff fb 04 	calli bb8 <roundAndPackFloat32>
    1fac:	b8 20 20 00 	mv r4,r1

}
    1fb0:	b8 80 08 00 	mv r1,r4
    1fb4:	2b 9d 00 04 	lw ra,(sp+4)
    1fb8:	2b 8b 00 14 	lw r11,(sp+20)
    1fbc:	2b 8c 00 10 	lw r12,(sp+16)
    1fc0:	2b 8d 00 0c 	lw r13,(sp+12)
    1fc4:	2b 8e 00 08 	lw r14,(sp+8)
    1fc8:	37 9c 00 14 	addi sp,sp,20
    1fcc:	c3 a0 00 00 	ret

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, 0 );
    1fd0:	5c a0 00 43 	bne r5,r0,20dc <float32_sqrt+0x298>
        if ( ! aSign ) return a;
    1fd4:	5c 65 ff ae 	bne r3,r5,1e8c <float32_sqrt+0x48>
    1fd8:	e3 ff ff b3 	bi 1ea4 <float32_sqrt+0x60>
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    if ( aExp & 1 ) {
        z = 0x4000 + ( a>>17 ) - sqrtOddAdjustments[ index ];
    1fdc:	78 02 00 00 	mvhi r2,0x0
    1fe0:	b4 63 08 00 	add r1,r3,r3
    1fe4:	38 42 2b c0 	ori r2,r2,0x2bc0
    1fe8:	b4 41 10 00 	add r2,r2,r1
    1fec:	2c 43 00 00 	lhu r3,(r2+0)
    1ff0:	01 a1 00 11 	srui r1,r13,17
        z = ( ( a / z )<<14 ) + ( z<<15 );
        a >>= 1;
    1ff4:	01 a4 00 01 	srui r4,r13,1
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    if ( aExp & 1 ) {
        z = 0x4000 + ( a>>17 ) - sqrtOddAdjustments[ index ];
    1ff8:	34 21 40 00 	addi r1,r1,16384
    1ffc:	c8 23 08 00 	sub r1,r1,r3
        z = ( ( a / z )<<14 ) + ( z<<15 );
    2000:	8d a1 10 00 	divu r2,r13,r1
    2004:	3c 21 00 0f 	sli r1,r1,15
    2008:	3c 42 00 0e 	sli r2,r2,14
    200c:	b4 41 58 00 	add r11,r2,r1
        z = 0x8000 + ( a>>17 ) - sqrtEvenAdjustments[ index ];
        z = a / z + z;
        z = ( 0x20000 <= z ) ? 0xFFFF8000 : ( z<<15 );
        if ( z <= a ) return (bits32) ( ( (sbits32) a )>>1 );
    }
    return ( ( estimateDiv64To32( a, 0, z ) )>>1 ) + ( z>>1 );
    2010:	34 02 00 00 	mvi r2,0
    2014:	b8 80 08 00 	mv r1,r4
    2018:	b9 60 18 00 	mv r3,r11
    201c:	fb ff fa 4b 	calli 948 <estimateDiv64To32>
    2020:	00 21 00 01 	srui r1,r1,1
    2024:	01 62 00 01 	srui r2,r11,1
    2028:	b4 41 08 00 	add r1,r2,r1
    202c:	e3 ff ff d4 	bi 1f7c <float32_sqrt+0x138>
    }
    zExp = ( ( aExp - 0x7F )>>1 ) + 0x7E;
    aSig = ( aSig | 0x00800000 )<<8;
    zSig = estimateSqrt32( aExp, aSig ) + 2;
    if ( ( zSig & 0x7F ) <= 5 ) {
        if ( zSig < 2 ) {
    2030:	34 01 00 01 	mvi r1,1
    2034:	54 c1 00 04 	bgu r6,r1,2044 <float32_sqrt+0x200>
    2038:	78 03 7f ff 	mvhi r3,0x7fff
    203c:	38 63 ff ff 	ori r3,r3,0xffff
    2040:	e3 ff ff d6 	bi 1f98 <float32_sqrt+0x154>
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    2044:	00 c3 00 10 	srui r3,r6,16

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    2048:	20 c4 ff ff 	andi r4,r6,0xffff
    zMiddleA = ( (bits32) aLow ) * bHigh;
    204c:	88 64 08 00 	mul r1,r3,r4
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    2050:	b4 21 28 00 	add r5,r1,r1
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    2054:	54 25 00 2c 	bgu r1,r5,2104 <float32_sqrt+0x2c0>
    2058:	34 07 00 00 	mvi r7,0

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    205c:	88 84 20 00 	mul r4,r4,r4
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
    2060:	3c a2 00 10 	sli r2,r5,16
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    2064:	88 63 18 00 	mul r3,r3,r3
    2068:	81 ae 08 00 	sru r1,r13,r14
    zMiddleA <<= 16;
    z1 += zMiddleA;
    206c:	b4 44 20 00 	add r4,r2,r4
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    2070:	00 a5 00 10 	srui r5,r5,16
    2074:	c8 23 08 00 	sub r1,r1,r3
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    2078:	f4 44 10 00 	cmpgu r2,r2,r4
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    207c:	c8 25 08 00 	sub r1,r1,r5
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    2080:	7c 83 00 00 	cmpnei r3,r4,0
    2084:	c8 22 08 00 	sub r1,r1,r2
    2088:	c8 23 08 00 	sub r1,r1,r3
    208c:	c8 27 28 00 	sub r5,r1,r7
INLINE void
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    2090:	c8 04 18 00 	sub r3,r0,r4
        }
        else {
            aSig >>= aExp & 1;
            mul32To64( zSig, zSig, &term0, &term1 );
            sub64( aSig, 0, term0, term1, &rem0, &rem1 );
            while ( (sbits32) rem0 < 0 ) {
    2094:	4c a0 00 0b 	bge r5,r0,20c0 <float32_sqrt+0x27c>
                --zSig;
    2098:	34 c6 ff ff 	addi r6,r6,-1
 add64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{
    bits32 z1;

    z1 = a1 + b1;
    209c:	b4 c6 08 00 	add r1,r6,r6
    20a0:	38 21 00 01 	ori r1,r1,0x1
        }
        else {
            aSig >>= aExp & 1;
            mul32To64( zSig, zSig, &term0, &term1 );
            sub64( aSig, 0, term0, term1, &rem0, &rem1 );
            while ( (sbits32) rem0 < 0 ) {
    20a4:	b8 60 10 00 	mv r2,r3
    20a8:	b4 23 18 00 	add r3,r1,r3
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
    20ac:	f4 43 10 00 	cmpgu r2,r2,r3
    20b0:	00 c1 00 1f 	srui r1,r6,31
    20b4:	b4 22 08 00 	add r1,r1,r2
    20b8:	b4 a1 28 00 	add r5,r5,r1
    20bc:	48 05 ff f7 	bg r0,r5,2098 <float32_sqrt+0x254>
                --zSig;
                shortShift64Left( 0, zSig, 1, &term0, &term1 );
                term1 |= 1;
                add64( rem0, rem1, term0, term1, &rem0, &rem1 );
            }
            zSig |= ( ( rem0 | rem1 ) != 0 );
    20c0:	b8 a3 08 00 	or r1,r5,r3
    20c4:	7c 21 00 00 	cmpnei r1,r1,0
    20c8:	b8 26 08 00 	or r1,r1,r6
    20cc:	00 22 00 01 	srui r2,r1,1
    20d0:	20 21 00 01 	andi r1,r1,0x1
    20d4:	b8 22 18 00 	or r3,r1,r2
    20d8:	e3 ff ff b0 	bi 1f98 <float32_sqrt+0x154>

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, 0 );
    20dc:	34 02 00 00 	mvi r2,0
    20e0:	fb ff fa 87 	calli afc <propagateFloat32NaN>
    20e4:	b8 20 20 00 	mv r4,r1
    20e8:	e3 ff ff 6f 	bi 1ea4 <float32_sqrt+0x60>
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    20ec:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    20f0:	3c a3 00 10 	sli r3,r5,16
    }
    if ( a < 0x1000000 ) {
    20f4:	38 21 ff ff 	ori r1,r1,0xffff
    20f8:	50 23 00 06 	bgeu r1,r3,2110 <float32_sqrt+0x2cc>
    20fc:	34 04 00 08 	mvi r4,8
    2100:	e3 ff ff 7a 	bi 1ee8 <float32_sqrt+0xa4>
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    2104:	78 07 00 01 	mvhi r7,0x1
    2108:	38 e7 00 00 	ori r7,r7,0x0
    210c:	e3 ff ff d4 	bi 205c <float32_sqrt+0x218>
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    2110:	34 02 00 18 	mvi r2,24
    2114:	e3 ff ff 73 	bi 1ee0 <float32_sqrt+0x9c>

00002118 <float32_eq>:
corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_eq( float32 a, float32 b )
{
    2118:	b8 20 20 00 	mv r4,r1

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    211c:	00 21 00 17 	srui r1,r1,23
corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_eq( float32 a, float32 b )
{
    2120:	b8 40 28 00 	mv r5,r2

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2124:	20 21 00 ff 	andi r1,r1,0xff
    2128:	34 02 00 ff 	mvi r2,255
    212c:	44 22 00 0c 	be r1,r2,215c <float32_eq+0x44>
    2130:	00 a1 00 17 	srui r1,r5,23
    2134:	34 02 00 ff 	mvi r2,255
    2138:	20 21 00 ff 	andi r1,r1,0xff
    213c:	44 22 00 16 	be r1,r2,2194 <float32_eq+0x7c>
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );
    2140:	34 03 00 01 	mvi r3,1
    2144:	44 85 00 04 	be r4,r5,2154 <float32_eq+0x3c>
    2148:	b8 a4 08 00 	or r1,r5,r4
    214c:	b4 21 08 00 	add r1,r1,r1
    2150:	64 23 00 00 	cmpei r3,r1,0

}
    2154:	b8 60 08 00 	mv r1,r3
    2158:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_eq( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    215c:	78 01 00 7f 	mvhi r1,0x7f
    2160:	38 21 ff ff 	ori r1,r1,0xffff
    2164:	a0 81 08 00 	and r1,r4,r1
    2168:	44 20 ff f2 	be r1,r0,2130 <float32_eq+0x18>
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    216c:	00 81 00 16 	srui r1,r4,22
    2170:	34 02 01 fe 	mvi r2,510
    2174:	20 21 01 ff 	andi r1,r1,0x1ff
    2178:	44 22 00 0f 	be r1,r2,21b4 <float32_eq+0x9c>
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );
    217c:	00 a1 00 16 	srui r1,r5,22
    2180:	34 02 01 fe 	mvi r2,510
    2184:	20 21 01 ff 	andi r1,r1,0x1ff
    2188:	44 22 00 17 	be r1,r2,21e4 <float32_eq+0xcc>
    218c:	34 03 00 00 	mvi r3,0
    2190:	e3 ff ff f1 	bi 2154 <float32_eq+0x3c>
-------------------------------------------------------------------------------
*/
flag float32_eq( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2194:	78 01 00 7f 	mvhi r1,0x7f
    2198:	38 21 ff ff 	ori r1,r1,0xffff
    219c:	a0 a1 08 00 	and r1,r5,r1
    21a0:	44 20 ff e8 	be r1,r0,2140 <float32_eq+0x28>
    21a4:	00 81 00 16 	srui r1,r4,22
    21a8:	34 02 01 fe 	mvi r2,510
    21ac:	20 21 01 ff 	andi r1,r1,0x1ff
    21b0:	5c 22 ff f3 	bne r1,r2,217c <float32_eq+0x64>
    21b4:	78 01 00 3f 	mvhi r1,0x3f
    21b8:	38 21 ff ff 	ori r1,r1,0xffff
    21bc:	a0 81 08 00 	and r1,r4,r1
    21c0:	44 20 ff ef 	be r1,r0,217c <float32_eq+0x64>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    21c4:	78 02 00 00 	mvhi r2,0x0
    21c8:	38 42 2c 1c 	ori r2,r2,0x2c1c
    21cc:	28 41 00 00 	lw r1,(r2+0)
    21d0:	34 03 00 00 	mvi r3,0
    21d4:	38 21 00 10 	ori r1,r1,0x10
    21d8:	58 41 00 00 	sw (r2+0),r1
        }
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );

}
    21dc:	b8 60 08 00 	mv r1,r3
    21e0:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    21e4:	78 01 00 3f 	mvhi r1,0x3f
    21e8:	38 21 ff ff 	ori r1,r1,0xffff
    21ec:	a0 a1 08 00 	and r1,r5,r1
    21f0:	5c 20 ff f5 	bne r1,r0,21c4 <float32_eq+0xac>
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );
    21f4:	34 03 00 00 	mvi r3,0
    21f8:	e3 ff ff d7 	bi 2154 <float32_eq+0x3c>

000021fc <float32_le>:
performed according to the IEC/IEEE Standard for Binary Floating-point
Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_le( float32 a, float32 b )
{
    21fc:	b8 20 28 00 	mv r5,r1
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2200:	00 21 00 17 	srui r1,r1,23
performed according to the IEC/IEEE Standard for Binary Floating-point
Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_le( float32 a, float32 b )
{
    2204:	b8 40 20 00 	mv r4,r2
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2208:	20 21 00 ff 	andi r1,r1,0xff
    220c:	34 02 00 ff 	mvi r2,255
    2210:	44 22 00 14 	be r1,r2,2260 <float32_le+0x64>
    2214:	00 81 00 17 	srui r1,r4,23
    2218:	34 02 00 ff 	mvi r2,255
    221c:	20 21 00 ff 	andi r1,r1,0xff
    2220:	44 22 00 1c 	be r1,r2,2290 <float32_le+0x94>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    2224:	00 a2 00 1f 	srui r2,r5,31
        float_raise( float_flag_invalid );
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    2228:	00 81 00 1f 	srui r1,r4,31
    222c:	44 41 00 07 	be r2,r1,2248 <float32_le+0x4c>
    2230:	5c 40 00 09 	bne r2,r0,2254 <float32_le+0x58>
    2234:	b8 85 08 00 	or r1,r4,r5
    2238:	b4 21 08 00 	add r1,r1,r1
    223c:	64 23 00 00 	cmpei r3,r1,0
    return ( a == b ) || ( aSign ^ ( a < b ) );

}
    2240:	b8 60 08 00 	mv r1,r3
    2244:	c3 a0 00 00 	ret
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );
    2248:	f4 85 08 00 	cmpgu r1,r4,r5
    224c:	fc 22 18 00 	cmpne r3,r1,r2
    2250:	5c a4 ff fc 	bne r5,r4,2240 <float32_le+0x44>
    2254:	34 03 00 01 	mvi r3,1

}
    2258:	b8 60 08 00 	mv r1,r3
    225c:	c3 a0 00 00 	ret
*/
flag float32_le( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2260:	78 01 00 7f 	mvhi r1,0x7f
    2264:	38 21 ff ff 	ori r1,r1,0xffff
    2268:	a0 a1 08 00 	and r1,r5,r1
    226c:	44 20 ff ea 	be r1,r0,2214 <float32_le+0x18>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    2270:	78 02 00 00 	mvhi r2,0x0
    2274:	38 42 2c 1c 	ori r2,r2,0x2c1c
    2278:	28 41 00 00 	lw r1,(r2+0)
    227c:	34 03 00 00 	mvi r3,0
    2280:	38 21 00 10 	ori r1,r1,0x10
    2284:	58 41 00 00 	sw (r2+0),r1
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );

}
    2288:	b8 60 08 00 	mv r1,r3
    228c:	c3 a0 00 00 	ret
*/
flag float32_le( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2290:	78 01 00 7f 	mvhi r1,0x7f
    2294:	38 21 ff ff 	ori r1,r1,0xffff
    2298:	a0 81 08 00 	and r1,r4,r1
    229c:	44 20 ff e2 	be r1,r0,2224 <float32_le+0x28>
    22a0:	78 02 00 00 	mvhi r2,0x0
    22a4:	38 42 2c 1c 	ori r2,r2,0x2c1c
    22a8:	28 41 00 00 	lw r1,(r2+0)
    22ac:	34 03 00 00 	mvi r3,0
    22b0:	38 21 00 10 	ori r1,r1,0x10
    22b4:	58 41 00 00 	sw (r2+0),r1
    22b8:	e3 ff ff f4 	bi 2288 <float32_le+0x8c>

000022bc <float32_lt>:
the corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt( float32 a, float32 b )
{
    22bc:	b8 20 28 00 	mv r5,r1
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    22c0:	00 21 00 17 	srui r1,r1,23
the corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt( float32 a, float32 b )
{
    22c4:	b8 40 20 00 	mv r4,r2
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    22c8:	20 21 00 ff 	andi r1,r1,0xff
    22cc:	34 02 00 ff 	mvi r2,255
    22d0:	44 22 00 11 	be r1,r2,2314 <float32_lt+0x58>
    22d4:	00 81 00 17 	srui r1,r4,23
    22d8:	34 02 00 ff 	mvi r2,255
    22dc:	20 21 00 ff 	andi r1,r1,0xff
    22e0:	44 22 00 19 	be r1,r2,2344 <float32_lt+0x88>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    22e4:	00 a2 00 1f 	srui r2,r5,31
        float_raise( float_flag_invalid );
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    22e8:	00 81 00 1f 	srui r1,r4,31
    22ec:	44 41 00 1d 	be r2,r1,2360 <float32_lt+0xa4>
    22f0:	5c 40 00 04 	bne r2,r0,2300 <float32_lt+0x44>
    return ( a != b ) && ( aSign ^ ( a < b ) );
    22f4:	34 03 00 00 	mvi r3,0

}
    22f8:	b8 60 08 00 	mv r1,r3
    22fc:	c3 a0 00 00 	ret
        float_raise( float_flag_invalid );
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    2300:	b8 85 08 00 	or r1,r4,r5
    2304:	b4 21 08 00 	add r1,r1,r1
    2308:	7c 23 00 00 	cmpnei r3,r1,0
    return ( a != b ) && ( aSign ^ ( a < b ) );

}
    230c:	b8 60 08 00 	mv r1,r3
    2310:	c3 a0 00 00 	ret
*/
flag float32_lt( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2314:	78 01 00 7f 	mvhi r1,0x7f
    2318:	38 21 ff ff 	ori r1,r1,0xffff
    231c:	a0 a1 08 00 	and r1,r5,r1
    2320:	44 20 ff ed 	be r1,r0,22d4 <float32_lt+0x18>
    2324:	78 02 00 00 	mvhi r2,0x0
    2328:	38 42 2c 1c 	ori r2,r2,0x2c1c
    232c:	28 41 00 00 	lw r1,(r2+0)
    2330:	34 03 00 00 	mvi r3,0
    2334:	38 21 00 10 	ori r1,r1,0x10
    2338:	58 41 00 00 	sw (r2+0),r1
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    return ( a != b ) && ( aSign ^ ( a < b ) );

}
    233c:	b8 60 08 00 	mv r1,r3
    2340:	c3 a0 00 00 	ret
*/
flag float32_lt( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2344:	78 01 00 7f 	mvhi r1,0x7f
    2348:	38 21 ff ff 	ori r1,r1,0xffff
    234c:	a0 81 08 00 	and r1,r4,r1
    2350:	5c 20 ff f5 	bne r1,r0,2324 <float32_lt+0x68>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    2354:	00 a2 00 1f 	srui r2,r5,31
        float_raise( float_flag_invalid );
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    2358:	00 81 00 1f 	srui r1,r4,31
    235c:	5c 41 ff e5 	bne r2,r1,22f0 <float32_lt+0x34>
    return ( a != b ) && ( aSign ^ ( a < b ) );
    2360:	f4 85 08 00 	cmpgu r1,r4,r5
    2364:	fc 22 18 00 	cmpne r3,r1,r2
    2368:	44 a4 ff e3 	be r5,r4,22f4 <float32_lt+0x38>

}
    236c:	b8 60 08 00 	mv r1,r3
    2370:	c3 a0 00 00 	ret

00002374 <float32_eq_signaling>:
if either operand is a NaN.  Otherwise, the comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_eq_signaling( float32 a, float32 b )
{
    2374:	b8 20 28 00 	mv r5,r1

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2378:	00 21 00 17 	srui r1,r1,23
if either operand is a NaN.  Otherwise, the comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_eq_signaling( float32 a, float32 b )
{
    237c:	b8 40 20 00 	mv r4,r2

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2380:	20 21 00 ff 	andi r1,r1,0xff
    2384:	34 02 00 ff 	mvi r2,255
    2388:	44 22 00 0c 	be r1,r2,23b8 <float32_eq_signaling+0x44>
    238c:	00 81 00 17 	srui r1,r4,23
    2390:	34 02 00 ff 	mvi r2,255
    2394:	20 21 00 ff 	andi r1,r1,0xff
    2398:	44 22 00 14 	be r1,r2,23e8 <float32_eq_signaling+0x74>
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        float_raise( float_flag_invalid );
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );
    239c:	34 03 00 01 	mvi r3,1
    23a0:	44 a4 00 04 	be r5,r4,23b0 <float32_eq_signaling+0x3c>
    23a4:	b8 85 08 00 	or r1,r4,r5
    23a8:	b4 21 08 00 	add r1,r1,r1
    23ac:	64 23 00 00 	cmpei r3,r1,0

}
    23b0:	b8 60 08 00 	mv r1,r3
    23b4:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_eq_signaling( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    23b8:	78 01 00 7f 	mvhi r1,0x7f
    23bc:	38 21 ff ff 	ori r1,r1,0xffff
    23c0:	a0 a1 08 00 	and r1,r5,r1
    23c4:	44 20 ff f2 	be r1,r0,238c <float32_eq_signaling+0x18>
    23c8:	78 02 00 00 	mvhi r2,0x0
    23cc:	38 42 2c 1c 	ori r2,r2,0x2c1c
    23d0:	28 41 00 00 	lw r1,(r2+0)
    23d4:	34 03 00 00 	mvi r3,0
    23d8:	38 21 00 10 	ori r1,r1,0x10
    23dc:	58 41 00 00 	sw (r2+0),r1
        float_raise( float_flag_invalid );
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );

}
    23e0:	b8 60 08 00 	mv r1,r3
    23e4:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_eq_signaling( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    23e8:	78 01 00 7f 	mvhi r1,0x7f
    23ec:	38 21 ff ff 	ori r1,r1,0xffff
    23f0:	a0 81 08 00 	and r1,r4,r1
    23f4:	44 20 ff ea 	be r1,r0,239c <float32_eq_signaling+0x28>
    23f8:	78 02 00 00 	mvhi r2,0x0
    23fc:	38 42 2c 1c 	ori r2,r2,0x2c1c
    2400:	28 41 00 00 	lw r1,(r2+0)
    2404:	34 03 00 00 	mvi r3,0
    2408:	38 21 00 10 	ori r1,r1,0x10
    240c:	58 41 00 00 	sw (r2+0),r1
    2410:	e3 ff ff f4 	bi 23e0 <float32_eq_signaling+0x6c>

00002414 <float32_le_quiet>:
cause an exception.  Otherwise, the comparison is performed according to the
IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_le_quiet( float32 a, float32 b )
{
    2414:	b8 20 18 00 	mv r3,r1
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2418:	00 21 00 17 	srui r1,r1,23
cause an exception.  Otherwise, the comparison is performed according to the
IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_le_quiet( float32 a, float32 b )
{
    241c:	b8 40 28 00 	mv r5,r2
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2420:	20 21 00 ff 	andi r1,r1,0xff
    2424:	34 02 00 ff 	mvi r2,255
    2428:	44 22 00 14 	be r1,r2,2478 <float32_le_quiet+0x64>
    242c:	00 a1 00 17 	srui r1,r5,23
    2430:	34 02 00 ff 	mvi r2,255
    2434:	20 21 00 ff 	andi r1,r1,0xff
    2438:	44 22 00 1f 	be r1,r2,24b4 <float32_le_quiet+0xa0>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    243c:	00 62 00 1f 	srui r2,r3,31
        }
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    2440:	00 a1 00 1f 	srui r1,r5,31
    2444:	44 41 00 07 	be r2,r1,2460 <float32_le_quiet+0x4c>
    2448:	5c 40 00 09 	bne r2,r0,246c <float32_le_quiet+0x58>
    244c:	b8 a3 08 00 	or r1,r5,r3
    2450:	b4 21 08 00 	add r1,r1,r1
    2454:	64 24 00 00 	cmpei r4,r1,0
    return ( a == b ) || ( aSign ^ ( a < b ) );

}
    2458:	b8 80 08 00 	mv r1,r4
    245c:	c3 a0 00 00 	ret
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );
    2460:	f4 a3 08 00 	cmpgu r1,r5,r3
    2464:	fc 22 20 00 	cmpne r4,r1,r2
    2468:	5c 65 ff fc 	bne r3,r5,2458 <float32_le_quiet+0x44>
    246c:	34 04 00 01 	mvi r4,1

}
    2470:	b8 80 08 00 	mv r1,r4
    2474:	c3 a0 00 00 	ret
*/
flag float32_le_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2478:	78 01 00 7f 	mvhi r1,0x7f
    247c:	38 21 ff ff 	ori r1,r1,0xffff
    2480:	a0 61 08 00 	and r1,r3,r1
    2484:	44 20 ff ea 	be r1,r0,242c <float32_le_quiet+0x18>
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    2488:	00 61 00 16 	srui r1,r3,22
    248c:	34 02 01 fe 	mvi r2,510
    2490:	20 21 01 ff 	andi r1,r1,0x1ff
    2494:	44 22 00 10 	be r1,r2,24d4 <float32_le_quiet+0xc0>
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );
    2498:	00 a1 00 16 	srui r1,r5,22
    249c:	34 02 01 fe 	mvi r2,510
    24a0:	20 21 01 ff 	andi r1,r1,0x1ff
    24a4:	44 22 00 18 	be r1,r2,2504 <float32_le_quiet+0xf0>
    24a8:	34 04 00 00 	mvi r4,0

}
    24ac:	b8 80 08 00 	mv r1,r4
    24b0:	c3 a0 00 00 	ret
*/
flag float32_le_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    24b4:	78 01 00 7f 	mvhi r1,0x7f
    24b8:	38 21 ff ff 	ori r1,r1,0xffff
    24bc:	a0 a1 08 00 	and r1,r5,r1
    24c0:	44 20 ff df 	be r1,r0,243c <float32_le_quiet+0x28>
    24c4:	00 61 00 16 	srui r1,r3,22
    24c8:	34 02 01 fe 	mvi r2,510
    24cc:	20 21 01 ff 	andi r1,r1,0x1ff
    24d0:	5c 22 ff f2 	bne r1,r2,2498 <float32_le_quiet+0x84>
    24d4:	78 01 00 3f 	mvhi r1,0x3f
    24d8:	38 21 ff ff 	ori r1,r1,0xffff
    24dc:	a0 61 08 00 	and r1,r3,r1
    24e0:	44 20 ff ee 	be r1,r0,2498 <float32_le_quiet+0x84>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    24e4:	78 02 00 00 	mvhi r2,0x0
    24e8:	38 42 2c 1c 	ori r2,r2,0x2c1c
    24ec:	28 41 00 00 	lw r1,(r2+0)
    24f0:	34 04 00 00 	mvi r4,0
    24f4:	38 21 00 10 	ori r1,r1,0x10
    24f8:	58 41 00 00 	sw (r2+0),r1
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );

}
    24fc:	b8 80 08 00 	mv r1,r4
    2500:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    2504:	78 01 00 3f 	mvhi r1,0x3f
    2508:	38 21 ff ff 	ori r1,r1,0xffff
    250c:	a0 a1 08 00 	and r1,r5,r1
    2510:	5c 20 ff f5 	bne r1,r0,24e4 <float32_le_quiet+0xd0>
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );
    2514:	34 04 00 00 	mvi r4,0
    2518:	e3 ff ff e5 	bi 24ac <float32_le_quiet+0x98>

0000251c <float32_lt_quiet>:
exception.  Otherwise, the comparison is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt_quiet( float32 a, float32 b )
{
    251c:	b8 20 20 00 	mv r4,r1
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2520:	00 21 00 17 	srui r1,r1,23
exception.  Otherwise, the comparison is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt_quiet( float32 a, float32 b )
{
    2524:	b8 40 28 00 	mv r5,r2
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2528:	20 21 00 ff 	andi r1,r1,0xff
    252c:	34 02 00 ff 	mvi r2,255
    2530:	44 22 00 14 	be r1,r2,2580 <float32_lt_quiet+0x64>
    2534:	00 a1 00 17 	srui r1,r5,23
    2538:	34 02 00 ff 	mvi r2,255
    253c:	20 21 00 ff 	andi r1,r1,0xff
    2540:	44 22 00 28 	be r1,r2,25e0 <float32_lt_quiet+0xc4>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    2544:	00 82 00 1f 	srui r2,r4,31
        }
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    2548:	00 a1 00 1f 	srui r1,r5,31
    254c:	44 41 00 07 	be r2,r1,2568 <float32_lt_quiet+0x4c>
    2550:	44 40 00 09 	be r2,r0,2574 <float32_lt_quiet+0x58>
    2554:	b8 a4 08 00 	or r1,r5,r4
    2558:	b4 21 08 00 	add r1,r1,r1
    255c:	7c 23 00 00 	cmpnei r3,r1,0
    return ( a != b ) && ( aSign ^ ( a < b ) );

}
    2560:	b8 60 08 00 	mv r1,r3
    2564:	c3 a0 00 00 	ret
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    return ( a != b ) && ( aSign ^ ( a < b ) );
    2568:	f4 a4 08 00 	cmpgu r1,r5,r4
    256c:	fc 22 18 00 	cmpne r3,r1,r2
    2570:	5c 85 ff fc 	bne r4,r5,2560 <float32_lt_quiet+0x44>
    2574:	34 03 00 00 	mvi r3,0

}
    2578:	b8 60 08 00 	mv r1,r3
    257c:	c3 a0 00 00 	ret
*/
flag float32_lt_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2580:	78 01 00 7f 	mvhi r1,0x7f
    2584:	38 21 ff ff 	ori r1,r1,0xffff
    2588:	a0 81 08 00 	and r1,r4,r1
    258c:	44 20 ff ea 	be r1,r0,2534 <float32_lt_quiet+0x18>
    2590:	00 81 00 16 	srui r1,r4,22
    2594:	34 02 01 fe 	mvi r2,510
    2598:	20 21 01 ff 	andi r1,r1,0x1ff
    259c:	44 22 00 19 	be r1,r2,2600 <float32_lt_quiet+0xe4>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    25a0:	00 a1 00 16 	srui r1,r5,22
    25a4:	34 02 01 fe 	mvi r2,510
    25a8:	20 21 01 ff 	andi r1,r1,0x1ff
    25ac:	5c 22 ff f2 	bne r1,r2,2574 <float32_lt_quiet+0x58>
    25b0:	78 01 00 3f 	mvhi r1,0x3f
    25b4:	38 21 ff ff 	ori r1,r1,0xffff
    25b8:	a0 a1 08 00 	and r1,r5,r1
    25bc:	44 20 ff ee 	be r1,r0,2574 <float32_lt_quiet+0x58>
    25c0:	78 02 00 00 	mvhi r2,0x0
    25c4:	38 42 2c 1c 	ori r2,r2,0x2c1c
    25c8:	28 41 00 00 	lw r1,(r2+0)
    25cc:	34 03 00 00 	mvi r3,0
    25d0:	38 21 00 10 	ori r1,r1,0x10
    25d4:	58 41 00 00 	sw (r2+0),r1
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    return ( a != b ) && ( aSign ^ ( a < b ) );

}
    25d8:	b8 60 08 00 	mv r1,r3
    25dc:	c3 a0 00 00 	ret
*/
flag float32_lt_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    25e0:	78 01 00 7f 	mvhi r1,0x7f
    25e4:	38 21 ff ff 	ori r1,r1,0xffff
    25e8:	a0 a1 08 00 	and r1,r5,r1
    25ec:	44 20 ff d6 	be r1,r0,2544 <float32_lt_quiet+0x28>
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    25f0:	00 81 00 16 	srui r1,r4,22
    25f4:	34 02 01 fe 	mvi r2,510
    25f8:	20 21 01 ff 	andi r1,r1,0x1ff
    25fc:	5c 22 ff e9 	bne r1,r2,25a0 <float32_lt_quiet+0x84>
    2600:	78 01 00 3f 	mvhi r1,0x3f
    2604:	38 21 ff ff 	ori r1,r1,0xffff
    2608:	a0 81 08 00 	and r1,r4,r1
    260c:	44 20 ff e5 	be r1,r0,25a0 <float32_lt_quiet+0x84>
    2610:	e3 ff ff ec 	bi 25c0 <float32_lt_quiet+0xa4>

00002614 <float32_abs>:
-------------------------------------------------------------------------------
This is an abs function
-------------------------------------------------------------------------------
*/
float32 float32_abs(float32 a)
{
    2614:	37 9c ff fc 	addi sp,sp,-4
    2618:	5b 9d 00 04 	sw (sp+4),ra
    261c:	b8 20 10 00 	mv r2,r1
	if ( extractFloat32Sign( a )){
    2620:	4c 20 00 05 	bge r1,r0,2634 <float32_abs+0x20>
	return float32_mul( a, 0xBF800000 ) ;
    2624:	78 02 bf 80 	mvhi r2,0xbf80
    2628:	38 42 00 00 	ori r2,r2,0x0
    262c:	fb ff fb d6 	calli 1584 <float32_mul>
    2630:	b8 20 10 00 	mv r2,r1
	}
	else {
	return a;
	}
}
    2634:	b8 40 08 00 	mv r1,r2
    2638:	2b 9d 00 04 	lw ra,(sp+4)
    263c:	37 9c 00 04 	addi sp,sp,4
    2640:	c3 a0 00 00 	ret

00002644 <float32_artan>:
That formula was taken from equation 7
http://www.iro.umontreal.ca/~mignotte/IFT2425/Documents/EfficientApproximationArctgFunction.pdf
-------------------------------------------------------------------------------
*/
float32 float32_artan( float32 x )
{
    2644:	37 9c ff f8 	addi sp,sp,-8
    2648:	5b 8b 00 08 	sw (sp+8),r11
    264c:	5b 9d 00 04 	sw (sp+4),ra
    2650:	b8 20 58 00 	mv r11,r1
return	float32_mul(x,float32_add(0x3F490FD8,float32_mul(0x3E8BC6A8,float32_sub(0x3F800000,float32_abs(x)))));
    2654:	fb ff ff f0 	calli 2614 <float32_abs>
    2658:	b8 20 10 00 	mv r2,r1
    265c:	78 01 3f 80 	mvhi r1,0x3f80
    2660:	38 21 00 00 	ori r1,r1,0x0
    2664:	fb ff fb b9 	calli 1548 <float32_sub>
    2668:	b8 20 10 00 	mv r2,r1
    266c:	78 01 3e 8b 	mvhi r1,0x3e8b
    2670:	38 21 c6 a8 	ori r1,r1,0xc6a8
    2674:	fb ff fb c4 	calli 1584 <float32_mul>
    2678:	b8 20 10 00 	mv r2,r1
    267c:	78 01 3f 49 	mvhi r1,0x3f49
    2680:	38 21 0f d8 	ori r1,r1,0xfd8
    2684:	fb ff fb a2 	calli 150c <float32_add>
    2688:	b8 20 10 00 	mv r2,r1
    268c:	b9 60 08 00 	mv r1,r11
    2690:	fb ff fb bd 	calli 1584 <float32_mul>
}
    2694:	2b 9d 00 04 	lw ra,(sp+4)
    2698:	2b 8b 00 08 	lw r11,(sp+8)
    269c:	37 9c 00 08 	addi sp,sp,8
    26a0:	c3 a0 00 00 	ret

000026a4 <float32_pow2>:
-------------------------------------------------------------------------------
This is the square function
-------------------------------------------------------------------------------
*/
float32 float32_pow2( float32 a)
{
    26a4:	37 9c ff fc 	addi sp,sp,-4
    26a8:	5b 9d 00 04 	sw (sp+4),ra
	return float32_mul(a,a);
    26ac:	b8 20 10 00 	mv r2,r1
    26b0:	fb ff fb b5 	calli 1584 <float32_mul>
}
    26b4:	2b 9d 00 04 	lw ra,(sp+4)
    26b8:	37 9c 00 04 	addi sp,sp,4
    26bc:	c3 a0 00 00 	ret

000026c0 <float32_filterKom>:
// - oldAngle: 	Previous measured angle
// - AGy:		Gyroscope angle
// - AAc:		Accelerometer angle
// - dt:		time
//-----------------------------------------------------------------------
float32 float32_filterKom(float32 oldAngle, float32 AGy, float32 AAc, float32 dt){
    26c0:	37 9c ff f0 	addi sp,sp,-16
    26c4:	5b 8b 00 10 	sw (sp+16),r11
    26c8:	5b 8c 00 0c 	sw (sp+12),r12
    26cc:	5b 8d 00 08 	sw (sp+8),r13
    26d0:	5b 9d 00 04 	sw (sp+4),ra
    26d4:	b8 40 58 00 	mv r11,r2
	//Filter: newAngle= 0.98 *(oldAngle + AGy * dt) + 0.02 * AAc
	dt = float32_mul(dt, 0x322BCC77); //0,00000001
    26d8:	78 02 32 2b 	mvhi r2,0x322b
// - oldAngle: 	Previous measured angle
// - AGy:		Gyroscope angle
// - AAc:		Accelerometer angle
// - dt:		time
//-----------------------------------------------------------------------
float32 float32_filterKom(float32 oldAngle, float32 AGy, float32 AAc, float32 dt){
    26dc:	b8 20 60 00 	mv r12,r1
	//Filter: newAngle= 0.98 *(oldAngle + AGy * dt) + 0.02 * AAc
	dt = float32_mul(dt, 0x322BCC77); //0,00000001
    26e0:	38 42 cc 77 	ori r2,r2,0xcc77
    26e4:	b8 80 08 00 	mv r1,r4
// - oldAngle: 	Previous measured angle
// - AGy:		Gyroscope angle
// - AAc:		Accelerometer angle
// - dt:		time
//-----------------------------------------------------------------------
float32 float32_filterKom(float32 oldAngle, float32 AGy, float32 AAc, float32 dt){
    26e8:	b8 60 68 00 	mv r13,r3
	//Filter: newAngle= 0.98 *(oldAngle + AGy * dt) + 0.02 * AAc
	dt = float32_mul(dt, 0x322BCC77); //0,00000001
    26ec:	fb ff fb a6 	calli 1584 <float32_mul>
    26f0:	b8 20 10 00 	mv r2,r1
	float32 newAngle = float32_mul(AGy, dt);
    26f4:	b9 60 08 00 	mv r1,r11
    26f8:	fb ff fb a3 	calli 1584 <float32_mul>
	newAngle = float32_add(newAngle, oldAngle);
    26fc:	b9 80 10 00 	mv r2,r12
    2700:	fb ff fb 83 	calli 150c <float32_add>
	newAngle = float32_mul(newAngle, alfa);
    2704:	78 02 3f 4c 	mvhi r2,0x3f4c
    2708:	38 42 cc cd 	ori r2,r2,0xcccd
    270c:	fb ff fb 9e 	calli 1584 <float32_mul>
	float32 temp = float32_mul(AAc, beta);
    2710:	78 02 3e 4c 	mvhi r2,0x3e4c
float32 float32_filterKom(float32 oldAngle, float32 AGy, float32 AAc, float32 dt){
	//Filter: newAngle= 0.98 *(oldAngle + AGy * dt) + 0.02 * AAc
	dt = float32_mul(dt, 0x322BCC77); //0,00000001
	float32 newAngle = float32_mul(AGy, dt);
	newAngle = float32_add(newAngle, oldAngle);
	newAngle = float32_mul(newAngle, alfa);
    2714:	b8 20 58 00 	mv r11,r1
	float32 temp = float32_mul(AAc, beta);
    2718:	38 42 cc cd 	ori r2,r2,0xcccd
    271c:	b9 a0 08 00 	mv r1,r13
    2720:	fb ff fb 99 	calli 1584 <float32_mul>
    2724:	b8 20 10 00 	mv r2,r1
	return float32_add(newAngle, temp);
    2728:	b9 60 08 00 	mv r1,r11
    272c:	fb ff fb 78 	calli 150c <float32_add>
}
    2730:	2b 9d 00 04 	lw ra,(sp+4)
    2734:	2b 8b 00 10 	lw r11,(sp+16)
    2738:	2b 8c 00 0c 	lw r12,(sp+12)
    273c:	2b 8d 00 08 	lw r13,(sp+8)
    2740:	37 9c 00 10 	addi sp,sp,16
    2744:	c3 a0 00 00 	ret

00002748 <agReadByte>:
{
	return I2CreadByte(mAddress, subAddress);
}

uint8_t agReadByte(uint8_t subAddress)
{
    2748:	37 9c ff fc 	addi sp,sp,-4
    274c:	5b 9d 00 04 	sw (sp+4),ra
    2750:	20 21 00 ff 	andi r1,r1,0xff
	return I2CreadByte(agAddress, subAddress);
    2754:	b8 20 10 00 	mv r2,r1
    2758:	34 01 00 6a 	mvi r1,106
    275c:	fb ff f7 cf 	calli 698 <I2CreadByte>
}
    2760:	2b 9d 00 04 	lw ra,(sp+4)
    2764:	37 9c 00 04 	addi sp,sp,4
    2768:	c3 a0 00 00 	ret

0000276c <mReadByte>:
#include "LSM9DS1.h"
#include "soc-hw.h"

uint8_t mReadByte(uint8_t subAddress)
{
    276c:	37 9c ff fc 	addi sp,sp,-4
    2770:	5b 9d 00 04 	sw (sp+4),ra
    2774:	20 21 00 ff 	andi r1,r1,0xff
	return I2CreadByte(mAddress, subAddress);
    2778:	b8 20 10 00 	mv r2,r1
    277c:	34 01 00 1c 	mvi r1,28
    2780:	fb ff f7 c6 	calli 698 <I2CreadByte>
}
    2784:	2b 9d 00 04 	lw ra,(sp+4)
    2788:	37 9c 00 04 	addi sp,sp,4
    278c:	c3 a0 00 00 	ret
