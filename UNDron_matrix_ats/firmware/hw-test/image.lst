
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002464  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000440  00002464  00002464  000024b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  000028a4  000028a4  000028f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000094  000028bc  000028bc  00002910  2**2
                  ALLOC
  4 .debug_abbrev 0000059e  00000000  00000000  00002910  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002629  00000000  00000000  00002eae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000021d3  00000000  00000000  000054d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000370  00000000  00000000  000076ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000003e4  00000000  00000000  00007a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000060  00000000  00000000  00007e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a2  00000000  00000000  00007e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000036  00000000  00000000  00008702  2**0
                  CONTENTS, READONLY
 12 .debug_loc    00002042  00000000  00000000  00008738  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a40  00000000  00000000  0000a77a  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <_ftext>:
       0:	98 00 00 00 	xor r0,r0,r0
       4:	d0 00 00 00 	wcsr IE,r0
       8:	78 01 00 00 	mvhi r1,0x0
       c:	38 21 00 00 	ori r1,r1,0x0
      10:	d0 e1 00 00 	wcsr EBA,r1
      14:	f8 00 00 3b 	calli 100 <_crt0>
      18:	34 00 00 00 	nop
      1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
      20:	34 00 00 00 	nop
      24:	34 00 00 00 	nop
      28:	34 00 00 00 	nop
      2c:	34 00 00 00 	nop
      30:	34 00 00 00 	nop
      34:	34 00 00 00 	nop
      38:	34 00 00 00 	nop
      3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
      40:	34 00 00 00 	nop
      44:	34 00 00 00 	nop
      48:	34 00 00 00 	nop
      4c:	34 00 00 00 	nop
      50:	34 00 00 00 	nop
      54:	34 00 00 00 	nop
      58:	34 00 00 00 	nop
      5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
      60:	34 00 00 00 	nop
      64:	34 00 00 00 	nop
      68:	34 00 00 00 	nop
      6c:	34 00 00 00 	nop
      70:	34 00 00 00 	nop
      74:	34 00 00 00 	nop
      78:	34 00 00 00 	nop
      7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
      80:	34 00 00 00 	nop
      84:	34 00 00 00 	nop
      88:	34 00 00 00 	nop
      8c:	34 00 00 00 	nop
      90:	34 00 00 00 	nop
      94:	34 00 00 00 	nop
      98:	34 00 00 00 	nop
      9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
      a0:	34 00 00 00 	nop
      a4:	34 00 00 00 	nop
      a8:	34 00 00 00 	nop
      ac:	34 00 00 00 	nop
      b0:	34 00 00 00 	nop
      b4:	34 00 00 00 	nop
      b8:	34 00 00 00 	nop
      bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
      c0:	5b 9d 00 00 	sw (sp+0),ra
      c4:	f8 00 00 2b 	calli 170 <_save_all>
      c8:	90 40 08 00 	rcsr r1,IP
      cc:	f8 00 00 82 	calli 2d4 <irq_handler>
      d0:	78 01 ff ff 	mvhi r1,0xffff
      d4:	38 21 ff ff 	ori r1,r1,0xffff
      d8:	d0 41 00 00 	wcsr IP,r1
      dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
      e0:	34 00 00 00 	nop
      e4:	34 00 00 00 	nop
      e8:	34 00 00 00 	nop
      ec:	34 00 00 00 	nop
      f0:	34 00 00 00 	nop
      f4:	34 00 00 00 	nop
      f8:	34 00 00 00 	nop
      fc:	34 00 00 00 	nop

00000100 <_crt0>:
     100:	78 1c 00 00 	mvhi sp,0x0
     104:	3b 9c 3f fc 	ori sp,sp,0x3ffc
     108:	78 1a 00 00 	mvhi gp,0x0
     10c:	3b 5a 28 c0 	ori gp,gp,0x28c0
     110:	78 01 00 00 	mvhi r1,0x0
     114:	38 21 28 bc 	ori r1,r1,0x28bc
     118:	78 03 00 00 	mvhi r3,0x0
     11c:	38 63 29 50 	ori r3,r3,0x2950

00000120 <.clearBSS>:
     120:	44 23 00 04 	be r1,r3,130 <.callMain>
     124:	58 20 00 00 	sw (r1+0),r0
     128:	34 21 00 04 	addi r1,r1,4
     12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
     130:	34 01 00 00 	mvi r1,0
     134:	34 02 00 00 	mvi r2,0
     138:	34 03 00 00 	mvi r3,0
     13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
     140:	34 01 00 01 	mvi r1,1
     144:	d0 01 00 00 	wcsr IE,r1
     148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
     14c:	34 01 00 00 	mvi r1,0
     150:	d0 01 00 00 	wcsr IE,r1
     154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
     158:	d0 21 00 00 	wcsr IM,r1
     15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
     160:	90 20 08 00 	rcsr r1,IM
     164:	c3 a0 00 00 	ret

00000168 <jump>:
     168:	c0 20 00 00 	b r1

0000016c <halt>:
     16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
     170:	37 9c ff 80 	addi sp,sp,-128
     174:	5b 81 00 04 	sw (sp+4),r1
     178:	5b 82 00 08 	sw (sp+8),r2
     17c:	5b 83 00 0c 	sw (sp+12),r3
     180:	5b 84 00 10 	sw (sp+16),r4
     184:	5b 85 00 14 	sw (sp+20),r5
     188:	5b 86 00 18 	sw (sp+24),r6
     18c:	5b 87 00 1c 	sw (sp+28),r7
     190:	5b 88 00 20 	sw (sp+32),r8
     194:	5b 89 00 24 	sw (sp+36),r9
     198:	5b 8a 00 28 	sw (sp+40),r10
     19c:	5b 9e 00 78 	sw (sp+120),ea
     1a0:	5b 9f 00 7c 	sw (sp+124),ba
     1a4:	2b 81 00 80 	lw r1,(sp+128)
     1a8:	5b 81 00 74 	sw (sp+116),r1
     1ac:	bb 80 08 00 	mv r1,sp
     1b0:	34 21 00 80 	addi r1,r1,128
     1b4:	5b 81 00 70 	sw (sp+112),r1
     1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
     1bc:	2b 81 00 04 	lw r1,(sp+4)
     1c0:	2b 82 00 08 	lw r2,(sp+8)
     1c4:	2b 83 00 0c 	lw r3,(sp+12)
     1c8:	2b 84 00 10 	lw r4,(sp+16)
     1cc:	2b 85 00 14 	lw r5,(sp+20)
     1d0:	2b 86 00 18 	lw r6,(sp+24)
     1d4:	2b 87 00 1c 	lw r7,(sp+28)
     1d8:	2b 88 00 20 	lw r8,(sp+32)
     1dc:	2b 89 00 24 	lw r9,(sp+36)
     1e0:	2b 8a 00 28 	lw r10,(sp+40)
     1e4:	2b 9d 00 74 	lw ra,(sp+116)
     1e8:	2b 9e 00 78 	lw ea,(sp+120)
     1ec:	2b 9f 00 7c 	lw ba,(sp+124)
     1f0:	2b 9c 00 70 	lw sp,(sp+112)
     1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
     1f8:	bb 80 08 00 	mv r1,sp
     1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
     200:	bb 40 08 00 	mv r1,gp
     204:	c3 a0 00 00 	ret

00000208 <main>:
#include "soc-hw.h"
#include "softfloat.h"

int main(){
     208:	37 9c ff ec 	addi sp,sp,-20
     20c:	5b 8b 00 10 	sw (sp+16),r11
     210:	5b 8c 00 0c 	sw (sp+12),r12
     214:	5b 8d 00 08 	sw (sp+8),r13
     218:	5b 9d 00 04 	sw (sp+4),ra
     21c:	78 0b 00 00 	mvhi r11,0x0
     220:	39 6b 28 ac 	ori r11,r11,0x28ac

//Prueba i2c
	 i2c_putrwaddr(0x00, 0x40);

//Prueba unidades de punto flotante    
    multiplicacion=float32_mul( PI, alfa );
     224:	78 0d 40 49 	mvhi r13,0x4049
     228:	78 0c 3f 4c 	mvhi r12,0x3f4c
  float32 multiplicacion;
  float32 division;


  for(;;){
    uart_putchar(0x20);
     22c:	34 01 00 20 	mvi r1,32
     230:	f8 00 00 a0 	calli 4b0 <uart_putchar>
    pwm_init();
     234:	f8 00 00 f9 	calli 618 <pwm_init>

//Prueba i2c
	 i2c_putrwaddr(0x00, 0x40);
     238:	34 01 00 00 	mvi r1,0
     23c:	34 02 00 40 	mvi r2,64
     240:	f8 00 00 bd 	calli 534 <i2c_putrwaddr>

//Prueba unidades de punto flotante    
    multiplicacion=float32_mul( PI, alfa );
     244:	b9 80 10 00 	mv r2,r12
     248:	b9 a0 08 00 	mv r1,r13
     24c:	38 42 cc cd 	ori r2,r2,0xcccd
     250:	38 21 0f d8 	ori r1,r1,0xfd8
     254:	f8 00 04 13 	calli 12a0 <float32_mul>
    entero=float32_to_int32(multiplicacion);
     258:	f8 00 02 36 	calli b30 <float32_to_int32>
     25c:	5b 81 00 14 	sw (sp+20),r1
    gpio0->ctrl=entero;
     260:	29 64 00 00 	lw r4,(r11+0)
     264:	2b 83 00 14 	lw r3,(sp+20)

    division=float32_div( PI, alfa );
     268:	b9 80 10 00 	mv r2,r12
     26c:	b9 a0 08 00 	mv r1,r13
	 i2c_putrwaddr(0x00, 0x40);

//Prueba unidades de punto flotante    
    multiplicacion=float32_mul( PI, alfa );
    entero=float32_to_int32(multiplicacion);
    gpio0->ctrl=entero;
     270:	58 83 00 00 	sw (r4+0),r3

    division=float32_div( PI, alfa );
     274:	38 42 cc cd 	ori r2,r2,0xcccd
     278:	38 21 0f d8 	ori r1,r1,0xfd8
     27c:	f8 00 04 a7 	calli 1518 <float32_div>
    entero=float32_to_int32(division);
     280:	f8 00 02 2c 	calli b30 <float32_to_int32>
     284:	5b 81 00 14 	sw (sp+20),r1
    gpio0->ctrl=entero;
     288:	29 63 00 00 	lw r3,(r11+0)
     28c:	2b 82 00 14 	lw r2,(sp+20)

    //nsleep(20);
    pwm_enable(1);
     290:	34 01 00 01 	mvi r1,1
    entero=float32_to_int32(multiplicacion);
    gpio0->ctrl=entero;

    division=float32_div( PI, alfa );
    entero=float32_to_int32(division);
    gpio0->ctrl=entero;
     294:	58 62 00 00 	sw (r3+0),r2

    //nsleep(20);
    pwm_enable(1);
     298:	f8 00 00 ed 	calli 64c <pwm_enable>
    pwm_duty(10);
     29c:	34 01 00 0a 	mvi r1,10
     2a0:	f8 00 00 e5 	calli 634 <pwm_duty>
    nsleep(1);
     2a4:	34 01 00 01 	mvi r1,1
     2a8:	f8 00 00 4a 	calli 3d0 <nsleep>
    pwm_duty(20);
     2ac:	34 01 00 14 	mvi r1,20
     2b0:	f8 00 00 e1 	calli 634 <pwm_duty>
    //nsleep(100);
    pwm_duty(30);
     2b4:	34 01 00 1e 	mvi r1,30
     2b8:	f8 00 00 df 	calli 634 <pwm_duty>
    //nsleep(100);
    pwm_duty(40);
     2bc:	34 01 00 28 	mvi r1,40
     2c0:	f8 00 00 dd 	calli 634 <pwm_duty>
    //nsleep(100);
    pwm_duty(50);
     2c4:	34 01 00 32 	mvi r1,50
     2c8:	f8 00 00 db 	calli 634 <pwm_duty>
     2cc:	e3 ff ff d8 	bi 22c <main+0x24>

000002d0 <isr_null>:
void tic_isr();
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
     2d0:	c3 a0 00 00 	ret

000002d4 <irq_handler>:
}

void irq_handler(uint32_t pending)
{
     2d4:	37 9c ff f0 	addi sp,sp,-16
     2d8:	5b 8b 00 10 	sw (sp+16),r11
     2dc:	5b 8c 00 0c 	sw (sp+12),r12
     2e0:	5b 8d 00 08 	sw (sp+8),r13
     2e4:	5b 9d 00 04 	sw (sp+4),ra
     2e8:	78 0b 00 00 	mvhi r11,0x0
     2ec:	39 6b 28 cc 	ori r11,r11,0x28cc
     2f0:	b8 20 60 00 	mv r12,r1
     2f4:	35 6d 00 80 	addi r13,r11,128
     2f8:	e0 00 00 03 	bi 304 <irq_handler+0x30>
    int i;

    for(i=0; i<32; i++) {
        if (pending & 0x01) (*isr_table[i])();
     2fc:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
    int i;

    for(i=0; i<32; i++) {
     300:	45 6d 00 08 	be r11,r13,320 <irq_handler+0x4c>
        if (pending & 0x01) (*isr_table[i])();
     304:	21 81 00 01 	andi r1,r12,0x1
        pending >>= 1;
     308:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
    int i;

    for(i=0; i<32; i++) {
        if (pending & 0x01) (*isr_table[i])();
     30c:	44 20 ff fc 	be r1,r0,2fc <irq_handler+0x28>
     310:	29 61 00 00 	lw r1,(r11+0)
     314:	35 6b 00 04 	addi r11,r11,4
     318:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
    int i;

    for(i=0; i<32; i++) {
     31c:	5d 6d ff fa 	bne r11,r13,304 <irq_handler+0x30>
        if (pending & 0x01) (*isr_table[i])();
        pending >>= 1;
    }
}
     320:	2b 9d 00 04 	lw ra,(sp+4)
     324:	2b 8b 00 10 	lw r11,(sp+16)
     328:	2b 8c 00 0c 	lw r12,(sp+12)
     32c:	2b 8d 00 08 	lw r13,(sp+8)
     330:	37 9c 00 10 	addi sp,sp,16
     334:	c3 a0 00 00 	ret

00000338 <isr_init>:

void isr_init()
{
     338:	78 01 00 00 	mvhi r1,0x0
     33c:	38 21 28 cc 	ori r1,r1,0x28cc
     340:	78 02 00 00 	mvhi r2,0x0
     344:	38 42 02 d0 	ori r2,r2,0x2d0
     348:	34 23 00 80 	addi r3,r1,128
    int i;
    for(i=0; i<32; i++)
        isr_table[i] = &isr_null;
     34c:	58 22 00 00 	sw (r1+0),r2
     350:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
    int i;
    for(i=0; i<32; i++)
     354:	5c 23 ff fe 	bne r1,r3,34c <isr_init+0x14>
        isr_table[i] = &isr_null;
}
     358:	c3 a0 00 00 	ret

0000035c <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
     35c:	3c 21 00 02 	sli r1,r1,2
     360:	78 03 00 00 	mvhi r3,0x0
     364:	38 63 28 cc 	ori r3,r3,0x28cc
     368:	b4 61 18 00 	add r3,r3,r1
     36c:	58 62 00 00 	sw (r3+0),r2
    isr_table[irq] = isr;
}
     370:	c3 a0 00 00 	ret

00000374 <isr_unregister>:

void isr_unregister(int irq)
{
     374:	3c 21 00 02 	sli r1,r1,2
     378:	78 03 00 00 	mvhi r3,0x0
     37c:	38 63 28 cc 	ori r3,r3,0x28cc
     380:	78 02 00 00 	mvhi r2,0x0
     384:	b4 61 18 00 	add r3,r3,r1
     388:	38 42 02 d0 	ori r2,r2,0x2d0
     38c:	58 62 00 00 	sw (r3+0),r2
    isr_table[irq] = &isr_null;
}
     390:	c3 a0 00 00 	ret

00000394 <msleep>:
 * TIMER Functions
 */
uint32_t tic_msec;

void msleep(uint32_t msec)
{
     394:	78 03 00 00 	mvhi r3,0x0
     398:	78 02 00 01 	mvhi r2,0x1
     39c:	38 42 86 a0 	ori r2,r2,0x86a0
     3a0:	38 63 28 a8 	ori r3,r3,0x28a8
     3a4:	88 22 08 00 	mul r1,r1,r2
     3a8:	28 63 00 00 	lw r3,(r3+0)
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000)*msec;
    timer0->counter1 = 0;
    timer0->tcr1 = TIMER_EN;
     3ac:	34 02 00 08 	mvi r2,8
void msleep(uint32_t msec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000)*msec;
     3b0:	58 61 00 10 	sw (r3+16),r1
    timer0->counter1 = 0;
     3b4:	34 01 00 00 	mvi r1,0
     3b8:	58 61 00 14 	sw (r3+20),r1
    timer0->tcr1 = TIMER_EN;
     3bc:	58 62 00 0c 	sw (r3+12),r2

    do {
        //halt();
         tcr = timer0->tcr1;
     3c0:	28 61 00 0c 	lw r1,(r3+12)
     } while ( ! (tcr & TIMER_TRIG) );
     3c4:	20 21 00 01 	andi r1,r1,0x1
     3c8:	44 20 ff fe 	be r1,r0,3c0 <msleep+0x2c>
}
     3cc:	c3 a0 00 00 	ret

000003d0 <nsleep>:

void nsleep(uint32_t nsec)
{
     3d0:	b4 21 10 00 	add r2,r1,r1
     3d4:	b4 41 10 00 	add r2,r2,r1
     3d8:	78 03 00 00 	mvhi r3,0x0
     3dc:	38 63 28 a8 	ori r3,r3,0x28a8
     3e0:	3c 44 00 05 	sli r4,r2,5
     3e4:	28 63 00 00 	lw r3,(r3+0)
     3e8:	b4 44 10 00 	add r2,r2,r4
     3ec:	b4 41 10 00 	add r2,r2,r1
     3f0:	58 62 00 10 	sw (r3+16),r2
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*nsec;
    timer0->counter1 = 0;
     3f4:	34 01 00 00 	mvi r1,0
     3f8:	58 61 00 14 	sw (r3+20),r1
    timer0->tcr1 = TIMER_EN;
     3fc:	34 02 00 08 	mvi r2,8
     400:	58 62 00 0c 	sw (r3+12),r2

    do {
        //halt();
         tcr = timer0->tcr1;
     404:	28 61 00 0c 	lw r1,(r3+12)
     } while ( ! (tcr & TIMER_TRIG) );
     408:	20 21 00 01 	andi r1,r1,0x1
     40c:	44 20 ff fe 	be r1,r0,404 <nsleep+0x34>
}
     410:	c3 a0 00 00 	ret

00000414 <tic_isr>:

void tic_isr()
{
     414:	78 03 00 00 	mvhi r3,0x0
     418:	38 63 29 4c 	ori r3,r3,0x294c
     41c:	28 62 00 00 	lw r2,(r3+0)
    tic_msec++;
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     420:	78 01 00 00 	mvhi r1,0x0
     424:	38 21 28 a8 	ori r1,r1,0x28a8
     428:	28 24 00 00 	lw r4,(r1+0)
     } while ( ! (tcr & TIMER_TRIG) );
}

void tic_isr()
{
    tic_msec++;
     42c:	34 42 00 01 	addi r2,r2,1
     430:	58 62 00 00 	sw (r3+0),r2
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     434:	34 01 00 0e 	mvi r1,14
     438:	58 81 00 00 	sw (r4+0),r1
}
     43c:	c3 a0 00 00 	ret

00000440 <tic_init>:

void tic_init()
{
     440:	78 01 00 00 	mvhi r1,0x0
     444:	38 21 28 a8 	ori r1,r1,0x28a8
     448:	28 24 00 00 	lw r4,(r1+0)
    tic_msec = 0;
     44c:	78 02 00 00 	mvhi r2,0x0
     450:	38 42 29 4c 	ori r2,r2,0x294c
     454:	34 05 00 00 	mvi r5,0
     458:	58 45 00 00 	sw (r2+0),r5

    // Setup timer0.0
    timer0->compare0 = (FCPU/10000);
     45c:	34 01 27 10 	mvi r1,10000
     460:	58 81 00 04 	sw (r4+4),r1
        isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
    isr_table[irq] = isr;
     464:	78 03 00 00 	mvhi r3,0x0
     468:	78 02 00 00 	mvhi r2,0x0
{
    tic_msec = 0;

    // Setup timer0.0
    timer0->compare0 = (FCPU/10000);
    timer0->counter0 = 0;
     46c:	58 85 00 08 	sw (r4+8),r5
        isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
    isr_table[irq] = isr;
     470:	38 63 28 cc 	ori r3,r3,0x28cc
     474:	38 42 04 14 	ori r2,r2,0x414
    tic_msec = 0;

    // Setup timer0.0
    timer0->compare0 = (FCPU/10000);
    timer0->counter0 = 0;
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     478:	34 01 00 0e 	mvi r1,14
     47c:	58 81 00 00 	sw (r4+0),r1
        isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
    isr_table[irq] = isr;
     480:	58 62 00 04 	sw (r3+4),r2
    timer0->compare0 = (FCPU/10000);
    timer0->counter0 = 0;
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

    isr_register(1, &tic_isr);
}
     484:	c3 a0 00 00 	ret

00000488 <uart_init>:

/***************************************************************************
 * UART Functions
 */
void uart_init()
{
     488:	c3 a0 00 00 	ret

0000048c <uart_getchar>:
    // Setup Divisor register (Fclk / Baud)
    //uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
     48c:	78 01 00 00 	mvhi r1,0x0
     490:	38 21 28 a4 	ori r1,r1,0x28a4
     494:	28 22 00 00 	lw r2,(r1+0)
     498:	28 41 00 00 	lw r1,(r2+0)
     49c:	20 21 00 01 	andi r1,r1,0x1
     4a0:	44 20 ff fe 	be r1,r0,498 <uart_getchar+0xc>
    while (! (uart0->ucr & UART_DR)) ;
    return uart0->rxtx;
     4a4:	28 41 00 04 	lw r1,(r2+4)
}
     4a8:	20 21 00 ff 	andi r1,r1,0xff
     4ac:	c3 a0 00 00 	ret

000004b0 <uart_putchar>:

void uart_putchar(char c)
{
     4b0:	78 02 00 00 	mvhi r2,0x0
     4b4:	38 42 28 a4 	ori r2,r2,0x28a4
     4b8:	28 42 00 00 	lw r2,(r2+0)
     4bc:	20 23 00 ff 	andi r3,r1,0xff
    while (uart0->ucr & UART_BUSY) ;
     4c0:	28 41 00 00 	lw r1,(r2+0)
     4c4:	20 21 00 10 	andi r1,r1,0x10
     4c8:	5c 20 ff fe 	bne r1,r0,4c0 <uart_putchar+0x10>
    uart0->rxtx = c;
     4cc:	58 43 00 04 	sw (r2+4),r3
}
     4d0:	c3 a0 00 00 	ret

000004d4 <uart_putstr>:

void uart_putstr(char *str)
{
     4d4:	40 24 00 00 	lbu r4,(r1+0)
     4d8:	b8 20 18 00 	mv r3,r1
    char *c = str;
    while(*c) {
     4dc:	44 80 00 0b 	be r4,r0,508 <uart_putstr+0x34>
    return uart0->rxtx;
}

void uart_putchar(char c)
{
    while (uart0->ucr & UART_BUSY) ;
     4e0:	78 01 00 00 	mvhi r1,0x0
     4e4:	38 21 28 a4 	ori r1,r1,0x28a4
     4e8:	28 22 00 00 	lw r2,(r1+0)
     4ec:	28 41 00 00 	lw r1,(r2+0)
     4f0:	20 21 00 10 	andi r1,r1,0x10
     4f4:	5c 20 ff fe 	bne r1,r0,4ec <uart_putstr+0x18>
    uart0->rxtx = c;
     4f8:	58 44 00 04 	sw (r2+4),r4
void uart_putstr(char *str)
{
    char *c = str;
    while(*c) {
        uart_putchar(*c);
        c++;
     4fc:	34 63 00 01 	addi r3,r3,1
}

void uart_putstr(char *str)
{
    char *c = str;
    while(*c) {
     500:	40 64 00 00 	lbu r4,(r3+0)
     504:	5c 81 ff fa 	bne r4,r1,4ec <uart_putstr+0x18>
     508:	c3 a0 00 00 	ret

0000050c <i2c_putchar>:
 */

static uint8_t data;

void i2c_putchar(uint8_t c)
{
     50c:	78 02 00 00 	mvhi r2,0x0
     510:	38 42 28 b4 	ori r2,r2,0x28b4
     514:	28 44 00 00 	lw r4,(r2+0)
  data = c;
     518:	78 03 00 00 	mvhi r3,0x0
 */

static uint8_t data;

void i2c_putchar(uint8_t c)
{
     51c:	20 21 00 ff 	andi r1,r1,0xff
  data = c;
     520:	38 63 28 bc 	ori r3,r3,0x28bc
     524:	30 61 00 00 	sb (r3+0),r1
	while ((i2c0->ucr & !I2C_BUSY));
     528:	28 82 00 00 	lw r2,(r4+0)
	i2c0->wxrx = data;
     52c:	58 81 00 04 	sw (r4+4),r1
}
     530:	c3 a0 00 00 	ret

00000534 <i2c_putrwaddr>:

void i2c_putrwaddr (uint8_t rw, uint8_t addrs)
{
     534:	78 03 00 00 	mvhi r3,0x0
     538:	20 21 00 ff 	andi r1,r1,0xff
     53c:	20 42 00 ff 	andi r2,r2,0xff
	i2c0 -> rwaddr = ((rw<<7)|addrs>>1);
     540:	38 63 28 b4 	ori r3,r3,0x28b4
     544:	28 64 00 00 	lw r4,(r3+0)
     548:	00 42 00 01 	srui r2,r2,1
     54c:	3c 21 00 07 	sli r1,r1,7
     550:	b8 41 10 00 	or r2,r2,r1
     554:	58 82 00 08 	sw (r4+8),r2
}
     558:	c3 a0 00 00 	ret

0000055c <i2c_putdatas>:

void i2c_putdatas(char *str)	
{
     55c:	40 22 00 00 	lbu r2,(r1+0)
     560:	b8 20 20 00 	mv r4,r1
	char *c= str;
	while (*c) {
     564:	44 40 00 0e 	be r2,r0,59c <i2c_putdatas+0x40>
static uint8_t data;

void i2c_putchar(uint8_t c)
{
  data = c;
	while ((i2c0->ucr & !I2C_BUSY));
     568:	78 01 00 00 	mvhi r1,0x0
     56c:	38 21 28 b4 	ori r1,r1,0x28b4
     570:	28 23 00 00 	lw r3,(r1+0)
     574:	b8 80 08 00 	mv r1,r4
	i2c0->wxrx = data;
     578:	b8 40 20 00 	mv r4,r2
void i2c_putdatas(char *str)	
{
	char *c= str;
	while (*c) {
		i2c_putchar(*c);
    c++;
     57c:	34 21 00 01 	addi r1,r1,1
static uint8_t data;

void i2c_putchar(uint8_t c)
{
  data = c;
	while ((i2c0->ucr & !I2C_BUSY));
     580:	28 62 00 00 	lw r2,(r3+0)
	i2c0->wxrx = data;
     584:	58 64 00 04 	sw (r3+4),r4
}

void i2c_putdatas(char *str)	
{
	char *c= str;
	while (*c) {
     588:	40 22 00 00 	lbu r2,(r1+0)
     58c:	5c 40 ff fb 	bne r2,r0,578 <i2c_putdatas+0x1c>
     590:	78 01 00 00 	mvhi r1,0x0
     594:	38 21 28 bc 	ori r1,r1,0x28bc
     598:	30 24 00 00 	sb (r1+0),r4
     59c:	c3 a0 00 00 	ret

000005a0 <i2c_init>:
    c++;
	}
}

void i2c_init()
{
     5a0:	78 01 00 00 	mvhi r1,0x0
     5a4:	38 21 28 b4 	ori r1,r1,0x28b4
     5a8:	28 23 00 00 	lw r3,(r1+0)
     5ac:	34 02 00 08 	mvi r2,8
     5b0:	58 62 00 00 	sw (r3+0),r2
 i2c0->ucr = I2C_ENA;  
}
     5b4:	c3 a0 00 00 	ret

000005b8 <i2c_sleep>:

void i2c_sleep()
{
     5b8:	78 01 00 00 	mvhi r1,0x0
     5bc:	38 21 28 b4 	ori r1,r1,0x28b4
     5c0:	28 23 00 00 	lw r3,(r1+0)
     5c4:	28 62 00 00 	lw r2,(r3+0)
     5c8:	20 42 00 01 	andi r2,r2,0x1
     5cc:	44 40 00 06 	be r2,r0,5e4 <i2c_sleep+0x2c>
	while((i2c0->ucr & I2C_BUSY))
	i2c0->ucr = 0x00;
     5d0:	34 02 00 00 	mvi r2,0
     5d4:	58 62 00 00 	sw (r3+0),r2
 i2c0->ucr = I2C_ENA;  
}

void i2c_sleep()
{
	while((i2c0->ucr & I2C_BUSY))
     5d8:	28 61 00 00 	lw r1,(r3+0)
     5dc:	20 21 00 01 	andi r1,r1,0x1
     5e0:	5c 20 ff fd 	bne r1,r0,5d4 <i2c_sleep+0x1c>
     5e4:	c3 a0 00 00 	ret

000005e8 <i2c_getdata>:
	i2c0->ucr = 0x00;
}

char i2c_getdata()
{
     5e8:	78 01 00 00 	mvhi r1,0x0
     5ec:	38 21 28 b4 	ori r1,r1,0x28b4
     5f0:	28 22 00 00 	lw r2,(r1+0)
     5f4:	28 41 00 00 	lw r1,(r2+0)
     5f8:	20 21 00 01 	andi r1,r1,0x1
     5fc:	44 20 00 04 	be r1,r0,60c <i2c_getdata+0x24>
     600:	28 41 00 00 	lw r1,(r2+0)
     604:	20 21 00 02 	andi r1,r1,0x2
     608:	44 20 ff fb 	be r1,r0,5f4 <i2c_getdata+0xc>
	while ( (i2c0->ucr & I2C_BUSY) && (!(i2c0->ucr & I2C_ERROR)));
	return i2c0-> wxrx;
     60c:	28 41 00 04 	lw r1,(r2+4)
}
     610:	20 21 00 ff 	andi r1,r1,0xff
     614:	c3 a0 00 00 	ret

00000618 <pwm_init>:

/***************************************************************************
 * PWM Functions
 */
void pwm_init(void)
{
     618:	78 01 00 00 	mvhi r1,0x0
     61c:	38 21 28 b8 	ori r1,r1,0x28b8
     620:	28 23 00 00 	lw r3,(r1+0)
     624:	34 02 00 00 	mvi r2,0
     628:	58 62 00 00 	sw (r3+0),r2
  pwm0->duty = 0;
  pwm0->enable = 0;
     62c:	58 62 00 04 	sw (r3+4),r2
}
     630:	c3 a0 00 00 	ret

00000634 <pwm_duty>:

void pwm_duty(uint8_t duty0)
{
     634:	78 02 00 00 	mvhi r2,0x0
     638:	38 42 28 b8 	ori r2,r2,0x28b8
     63c:	28 43 00 00 	lw r3,(r2+0)
     640:	20 21 00 ff 	andi r1,r1,0xff
  pwm0->duty = duty0;
     644:	58 61 00 00 	sw (r3+0),r1
}
     648:	c3 a0 00 00 	ret

0000064c <pwm_enable>:

void pwm_enable(uint8_t enable0)
{
     64c:	78 02 00 00 	mvhi r2,0x0
     650:	38 42 28 b8 	ori r2,r2,0x28b8
     654:	28 43 00 00 	lw r3,(r2+0)
     658:	20 21 00 ff 	andi r1,r1,0xff
  pwm0->enable = enable0;
     65c:	58 61 00 04 	sw (r3+4),r1
}
     660:	c3 a0 00 00 	ret

00000664 <estimateDiv64To32>:
the exact quotient q is larger than 32 bits, the maximum positive 32-bit
unsigned integer is returned.
-------------------------------------------------------------------------------
*/
static bits32 estimateDiv64To32( bits32 a0, bits32 a1, bits32 b )
{
     664:	37 9c ff f0 	addi sp,sp,-16
     668:	5b 8b 00 10 	sw (sp+16),r11
     66c:	5b 8c 00 0c 	sw (sp+12),r12
     670:	5b 8d 00 08 	sw (sp+8),r13
     674:	5b 8e 00 04 	sw (sp+4),r14
     678:	b8 20 38 00 	mv r7,r1
     67c:	b8 60 60 00 	mv r12,r3
     680:	b8 40 68 00 	mv r13,r2
    bits32 b0, b1;
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
     684:	54 61 00 08 	bgu r3,r1,6a4 <estimateDiv64To32+0x40>
     688:	34 01 ff ff 	mvi r1,-1
    }
    rem0 = ( rem0<<16 ) | ( rem1>>16 );
    z |= ( b0<<16 <= rem0 ) ? 0xFFFF : rem0 / b0;
    return z;

}
     68c:	2b 8b 00 10 	lw r11,(sp+16)
     690:	2b 8c 00 0c 	lw r12,(sp+12)
     694:	2b 8d 00 08 	lw r13,(sp+8)
     698:	2b 8e 00 04 	lw r14,(sp+4)
     69c:	37 9c 00 10 	addi sp,sp,16
     6a0:	c3 a0 00 00 	ret
    bits32 b0, b1;
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
     6a4:	00 69 00 10 	srui r9,r3,16
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
     6a8:	3d 2e 00 10 	sli r14,r9,16
     6ac:	55 c1 00 2f 	bgu r14,r1,768 <estimateDiv64To32+0x104>
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
     6b0:	20 61 ff ff 	andi r1,r3,0xffff
     6b4:	3c 22 00 10 	sli r2,r1,16
     6b8:	34 0b 00 00 	mvi r11,0
     6bc:	78 08 ff ff 	mvhi r8,0xffff
     6c0:	c8 41 28 00 	sub r5,r2,r1
     6c4:	39 08 00 00 	ori r8,r8,0x0
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
     6c8:	21 2a ff ff 	andi r10,r9,0xffff
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
     6cc:	b9 60 20 00 	mv r4,r11
     6d0:	38 06 ff ff 	mvu r6,0xffff
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
     6d4:	3c a2 00 10 	sli r2,r5,16
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
     6d8:	89 46 08 00 	mul r1,r10,r6
    zMiddleA <<= 16;
    z1 += zMiddleA;
     6dc:	b4 44 18 00 	add r3,r2,r4
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
     6e0:	00 a5 00 10 	srui r5,r5,16
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
     6e4:	f4 43 10 00 	cmpgu r2,r2,r3
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
     6e8:	c8 e1 08 00 	sub r1,r7,r1
     6ec:	c8 25 08 00 	sub r1,r1,r5
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
     6f0:	f4 6d 20 00 	cmpgu r4,r3,r13
     6f4:	c8 22 08 00 	sub r1,r1,r2
     6f8:	c8 24 08 00 	sub r1,r1,r4
     6fc:	c8 2b 28 00 	sub r5,r1,r11
INLINE void
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
     700:	c9 a3 10 00 	sub r2,r13,r3
    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    mul32To64( b, z, &term0, &term1 );
    sub64( a0, a1, term0, term1, &rem0, &rem1 );
    while ( ( (sbits32) rem0 ) < 0 ) {
     704:	4c a0 00 0d 	bge r5,r0,738 <estimateDiv64To32+0xd4>
     708:	78 07 ff ff 	mvhi r7,0xffff
     70c:	3d 83 00 10 	sli r3,r12,16
        z -= 0x10000;
     710:	38 e7 00 00 	ori r7,r7,0x0
 add64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{
    bits32 z1;

    z1 = a1 + b1;
     714:	b4 43 30 00 	add r6,r2,r3
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
     718:	f4 46 08 00 	cmpgu r1,r2,r6
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    mul32To64( b, z, &term0, &term1 );
    sub64( a0, a1, term0, term1, &rem0, &rem1 );
    while ( ( (sbits32) rem0 ) < 0 ) {
        z -= 0x10000;
     71c:	b5 07 40 00 	add r8,r8,r7
{
    bits32 z1;

    z1 = a1 + b1;
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
     720:	b4 29 08 00 	add r1,r1,r9
     724:	b4 a1 28 00 	add r5,r5,r1
    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    mul32To64( b, z, &term0, &term1 );
    sub64( a0, a1, term0, term1, &rem0, &rem1 );
    while ( ( (sbits32) rem0 ) < 0 ) {
     728:	b8 c0 10 00 	mv r2,r6
     72c:	4c a0 00 02 	bge r5,r0,734 <estimateDiv64To32+0xd0>
     730:	e3 ff ff f9 	bi 714 <estimateDiv64To32+0xb0>
     734:	b8 c0 10 00 	mv r2,r6
        z -= 0x10000;
        b1 = b<<16;
        add64( rem0, rem1, b0, b1, &rem0, &rem1 );
    }
    rem0 = ( rem0<<16 ) | ( rem1>>16 );
     738:	00 42 00 10 	srui r2,r2,16
     73c:	3c a1 00 10 	sli r1,r5,16
     740:	b8 41 08 00 	or r1,r2,r1
    z |= ( b0<<16 <= rem0 ) ? 0xFFFF : rem0 / b0;
     744:	55 c1 00 19 	bgu r14,r1,7a8 <estimateDiv64To32+0x144>
     748:	38 01 ff ff 	mvu r1,0xffff
     74c:	b8 28 08 00 	or r1,r1,r8
    return z;

}
     750:	2b 8b 00 10 	lw r11,(sp+16)
     754:	2b 8c 00 0c 	lw r12,(sp+12)
     758:	2b 8d 00 08 	lw r13,(sp+8)
     75c:	2b 8e 00 04 	lw r14,(sp+4)
     760:	37 9c 00 10 	addi sp,sp,16
     764:	c3 a0 00 00 	ret
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
     768:	8c 29 08 00 	divu r1,r1,r9
     76c:	20 64 ff ff 	andi r4,r3,0xffff
     770:	3c 28 00 10 	sli r8,r1,16
     774:	21 2a ff ff 	andi r10,r9,0xffff
     778:	01 06 00 10 	srui r6,r8,16
     77c:	21 01 ff ff 	andi r1,r8,0xffff
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
     780:	88 86 10 00 	mul r2,r4,r6
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
     784:	88 2a 18 00 	mul r3,r1,r10
     788:	88 24 20 00 	mul r4,r1,r4
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
     78c:	b4 43 28 00 	add r5,r2,r3
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
     790:	54 65 00 03 	bgu r3,r5,79c <estimateDiv64To32+0x138>
     794:	34 0b 00 00 	mvi r11,0
     798:	e3 ff ff cf 	bi 6d4 <estimateDiv64To32+0x70>
     79c:	78 0b 00 01 	mvhi r11,0x1
     7a0:	39 6b 00 00 	ori r11,r11,0x0
     7a4:	e3 ff ff cc 	bi 6d4 <estimateDiv64To32+0x70>
        z -= 0x10000;
        b1 = b<<16;
        add64( rem0, rem1, b0, b1, &rem0, &rem1 );
    }
    rem0 = ( rem0<<16 ) | ( rem1>>16 );
    z |= ( b0<<16 <= rem0 ) ? 0xFFFF : rem0 / b0;
     7a8:	8c 29 08 00 	divu r1,r1,r9
     7ac:	b8 28 08 00 	or r1,r1,r8
     7b0:	e3 ff ff e8 	bi 750 <estimateDiv64To32+0xec>

000007b4 <float_raise>:
substitute a result value.  If traps are not implemented, this routine
should be simply `float_exception_flags |= flags;'.
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{
     7b4:	78 02 00 00 	mvhi r2,0x0
     7b8:	38 42 28 c4 	ori r2,r2,0x28c4
     7bc:	28 43 00 00 	lw r3,(r2+0)
     7c0:	b8 23 08 00 	or r1,r1,r3
     7c4:	58 41 00 00 	sw (r2+0),r1

    float_exception_flags |= flags;

}
     7c8:	c3 a0 00 00 	ret

000007cc <float32_is_nan>:
Returns 1 if the single-precision floating-point value `a' is a NaN;
otherwise returns 0.
-------------------------------------------------------------------------------
*/
flag float32_is_nan( float32 a )
{
     7cc:	78 02 ff 00 	mvhi r2,0xff00
     7d0:	38 42 00 00 	ori r2,r2,0x0
     7d4:	b4 21 08 00 	add r1,r1,r1

    return ( 0xFF000000 < (bits32) ( a<<1 ) );

}
     7d8:	f4 22 08 00 	cmpgu r1,r1,r2
     7dc:	c3 a0 00 00 	ret

000007e0 <float32_is_signaling_nan>:
Returns 1 if the single-precision floating-point value `a' is a signaling
NaN; otherwise returns 0.
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{
     7e0:	b8 20 20 00 	mv r4,r1

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     7e4:	00 21 00 16 	srui r1,r1,22
     7e8:	34 02 01 fe 	mvi r2,510
     7ec:	20 21 01 ff 	andi r1,r1,0x1ff
     7f0:	34 03 00 00 	mvi r3,0
     7f4:	44 22 00 03 	be r1,r2,800 <float32_is_signaling_nan+0x20>

}
     7f8:	b8 60 08 00 	mv r1,r3
     7fc:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     800:	78 01 00 3f 	mvhi r1,0x3f
     804:	38 21 ff ff 	ori r1,r1,0xffff
     808:	a0 81 08 00 	and r1,r4,r1
     80c:	7c 23 00 00 	cmpnei r3,r1,0

}
     810:	b8 60 08 00 	mv r1,r3
     814:	c3 a0 00 00 	ret

00000818 <propagateFloat32NaN>:
is a NaN, and returns the appropriate NaN result.  If either `a' or `b' is a
signaling NaN, the invalid exception is raised.
-------------------------------------------------------------------------------
*/
static float32 propagateFloat32NaN( float32 a, float32 b )
{
     818:	00 23 00 16 	srui r3,r1,22
     81c:	b8 20 30 00 	mv r6,r1
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     820:	20 63 01 ff 	andi r3,r3,0x1ff
     824:	34 01 01 fe 	mvi r1,510
is a NaN, and returns the appropriate NaN result.  If either `a' or `b' is a
signaling NaN, the invalid exception is raised.
-------------------------------------------------------------------------------
*/
static float32 propagateFloat32NaN( float32 a, float32 b )
{
     828:	b8 40 20 00 	mv r4,r2
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     82c:	34 07 00 00 	mvi r7,0
     830:	44 61 00 24 	be r3,r1,8c0 <propagateFloat32NaN+0xa8>
    aIsNaN = float32_is_nan( a );
    aIsSignalingNaN = float32_is_signaling_nan( a );
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
    b |= 0x00400000;
     834:	00 81 00 16 	srui r1,r4,22
     838:	34 02 01 fe 	mvi r2,510
     83c:	20 21 01 ff 	andi r1,r1,0x1ff
     840:	34 03 00 00 	mvi r3,0
     844:	44 22 00 1a 	be r1,r2,8ac <propagateFloat32NaN+0x94>
     848:	78 05 00 40 	mvhi r5,0x40
     84c:	b8 a0 08 00 	mv r1,r5
    if ( aIsSignalingNaN | bIsSignalingNaN ) float_raise( float_flag_invalid );
     850:	b8 67 10 00 	or r2,r3,r7
    aIsNaN = float32_is_nan( a );
    aIsSignalingNaN = float32_is_signaling_nan( a );
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
    b |= 0x00400000;
     854:	38 21 00 00 	ori r1,r1,0x0
     858:	b8 81 18 00 	or r3,r4,r1
    if ( aIsSignalingNaN | bIsSignalingNaN ) float_raise( float_flag_invalid );
     85c:	44 40 00 06 	be r2,r0,874 <propagateFloat32NaN+0x5c>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
     860:	78 02 00 00 	mvhi r2,0x0
     864:	38 42 28 c4 	ori r2,r2,0x28c4
     868:	28 41 00 00 	lw r1,(r2+0)
     86c:	38 21 00 10 	ori r1,r1,0x10
     870:	58 41 00 00 	sw (r2+0),r1
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
    b |= 0x00400000;
    if ( aIsSignalingNaN | bIsSignalingNaN ) float_raise( float_flag_invalid );
    if ( aIsNaN ) {
     874:	78 02 ff 00 	mvhi r2,0xff00
     878:	38 42 00 00 	ori r2,r2,0x0
     87c:	b4 c6 08 00 	add r1,r6,r6
     880:	50 41 00 05 	bgeu r2,r1,894 <propagateFloat32NaN+0x7c>
        return ( aIsSignalingNaN & bIsNaN ) ? b : a;
     884:	b4 84 08 00 	add r1,r4,r4
     888:	f4 22 08 00 	cmpgu r1,r1,r2
     88c:	a0 e1 08 00 	and r1,r7,r1
     890:	44 20 00 03 	be r1,r0,89c <propagateFloat32NaN+0x84>
    }
    else {
        return b;
    }

}
     894:	b8 60 08 00 	mv r1,r3
     898:	c3 a0 00 00 	ret

    aIsNaN = float32_is_nan( a );
    aIsSignalingNaN = float32_is_signaling_nan( a );
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
     89c:	38 a5 00 00 	ori r5,r5,0x0
     8a0:	b8 c5 18 00 	or r3,r6,r5
    }
    else {
        return b;
    }

}
     8a4:	b8 60 08 00 	mv r1,r3
     8a8:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     8ac:	78 01 00 3f 	mvhi r1,0x3f
     8b0:	38 21 ff ff 	ori r1,r1,0xffff
     8b4:	a0 81 08 00 	and r1,r4,r1
     8b8:	7c 23 00 00 	cmpnei r3,r1,0
     8bc:	e3 ff ff e3 	bi 848 <propagateFloat32NaN+0x30>
     8c0:	78 01 00 3f 	mvhi r1,0x3f
     8c4:	38 21 ff ff 	ori r1,r1,0xffff
     8c8:	a0 c1 08 00 	and r1,r6,r1
     8cc:	7c 27 00 00 	cmpnei r7,r1,0
     8d0:	e3 ff ff d9 	bi 834 <propagateFloat32NaN+0x1c>

000008d4 <roundAndPackFloat32>:
The handling of underflow and overflow follows the IEC/IEEE Standard for
Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 roundAndPackFloat32( flag zSign, int16 zExp, bits32 zSig )
{
     8d4:	78 04 00 00 	mvhi r4,0x0
     8d8:	38 84 28 c0 	ori r4,r4,0x28c0
     8dc:	28 84 00 00 	lw r4,(r4+0)
     8e0:	b8 20 48 00 	mv r9,r1
     8e4:	b8 40 30 00 	mv r6,r2
    flag roundNearestEven;
    int8 roundIncrement, roundBits;
    flag isTiny;

    roundingMode = float_rounding_mode;
    roundNearestEven = roundingMode == float_round_nearest_even;
     8e8:	64 88 00 00 	cmpei r8,r4,0
The handling of underflow and overflow follows the IEC/IEEE Standard for
Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 roundAndPackFloat32( flag zSign, int16 zExp, bits32 zSig )
{
     8ec:	b8 60 38 00 	mv r7,r3
    flag isTiny;

    roundingMode = float_rounding_mode;
    roundNearestEven = roundingMode == float_round_nearest_even;
    roundIncrement = 0x40;
    if ( ! roundNearestEven ) {
     8f0:	34 05 00 40 	mvi r5,64
     8f4:	5d 00 00 07 	bne r8,r0,910 <roundAndPackFloat32+0x3c>
        if ( roundingMode == float_round_to_zero ) {
     8f8:	34 01 00 01 	mvi r1,1
     8fc:	44 81 00 37 	be r4,r1,9d8 <roundAndPackFloat32+0x104>
            roundIncrement = 0;
        }
        else {
            roundIncrement = 0x7F;
            if ( zSign ) {
     900:	45 28 00 34 	be r9,r8,9d0 <roundAndPackFloat32+0xfc>
                if ( roundingMode == float_round_up ) roundIncrement = 0;
     904:	34 01 00 02 	mvi r1,2
     908:	44 81 00 34 	be r4,r1,9d8 <roundAndPackFloat32+0x104>
            }
            else {
                if ( roundingMode == float_round_down ) roundIncrement = 0;
     90c:	34 05 00 7f 	mvi r5,127
            }
        }
    }
    roundBits = zSig & 0x7F;
    if ( 0xFD <= (bits16) zExp ) {
     910:	20 c2 ff ff 	andi r2,r6,0xffff
     914:	34 01 00 fc 	mvi r1,252
            else {
                if ( roundingMode == float_round_down ) roundIncrement = 0;
            }
        }
    }
    roundBits = zSig & 0x7F;
     918:	20 e3 00 7f 	andi r3,r7,0x7f
     91c:	b4 a7 20 00 	add r4,r5,r7
    if ( 0xFD <= (bits16) zExp ) {
     920:	50 22 00 05 	bgeu r1,r2,934 <roundAndPackFloat32+0x60>
        if (    ( 0xFD < zExp )
     924:	34 01 00 fd 	mvi r1,253
     928:	48 c1 00 1e 	bg r6,r1,9a0 <roundAndPackFloat32+0xcc>
     92c:	44 c1 00 1c 	be r6,r1,99c <roundAndPackFloat32+0xc8>
                  && ( (sbits32) ( zSig + roundIncrement ) < 0 ) )
           ) {
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
        }
        if ( zExp < 0 ) {
     930:	48 06 00 2c 	bg r0,r6,9e0 <roundAndPackFloat32+0x10c>
            zExp = 0;
            roundBits = zSig & 0x7F;
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
        }
    }
    if ( roundBits ) float_exception_flags |= float_flag_inexact;
     934:	5c 60 00 0d 	bne r3,r0,968 <roundAndPackFloat32+0x94>
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
     938:	64 61 00 40 	cmpei r1,r3,64
     93c:	00 82 00 07 	srui r2,r4,7
     940:	a0 28 08 00 	and r1,r1,r8
     944:	a4 20 08 00 	not r1,r1
     948:	a0 22 10 00 	and r2,r1,r2
    if ( zSig == 0 ) zExp = 0;
     94c:	3c c3 00 17 	sli r3,r6,23
     950:	5c 40 00 02 	bne r2,r0,958 <roundAndPackFloat32+0x84>
     954:	b8 40 18 00 	mv r3,r2
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
     958:	3d 21 00 1f 	sli r1,r9,31
     95c:	b4 41 08 00 	add r1,r2,r1
     960:	b4 23 08 00 	add r1,r1,r3
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
    if ( zSig == 0 ) zExp = 0;
    return packFloat32( zSign, zExp, zSig );

}
     964:	c3 a0 00 00 	ret
     968:	78 02 00 00 	mvhi r2,0x0
     96c:	38 42 28 c4 	ori r2,r2,0x28c4
            zExp = 0;
            roundBits = zSig & 0x7F;
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
        }
    }
    if ( roundBits ) float_exception_flags |= float_flag_inexact;
     970:	28 41 00 00 	lw r1,(r2+0)
     974:	38 21 00 01 	ori r1,r1,0x1
     978:	58 41 00 00 	sw (r2+0),r1
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
     97c:	64 61 00 40 	cmpei r1,r3,64
     980:	00 82 00 07 	srui r2,r4,7
     984:	a0 28 08 00 	and r1,r1,r8
     988:	a4 20 08 00 	not r1,r1
     98c:	a0 22 10 00 	and r2,r1,r2
    if ( zSig == 0 ) zExp = 0;
     990:	3c c3 00 17 	sli r3,r6,23
     994:	5c 40 ff f1 	bne r2,r0,958 <roundAndPackFloat32+0x84>
     998:	e3 ff ff ef 	bi 954 <roundAndPackFloat32+0x80>
            }
        }
    }
    roundBits = zSig & 0x7F;
    if ( 0xFD <= (bits16) zExp ) {
        if (    ( 0xFD < zExp )
     99c:	4c 80 ff e6 	bge r4,r0,934 <roundAndPackFloat32+0x60>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
     9a0:	78 04 00 00 	mvhi r4,0x0
     9a4:	38 84 28 c4 	ori r4,r4,0x28c4
     9a8:	28 82 00 00 	lw r2,(r4+0)
             || (    ( zExp == 0xFD )
                  && ( (sbits32) ( zSig + roundIncrement ) < 0 ) )
           ) {
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
     9ac:	3d 23 00 1f 	sli r3,r9,31
     9b0:	78 01 7f 80 	mvhi r1,0x7f80
     9b4:	38 21 00 00 	ori r1,r1,0x0
     9b8:	64 a5 00 00 	cmpei r5,r5,0
     9bc:	b4 61 18 00 	add r3,r3,r1
     9c0:	38 42 00 09 	ori r2,r2,0x9
     9c4:	58 82 00 00 	sw (r4+0),r2
     9c8:	c8 65 08 00 	sub r1,r3,r5
     9cc:	c3 a0 00 00 	ret
            roundIncrement = 0x7F;
            if ( zSign ) {
                if ( roundingMode == float_round_up ) roundIncrement = 0;
            }
            else {
                if ( roundingMode == float_round_down ) roundIncrement = 0;
     9d0:	34 01 00 03 	mvi r1,3
     9d4:	5c 81 ff ce 	bne r4,r1,90c <roundAndPackFloat32+0x38>
     9d8:	34 05 00 00 	mvi r5,0
     9dc:	e3 ff ff cd 	bi 910 <roundAndPackFloat32+0x3c>
           ) {
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
        }
        if ( zExp < 0 ) {
            isTiny =
     9e0:	78 01 00 00 	mvhi r1,0x0
     9e4:	38 21 28 c8 	ori r1,r1,0x28c8
     9e8:	28 22 00 00 	lw r2,(r1+0)
     9ec:	34 03 ff ff 	mvi r3,-1
     9f0:	e8 66 18 00 	cmpg r3,r3,r6
     9f4:	64 42 00 01 	cmpei r2,r2,1
     9f8:	34 0a 00 01 	mvi r10,1
     9fc:	b8 43 10 00 	or r2,r2,r3
     a00:	5c 40 00 02 	bne r2,r0,a08 <roundAndPackFloat32+0x134>
     a04:	6c 8a 00 00 	cmpgei r10,r4,0
                   ( float_detect_tininess == float_tininess_before_rounding )
                || ( zExp < -1 )
                || ( zSig + roundIncrement < 0x80000000 );
            shift32RightJamming( zSig, - zExp, &zSig );
     a08:	c8 06 10 00 	sub r2,r0,r6
    bits32 z;

    if ( count == 0 ) {
        z = a;
    }
    else if ( count < 32 ) {
     a0c:	34 01 00 1f 	mvi r1,31
     a10:	48 41 00 06 	bg r2,r1,a28 <roundAndPackFloat32+0x154>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
     a14:	bc e6 08 00 	sl r1,r7,r6
     a18:	80 e2 10 00 	sru r2,r7,r2
     a1c:	7c 21 00 00 	cmpnei r1,r1,0
     a20:	b8 22 38 00 	or r7,r1,r2
     a24:	e0 00 00 02 	bi a2c <roundAndPackFloat32+0x158>
    }
    else {
        z = ( a != 0 );
     a28:	7c e7 00 00 	cmpnei r7,r7,0
            zExp = 0;
            roundBits = zSig & 0x7F;
     a2c:	20 e3 00 7f 	andi r3,r7,0x7f
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
     a30:	7c 61 00 00 	cmpnei r1,r3,0
     a34:	b4 a7 20 00 	add r4,r5,r7
     a38:	a1 41 08 00 	and r1,r10,r1
     a3c:	b8 20 30 00 	mv r6,r1
     a40:	44 20 ff bd 	be r1,r0,934 <roundAndPackFloat32+0x60>
     a44:	78 02 00 00 	mvhi r2,0x0
     a48:	38 42 28 c4 	ori r2,r2,0x28c4
     a4c:	28 41 00 00 	lw r1,(r2+0)
     a50:	b4 a7 20 00 	add r4,r5,r7
     a54:	34 06 00 00 	mvi r6,0
     a58:	38 21 00 04 	ori r1,r1,0x4
     a5c:	58 41 00 00 	sw (r2+0),r1
     a60:	e3 ff ff c4 	bi 970 <roundAndPackFloat32+0x9c>

00000a64 <normalizeRoundAndPackFloat32>:
point exponent.
-------------------------------------------------------------------------------
*/
static float32
 normalizeRoundAndPackFloat32( flag zSign, int16 zExp, bits32 zSig )
{
     a64:	37 9c ff fc 	addi sp,sp,-4
     a68:	5b 9d 00 04 	sw (sp+4),ra
     a6c:	b8 20 30 00 	mv r6,r1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
     a70:	38 01 ff ff 	mvu r1,0xffff
     a74:	b8 40 38 00 	mv r7,r2
     a78:	b8 60 28 00 	mv r5,r3
        shiftCount += 16;
        a <<= 16;
     a7c:	3c 62 00 10 	sli r2,r3,16
     a80:	34 04 00 10 	mvi r4,16
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
     a84:	50 23 00 03 	bgeu r1,r3,a90 <normalizeRoundAndPackFloat32+0x2c>
     a88:	b8 60 10 00 	mv r2,r3
     a8c:	34 04 00 00 	mvi r4,0
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
     a90:	78 01 00 ff 	mvhi r1,0xff
     a94:	38 21 ff ff 	ori r1,r1,0xffff
     a98:	54 41 00 03 	bgu r2,r1,aa4 <normalizeRoundAndPackFloat32+0x40>
        shiftCount += 8;
        a <<= 8;
     a9c:	3c 42 00 08 	sli r2,r2,8
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
     aa0:	34 84 00 08 	addi r4,r4,8
    int8 shiftCount;
	
    shiftCount = countLeadingZeros32( zSig ) - 1;
     aa4:	00 42 00 18 	srui r2,r2,24
     aa8:	78 01 00 00 	mvhi r1,0x0
     aac:	3c 42 00 02 	sli r2,r2,2
     ab0:	38 21 24 64 	ori r1,r1,0x2464
     ab4:	b4 22 08 00 	add r1,r1,r2
     ab8:	28 23 00 00 	lw r3,(r1+0)
     abc:	34 82 ff ff 	addi r2,r4,-1
    return roundAndPackFloat32( zSign, zExp - shiftCount, zSig<<shiftCount );
     ac0:	b8 c0 08 00 	mv r1,r6
static float32
 normalizeRoundAndPackFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    int8 shiftCount;
	
    shiftCount = countLeadingZeros32( zSig ) - 1;
     ac4:	b4 43 10 00 	add r2,r2,r3
    return roundAndPackFloat32( zSign, zExp - shiftCount, zSig<<shiftCount );
     ac8:	bc a2 18 00 	sl r3,r5,r2
     acc:	c8 e2 10 00 	sub r2,r7,r2
     ad0:	fb ff ff 81 	calli 8d4 <roundAndPackFloat32>

}
     ad4:	2b 9d 00 04 	lw ra,(sp+4)
     ad8:	37 9c 00 04 	addi sp,sp,4
     adc:	c3 a0 00 00 	ret

00000ae0 <int32_to_float32>:
the single-precision floating-point format.  The conversion is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 int32_to_float32( int32 a )
{
     ae0:	37 9c ff fc 	addi sp,sp,-4
     ae4:	5b 9d 00 04 	sw (sp+4),ra
     ae8:	b8 20 18 00 	mv r3,r1
    flag zSign;

    if ( a == 0 ) return 0;
     aec:	44 60 00 09 	be r3,r0,b10 <int32_to_float32+0x30>
    if ( a == 0x80000000 ) return packFloat32( 1, 0x9E, 0 );
     af0:	78 01 80 00 	mvhi r1,0x8000
     af4:	38 21 00 00 	ori r1,r1,0x0
     af8:	44 61 00 09 	be r3,r1,b1c <int32_to_float32+0x3c>
    zSign = ( a < 0 );
     afc:	00 61 00 1f 	srui r1,r3,31
    return normalizeRoundAndPackFloat32( zSign, 0x9C, zSign ? - a : a );
     b00:	44 20 00 02 	be r1,r0,b08 <int32_to_float32+0x28>
     b04:	c8 03 18 00 	sub r3,r0,r3
     b08:	34 02 00 9c 	mvi r2,156
     b0c:	fb ff ff d6 	calli a64 <normalizeRoundAndPackFloat32>

}
     b10:	2b 9d 00 04 	lw ra,(sp+4)
     b14:	37 9c 00 04 	addi sp,sp,4
     b18:	c3 a0 00 00 	ret
float32 int32_to_float32( int32 a )
{
    flag zSign;

    if ( a == 0 ) return 0;
    if ( a == 0x80000000 ) return packFloat32( 1, 0x9E, 0 );
     b1c:	78 01 cf 00 	mvhi r1,0xcf00
     b20:	38 21 00 00 	ori r1,r1,0x0
    zSign = ( a < 0 );
    return normalizeRoundAndPackFloat32( zSign, 0x9C, zSign ? - a : a );

}
     b24:	2b 9d 00 04 	lw ra,(sp+4)
     b28:	37 9c 00 04 	addi sp,sp,4
     b2c:	c3 a0 00 00 	ret

00000b30 <float32_to_int32>:
positive integer is returned.  Otherwise, if the conversion overflows, the
largest integer with the same sign as `a' is returned.
-------------------------------------------------------------------------------
*/
int32 float32_to_int32( float32 a )
{
     b30:	00 22 00 17 	srui r2,r1,23
     b34:	b8 20 18 00 	mv r3,r1
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
     b38:	20 45 00 ff 	andi r5,r2,0xff
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
     b3c:	78 01 00 7f 	mvhi r1,0x7f
     b40:	38 21 ff ff 	ori r1,r1,0xffff
    int8 roundingMode;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x96;
     b44:	34 a4 ff 6a 	addi r4,r5,-150
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
     b48:	a0 61 30 00 	and r6,r3,r1
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
     b4c:	00 67 00 1f 	srui r7,r3,31

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x96;
    if ( 0 <= shiftCount ) {
     b50:	48 04 00 1c 	bg r0,r4,bc0 <float32_to_int32+0x90>
        if ( 0x9E <= aExp ) {
     b54:	34 01 00 9d 	mvi r1,157
     b58:	4c 25 00 12 	bge r1,r5,ba0 <float32_to_int32+0x70>
            if ( a == 0xCF000000 ) return 0x80000000;
     b5c:	78 01 cf 00 	mvhi r1,0xcf00
     b60:	38 21 00 00 	ori r1,r1,0x0
     b64:	44 61 00 40 	be r3,r1,c64 <float32_to_int32+0x134>
     b68:	78 02 00 00 	mvhi r2,0x0
     b6c:	38 42 28 c4 	ori r2,r2,0x28c4
     b70:	28 41 00 00 	lw r1,(r2+0)
     b74:	38 21 00 10 	ori r1,r1,0x10
     b78:	58 41 00 00 	sw (r2+0),r1
            float_raise( float_flag_invalid );
            if ( ! aSign || ( ( aExp == 0xFF ) && aSig ) ) return 0x7FFFFFFF;
     b7c:	44 e0 00 05 	be r7,r0,b90 <float32_to_int32+0x60>
     b80:	64 a1 00 ff 	cmpei r1,r5,255
     b84:	7c c2 00 00 	cmpnei r2,r6,0
     b88:	a0 22 08 00 	and r1,r1,r2
     b8c:	44 20 00 36 	be r1,r0,c64 <float32_to_int32+0x134>
            if ( aSign ) {
                z += ( roundingMode == float_round_down ) & zExtra;
                z = - z;
            }
            else {
                z += ( roundingMode == float_round_up ) & zExtra;
     b90:	78 03 7f ff 	mvhi r3,0x7fff
     b94:	38 63 ff ff 	ori r3,r3,0xffff
            }
        }
    }
    return z;

}
     b98:	b8 60 08 00 	mv r1,r3
     b9c:	c3 a0 00 00 	ret
            if ( a == 0xCF000000 ) return 0x80000000;
            float_raise( float_flag_invalid );
            if ( ! aSign || ( ( aExp == 0xFF ) && aSig ) ) return 0x7FFFFFFF;
            return 0x80000000;
        }
        z = ( aSig | 0x00800000 )<<shiftCount;
     ba0:	78 01 00 80 	mvhi r1,0x80
     ba4:	38 21 00 00 	ori r1,r1,0x0
     ba8:	b8 c1 08 00 	or r1,r6,r1
     bac:	bc 24 18 00 	sl r3,r1,r4
        if ( aSign ) z = - z;
     bb0:	44 e0 ff fa 	be r7,r0,b98 <float32_to_int32+0x68>
        if ( roundingMode == float_round_nearest_even ) {
            if ( (sbits32) zExtra < 0 ) {
                ++z;
                if ( (bits32) ( zExtra<<1 ) == 0 ) z &= ~1;
            }
            if ( aSign ) z = - z;
     bb4:	c8 03 18 00 	sub r3,r0,r3
            }
        }
    }
    return z;

}
     bb8:	b8 60 08 00 	mv r1,r3
     bbc:	c3 a0 00 00 	ret
        }
        z = ( aSig | 0x00800000 )<<shiftCount;
        if ( aSign ) z = - z;
    }
    else {
        if ( aExp < 0x7E ) {
     bc0:	34 01 00 7d 	mvi r1,125
     bc4:	48 a1 00 16 	bg r5,r1,c1c <float32_to_int32+0xec>
            zExtra = aExp | aSig;
     bc8:	b8 a6 20 00 	or r4,r5,r6
     bcc:	34 03 00 00 	mvi r3,0
        else {
            aSig |= 0x00800000;
            zExtra = aSig<<( shiftCount & 31 );
            z = aSig>>( - shiftCount );
        }
        if ( zExtra ) float_exception_flags |= float_flag_inexact;
     bd0:	44 80 00 06 	be r4,r0,be8 <float32_to_int32+0xb8>
     bd4:	78 02 00 00 	mvhi r2,0x0
     bd8:	38 42 28 c4 	ori r2,r2,0x28c4
     bdc:	28 41 00 00 	lw r1,(r2+0)
     be0:	38 21 00 01 	ori r1,r1,0x1
     be4:	58 41 00 00 	sw (r2+0),r1
        roundingMode = float_rounding_mode;
     be8:	78 01 00 00 	mvhi r1,0x0
     bec:	38 21 28 c0 	ori r1,r1,0x28c0
     bf0:	28 21 00 00 	lw r1,(r1+0)
        if ( roundingMode == float_round_nearest_even ) {
     bf4:	5c 20 00 11 	bne r1,r0,c38 <float32_to_int32+0x108>
            if ( (sbits32) zExtra < 0 ) {
     bf8:	4c 81 00 06 	bge r4,r1,c10 <float32_to_int32+0xe0>
                ++z;
                if ( (bits32) ( zExtra<<1 ) == 0 ) z &= ~1;
     bfc:	b4 84 08 00 	add r1,r4,r4
        }
        if ( zExtra ) float_exception_flags |= float_flag_inexact;
        roundingMode = float_rounding_mode;
        if ( roundingMode == float_round_nearest_even ) {
            if ( (sbits32) zExtra < 0 ) {
                ++z;
     c00:	34 63 00 01 	addi r3,r3,1
                if ( (bits32) ( zExtra<<1 ) == 0 ) z &= ~1;
     c04:	5c 20 00 03 	bne r1,r0,c10 <float32_to_int32+0xe0>
     c08:	34 01 ff fe 	mvi r1,-2
     c0c:	a0 61 18 00 	and r3,r3,r1
            }
            if ( aSign ) z = - z;
     c10:	44 e0 ff e2 	be r7,r0,b98 <float32_to_int32+0x68>
     c14:	c8 03 18 00 	sub r3,r0,r3
     c18:	e3 ff ff e8 	bi bb8 <float32_to_int32+0x88>
        if ( aExp < 0x7E ) {
            zExtra = aExp | aSig;
            z = 0;
        }
        else {
            aSig |= 0x00800000;
     c1c:	78 01 00 80 	mvhi r1,0x80
     c20:	38 21 00 00 	ori r1,r1,0x0
     c24:	b8 c1 08 00 	or r1,r6,r1
            zExtra = aSig<<( shiftCount & 31 );
            z = aSig>>( - shiftCount );
     c28:	c8 04 10 00 	sub r2,r0,r4
     c2c:	80 22 18 00 	sru r3,r1,r2
            zExtra = aExp | aSig;
            z = 0;
        }
        else {
            aSig |= 0x00800000;
            zExtra = aSig<<( shiftCount & 31 );
     c30:	bc 24 20 00 	sl r4,r1,r4
     c34:	e3 ff ff e7 	bi bd0 <float32_to_int32+0xa0>
                if ( (bits32) ( zExtra<<1 ) == 0 ) z &= ~1;
            }
            if ( aSign ) z = - z;
        }
        else {
            zExtra = ( zExtra != 0 );
     c38:	7c 82 00 00 	cmpnei r2,r4,0
            if ( aSign ) {
     c3c:	44 e0 00 06 	be r7,r0,c54 <float32_to_int32+0x124>
                z += ( roundingMode == float_round_down ) & zExtra;
     c40:	64 21 00 03 	cmpei r1,r1,3
     c44:	a0 41 08 00 	and r1,r2,r1
     c48:	b4 23 08 00 	add r1,r1,r3
                z = - z;
     c4c:	c8 01 18 00 	sub r3,r0,r1
     c50:	e3 ff ff d2 	bi b98 <float32_to_int32+0x68>
            }
            else {
                z += ( roundingMode == float_round_up ) & zExtra;
     c54:	64 21 00 02 	cmpei r1,r1,2
     c58:	a0 41 08 00 	and r1,r2,r1
     c5c:	b4 23 18 00 	add r3,r1,r3
     c60:	e3 ff ff ce 	bi b98 <float32_to_int32+0x68>
    shiftCount = aExp - 0x96;
    if ( 0 <= shiftCount ) {
        if ( 0x9E <= aExp ) {
            if ( a == 0xCF000000 ) return 0x80000000;
            float_raise( float_flag_invalid );
            if ( ! aSign || ( ( aExp == 0xFF ) && aSig ) ) return 0x7FFFFFFF;
     c64:	78 03 80 00 	mvhi r3,0x8000
     c68:	38 63 00 00 	ori r3,r3,0x0
     c6c:	e3 ff ff cb 	bi b98 <float32_to_int32+0x68>

00000c70 <float32_to_int32_round_to_zero>:
conversion overflows, the largest integer with the same sign as `a' is
returned.
-------------------------------------------------------------------------------
*/
int32 float32_to_int32_round_to_zero( float32 a )
{
     c70:	00 22 00 17 	srui r2,r1,23
     c74:	b8 20 18 00 	mv r3,r1
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
     c78:	20 45 00 ff 	andi r5,r2,0xff
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
     c7c:	78 01 00 7f 	mvhi r1,0x7f
     c80:	38 21 ff ff 	ori r1,r1,0xffff
    int32 z;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x9E;
     c84:	34 a4 ff 62 	addi r4,r5,-158
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
     c88:	a0 61 30 00 	and r6,r3,r1
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
     c8c:	00 67 00 1f 	srui r7,r3,31

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x9E;
    if ( 0 <= shiftCount ) {
     c90:	48 04 00 11 	bg r0,r4,cd4 <float32_to_int32_round_to_zero+0x64>
        if ( a == 0xCF000000 ) return 0x80000000;
     c94:	78 01 cf 00 	mvhi r1,0xcf00
     c98:	38 21 00 00 	ori r1,r1,0x0
     c9c:	44 61 00 0b 	be r3,r1,cc8 <float32_to_int32_round_to_zero+0x58>
     ca0:	78 02 00 00 	mvhi r2,0x0
     ca4:	38 42 28 c4 	ori r2,r2,0x28c4
     ca8:	28 41 00 00 	lw r1,(r2+0)
     cac:	38 21 00 10 	ori r1,r1,0x10
     cb0:	58 41 00 00 	sw (r2+0),r1
        float_raise( float_flag_invalid );
        if ( ! aSign || ( ( aExp == 0xFF ) && aSig ) ) return 0x7FFFFFFF;
     cb4:	44 e0 00 26 	be r7,r0,d4c <float32_to_int32_round_to_zero+0xdc>
     cb8:	64 a1 00 ff 	cmpei r1,r5,255
     cbc:	7c c2 00 00 	cmpnei r2,r6,0
     cc0:	a0 22 08 00 	and r1,r1,r2
     cc4:	5c 20 00 22 	bne r1,r0,d4c <float32_to_int32_round_to_zero+0xdc>
     cc8:	78 04 80 00 	mvhi r4,0x8000
     ccc:	38 84 00 00 	ori r4,r4,0x0
     cd0:	e0 00 00 0c 	bi d00 <float32_to_int32_round_to_zero+0x90>
        return 0x80000000;
    }
    else if ( aExp <= 0x7E ) {
     cd4:	34 01 00 7e 	mvi r1,126
     cd8:	48 a1 00 0c 	bg r5,r1,d08 <float32_to_int32_round_to_zero+0x98>
        if ( aExp | aSig ) float_exception_flags |= float_flag_inexact;
     cdc:	b8 a6 08 00 	or r1,r5,r6
     ce0:	b8 20 20 00 	mv r4,r1
     ce4:	44 20 00 07 	be r1,r0,d00 <float32_to_int32_round_to_zero+0x90>
     ce8:	78 02 00 00 	mvhi r2,0x0
     cec:	38 42 28 c4 	ori r2,r2,0x28c4
     cf0:	28 41 00 00 	lw r1,(r2+0)
     cf4:	34 04 00 00 	mvi r4,0
     cf8:	38 21 00 01 	ori r1,r1,0x1
     cfc:	58 41 00 00 	sw (r2+0),r1
    if ( (bits32) ( aSig<<( shiftCount & 31 ) ) ) {
        float_exception_flags |= float_flag_inexact;
    }
    return aSign ? - z : z;

}
     d00:	b8 80 08 00 	mv r1,r4
     d04:	c3 a0 00 00 	ret
    }
    else if ( aExp <= 0x7E ) {
        if ( aExp | aSig ) float_exception_flags |= float_flag_inexact;
        return 0;
    }
    aSig = ( aSig | 0x00800000 )<<8;
     d08:	78 01 00 80 	mvhi r1,0x80
     d0c:	38 21 00 00 	ori r1,r1,0x0
     d10:	b8 c1 08 00 	or r1,r6,r1
     d14:	3c 21 00 08 	sli r1,r1,8
    z = aSig>>( - shiftCount );
     d18:	c8 04 10 00 	sub r2,r0,r4
    if ( (bits32) ( aSig<<( shiftCount & 31 ) ) ) {
     d1c:	bc 24 18 00 	sl r3,r1,r4
    else if ( aExp <= 0x7E ) {
        if ( aExp | aSig ) float_exception_flags |= float_flag_inexact;
        return 0;
    }
    aSig = ( aSig | 0x00800000 )<<8;
    z = aSig>>( - shiftCount );
     d20:	80 22 20 00 	sru r4,r1,r2
    if ( (bits32) ( aSig<<( shiftCount & 31 ) ) ) {
     d24:	44 60 00 06 	be r3,r0,d3c <float32_to_int32_round_to_zero+0xcc>
        float_exception_flags |= float_flag_inexact;
     d28:	78 02 00 00 	mvhi r2,0x0
     d2c:	38 42 28 c4 	ori r2,r2,0x28c4
     d30:	28 41 00 00 	lw r1,(r2+0)
     d34:	38 21 00 01 	ori r1,r1,0x1
     d38:	58 41 00 00 	sw (r2+0),r1
    }
    return aSign ? - z : z;
     d3c:	44 e0 ff f1 	be r7,r0,d00 <float32_to_int32_round_to_zero+0x90>
     d40:	c8 04 20 00 	sub r4,r0,r4

}
     d44:	b8 80 08 00 	mv r1,r4
     d48:	c3 a0 00 00 	ret
    aSig = ( aSig | 0x00800000 )<<8;
    z = aSig>>( - shiftCount );
    if ( (bits32) ( aSig<<( shiftCount & 31 ) ) ) {
        float_exception_flags |= float_flag_inexact;
    }
    return aSign ? - z : z;
     d4c:	78 04 7f ff 	mvhi r4,0x7fff
     d50:	38 84 ff ff 	ori r4,r4,0xffff
     d54:	e3 ff ff eb 	bi d00 <float32_to_int32_round_to_zero+0x90>

00000d58 <float32_round_to_int>:
operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_round_to_int( float32 a )
{
     d58:	37 9c ff fc 	addi sp,sp,-4
     d5c:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
     d60:	00 22 00 17 	srui r2,r1,23
    bits32 lastBitMask, roundBitsMask;
    int8 roundingMode;
    float32 z;

    aExp = extractFloat32Exp( a );
    if ( 0x96 <= aExp ) {
     d64:	34 03 00 95 	mvi r3,149
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
     d68:	20 44 00 ff 	andi r4,r2,0xff
operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_round_to_int( float32 a )
{
     d6c:	b8 20 28 00 	mv r5,r1
    bits32 lastBitMask, roundBitsMask;
    int8 roundingMode;
    float32 z;

    aExp = extractFloat32Exp( a );
    if ( 0x96 <= aExp ) {
     d70:	4c 64 00 07 	bge r3,r4,d8c <float32_round_to_int+0x34>
        if ( ( aExp == 0xFF ) && extractFloat32Frac( a ) ) {
     d74:	34 02 00 ff 	mvi r2,255
     d78:	44 82 00 34 	be r4,r2,e48 <float32_round_to_int+0xf0>
    }
    z &= ~ roundBitsMask;
    if ( z != a ) float_exception_flags |= float_flag_inexact;
    return z;

}
     d7c:	b8 a0 08 00 	mv r1,r5
     d80:	2b 9d 00 04 	lw ra,(sp+4)
     d84:	37 9c 00 04 	addi sp,sp,4
     d88:	c3 a0 00 00 	ret
        if ( ( aExp == 0xFF ) && extractFloat32Frac( a ) ) {
            return propagateFloat32NaN( a, a );
        }
        return a;
    }
    if ( aExp <= 0x7E ) {
     d8c:	34 07 00 7e 	mvi r7,126
     d90:	48 87 00 13 	bg r4,r7,ddc <float32_round_to_int+0x84>
        if ( (bits32) ( a<<1 ) == 0 ) return a;
     d94:	b4 21 08 00 	add r1,r1,r1
     d98:	44 20 ff f9 	be r1,r0,d7c <float32_round_to_int+0x24>
        float_exception_flags |= float_flag_inexact;
     d9c:	78 03 00 00 	mvhi r3,0x0
     da0:	38 63 28 c4 	ori r3,r3,0x28c4
     da4:	28 62 00 00 	lw r2,(r3+0)
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
     da8:	78 01 00 00 	mvhi r1,0x0
     dac:	38 21 28 c0 	ori r1,r1,0x28c0
     db0:	28 26 00 00 	lw r6,(r1+0)
        }
        return a;
    }
    if ( aExp <= 0x7E ) {
        if ( (bits32) ( a<<1 ) == 0 ) return a;
        float_exception_flags |= float_flag_inexact;
     db4:	38 42 00 01 	ori r2,r2,0x1
     db8:	58 62 00 00 	sw (r3+0),r2
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
     dbc:	34 01 00 02 	mvi r1,2
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
     dc0:	00 a2 00 1f 	srui r2,r5,31
    }
    if ( aExp <= 0x7E ) {
        if ( (bits32) ( a<<1 ) == 0 ) return a;
        float_exception_flags |= float_flag_inexact;
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
     dc4:	44 c1 00 41 	be r6,r1,ec8 <float32_round_to_int+0x170>
     dc8:	34 01 00 03 	mvi r1,3
     dcc:	44 c1 00 3a 	be r6,r1,eb4 <float32_round_to_int+0x15c>
     dd0:	44 c0 00 2f 	be r6,r0,e8c <float32_round_to_int+0x134>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
     dd4:	3c 45 00 1f 	sli r5,r2,31
     dd8:	e3 ff ff e9 	bi d7c <float32_round_to_int+0x24>
    }
    lastBitMask = 1;
    lastBitMask <<= 0x96 - aExp;
    roundBitsMask = lastBitMask - 1;
    z = a;
    roundingMode = float_rounding_mode;
     ddc:	78 01 00 00 	mvhi r1,0x0
     de0:	38 21 28 c0 	ori r1,r1,0x28c0
            return aSign ? 0x80000000 : 0x3F800000;
        }
        return packFloat32( aSign, 0, 0 );
    }
    lastBitMask = 1;
    lastBitMask <<= 0x96 - aExp;
     de4:	34 02 00 96 	mvi r2,150
     de8:	c8 44 10 00 	sub r2,r2,r4
    roundBitsMask = lastBitMask - 1;
    z = a;
    roundingMode = float_rounding_mode;
     dec:	28 24 00 00 	lw r4,(r1+0)
            return aSign ? 0x80000000 : 0x3F800000;
        }
        return packFloat32( aSign, 0, 0 );
    }
    lastBitMask = 1;
    lastBitMask <<= 0x96 - aExp;
     df0:	34 01 00 01 	mvi r1,1
     df4:	bc 22 18 00 	sl r3,r1,r2
    roundBitsMask = lastBitMask - 1;
     df8:	34 67 ff ff 	addi r7,r3,-1
    z = a;
    roundingMode = float_rounding_mode;
    if ( roundingMode == float_round_nearest_even ) {
     dfc:	44 80 00 1b 	be r4,r0,e68 <float32_round_to_int+0x110>
        z += lastBitMask>>1;
        if ( ( z & roundBitsMask ) == 0 ) z &= ~ lastBitMask;
    }
    else if ( roundingMode != float_round_to_zero ) {
     e00:	44 81 00 21 	be r4,r1,e84 <float32_round_to_int+0x12c>
        if ( extractFloat32Sign( z ) ^ ( roundingMode == float_round_up ) ) {
     e04:	64 82 00 02 	cmpei r2,r4,2
     e08:	00 a1 00 1f 	srui r1,r5,31
            z += roundBitsMask;
     e0c:	b4 e5 30 00 	add r6,r7,r5
    if ( roundingMode == float_round_nearest_even ) {
        z += lastBitMask>>1;
        if ( ( z & roundBitsMask ) == 0 ) z &= ~ lastBitMask;
    }
    else if ( roundingMode != float_round_to_zero ) {
        if ( extractFloat32Sign( z ) ^ ( roundingMode == float_round_up ) ) {
     e10:	44 41 00 1d 	be r2,r1,e84 <float32_round_to_int+0x12c>
            z += roundBitsMask;
        }
    }
    z &= ~ roundBitsMask;
     e14:	a4 e0 08 00 	not r1,r7
     e18:	a0 c1 18 00 	and r3,r6,r1
    if ( z != a ) float_exception_flags |= float_flag_inexact;
     e1c:	44 65 ff d8 	be r3,r5,d7c <float32_round_to_int+0x24>
     e20:	78 02 00 00 	mvhi r2,0x0
     e24:	38 42 28 c4 	ori r2,r2,0x28c4
     e28:	28 41 00 00 	lw r1,(r2+0)
     e2c:	b8 60 28 00 	mv r5,r3
     e30:	38 21 00 01 	ori r1,r1,0x1
     e34:	58 41 00 00 	sw (r2+0),r1
    return z;

}
     e38:	b8 a0 08 00 	mv r1,r5
     e3c:	2b 9d 00 04 	lw ra,(sp+4)
     e40:	37 9c 00 04 	addi sp,sp,4
     e44:	c3 a0 00 00 	ret
    int8 roundingMode;
    float32 z;

    aExp = extractFloat32Exp( a );
    if ( 0x96 <= aExp ) {
        if ( ( aExp == 0xFF ) && extractFloat32Frac( a ) ) {
     e48:	78 02 00 7f 	mvhi r2,0x7f
     e4c:	38 42 ff ff 	ori r2,r2,0xffff
     e50:	a0 22 10 00 	and r2,r1,r2
     e54:	44 40 ff ca 	be r2,r0,d7c <float32_round_to_int+0x24>
            return propagateFloat32NaN( a, a );
     e58:	b8 20 10 00 	mv r2,r1
     e5c:	fb ff fe 6f 	calli 818 <propagateFloat32NaN>
     e60:	b8 20 28 00 	mv r5,r1
     e64:	e3 ff ff c6 	bi d7c <float32_round_to_int+0x24>
    lastBitMask <<= 0x96 - aExp;
    roundBitsMask = lastBitMask - 1;
    z = a;
    roundingMode = float_rounding_mode;
    if ( roundingMode == float_round_nearest_even ) {
        z += lastBitMask>>1;
     e68:	80 61 08 00 	sru r1,r3,r1
     e6c:	b4 25 30 00 	add r6,r1,r5
        if ( ( z & roundBitsMask ) == 0 ) z &= ~ lastBitMask;
     e70:	a0 c7 10 00 	and r2,r6,r7
     e74:	5c 44 ff e8 	bne r2,r4,e14 <float32_round_to_int+0xbc>
     e78:	a4 60 08 00 	not r1,r3
     e7c:	a0 c1 30 00 	and r6,r6,r1
     e80:	e3 ff ff e5 	bi e14 <float32_round_to_int+0xbc>
    }
    else if ( roundingMode != float_round_to_zero ) {
        if ( extractFloat32Sign( z ) ^ ( roundingMode == float_round_up ) ) {
            z += roundBitsMask;
     e84:	b8 a0 30 00 	mv r6,r5
     e88:	e3 ff ff e3 	bi e14 <float32_round_to_int+0xbc>
        if ( (bits32) ( a<<1 ) == 0 ) return a;
        float_exception_flags |= float_flag_inexact;
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
         case float_round_nearest_even:
            if ( ( aExp == 0x7E ) && extractFloat32Frac( a ) ) {
     e8c:	5c 87 ff d2 	bne r4,r7,dd4 <float32_round_to_int+0x7c>
     e90:	78 01 00 7f 	mvhi r1,0x7f
     e94:	38 21 ff ff 	ori r1,r1,0xffff
     e98:	a0 a1 08 00 	and r1,r5,r1
     e9c:	44 20 ff ce 	be r1,r0,dd4 <float32_round_to_int+0x7c>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
     ea0:	3c 42 00 1f 	sli r2,r2,31
     ea4:	78 01 3f 80 	mvhi r1,0x3f80
     ea8:	38 21 00 00 	ori r1,r1,0x0
     eac:	b4 41 28 00 	add r5,r2,r1
     eb0:	e3 ff ff b3 	bi d7c <float32_round_to_int+0x24>
            if ( ( aExp == 0x7E ) && extractFloat32Frac( a ) ) {
                return packFloat32( aSign, 0x7F, 0 );
            }
            break;
         case float_round_down:
            return aSign ? 0xBF800000 : 0;
     eb4:	b8 40 28 00 	mv r5,r2
     eb8:	44 40 ff b1 	be r2,r0,d7c <float32_round_to_int+0x24>
     ebc:	78 05 bf 80 	mvhi r5,0xbf80
     ec0:	38 a5 00 00 	ori r5,r5,0x0
     ec4:	e3 ff ff ae 	bi d7c <float32_round_to_int+0x24>
         case float_round_up:
            return aSign ? 0x80000000 : 0x3F800000;
     ec8:	5c 40 00 04 	bne r2,r0,ed8 <float32_round_to_int+0x180>
     ecc:	78 05 3f 80 	mvhi r5,0x3f80
     ed0:	38 a5 00 00 	ori r5,r5,0x0
     ed4:	e3 ff ff aa 	bi d7c <float32_round_to_int+0x24>
     ed8:	78 05 80 00 	mvhi r5,0x8000
     edc:	38 a5 00 00 	ori r5,r5,0x0
     ee0:	e3 ff ff a7 	bi d7c <float32_round_to_int+0x24>

00000ee4 <addFloat32Sigs>:
addition is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 addFloat32Sigs( float32 a, float32 b, flag zSign )
{
     ee4:	37 9c ff fc 	addi sp,sp,-4
     ee8:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
     eec:	00 26 00 17 	srui r6,r1,23
    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 6;
     ef0:	00 47 00 17 	srui r7,r2,23
     ef4:	78 04 00 7f 	mvhi r4,0x7f
     ef8:	38 84 ff ff 	ori r4,r4,0xffff
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
     efc:	20 c6 00 ff 	andi r6,r6,0xff
     f00:	20 e7 00 ff 	andi r7,r7,0xff
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 6;
    bSig <<= 6;
     f04:	a0 44 28 00 	and r5,r2,r4

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
     f08:	c8 c7 48 00 	sub r9,r6,r7
    aSig <<= 6;
     f0c:	a0 24 20 00 	and r4,r1,r4
     f10:	3c 8a 00 06 	sli r10,r4,6
addition is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 addFloat32Sigs( float32 a, float32 b, flag zSign )
{
     f14:	b8 20 40 00 	mv r8,r1
     f18:	b8 60 e8 00 	mv ra,r3
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 6;
    bSig <<= 6;
     f1c:	3c a4 00 06 	sli r4,r5,6
    if ( 0 < expDiff ) {
     f20:	4c 09 00 1b 	bge r0,r9,f8c <addFloat32Sigs+0xa8>
        if ( aExp == 0xFF ) {
     f24:	34 03 00 ff 	mvi r3,255
     f28:	44 c3 00 15 	be r6,r3,f7c <addFloat32Sigs+0x98>
            if ( aSig ) return propagateFloat32NaN( a, b );
            return a;
        }
        if ( bExp == 0 ) {
     f2c:	5c e0 00 21 	bne r7,r0,fb0 <addFloat32Sigs+0xcc>
            --expDiff;
     f30:	35 29 ff ff 	addi r9,r9,-1
     f34:	78 08 20 00 	mvhi r8,0x2000
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
     f38:	5d 27 00 22 	bne r9,r7,fc0 <addFloat32Sigs+0xdc>
     f3c:	78 08 20 00 	mvhi r8,0x2000
        zSig = 0x40000000 + aSig + bSig;
        zExp = aExp;
        goto roundAndPack;
    }
    aSig |= 0x20000000;
    zSig = ( aSig + bSig )<<1;
     f40:	39 08 00 00 	ori r8,r8,0x0
     f44:	b9 48 08 00 	or r1,r10,r8
     f48:	b4 24 18 00 	add r3,r1,r4
     f4c:	b4 63 08 00 	add r1,r3,r3
    --zExp;
    if ( (sbits32) zSig < 0 ) {
     f50:	48 01 00 03 	bg r0,r1,f5c <addFloat32Sigs+0x78>
        zExp = aExp;
        goto roundAndPack;
    }
    aSig |= 0x20000000;
    zSig = ( aSig + bSig )<<1;
    --zExp;
     f54:	34 c6 ff ff 	addi r6,r6,-1
     f58:	b8 20 18 00 	mv r3,r1
    if ( (sbits32) zSig < 0 ) {
        zSig = aSig + bSig;
        ++zExp;
    }
 roundAndPack:
    return roundAndPackFloat32( zSign, zExp, zSig );
     f5c:	bb a0 08 00 	mv r1,ra
     f60:	b8 c0 10 00 	mv r2,r6
     f64:	fb ff fe 5c 	calli 8d4 <roundAndPackFloat32>
     f68:	b8 20 40 00 	mv r8,r1

}
     f6c:	b9 00 08 00 	mv r1,r8
     f70:	2b 9d 00 04 	lw ra,(sp+4)
     f74:	37 9c 00 04 	addi sp,sp,4
     f78:	c3 a0 00 00 	ret
    expDiff = aExp - bExp;
    aSig <<= 6;
    bSig <<= 6;
    if ( 0 < expDiff ) {
        if ( aExp == 0xFF ) {
            if ( aSig ) return propagateFloat32NaN( a, b );
     f7c:	45 40 ff fc 	be r10,r0,f6c <addFloat32Sigs+0x88>
        shift32RightJamming( aSig, - expDiff, &aSig );
        zExp = bExp;
    }
    else {
        if ( aExp == 0xFF ) {
            if ( aSig | bSig ) return propagateFloat32NaN( a, b );
     f80:	fb ff fe 26 	calli 818 <propagateFloat32NaN>
     f84:	b8 20 40 00 	mv r8,r1
     f88:	e3 ff ff f9 	bi f6c <addFloat32Sigs+0x88>
            bSig |= 0x20000000;
        }
        shift32RightJamming( bSig, expDiff, &bSig );
        zExp = aExp;
    }
    else if ( expDiff < 0 ) {
     f8c:	5d 20 00 1a 	bne r9,r0,ff4 <addFloat32Sigs+0x110>
        }
        shift32RightJamming( aSig, - expDiff, &aSig );
        zExp = bExp;
    }
    else {
        if ( aExp == 0xFF ) {
     f90:	34 03 00 ff 	mvi r3,255
     f94:	44 c3 00 15 	be r6,r3,fe8 <addFloat32Sigs+0x104>
            if ( aSig | bSig ) return propagateFloat32NaN( a, b );
            return a;
        }
        if ( aExp == 0 ) return packFloat32( zSign, 0, ( aSig + bSig )>>6 );
     f98:	44 c0 00 28 	be r6,r0,1038 <addFloat32Sigs+0x154>
        zSig = 0x40000000 + aSig + bSig;
     f9c:	78 01 40 00 	mvhi r1,0x4000
     fa0:	38 21 00 00 	ori r1,r1,0x0
     fa4:	b5 41 08 00 	add r1,r10,r1
     fa8:	b4 24 18 00 	add r3,r1,r4
     fac:	e3 ff ff ec 	bi f5c <addFloat32Sigs+0x78>
        }
        if ( bExp == 0 ) {
            --expDiff;
        }
        else {
            bSig |= 0x20000000;
     fb0:	78 08 20 00 	mvhi r8,0x2000
     fb4:	b9 00 08 00 	mv r1,r8
     fb8:	38 21 00 00 	ori r1,r1,0x0
     fbc:	b8 81 20 00 	or r4,r4,r1
        z = a;
    }
    else if ( count < 32 ) {
     fc0:	34 01 00 1f 	mvi r1,31
     fc4:	49 21 00 07 	bg r9,r1,fe0 <addFloat32Sigs+0xfc>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
     fc8:	c8 09 08 00 	sub r1,r0,r9
     fcc:	bc 81 08 00 	sl r1,r4,r1
     fd0:	80 89 10 00 	sru r2,r4,r9
     fd4:	7c 21 00 00 	cmpnei r1,r1,0
     fd8:	b8 22 20 00 	or r4,r1,r2
     fdc:	e3 ff ff d9 	bi f40 <addFloat32Sigs+0x5c>
    }
    else {
        z = ( a != 0 );
     fe0:	7c 84 00 00 	cmpnei r4,r4,0
     fe4:	e3 ff ff d7 	bi f40 <addFloat32Sigs+0x5c>
        shift32RightJamming( aSig, - expDiff, &aSig );
        zExp = bExp;
    }
    else {
        if ( aExp == 0xFF ) {
            if ( aSig | bSig ) return propagateFloat32NaN( a, b );
     fe8:	b8 8a 18 00 	or r3,r4,r10
     fec:	44 60 ff e0 	be r3,r0,f6c <addFloat32Sigs+0x88>
     ff0:	e3 ff ff e4 	bi f80 <addFloat32Sigs+0x9c>
        }
        shift32RightJamming( bSig, expDiff, &bSig );
        zExp = aExp;
    }
    else if ( expDiff < 0 ) {
        if ( bExp == 0xFF ) {
     ff4:	34 03 00 ff 	mvi r3,255
     ff8:	44 e3 00 18 	be r7,r3,1058 <addFloat32Sigs+0x174>
            if ( bSig ) return propagateFloat32NaN( a, b );
            return packFloat32( zSign, 0xFF, 0 );
        }
        if ( aExp == 0 ) {
     ffc:	44 c0 00 14 	be r6,r0,104c <addFloat32Sigs+0x168>
            ++expDiff;
        }
        else {
            aSig |= 0x20000000;
    1000:	78 08 20 00 	mvhi r8,0x2000
    1004:	b9 00 08 00 	mv r1,r8
    1008:	38 21 00 00 	ori r1,r1,0x0
    100c:	b9 41 50 00 	or r10,r10,r1
        }
        shift32RightJamming( aSig, - expDiff, &aSig );
    1010:	c8 09 10 00 	sub r2,r0,r9
            return a;
        }
        if ( aExp == 0 ) return packFloat32( zSign, 0, ( aSig + bSig )>>6 );
        zSig = 0x40000000 + aSig + bSig;
        zExp = aExp;
        goto roundAndPack;
    1014:	b8 e0 30 00 	mv r6,r7
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
    1018:	44 40 ff ca 	be r2,r0,f40 <addFloat32Sigs+0x5c>
        z = a;
    }
    else if ( count < 32 ) {
    101c:	34 01 00 1f 	mvi r1,31
    1020:	48 41 00 14 	bg r2,r1,1070 <addFloat32Sigs+0x18c>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    1024:	bd 49 08 00 	sl r1,r10,r9
    1028:	81 42 10 00 	sru r2,r10,r2
    102c:	7c 21 00 00 	cmpnei r1,r1,0
    1030:	b8 22 50 00 	or r10,r1,r2
    1034:	e3 ff ff c3 	bi f40 <addFloat32Sigs+0x5c>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1038:	b4 8a 08 00 	add r1,r4,r10
    103c:	00 21 00 06 	srui r1,r1,6
    1040:	3f a2 00 1f 	sli r2,ra,31
    1044:	b4 22 40 00 	add r8,r1,r2
    1048:	e3 ff ff c9 	bi f6c <addFloat32Sigs+0x88>
        if ( bExp == 0xFF ) {
            if ( bSig ) return propagateFloat32NaN( a, b );
            return packFloat32( zSign, 0xFF, 0 );
        }
        if ( aExp == 0 ) {
            ++expDiff;
    104c:	35 29 00 01 	addi r9,r9,1
    1050:	78 08 20 00 	mvhi r8,0x2000
    1054:	e3 ff ff ef 	bi 1010 <addFloat32Sigs+0x12c>
        shift32RightJamming( bSig, expDiff, &bSig );
        zExp = aExp;
    }
    else if ( expDiff < 0 ) {
        if ( bExp == 0xFF ) {
            if ( bSig ) return propagateFloat32NaN( a, b );
    1058:	5c 80 ff ca 	bne r4,r0,f80 <addFloat32Sigs+0x9c>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    105c:	3f a2 00 1f 	sli r2,ra,31
    1060:	78 01 7f 80 	mvhi r1,0x7f80
    1064:	38 21 00 00 	ori r1,r1,0x0
    1068:	b4 41 40 00 	add r8,r2,r1
    106c:	e3 ff ff c0 	bi f6c <addFloat32Sigs+0x88>
    }
    else {
        z = ( a != 0 );
    1070:	7d 4a 00 00 	cmpnei r10,r10,0
    1074:	e3 ff ff b3 	bi f40 <addFloat32Sigs+0x5c>

00001078 <subFloat32Sigs>:
result is a NaN.  The subtraction is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 subFloat32Sigs( float32 a, float32 b, flag zSign )
{
    1078:	37 9c ff fc 	addi sp,sp,-4
    107c:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1080:	00 26 00 17 	srui r6,r1,23
    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 7;
    1084:	00 47 00 17 	srui r7,r2,23
    1088:	78 04 00 7f 	mvhi r4,0x7f
    108c:	38 84 ff ff 	ori r4,r4,0xffff
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1090:	20 c6 00 ff 	andi r6,r6,0xff
    1094:	20 e7 00 ff 	andi r7,r7,0xff
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 7;
    bSig <<= 7;
    1098:	a0 44 28 00 	and r5,r2,r4

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    109c:	c8 c7 48 00 	sub r9,r6,r7
    aSig <<= 7;
    10a0:	a0 24 20 00 	and r4,r1,r4
result is a NaN.  The subtraction is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 subFloat32Sigs( float32 a, float32 b, flag zSign )
{
    10a4:	b8 20 40 00 	mv r8,r1
    10a8:	b8 60 50 00 	mv r10,r3
    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 7;
    10ac:	3c 84 00 07 	sli r4,r4,7
    bSig <<= 7;
    10b0:	3c a5 00 07 	sli r5,r5,7
    if ( 0 < expDiff ) goto aExpBigger;
    10b4:	49 20 00 0f 	bg r9,r0,10f0 <subFloat32Sigs+0x78>
    if ( expDiff < 0 ) goto bExpBigger;
    10b8:	5d 20 00 3b 	bne r9,r0,11a4 <subFloat32Sigs+0x12c>
    if ( aExp == 0xFF ) {
    10bc:	34 03 00 ff 	mvi r3,255
    10c0:	44 c3 00 30 	be r6,r3,1180 <subFloat32Sigs+0x108>
        if ( aSig | bSig ) return propagateFloat32NaN( a, b );
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( aExp == 0 ) {
    10c4:	5c c0 00 03 	bne r6,r0,10d0 <subFloat32Sigs+0x58>
    10c8:	34 06 00 01 	mvi r6,1
    10cc:	b8 c0 38 00 	mv r7,r6
        aExp = 1;
        bExp = 1;
    }
    if ( bSig < aSig ) goto aBigger;
    10d0:	54 85 00 10 	bgu r4,r5,1110 <subFloat32Sigs+0x98>
    if ( aSig < bSig ) goto bBigger;
    10d4:	54 a4 00 45 	bgu r5,r4,11e8 <subFloat32Sigs+0x170>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    10d8:	78 01 00 00 	mvhi r1,0x0
    10dc:	38 21 28 c0 	ori r1,r1,0x28c0
    10e0:	28 22 00 00 	lw r2,(r1+0)
    10e4:	64 42 00 03 	cmpei r2,r2,3
    10e8:	3c 48 00 1f 	sli r8,r2,31
    10ec:	e0 00 00 0f 	bi 1128 <subFloat32Sigs+0xb0>
    zSig = bSig - aSig;
    zExp = bExp;
    zSign ^= 1;
    goto normalizeRoundAndPack;
 aExpBigger:
    if ( aExp == 0xFF ) {
    10f0:	34 03 00 ff 	mvi r3,255
    10f4:	44 c3 00 11 	be r6,r3,1138 <subFloat32Sigs+0xc0>
        if ( aSig ) return propagateFloat32NaN( a, b );
        return a;
    }
    if ( bExp == 0 ) {
    10f8:	5c e0 00 14 	bne r7,r0,1148 <subFloat32Sigs+0xd0>
        --expDiff;
    10fc:	35 29 ff ff 	addi r9,r9,-1
    1100:	78 08 40 00 	mvhi r8,0x4000
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
    1104:	5d 27 00 15 	bne r9,r7,1158 <subFloat32Sigs+0xe0>
    }
    else {
        bSig |= 0x40000000;
    }
    shift32RightJamming( bSig, expDiff, &bSig );
    aSig |= 0x40000000;
    1108:	39 08 00 00 	ori r8,r8,0x0
    110c:	b8 88 20 00 	or r4,r4,r8
 aBigger:
    zSig = aSig - bSig;
    1110:	c8 85 18 00 	sub r3,r4,r5
    1114:	b8 c0 10 00 	mv r2,r6
    zExp = aExp;
 normalizeRoundAndPack:
    --zExp;
    return normalizeRoundAndPackFloat32( zSign, zExp, zSig );
    1118:	b9 40 08 00 	mv r1,r10
    111c:	34 42 ff ff 	addi r2,r2,-1
    1120:	fb ff fe 51 	calli a64 <normalizeRoundAndPackFloat32>
    1124:	b8 20 40 00 	mv r8,r1

}
    1128:	b9 00 08 00 	mv r1,r8
    112c:	2b 9d 00 04 	lw ra,(sp+4)
    1130:	37 9c 00 04 	addi sp,sp,4
    1134:	c3 a0 00 00 	ret
    zExp = bExp;
    zSign ^= 1;
    goto normalizeRoundAndPack;
 aExpBigger:
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, b );
    1138:	44 80 ff fc 	be r4,r0,1128 <subFloat32Sigs+0xb0>
    113c:	fb ff fd b7 	calli 818 <propagateFloat32NaN>
    1140:	b8 20 40 00 	mv r8,r1
    1144:	e3 ff ff f9 	bi 1128 <subFloat32Sigs+0xb0>
    }
    if ( bExp == 0 ) {
        --expDiff;
    }
    else {
        bSig |= 0x40000000;
    1148:	78 08 40 00 	mvhi r8,0x4000
    114c:	b9 00 08 00 	mv r1,r8
    1150:	38 21 00 00 	ori r1,r1,0x0
    1154:	b8 a1 28 00 	or r5,r5,r1
        z = a;
    }
    else if ( count < 32 ) {
    1158:	34 01 00 1f 	mvi r1,31
    115c:	49 21 00 07 	bg r9,r1,1178 <subFloat32Sigs+0x100>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    1160:	c8 09 08 00 	sub r1,r0,r9
    1164:	bc a1 08 00 	sl r1,r5,r1
    1168:	80 a9 10 00 	sru r2,r5,r9
    116c:	7c 21 00 00 	cmpnei r1,r1,0
    1170:	b8 22 28 00 	or r5,r1,r2
    1174:	e3 ff ff e5 	bi 1108 <subFloat32Sigs+0x90>
    }
    else {
        z = ( a != 0 );
    1178:	7c a5 00 00 	cmpnei r5,r5,0
    117c:	e3 ff ff e3 	bi 1108 <subFloat32Sigs+0x90>
    aSig <<= 7;
    bSig <<= 7;
    if ( 0 < expDiff ) goto aExpBigger;
    if ( expDiff < 0 ) goto bExpBigger;
    if ( aExp == 0xFF ) {
        if ( aSig | bSig ) return propagateFloat32NaN( a, b );
    1180:	b8 a4 18 00 	or r3,r5,r4
    1184:	5c 60 ff ee 	bne r3,r0,113c <subFloat32Sigs+0xc4>
    1188:	78 02 00 00 	mvhi r2,0x0
    118c:	38 42 28 c4 	ori r2,r2,0x28c4
    1190:	28 41 00 00 	lw r1,(r2+0)
    1194:	34 08 ff ff 	mvi r8,-1
    1198:	38 21 00 10 	ori r1,r1,0x10
    119c:	58 41 00 00 	sw (r2+0),r1
    11a0:	e3 ff ff e2 	bi 1128 <subFloat32Sigs+0xb0>
    }
    if ( bSig < aSig ) goto aBigger;
    if ( aSig < bSig ) goto bBigger;
    return packFloat32( float_rounding_mode == float_round_down, 0, 0 );
 bExpBigger:
    if ( bExp == 0xFF ) {
    11a4:	34 03 00 ff 	mvi r3,255
    11a8:	44 e3 00 17 	be r7,r3,1204 <subFloat32Sigs+0x18c>
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign ^ 1, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
    11ac:	44 c0 00 13 	be r6,r0,11f8 <subFloat32Sigs+0x180>
        ++expDiff;
    }
    else {
        aSig |= 0x40000000;
    11b0:	78 08 40 00 	mvhi r8,0x4000
    11b4:	b9 00 08 00 	mv r1,r8
    11b8:	38 21 00 00 	ori r1,r1,0x0
    11bc:	b8 81 20 00 	or r4,r4,r1
    }
    shift32RightJamming( aSig, - expDiff, &aSig );
    11c0:	c8 09 10 00 	sub r2,r0,r9
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
    11c4:	44 40 00 07 	be r2,r0,11e0 <subFloat32Sigs+0x168>
        z = a;
    }
    else if ( count < 32 ) {
    11c8:	34 01 00 1f 	mvi r1,31
    11cc:	48 41 00 15 	bg r2,r1,1220 <subFloat32Sigs+0x1a8>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    11d0:	bc 89 08 00 	sl r1,r4,r9
    11d4:	80 82 10 00 	sru r2,r4,r2
    11d8:	7c 21 00 00 	cmpnei r1,r1,0
    11dc:	b8 22 20 00 	or r4,r1,r2
    bSig |= 0x40000000;
    11e0:	39 08 00 00 	ori r8,r8,0x0
    11e4:	b8 a8 28 00 	or r5,r5,r8
 bBigger:
    zSig = bSig - aSig;
    11e8:	c8 a4 18 00 	sub r3,r5,r4
    zExp = bExp;
    zSign ^= 1;
    11ec:	19 4a 00 01 	xori r10,r10,0x1
    11f0:	b8 e0 10 00 	mv r2,r7
    11f4:	e3 ff ff c9 	bi 1118 <subFloat32Sigs+0xa0>
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign ^ 1, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
        ++expDiff;
    11f8:	35 29 00 01 	addi r9,r9,1
    11fc:	78 08 40 00 	mvhi r8,0x4000
    1200:	e3 ff ff f0 	bi 11c0 <subFloat32Sigs+0x148>
    if ( bSig < aSig ) goto aBigger;
    if ( aSig < bSig ) goto bBigger;
    return packFloat32( float_rounding_mode == float_round_down, 0, 0 );
 bExpBigger:
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    1204:	5c a0 ff ce 	bne r5,r0,113c <subFloat32Sigs+0xc4>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1208:	19 42 00 01 	xori r2,r10,0x1
    120c:	3c 42 00 1f 	sli r2,r2,31
    1210:	78 01 7f 80 	mvhi r1,0x7f80
    1214:	38 21 00 00 	ori r1,r1,0x0
    1218:	b4 41 40 00 	add r8,r2,r1
    121c:	e3 ff ff c3 	bi 1128 <subFloat32Sigs+0xb0>
    }
    else {
        z = ( a != 0 );
    1220:	7c 84 00 00 	cmpnei r4,r4,0
    1224:	e3 ff ff ef 	bi 11e0 <subFloat32Sigs+0x168>

00001228 <float32_add>:
and `b'.  The operation is performed according to the IEC/IEEE Standard for
Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_add( float32 a, float32 b )
{
    1228:	37 9c ff fc 	addi sp,sp,-4
    122c:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    1230:	00 24 00 1f 	srui r4,r1,31
{
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
    1234:	00 43 00 1f 	srui r3,r2,31
    1238:	44 83 00 06 	be r4,r3,1250 <float32_add+0x28>
        return addFloat32Sigs( a, b, aSign );
    }
    else {
        return subFloat32Sigs( a, b, aSign );
    123c:	b8 80 18 00 	mv r3,r4
    1240:	fb ff ff 8e 	calli 1078 <subFloat32Sigs>
    }

}
    1244:	2b 9d 00 04 	lw ra,(sp+4)
    1248:	37 9c 00 04 	addi sp,sp,4
    124c:	c3 a0 00 00 	ret
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
        return addFloat32Sigs( a, b, aSign );
    1250:	b8 80 18 00 	mv r3,r4
    1254:	fb ff ff 24 	calli ee4 <addFloat32Sigs>
    }
    else {
        return subFloat32Sigs( a, b, aSign );
    }

}
    1258:	2b 9d 00 04 	lw ra,(sp+4)
    125c:	37 9c 00 04 	addi sp,sp,4
    1260:	c3 a0 00 00 	ret

00001264 <float32_sub>:
`a' and `b'.  The operation is performed according to the IEC/IEEE Standard
for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_sub( float32 a, float32 b )
{
    1264:	37 9c ff fc 	addi sp,sp,-4
    1268:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    126c:	00 24 00 1f 	srui r4,r1,31
{
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
    1270:	00 43 00 1f 	srui r3,r2,31
    1274:	44 83 00 06 	be r4,r3,128c <float32_sub+0x28>
        return subFloat32Sigs( a, b, aSign );
    }
    else {
        return addFloat32Sigs( a, b, aSign );
    1278:	b8 80 18 00 	mv r3,r4
    127c:	fb ff ff 1a 	calli ee4 <addFloat32Sigs>
    }

}
    1280:	2b 9d 00 04 	lw ra,(sp+4)
    1284:	37 9c 00 04 	addi sp,sp,4
    1288:	c3 a0 00 00 	ret
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
        return subFloat32Sigs( a, b, aSign );
    128c:	b8 80 18 00 	mv r3,r4
    1290:	fb ff ff 7a 	calli 1078 <subFloat32Sigs>
    }
    else {
        return addFloat32Sigs( a, b, aSign );
    }

}
    1294:	2b 9d 00 04 	lw ra,(sp+4)
    1298:	37 9c 00 04 	addi sp,sp,4
    129c:	c3 a0 00 00 	ret

000012a0 <float32_mul>:
`a' and `b'.  The operation is performed according to the IEC/IEEE Standard
for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_mul( float32 a, float32 b )
{
    12a0:	37 9c ff f4 	addi sp,sp,-12
    12a4:	5b 8b 00 0c 	sw (sp+12),r11
    12a8:	5b 8c 00 08 	sw (sp+8),r12
    12ac:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    12b0:	00 24 00 17 	srui r4,r1,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    12b4:	78 03 00 7f 	mvhi r3,0x7f
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    12b8:	00 46 00 17 	srui r6,r2,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    12bc:	38 63 ff ff 	ori r3,r3,0xffff
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    12c0:	20 8a 00 ff 	andi r10,r4,0xff
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    12c4:	98 22 28 00 	xor r5,r1,r2
    if ( aExp == 0xFF ) {
    12c8:	34 09 00 ff 	mvi r9,255
`a' and `b'.  The operation is performed according to the IEC/IEEE Standard
for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_mul( float32 a, float32 b )
{
    12cc:	b8 20 38 00 	mv r7,r1
    12d0:	b8 40 40 00 	mv r8,r2
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    12d4:	a0 43 58 00 	and r11,r2,r3
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    12d8:	a0 c9 20 00 	and r4,r6,r9
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    12dc:	00 ac 00 1f 	srui r12,r5,31
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    12e0:	a0 23 e8 00 	and ra,r1,r3
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
    12e4:	45 49 00 61 	be r10,r9,1468 <float32_mul+0x1c8>
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
    12e8:	44 89 00 51 	be r4,r9,142c <float32_mul+0x18c>
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
    12ec:	5d 40 00 13 	bne r10,r0,1338 <float32_mul+0x98>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    12f0:	3d 85 00 1f 	sli r5,r12,31
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
    12f4:	47 aa 00 48 	be ra,r10,1414 <float32_mul+0x174>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    12f8:	38 01 ff ff 	mvu r1,0xffff
    12fc:	50 3d 00 77 	bgeu r1,ra,14d8 <float32_mul+0x238>
    1300:	bb a0 18 00 	mv r3,ra
    1304:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    1308:	3c 63 00 08 	sli r3,r3,8
    130c:	34 45 ff f8 	addi r5,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1310:	00 63 00 18 	srui r3,r3,24
    1314:	78 01 00 00 	mvhi r1,0x0
    1318:	3c 63 00 02 	sli r3,r3,2
    131c:	38 21 24 64 	ori r1,r1,0x2464
    1320:	b4 23 08 00 	add r1,r1,r3
    1324:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    1328:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    132c:	b4 a2 10 00 	add r2,r5,r2
    *zSigPtr = aSig<<shiftCount;
    1330:	bf a2 e8 00 	sl ra,ra,r2
    *zExpPtr = 1 - shiftCount;
    1334:	c8 22 50 00 	sub r10,r1,r2
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    if ( bExp == 0 ) {
    1338:	5c 80 00 13 	bne r4,r0,1384 <float32_mul+0xe4>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    133c:	3d 85 00 1f 	sli r5,r12,31
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
    1340:	45 64 00 35 	be r11,r4,1414 <float32_mul+0x174>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    1344:	38 01 ff ff 	mvu r1,0xffff
    1348:	50 2b 00 6a 	bgeu r1,r11,14f0 <float32_mul+0x250>
    134c:	b9 60 18 00 	mv r3,r11
    1350:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    1354:	3c 63 00 08 	sli r3,r3,8
    1358:	34 44 ff f8 	addi r4,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    135c:	00 63 00 18 	srui r3,r3,24
    1360:	78 01 00 00 	mvhi r1,0x0
    1364:	3c 63 00 02 	sli r3,r3,2
    1368:	38 21 24 64 	ori r1,r1,0x2464
    136c:	b4 23 08 00 	add r1,r1,r3
    1370:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    1374:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1378:	b4 82 10 00 	add r2,r4,r2
    *zSigPtr = aSig<<shiftCount;
    137c:	bd 62 58 00 	sl r11,r11,r2
    *zExpPtr = 1 - shiftCount;
    1380:	c8 22 20 00 	sub r4,r1,r2
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    zExp = aExp + bExp - 0x7F;
    aSig = ( aSig | 0x00800000 )<<7;
    1384:	78 01 00 80 	mvhi r1,0x80
    1388:	38 21 00 00 	ori r1,r1,0x0
    bSig = ( bSig | 0x00800000 )<<8;
    138c:	b9 61 10 00 	or r2,r11,r1
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    zExp = aExp + bExp - 0x7F;
    aSig = ( aSig | 0x00800000 )<<7;
    1390:	bb a1 08 00 	or r1,ra,r1
    1394:	3c 21 00 07 	sli r1,r1,7
    bSig = ( bSig | 0x00800000 )<<8;
    1398:	3c 42 00 08 	sli r2,r2,8
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    139c:	00 3d 00 10 	srui ra,r1,16
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    13a0:	00 4b 00 10 	srui r11,r2,16

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    13a4:	20 29 ff ff 	andi r9,r1,0xffff
    13a8:	20 48 ff ff 	andi r8,r2,0xffff
    zMiddleA = ( (bits32) aLow ) * bHigh;
    13ac:	89 69 18 00 	mul r3,r11,r9
    zMiddleB = ( (bits32) aHigh ) * bLow;
    13b0:	89 1d 10 00 	mul r2,r8,ra
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    zExp = aExp + bExp - 0x7F;
    13b4:	35 41 ff 81 	addi r1,r10,-127
    13b8:	b4 24 30 00 	add r6,r1,r4
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    13bc:	b4 62 08 00 	add r1,r3,r2
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    13c0:	54 41 00 36 	bgu r2,r1,1498 <float32_mul+0x1f8>
    13c4:	34 07 00 00 	mvi r7,0

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    13c8:	89 09 18 00 	mul r3,r8,r9
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
    13cc:	3c 22 00 10 	sli r2,r1,16
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    13d0:	89 7d 20 00 	mul r4,r11,ra
    zMiddleA <<= 16;
    z1 += zMiddleA;
    13d4:	b4 43 18 00 	add r3,r2,r3
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    13d8:	00 21 00 10 	srui r1,r1,16
    13dc:	f4 43 10 00 	cmpgu r2,r2,r3
    13e0:	b4 24 08 00 	add r1,r1,r4
    13e4:	b4 22 08 00 	add r1,r1,r2
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    mul32To64( aSig, bSig, &zSig0, &zSig1 );
    zSig0 |= ( zSig1 != 0 );
    13e8:	7c 63 00 00 	cmpnei r3,r3,0
    13ec:	b4 27 08 00 	add r1,r1,r7
    13f0:	b8 23 18 00 	or r3,r1,r3
    if ( 0 <= (sbits32) ( zSig0<<1 ) ) {
    13f4:	b4 63 08 00 	add r1,r3,r3
    13f8:	48 01 00 03 	bg r0,r1,1404 <float32_mul+0x164>
        zSig0 <<= 1;
        --zExp;
    13fc:	34 c6 ff ff 	addi r6,r6,-1
    1400:	b8 20 18 00 	mv r3,r1
    }
    return roundAndPackFloat32( zSign, zExp, zSig0 );
    1404:	b9 80 08 00 	mv r1,r12
    1408:	b8 c0 10 00 	mv r2,r6
    140c:	fb ff fd 32 	calli 8d4 <roundAndPackFloat32>
    1410:	b8 20 28 00 	mv r5,r1

}
    1414:	b8 a0 08 00 	mv r1,r5
    1418:	2b 9d 00 04 	lw ra,(sp+4)
    141c:	2b 8b 00 0c 	lw r11,(sp+12)
    1420:	2b 8c 00 08 	lw r12,(sp+8)
    1424:	37 9c 00 0c 	addi sp,sp,12
    1428:	c3 a0 00 00 	ret
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    142c:	5d 60 00 28 	bne r11,r0,14cc <float32_mul+0x22c>
        if ( ( aExp | aSig ) == 0 ) {
    1430:	b9 5d 08 00 	or r1,r10,ra
    1434:	5c 2b 00 14 	bne r1,r11,1484 <float32_mul+0x1e4>
    1438:	78 02 00 00 	mvhi r2,0x0
    143c:	38 42 28 c4 	ori r2,r2,0x28c4
    1440:	28 41 00 00 	lw r1,(r2+0)
    1444:	34 05 ff ff 	mvi r5,-1
    1448:	38 21 00 10 	ori r1,r1,0x10
    144c:	58 41 00 00 	sw (r2+0),r1
        zSig0 <<= 1;
        --zExp;
    }
    return roundAndPackFloat32( zSign, zExp, zSig0 );

}
    1450:	b8 a0 08 00 	mv r1,r5
    1454:	2b 9d 00 04 	lw ra,(sp+4)
    1458:	2b 8b 00 0c 	lw r11,(sp+12)
    145c:	2b 8c 00 08 	lw r12,(sp+8)
    1460:	37 9c 00 0c 	addi sp,sp,12
    1464:	c3 a0 00 00 	ret
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig || ( ( bExp == 0xFF ) && bSig ) ) {
    1468:	5f a0 00 0f 	bne ra,r0,14a4 <float32_mul+0x204>
    146c:	e4 89 10 00 	cmpe r2,r4,r9
    1470:	7d 61 00 00 	cmpnei r1,r11,0
    1474:	a0 41 10 00 	and r2,r2,r1
    1478:	5c 5d 00 0b 	bne r2,ra,14a4 <float32_mul+0x204>
            return propagateFloat32NaN( a, b );
        }
        if ( ( bExp | bSig ) == 0 ) {
    147c:	b8 8b 08 00 	or r1,r4,r11
    1480:	44 22 ff ee 	be r1,r2,1438 <float32_mul+0x198>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1484:	3d 82 00 1f 	sli r2,r12,31
    1488:	78 01 7f 80 	mvhi r1,0x7f80
    148c:	38 21 00 00 	ori r1,r1,0x0
    1490:	b4 41 28 00 	add r5,r2,r1
    1494:	e3 ff ff e0 	bi 1414 <float32_mul+0x174>
    1498:	78 07 00 01 	mvhi r7,0x1
    149c:	38 e7 00 00 	ori r7,r7,0x0
    14a0:	e3 ff ff ca 	bi 13c8 <float32_mul+0x128>
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig || ( ( bExp == 0xFF ) && bSig ) ) {
            return propagateFloat32NaN( a, b );
    14a4:	b8 e0 08 00 	mv r1,r7
    14a8:	b9 00 10 00 	mv r2,r8
    14ac:	fb ff fc db 	calli 818 <propagateFloat32NaN>
    14b0:	b8 20 28 00 	mv r5,r1
        zSig0 <<= 1;
        --zExp;
    }
    return roundAndPackFloat32( zSign, zExp, zSig0 );

}
    14b4:	b8 a0 08 00 	mv r1,r5
    14b8:	2b 9d 00 04 	lw ra,(sp+4)
    14bc:	2b 8b 00 0c 	lw r11,(sp+12)
    14c0:	2b 8c 00 08 	lw r12,(sp+8)
    14c4:	37 9c 00 0c 	addi sp,sp,12
    14c8:	c3 a0 00 00 	ret
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    14cc:	fb ff fc d3 	calli 818 <propagateFloat32NaN>
    14d0:	b8 20 28 00 	mv r5,r1
    14d4:	e3 ff ff d0 	bi 1414 <float32_mul+0x174>
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    14d8:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    14dc:	3f a3 00 10 	sli r3,ra,16
    }
    if ( a < 0x1000000 ) {
    14e0:	38 21 ff ff 	ori r1,r1,0xffff
    14e4:	50 23 00 09 	bgeu r1,r3,1508 <float32_mul+0x268>
    14e8:	34 05 00 08 	mvi r5,8
    14ec:	e3 ff ff 89 	bi 1310 <float32_mul+0x70>
    14f0:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    14f4:	3d 63 00 10 	sli r3,r11,16
    }
    if ( a < 0x1000000 ) {
    14f8:	38 21 ff ff 	ori r1,r1,0xffff
    14fc:	50 23 00 05 	bgeu r1,r3,1510 <float32_mul+0x270>
    1500:	34 04 00 08 	mvi r4,8
    1504:	e3 ff ff 96 	bi 135c <float32_mul+0xbc>
    1508:	34 02 00 18 	mvi r2,24
    150c:	e3 ff ff 7f 	bi 1308 <float32_mul+0x68>
    1510:	34 02 00 18 	mvi r2,24
    1514:	e3 ff ff 90 	bi 1354 <float32_mul+0xb4>

00001518 <float32_div>:
by the corresponding value `b'.  The operation is performed according to
the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_div( float32 a, float32 b )
{
    1518:	37 9c ff ec 	addi sp,sp,-20
    151c:	5b 8b 00 14 	sw (sp+20),r11
    1520:	5b 8c 00 10 	sw (sp+16),r12
    1524:	5b 8d 00 0c 	sw (sp+12),r13
    1528:	5b 8e 00 08 	sw (sp+8),r14
    152c:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1530:	00 26 00 17 	srui r6,r1,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1534:	78 03 00 7f 	mvhi r3,0x7f
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1538:	00 47 00 17 	srui r7,r2,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    153c:	38 63 ff ff 	ori r3,r3,0xffff
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    1540:	98 22 40 00 	xor r8,r1,r2
    if ( aExp == 0xFF ) {
    1544:	34 09 00 ff 	mvi r9,255
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1548:	20 c6 00 ff 	andi r6,r6,0xff
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    154c:	a0 43 50 00 	and r10,r2,r3
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1550:	a0 e9 38 00 	and r7,r7,r9
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    1554:	01 0e 00 1f 	srui r14,r8,31
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1558:	a0 23 28 00 	and r5,r1,r3
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
    155c:	44 c9 00 73 	be r6,r9,1728 <float32_div+0x210>
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
    1560:	44 e9 00 58 	be r7,r9,16c0 <float32_div+0x1a8>
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign, 0, 0 );
    }
    if ( bExp == 0 ) {
    1564:	5c e0 00 12 	bne r7,r0,15ac <float32_div+0x94>
        if ( bSig == 0 ) {
    1568:	45 47 00 7e 	be r10,r7,1760 <float32_div+0x248>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    156c:	38 01 ff ff 	mvu r1,0xffff
    1570:	50 2a 00 9a 	bgeu r1,r10,17d8 <float32_div+0x2c0>
    1574:	b9 40 18 00 	mv r3,r10
    1578:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    157c:	3c 63 00 08 	sli r3,r3,8
    1580:	34 44 ff f8 	addi r4,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1584:	00 63 00 18 	srui r3,r3,24
    1588:	78 01 00 00 	mvhi r1,0x0
    158c:	3c 63 00 02 	sli r3,r3,2
    1590:	38 21 24 64 	ori r1,r1,0x2464
    1594:	b4 23 08 00 	add r1,r1,r3
    1598:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    159c:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    15a0:	b4 82 10 00 	add r2,r4,r2
    *zSigPtr = aSig<<shiftCount;
    15a4:	bd 42 50 00 	sl r10,r10,r2
    *zExpPtr = 1 - shiftCount;
    15a8:	c8 22 38 00 	sub r7,r1,r2
            float_raise( float_flag_divbyzero );
            return packFloat32( zSign, 0xFF, 0 );
        }
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    if ( aExp == 0 ) {
    15ac:	5c c0 00 13 	bne r6,r0,15f8 <float32_div+0xe0>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    15b0:	3d c4 00 1f 	sli r4,r14,31
            return packFloat32( zSign, 0xFF, 0 );
        }
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
    15b4:	44 a6 00 45 	be r5,r6,16c8 <float32_div+0x1b0>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    15b8:	38 01 ff ff 	mvu r1,0xffff
    15bc:	50 25 00 8d 	bgeu r1,r5,17f0 <float32_div+0x2d8>
    15c0:	b8 a0 18 00 	mv r3,r5
    15c4:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    15c8:	3c 63 00 08 	sli r3,r3,8
    15cc:	34 44 ff f8 	addi r4,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    15d0:	00 63 00 18 	srui r3,r3,24
    15d4:	78 01 00 00 	mvhi r1,0x0
    15d8:	3c 63 00 02 	sli r3,r3,2
    15dc:	38 21 24 64 	ori r1,r1,0x2464
    15e0:	b4 23 08 00 	add r1,r1,r3
    15e4:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    15e8:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    15ec:	b4 82 10 00 	add r2,r4,r2
    *zSigPtr = aSig<<shiftCount;
    15f0:	bc a2 28 00 	sl r5,r5,r2
    *zExpPtr = 1 - shiftCount;
    15f4:	c8 22 30 00 	sub r6,r1,r2
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = aExp - bExp + 0x7D;
    aSig = ( aSig | 0x00800000 )<<7;
    15f8:	78 01 00 80 	mvhi r1,0x80
    15fc:	38 21 00 00 	ori r1,r1,0x0
    1600:	b8 a1 10 00 	or r2,r5,r1
    1604:	3c 4c 00 07 	sli r12,r2,7
    bSig = ( bSig | 0x00800000 )<<8;
    1608:	b9 41 08 00 	or r1,r10,r1
    160c:	3c 2b 00 08 	sli r11,r1,8
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = aExp - bExp + 0x7D;
    1610:	c8 c7 10 00 	sub r2,r6,r7
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    if ( bSig <= ( aSig + aSig ) ) {
    1614:	b5 8c 08 00 	add r1,r12,r12
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = aExp - bExp + 0x7D;
    1618:	34 4d 00 7d 	addi r13,r2,125
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    if ( bSig <= ( aSig + aSig ) ) {
    161c:	55 61 00 03 	bgu r11,r1,1628 <float32_div+0x110>
        aSig >>= 1;
    1620:	01 8c 00 01 	srui r12,r12,1
        ++zExp;
    1624:	35 ad 00 01 	addi r13,r13,1
    }
    zSig = estimateDiv64To32( aSig, 0, bSig );
    1628:	34 02 00 00 	mvi r2,0
    162c:	b9 80 08 00 	mv r1,r12
    1630:	b9 60 18 00 	mv r3,r11
    1634:	fb ff fc 0c 	calli 664 <estimateDiv64To32>
    1638:	b8 20 38 00 	mv r7,r1
    if ( ( zSig & 0x3F ) <= 2 ) {
    163c:	20 22 00 3f 	andi r2,r1,0x3f
    1640:	34 01 00 02 	mvi r1,2
    1644:	54 41 00 2c 	bgu r2,r1,16f4 <float32_div+0x1dc>
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    1648:	00 e9 00 10 	srui r9,r7,16
    zMiddleB = ( (bits32) aHigh ) * bLow;
    164c:	01 68 00 10 	srui r8,r11,16

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    1650:	21 64 ff ff 	andi r4,r11,0xffff
    1654:	20 e3 ff ff 	andi r3,r7,0xffff
    zMiddleA = ( (bits32) aLow ) * bHigh;
    1658:	89 24 10 00 	mul r2,r9,r4
    zMiddleB = ( (bits32) aHigh ) * bLow;
    165c:	88 68 08 00 	mul r1,r3,r8
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    1660:	b4 41 28 00 	add r5,r2,r1
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1664:	54 25 00 5a 	bgu r1,r5,17cc <float32_div+0x2b4>
    1668:	34 06 00 00 	mvi r6,0

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    166c:	88 64 18 00 	mul r3,r3,r4
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
    1670:	3c a2 00 10 	sli r2,r5,16
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1674:	89 28 08 00 	mul r1,r9,r8
    zMiddleA <<= 16;
    z1 += zMiddleA;
    1678:	b4 43 18 00 	add r3,r2,r3
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    167c:	00 a5 00 10 	srui r5,r5,16
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    1680:	7c 64 00 00 	cmpnei r4,r3,0
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1684:	c9 81 08 00 	sub r1,r12,r1
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    1688:	f4 43 10 00 	cmpgu r2,r2,r3
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    168c:	c8 25 08 00 	sub r1,r1,r5
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    1690:	c8 24 08 00 	sub r1,r1,r4
    1694:	c8 22 08 00 	sub r1,r1,r2
    1698:	c8 26 10 00 	sub r2,r1,r6
INLINE void
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    169c:	c8 03 18 00 	sub r3,r0,r3
        mul32To64( bSig, zSig, &term0, &term1 );
        sub64( aSig, 0, term0, term1, &rem0, &rem1 );
        while ( (sbits32) rem0 < 0 ) {
    16a0:	4c 40 00 13 	bge r2,r0,16ec <float32_div+0x1d4>
 add64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{
    bits32 z1;

    z1 = a1 + b1;
    16a4:	b4 6b 20 00 	add r4,r3,r11
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
    16a8:	f4 64 08 00 	cmpgu r1,r3,r4
            --zSig;
    16ac:	34 e7 ff ff 	addi r7,r7,-1
    16b0:	b4 41 10 00 	add r2,r2,r1
    }
    zSig = estimateDiv64To32( aSig, 0, bSig );
    if ( ( zSig & 0x3F ) <= 2 ) {
        mul32To64( bSig, zSig, &term0, &term1 );
        sub64( aSig, 0, term0, term1, &rem0, &rem1 );
        while ( (sbits32) rem0 < 0 ) {
    16b4:	b8 80 18 00 	mv r3,r4
    16b8:	4c 40 00 0c 	bge r2,r0,16e8 <float32_div+0x1d0>
    16bc:	e3 ff ff fa 	bi 16a4 <float32_div+0x18c>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    16c0:	3d c4 00 1f 	sli r4,r14,31
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    16c4:	5d 40 00 38 	bne r10,r0,17a4 <float32_div+0x28c>
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    16c8:	b8 80 08 00 	mv r1,r4
    16cc:	2b 9d 00 04 	lw ra,(sp+4)
    16d0:	2b 8b 00 14 	lw r11,(sp+20)
    16d4:	2b 8c 00 10 	lw r12,(sp+16)
    16d8:	2b 8d 00 0c 	lw r13,(sp+12)
    16dc:	2b 8e 00 08 	lw r14,(sp+8)
    16e0:	37 9c 00 14 	addi sp,sp,20
    16e4:	c3 a0 00 00 	ret
    }
    zSig = estimateDiv64To32( aSig, 0, bSig );
    if ( ( zSig & 0x3F ) <= 2 ) {
        mul32To64( bSig, zSig, &term0, &term1 );
        sub64( aSig, 0, term0, term1, &rem0, &rem1 );
        while ( (sbits32) rem0 < 0 ) {
    16e8:	b8 80 18 00 	mv r3,r4
            --zSig;
            add64( rem0, rem1, 0, bSig, &rem0, &rem1 );
        }
        zSig |= ( rem1 != 0 );
    16ec:	7c 61 00 00 	cmpnei r1,r3,0
    16f0:	b8 e1 38 00 	or r7,r7,r1
    }
    return roundAndPackFloat32( zSign, zExp, zSig );
    16f4:	b9 c0 08 00 	mv r1,r14
    16f8:	b9 a0 10 00 	mv r2,r13
    16fc:	b8 e0 18 00 	mv r3,r7
    1700:	fb ff fc 75 	calli 8d4 <roundAndPackFloat32>
    1704:	b8 20 20 00 	mv r4,r1

}
    1708:	b8 80 08 00 	mv r1,r4
    170c:	2b 9d 00 04 	lw ra,(sp+4)
    1710:	2b 8b 00 14 	lw r11,(sp+20)
    1714:	2b 8c 00 10 	lw r12,(sp+16)
    1718:	2b 8d 00 0c 	lw r13,(sp+12)
    171c:	2b 8e 00 08 	lw r14,(sp+8)
    1720:	37 9c 00 14 	addi sp,sp,20
    1724:	c3 a0 00 00 	ret
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, b );
    1728:	5c a0 00 1f 	bne r5,r0,17a4 <float32_div+0x28c>
        if ( bExp == 0xFF ) {
    172c:	44 e6 00 1d 	be r7,r6,17a0 <float32_div+0x288>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1730:	3d c2 00 1f 	sli r2,r14,31
    1734:	78 01 7f 80 	mvhi r1,0x7f80
    1738:	38 21 00 00 	ori r1,r1,0x0
    173c:	b4 41 20 00 	add r4,r2,r1
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    1740:	b8 80 08 00 	mv r1,r4
    1744:	2b 9d 00 04 	lw ra,(sp+4)
    1748:	2b 8b 00 14 	lw r11,(sp+20)
    174c:	2b 8c 00 10 	lw r12,(sp+16)
    1750:	2b 8d 00 0c 	lw r13,(sp+12)
    1754:	2b 8e 00 08 	lw r14,(sp+8)
    1758:	37 9c 00 14 	addi sp,sp,20
    175c:	c3 a0 00 00 	ret
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign, 0, 0 );
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) {
            if ( ( aExp | aSig ) == 0 ) {
    1760:	b8 c5 08 00 	or r1,r6,r5
    1764:	5c 2a 00 29 	bne r1,r10,1808 <float32_div+0x2f0>
    1768:	78 02 00 00 	mvhi r2,0x0
    176c:	38 42 28 c4 	ori r2,r2,0x28c4
    1770:	28 41 00 00 	lw r1,(r2+0)
    1774:	34 04 ff ff 	mvi r4,-1
    1778:	38 21 00 10 	ori r1,r1,0x10
    177c:	58 41 00 00 	sw (r2+0),r1
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    1780:	b8 80 08 00 	mv r1,r4
    1784:	2b 9d 00 04 	lw ra,(sp+4)
    1788:	2b 8b 00 14 	lw r11,(sp+20)
    178c:	2b 8c 00 10 	lw r12,(sp+16)
    1790:	2b 8d 00 0c 	lw r13,(sp+12)
    1794:	2b 8e 00 08 	lw r14,(sp+8)
    1798:	37 9c 00 14 	addi sp,sp,20
    179c:	c3 a0 00 00 	ret
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, b );
        if ( bExp == 0xFF ) {
            if ( bSig ) return propagateFloat32NaN( a, b );
    17a0:	45 40 ff f2 	be r10,r0,1768 <float32_div+0x250>
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    17a4:	fb ff fc 1d 	calli 818 <propagateFloat32NaN>
    17a8:	b8 20 20 00 	mv r4,r1
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    17ac:	b8 80 08 00 	mv r1,r4
    17b0:	2b 9d 00 04 	lw ra,(sp+4)
    17b4:	2b 8b 00 14 	lw r11,(sp+20)
    17b8:	2b 8c 00 10 	lw r12,(sp+16)
    17bc:	2b 8d 00 0c 	lw r13,(sp+12)
    17c0:	2b 8e 00 08 	lw r14,(sp+8)
    17c4:	37 9c 00 14 	addi sp,sp,20
    17c8:	c3 a0 00 00 	ret
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    17cc:	78 06 00 01 	mvhi r6,0x1
    17d0:	38 c6 00 00 	ori r6,r6,0x0
    17d4:	e3 ff ff a6 	bi 166c <float32_div+0x154>
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    17d8:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    17dc:	3d 43 00 10 	sli r3,r10,16
    }
    if ( a < 0x1000000 ) {
    17e0:	38 21 ff ff 	ori r1,r1,0xffff
    17e4:	50 23 00 13 	bgeu r1,r3,1830 <float32_div+0x318>
    17e8:	34 04 00 08 	mvi r4,8
    17ec:	e3 ff ff 66 	bi 1584 <float32_div+0x6c>
    17f0:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    17f4:	3c a3 00 10 	sli r3,r5,16
    }
    if ( a < 0x1000000 ) {
    17f8:	38 21 ff ff 	ori r1,r1,0xffff
    17fc:	50 23 00 0f 	bgeu r1,r3,1838 <float32_div+0x320>
    1800:	34 04 00 08 	mvi r4,8
    1804:	e3 ff ff 73 	bi 15d0 <float32_div+0xb8>
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) {
            if ( ( aExp | aSig ) == 0 ) {
                float_raise( float_flag_invalid );
                return float32_default_nan;
    1808:	78 03 00 00 	mvhi r3,0x0
    180c:	38 63 28 c4 	ori r3,r3,0x28c4
    1810:	28 62 00 00 	lw r2,(r3+0)
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1814:	3d c4 00 1f 	sli r4,r14,31
    1818:	78 01 7f 80 	mvhi r1,0x7f80
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) {
            if ( ( aExp | aSig ) == 0 ) {
                float_raise( float_flag_invalid );
                return float32_default_nan;
    181c:	38 42 00 02 	ori r2,r2,0x2
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1820:	38 21 00 00 	ori r1,r1,0x0
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) {
            if ( ( aExp | aSig ) == 0 ) {
                float_raise( float_flag_invalid );
                return float32_default_nan;
    1824:	58 62 00 00 	sw (r3+0),r2
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1828:	b4 81 20 00 	add r4,r4,r1
    182c:	e3 ff ff a7 	bi 16c8 <float32_div+0x1b0>
    1830:	34 02 00 18 	mvi r2,24
    1834:	e3 ff ff 52 	bi 157c <float32_div+0x64>
    1838:	34 02 00 18 	mvi r2,24
    183c:	e3 ff ff 63 	bi 15c8 <float32_div+0xb0>

00001840 <float32_rem>:
with respect to the corresponding value `b'.  The operation is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_rem( float32 a, float32 b )
{
    1840:	37 9c ff d8 	addi sp,sp,-40
    1844:	5b 8b 00 28 	sw (sp+40),r11
    1848:	5b 8c 00 24 	sw (sp+36),r12
    184c:	5b 8d 00 20 	sw (sp+32),r13
    1850:	5b 8e 00 1c 	sw (sp+28),r14
    1854:	5b 8f 00 18 	sw (sp+24),r15
    1858:	5b 90 00 14 	sw (sp+20),r16
    185c:	5b 91 00 10 	sw (sp+16),r17
    1860:	5b 92 00 0c 	sw (sp+12),r18
    1864:	5b 93 00 08 	sw (sp+8),r19
    1868:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    186c:	00 23 00 17 	srui r3,r1,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1870:	78 04 00 7f 	mvhi r4,0x7f
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1874:	00 45 00 17 	srui r5,r2,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1878:	38 84 ff ff 	ori r4,r4,0xffff
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    187c:	20 67 00 ff 	andi r7,r3,0xff
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    if ( aExp == 0xFF ) {
    1880:	34 03 00 ff 	mvi r3,255
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1884:	a0 44 40 00 	and r8,r2,r4
with respect to the corresponding value `b'.  The operation is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_rem( float32 a, float32 b )
{
    1888:	b8 20 80 00 	mv r16,r1
    188c:	b8 40 30 00 	mv r6,r2
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1890:	a0 a3 88 00 	and r17,r5,r3
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1894:	a0 24 20 00 	and r4,r1,r4
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    if ( aExp == 0xFF ) {
    1898:	44 e3 00 82 	be r7,r3,1aa0 <float32_rem+0x260>
            return propagateFloat32NaN( a, b );
        }
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( bExp == 0xFF ) {
    189c:	46 23 00 16 	be r17,r3,18f4 <float32_rem+0xb4>
        if ( bSig ) return propagateFloat32NaN( a, b );
        return a;
    }
    if ( bExp == 0 ) {
    18a0:	5e 20 00 29 	bne r17,r0,1944 <float32_rem+0x104>
        if ( bSig == 0 ) {
    18a4:	5d 11 00 18 	bne r8,r17,1904 <float32_rem+0xc4>
    18a8:	78 02 00 00 	mvhi r2,0x0
    18ac:	38 42 28 c4 	ori r2,r2,0x28c4
    18b0:	28 41 00 00 	lw r1,(r2+0)
    18b4:	34 10 ff ff 	mvi r16,-1
    18b8:	38 21 00 10 	ori r1,r1,0x10
    18bc:	58 41 00 00 	sw (r2+0),r1
    }
    zSign = ( (sbits32) aSig < 0 );
    if ( zSign ) aSig = - aSig;
    return normalizeRoundAndPackFloat32( aSign ^ zSign, bExp, aSig );

}
    18c0:	ba 00 08 00 	mv r1,r16
    18c4:	2b 9d 00 04 	lw ra,(sp+4)
    18c8:	2b 8b 00 28 	lw r11,(sp+40)
    18cc:	2b 8c 00 24 	lw r12,(sp+36)
    18d0:	2b 8d 00 20 	lw r13,(sp+32)
    18d4:	2b 8e 00 1c 	lw r14,(sp+28)
    18d8:	2b 8f 00 18 	lw r15,(sp+24)
    18dc:	2b 90 00 14 	lw r16,(sp+20)
    18e0:	2b 91 00 10 	lw r17,(sp+16)
    18e4:	2b 92 00 0c 	lw r18,(sp+12)
    18e8:	2b 93 00 08 	lw r19,(sp+8)
    18ec:	37 9c 00 28 	addi sp,sp,40
    18f0:	c3 a0 00 00 	ret
        }
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    18f4:	45 00 ff f3 	be r8,r0,18c0 <float32_rem+0x80>
    18f8:	fb ff fb c8 	calli 818 <propagateFloat32NaN>
    18fc:	b8 20 80 00 	mv r16,r1
    1900:	e3 ff ff f0 	bi 18c0 <float32_rem+0x80>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    1904:	38 01 ff ff 	mvu r1,0xffff
    1908:	50 28 00 8c 	bgeu r1,r8,1b38 <float32_rem+0x2f8>
    190c:	b9 00 18 00 	mv r3,r8
    1910:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    1914:	3c 63 00 08 	sli r3,r3,8
    1918:	34 45 ff f8 	addi r5,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    191c:	00 63 00 18 	srui r3,r3,24
    1920:	78 01 00 00 	mvhi r1,0x0
    1924:	3c 63 00 02 	sli r3,r3,2
    1928:	38 21 24 64 	ori r1,r1,0x2464
    192c:	b4 23 08 00 	add r1,r1,r3
    1930:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    1934:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1938:	b4 a2 10 00 	add r2,r5,r2
    *zSigPtr = aSig<<shiftCount;
    193c:	bd 02 40 00 	sl r8,r8,r2
    *zExpPtr = 1 - shiftCount;
    1940:	c8 22 88 00 	sub r17,r1,r2
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    if ( aExp == 0 ) {
    1944:	5c e0 00 12 	bne r7,r0,198c <float32_rem+0x14c>
        if ( aSig == 0 ) return a;
    1948:	44 87 ff de 	be r4,r7,18c0 <float32_rem+0x80>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    194c:	38 01 ff ff 	mvu r1,0xffff
    1950:	50 24 00 74 	bgeu r1,r4,1b20 <float32_rem+0x2e0>
    1954:	b8 80 18 00 	mv r3,r4
    1958:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    195c:	3c 63 00 08 	sli r3,r3,8
    1960:	34 45 ff f8 	addi r5,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1964:	00 63 00 18 	srui r3,r3,24
    1968:	78 01 00 00 	mvhi r1,0x0
    196c:	3c 63 00 02 	sli r3,r3,2
    1970:	38 21 24 64 	ori r1,r1,0x2464
    1974:	b4 23 08 00 	add r1,r1,r3
    1978:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    197c:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1980:	b4 a2 10 00 	add r2,r5,r2
    *zSigPtr = aSig<<shiftCount;
    1984:	bc 82 20 00 	sl r4,r4,r2
    *zExpPtr = 1 - shiftCount;
    1988:	c8 22 38 00 	sub r7,r1,r2
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return a;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    expDiff = aExp - bExp;
    aSig = ( aSig | 0x00800000 )<<8;
    198c:	78 02 00 80 	mvhi r2,0x80
    1990:	b8 40 08 00 	mv r1,r2
    1994:	38 21 00 00 	ori r1,r1,0x0
    1998:	b8 81 08 00 	or r1,r4,r1
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return a;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    expDiff = aExp - bExp;
    199c:	c8 f1 98 00 	sub r19,r7,r17
    aSig = ( aSig | 0x00800000 )<<8;
    19a0:	3c 2c 00 08 	sli r12,r1,8
    bSig = ( bSig | 0x00800000 )<<8;
    if ( expDiff < 0 ) {
    19a4:	4e 60 00 04 	bge r19,r0,19b4 <float32_rem+0x174>
        if ( expDiff < -1 ) return a;
    19a8:	34 01 ff ff 	mvi r1,-1
    19ac:	5e 61 ff c5 	bne r19,r1,18c0 <float32_rem+0x80>
        aSig >>= 1;
    19b0:	01 8c 00 01 	srui r12,r12,1
        if ( aSig == 0 ) return a;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    expDiff = aExp - bExp;
    aSig = ( aSig | 0x00800000 )<<8;
    bSig = ( bSig | 0x00800000 )<<8;
    19b4:	38 42 00 00 	ori r2,r2,0x0
    19b8:	b9 02 08 00 	or r1,r8,r2
    19bc:	3c 2d 00 08 	sli r13,r1,8
    if ( expDiff < 0 ) {
        if ( expDiff < -1 ) return a;
        aSig >>= 1;
    }
    q = ( bSig <= aSig );
    19c0:	f1 8d 28 00 	cmpgeu r5,r12,r13
    if ( q ) aSig -= bSig;
    19c4:	44 a0 00 02 	be r5,r0,19cc <float32_rem+0x18c>
    19c8:	c9 8d 60 00 	sub r12,r12,r13
    expDiff -= 32;
    19cc:	36 6f ff e0 	addi r15,r19,-32
    while ( 0 < expDiff ) {
    19d0:	01 ae 00 02 	srui r14,r13,2
    19d4:	b9 e0 58 00 	mv r11,r15
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
    19d8:	34 12 00 02 	mvi r18,2
        aSig >>= 1;
    }
    q = ( bSig <= aSig );
    if ( q ) aSig -= bSig;
    expDiff -= 32;
    while ( 0 < expDiff ) {
    19dc:	49 e0 00 02 	bg r15,r0,19e4 <float32_rem+0x1a4>
    19e0:	e0 00 00 14 	bi 1a30 <float32_rem+0x1f0>
        q = estimateDiv64To32( aSig, 0, bSig );
    19e4:	b9 80 08 00 	mv r1,r12
    19e8:	34 02 00 00 	mvi r2,0
    19ec:	b9 a0 18 00 	mv r3,r13
    19f0:	fb ff fb 1d 	calli 664 <estimateDiv64To32>
        q = ( 2 < q ) ? q - 2 : 0;
    19f4:	34 25 ff fe 	addi r5,r1,-2
    19f8:	89 c5 10 00 	mul r2,r14,r5
    19fc:	34 0c 00 00 	mvi r12,0
    1a00:	54 32 00 26 	bgu r1,r18,1a98 <float32_rem+0x258>
    1a04:	b9 80 28 00 	mv r5,r12
        aSig = - ( ( bSig>>2 ) * q );
        expDiff -= 30;
    1a08:	35 6b ff e2 	addi r11,r11,-30
        aSig >>= 1;
    }
    q = ( bSig <= aSig );
    if ( q ) aSig -= bSig;
    expDiff -= 32;
    while ( 0 < expDiff ) {
    1a0c:	49 60 ff f6 	bg r11,r0,19e4 <float32_rem+0x1a4>
with respect to the corresponding value `b'.  The operation is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_rem( float32 a, float32 b )
{
    1a10:	34 02 00 1e 	mvi r2,30
    1a14:	36 61 ff df 	addi r1,r19,-33
    1a18:	8c 22 08 00 	divu r1,r1,r2
    1a1c:	35 e3 ff e2 	addi r3,r15,-30
    1a20:	3c 22 00 05 	sli r2,r1,5
    1a24:	b4 21 08 00 	add r1,r1,r1
    1a28:	c8 22 08 00 	sub r1,r1,r2
    1a2c:	b4 61 78 00 	add r15,r3,r1
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
        aSig = - ( ( bSig>>2 ) * q );
        expDiff -= 30;
    }
    expDiff += 32;
    1a30:	35 eb 00 20 	addi r11,r15,32
        q >>= 32 - expDiff;
        bSig >>= 2;
        aSig = ( ( aSig>>1 )<<( expDiff - 1 ) ) - bSig * q;
    }
    else {
        aSig >>= 2;
    1a34:	01 83 00 02 	srui r3,r12,2
        q = ( 2 < q ) ? q - 2 : 0;
        aSig = - ( ( bSig>>2 ) * q );
        expDiff -= 30;
    }
    expDiff += 32;
    if ( 0 < expDiff ) {
    1a38:	4c 0b 00 0e 	bge r0,r11,1a70 <float32_rem+0x230>
        q = estimateDiv64To32( aSig, 0, bSig );
    1a3c:	34 02 00 00 	mvi r2,0
    1a40:	b9 a0 18 00 	mv r3,r13
    1a44:	b9 80 08 00 	mv r1,r12
    1a48:	fb ff fb 07 	calli 664 <estimateDiv64To32>
    1a4c:	b8 20 10 00 	mv r2,r1
        q = ( 2 < q ) ? q - 2 : 0;
    1a50:	34 01 00 02 	mvi r1,2
    1a54:	54 41 00 2e 	bgu r2,r1,1b0c <float32_rem+0x2cc>
    1a58:	34 05 00 00 	mvi r5,0
    1a5c:	b8 a0 18 00 	mv r3,r5
        q >>= 32 - expDiff;
        bSig >>= 2;
        aSig = ( ( aSig>>1 )<<( expDiff - 1 ) ) - bSig * q;
    1a60:	01 81 00 01 	srui r1,r12,1
    1a64:	35 62 ff ff 	addi r2,r11,-1
    1a68:	bc 22 08 00 	sl r1,r1,r2
    1a6c:	c8 23 18 00 	sub r3,r1,r3
    }
    else {
        aSig >>= 2;
    1a70:	c8 0e 30 00 	sub r6,r0,r14
    1a74:	c8 6e 10 00 	sub r2,r3,r14
        bSig >>= 2;
    }
    do {
        alternateASig = aSig;
        ++q;
    1a78:	b8 40 38 00 	mv r7,r2
    1a7c:	b4 46 10 00 	add r2,r2,r6
        aSig -= bSig;
    } while ( 0 <= (sbits32) aSig );
    1a80:	b4 4e 08 00 	add r1,r2,r14
        aSig >>= 2;
        bSig >>= 2;
    }
    do {
        alternateASig = aSig;
        ++q;
    1a84:	34 a5 00 01 	addi r5,r5,1
    1a88:	b4 c3 20 00 	add r4,r6,r3
        aSig -= bSig;
    } while ( 0 <= (sbits32) aSig );
    1a8c:	48 01 00 0f 	bg r0,r1,1ac8 <float32_rem+0x288>
    1a90:	b8 80 18 00 	mv r3,r4
    1a94:	e3 ff ff f9 	bi 1a78 <float32_rem+0x238>
    q = ( bSig <= aSig );
    if ( q ) aSig -= bSig;
    expDiff -= 32;
    while ( 0 < expDiff ) {
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
    1a98:	c8 02 60 00 	sub r12,r0,r2
    1a9c:	e3 ff ff db 	bi 1a08 <float32_rem+0x1c8>
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    if ( aExp == 0xFF ) {
        if ( aSig || ( ( bExp == 0xFF ) && bSig ) ) {
    1aa0:	5c 80 00 05 	bne r4,r0,1ab4 <float32_rem+0x274>
    1aa4:	e6 23 08 00 	cmpe r1,r17,r3
    1aa8:	7d 02 00 00 	cmpnei r2,r8,0
    1aac:	a0 22 08 00 	and r1,r1,r2
    1ab0:	44 24 ff 7e 	be r1,r4,18a8 <float32_rem+0x68>
            return propagateFloat32NaN( a, b );
    1ab4:	ba 00 08 00 	mv r1,r16
    1ab8:	b8 c0 10 00 	mv r2,r6
    1abc:	fb ff fb 57 	calli 818 <propagateFloat32NaN>
    1ac0:	b8 20 80 00 	mv r16,r1
    1ac4:	e3 ff ff 7f 	bi 18c0 <float32_rem+0x80>
    do {
        alternateASig = aSig;
        ++q;
        aSig -= bSig;
    } while ( 0 <= (sbits32) aSig );
    sigMean = aSig + alternateASig;
    1ac8:	b4 64 30 00 	add r6,r3,r4
    if ( ( sigMean < 0 ) || ( ( sigMean == 0 ) && ( q & 1 ) ) ) {
    1acc:	48 06 00 04 	bg r0,r6,1adc <float32_rem+0x29c>
    1ad0:	5c c0 00 0d 	bne r6,r0,1b04 <float32_rem+0x2c4>
    1ad4:	20 a1 00 01 	andi r1,r5,0x1
    1ad8:	44 26 00 0b 	be r1,r6,1b04 <float32_rem+0x2c4>
    1adc:	b8 60 38 00 	mv r7,r3
        aSig = alternateASig;
    }
    zSign = ( (sbits32) aSig < 0 );
    1ae0:	00 e4 00 1f 	srui r4,r7,31
    if ( zSign ) aSig = - aSig;
    1ae4:	44 80 00 02 	be r4,r0,1aec <float32_rem+0x2ac>
    1ae8:	c8 03 18 00 	sub r3,r0,r3
    return normalizeRoundAndPackFloat32( aSign ^ zSign, bExp, aSig );
    1aec:	02 01 00 1f 	srui r1,r16,31
    1af0:	ba 20 10 00 	mv r2,r17
    1af4:	98 81 08 00 	xor r1,r4,r1
    1af8:	fb ff fb db 	calli a64 <normalizeRoundAndPackFloat32>
    1afc:	b8 20 80 00 	mv r16,r1
    1b00:	e3 ff ff 70 	bi 18c0 <float32_rem+0x80>
        alternateASig = aSig;
        ++q;
        aSig -= bSig;
    } while ( 0 <= (sbits32) aSig );
    sigMean = aSig + alternateASig;
    if ( ( sigMean < 0 ) || ( ( sigMean == 0 ) && ( q & 1 ) ) ) {
    1b04:	b8 80 18 00 	mv r3,r4
    1b08:	e3 ff ff f6 	bi 1ae0 <float32_rem+0x2a0>
        expDiff -= 30;
    }
    expDiff += 32;
    if ( 0 < expDiff ) {
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
    1b0c:	34 42 ff fe 	addi r2,r2,-2
    1b10:	c8 0b 08 00 	sub r1,r0,r11
    1b14:	80 41 28 00 	sru r5,r2,r1
    1b18:	88 ae 18 00 	mul r3,r5,r14
    1b1c:	e3 ff ff d1 	bi 1a60 <float32_rem+0x220>
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    1b20:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    1b24:	3c 83 00 10 	sli r3,r4,16
    }
    if ( a < 0x1000000 ) {
    1b28:	38 21 ff ff 	ori r1,r1,0xffff
    1b2c:	50 23 00 09 	bgeu r1,r3,1b50 <float32_rem+0x310>
    1b30:	34 05 00 08 	mvi r5,8
    1b34:	e3 ff ff 8c 	bi 1964 <float32_rem+0x124>
    1b38:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    1b3c:	3d 03 00 10 	sli r3,r8,16
    }
    if ( a < 0x1000000 ) {
    1b40:	38 21 ff ff 	ori r1,r1,0xffff
    1b44:	50 23 00 05 	bgeu r1,r3,1b58 <float32_rem+0x318>
    1b48:	34 05 00 08 	mvi r5,8
    1b4c:	e3 ff ff 74 	bi 191c <float32_rem+0xdc>
    1b50:	34 02 00 18 	mvi r2,24
    1b54:	e3 ff ff 82 	bi 195c <float32_rem+0x11c>
    1b58:	34 02 00 18 	mvi r2,24
    1b5c:	e3 ff ff 6e 	bi 1914 <float32_rem+0xd4>

00001b60 <float32_sqrt>:
The operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_sqrt( float32 a )
{
    1b60:	37 9c ff ec 	addi sp,sp,-20
    1b64:	5b 8b 00 14 	sw (sp+20),r11
    1b68:	5b 8c 00 10 	sw (sp+16),r12
    1b6c:	5b 8d 00 0c 	sw (sp+12),r13
    1b70:	5b 8e 00 08 	sw (sp+8),r14
    1b74:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1b78:	00 22 00 17 	srui r2,r1,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1b7c:	78 03 00 7f 	mvhi r3,0x7f
    1b80:	38 63 ff ff 	ori r3,r3,0xffff
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1b84:	20 4c 00 ff 	andi r12,r2,0xff
    bits32 term0, term1;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
    1b88:	34 02 00 ff 	mvi r2,255
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1b8c:	a0 23 28 00 	and r5,r1,r3
The operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_sqrt( float32 a )
{
    1b90:	b8 20 20 00 	mv r4,r1
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    1b94:	00 23 00 1f 	srui r3,r1,31
    bits32 term0, term1;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
    1b98:	45 82 00 55 	be r12,r2,1cec <float32_sqrt+0x18c>
        if ( aSig ) return propagateFloat32NaN( a, 0 );
        if ( ! aSign ) return a;
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( aSign ) {
    1b9c:	44 60 00 11 	be r3,r0,1be0 <float32_sqrt+0x80>
        if ( ( aExp | aSig ) == 0 ) return a;
    1ba0:	b9 85 08 00 	or r1,r12,r5
    1ba4:	44 20 00 07 	be r1,r0,1bc0 <float32_sqrt+0x60>
    1ba8:	78 02 00 00 	mvhi r2,0x0
    1bac:	38 42 28 c4 	ori r2,r2,0x28c4
    1bb0:	28 41 00 00 	lw r1,(r2+0)
    1bb4:	34 04 ff ff 	mvi r4,-1
    1bb8:	38 21 00 10 	ori r1,r1,0x10
    1bbc:	58 41 00 00 	sw (r2+0),r1
        }
    }
    shift32RightJamming( zSig, 1, &zSig );
    return roundAndPackFloat32( 0, zExp, zSig );

}
    1bc0:	b8 80 08 00 	mv r1,r4
    1bc4:	2b 9d 00 04 	lw ra,(sp+4)
    1bc8:	2b 8b 00 14 	lw r11,(sp+20)
    1bcc:	2b 8c 00 10 	lw r12,(sp+16)
    1bd0:	2b 8d 00 0c 	lw r13,(sp+12)
    1bd4:	2b 8e 00 08 	lw r14,(sp+8)
    1bd8:	37 9c 00 14 	addi sp,sp,20
    1bdc:	c3 a0 00 00 	ret
    if ( aSign ) {
        if ( ( aExp | aSig ) == 0 ) return a;
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( aExp == 0 ) {
    1be0:	5d 83 00 13 	bne r12,r3,1c2c <float32_sqrt+0xcc>
        if ( aSig == 0 ) return 0;
    1be4:	b8 a0 20 00 	mv r4,r5
    1be8:	44 ac ff f6 	be r5,r12,1bc0 <float32_sqrt+0x60>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    1bec:	38 01 ff ff 	mvu r1,0xffff
    1bf0:	50 25 00 86 	bgeu r1,r5,1e08 <float32_sqrt+0x2a8>
    1bf4:	b8 a0 18 00 	mv r3,r5
    1bf8:	34 02 00 08 	mvi r2,8
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
        a <<= 8;
    1bfc:	3c 63 00 08 	sli r3,r3,8
    1c00:	34 44 ff f8 	addi r4,r2,-8
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1c04:	00 63 00 18 	srui r3,r3,24
    1c08:	78 01 00 00 	mvhi r1,0x0
    1c0c:	3c 63 00 02 	sli r3,r3,2
    1c10:	38 21 24 64 	ori r1,r1,0x2464
    1c14:	b4 23 08 00 	add r1,r1,r3
    1c18:	28 22 00 00 	lw r2,(r1+0)
    *zSigPtr = aSig<<shiftCount;
    *zExpPtr = 1 - shiftCount;
    1c1c:	34 01 00 01 	mvi r1,1
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    1c20:	b4 82 10 00 	add r2,r4,r2
    *zSigPtr = aSig<<shiftCount;
    1c24:	bc a2 28 00 	sl r5,r5,r2
    *zExpPtr = 1 - shiftCount;
    1c28:	c8 22 60 00 	sub r12,r1,r2
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return 0;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = ( ( aExp - 0x7F )>>1 ) + 0x7E;
    aSig = ( aSig | 0x00800000 )<<8;
    1c2c:	78 01 00 80 	mvhi r1,0x80
    1c30:	38 21 00 00 	ori r1,r1,0x0
    1c34:	b8 a1 08 00 	or r1,r5,r1
    1c38:	3c 2d 00 08 	sli r13,r1,8
    };
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    if ( aExp & 1 ) {
    1c3c:	21 8e 00 01 	andi r14,r12,0x1
        0x0200, 0x0179, 0x0109, 0x00AF, 0x0068, 0x0034, 0x0012, 0x0002
    };
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    1c40:	01 a1 00 1b 	srui r1,r13,27
    1c44:	20 23 00 0f 	andi r3,r1,0xf
    if ( aExp & 1 ) {
    1c48:	5d c0 00 2c 	bne r14,r0,1cf8 <float32_sqrt+0x198>
        z = 0x4000 + ( a>>17 ) - sqrtOddAdjustments[ index ];
        z = ( ( a / z )<<14 ) + ( z<<15 );
        a >>= 1;
    }
    else {
        z = 0x8000 + ( a>>17 ) - sqrtEvenAdjustments[ index ];
    1c4c:	78 01 00 00 	mvhi r1,0x0
    1c50:	b4 63 10 00 	add r2,r3,r3
    1c54:	38 21 28 64 	ori r1,r1,0x2864
    1c58:	b4 22 08 00 	add r1,r1,r2
    1c5c:	2c 23 00 00 	lhu r3,(r1+0)
    1c60:	01 a2 00 11 	srui r2,r13,17
    1c64:	38 01 80 00 	mvu r1,0x8000
    1c68:	b4 41 10 00 	add r2,r2,r1
    1c6c:	c8 43 10 00 	sub r2,r2,r3
        z = a / z + z;
    1c70:	8d a2 08 00 	divu r1,r13,r2
        z = ( 0x20000 <= z ) ? 0xFFFF8000 : ( z<<15 );
    1c74:	78 03 00 01 	mvhi r3,0x1
        z = ( ( a / z )<<14 ) + ( z<<15 );
        a >>= 1;
    }
    else {
        z = 0x8000 + ( a>>17 ) - sqrtEvenAdjustments[ index ];
        z = a / z + z;
    1c78:	b4 22 08 00 	add r1,r1,r2
        z = ( 0x20000 <= z ) ? 0xFFFF8000 : ( z<<15 );
    1c7c:	38 63 ff ff 	ori r3,r3,0xffff
    1c80:	3c 2b 00 0f 	sli r11,r1,15
    1c84:	50 61 00 02 	bgeu r3,r1,1c8c <float32_sqrt+0x12c>
    1c88:	34 0b 80 00 	mvi r11,-32768
        if ( z <= a ) return (bits32) ( ( (sbits32) a )>>1 );
    1c8c:	b9 a0 20 00 	mv r4,r13
    1c90:	55 6d 00 27 	bgu r11,r13,1d2c <float32_sqrt+0x1cc>
    1c94:	15 a1 00 01 	sri r1,r13,1
    zSig = estimateSqrt32( aExp, aSig ) + 2;
    1c98:	34 26 00 02 	addi r6,r1,2
    if ( ( zSig & 0x7F ) <= 5 ) {
    1c9c:	20 c2 00 7f 	andi r2,r6,0x7f
    1ca0:	34 01 00 05 	mvi r1,5
    1ca4:	50 22 00 2a 	bgeu r1,r2,1d4c <float32_sqrt+0x1ec>
    1ca8:	00 c2 00 01 	srui r2,r6,1
    1cac:	20 c1 00 01 	andi r1,r6,0x1
    1cb0:	b8 22 18 00 	or r3,r1,r2
            }
            zSig |= ( ( rem0 | rem1 ) != 0 );
        }
    }
    shift32RightJamming( zSig, 1, &zSig );
    return roundAndPackFloat32( 0, zExp, zSig );
    1cb4:	35 82 ff 81 	addi r2,r12,-127
    1cb8:	14 42 00 01 	sri r2,r2,1
    1cbc:	34 01 00 00 	mvi r1,0
    1cc0:	34 42 00 7e 	addi r2,r2,126
    1cc4:	fb ff fb 04 	calli 8d4 <roundAndPackFloat32>
    1cc8:	b8 20 20 00 	mv r4,r1

}
    1ccc:	b8 80 08 00 	mv r1,r4
    1cd0:	2b 9d 00 04 	lw ra,(sp+4)
    1cd4:	2b 8b 00 14 	lw r11,(sp+20)
    1cd8:	2b 8c 00 10 	lw r12,(sp+16)
    1cdc:	2b 8d 00 0c 	lw r13,(sp+12)
    1ce0:	2b 8e 00 08 	lw r14,(sp+8)
    1ce4:	37 9c 00 14 	addi sp,sp,20
    1ce8:	c3 a0 00 00 	ret

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, 0 );
    1cec:	5c a0 00 43 	bne r5,r0,1df8 <float32_sqrt+0x298>
        if ( ! aSign ) return a;
    1cf0:	5c 65 ff ae 	bne r3,r5,1ba8 <float32_sqrt+0x48>
    1cf4:	e3 ff ff b3 	bi 1bc0 <float32_sqrt+0x60>
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    if ( aExp & 1 ) {
        z = 0x4000 + ( a>>17 ) - sqrtOddAdjustments[ index ];
    1cf8:	78 02 00 00 	mvhi r2,0x0
    1cfc:	b4 63 08 00 	add r1,r3,r3
    1d00:	38 42 28 84 	ori r2,r2,0x2884
    1d04:	b4 41 10 00 	add r2,r2,r1
    1d08:	2c 43 00 00 	lhu r3,(r2+0)
    1d0c:	01 a1 00 11 	srui r1,r13,17
        z = ( ( a / z )<<14 ) + ( z<<15 );
        a >>= 1;
    1d10:	01 a4 00 01 	srui r4,r13,1
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    if ( aExp & 1 ) {
        z = 0x4000 + ( a>>17 ) - sqrtOddAdjustments[ index ];
    1d14:	34 21 40 00 	addi r1,r1,16384
    1d18:	c8 23 08 00 	sub r1,r1,r3
        z = ( ( a / z )<<14 ) + ( z<<15 );
    1d1c:	8d a1 10 00 	divu r2,r13,r1
    1d20:	3c 21 00 0f 	sli r1,r1,15
    1d24:	3c 42 00 0e 	sli r2,r2,14
    1d28:	b4 41 58 00 	add r11,r2,r1
        z = 0x8000 + ( a>>17 ) - sqrtEvenAdjustments[ index ];
        z = a / z + z;
        z = ( 0x20000 <= z ) ? 0xFFFF8000 : ( z<<15 );
        if ( z <= a ) return (bits32) ( ( (sbits32) a )>>1 );
    }
    return ( ( estimateDiv64To32( a, 0, z ) )>>1 ) + ( z>>1 );
    1d2c:	34 02 00 00 	mvi r2,0
    1d30:	b8 80 08 00 	mv r1,r4
    1d34:	b9 60 18 00 	mv r3,r11
    1d38:	fb ff fa 4b 	calli 664 <estimateDiv64To32>
    1d3c:	00 21 00 01 	srui r1,r1,1
    1d40:	01 62 00 01 	srui r2,r11,1
    1d44:	b4 41 08 00 	add r1,r2,r1
    1d48:	e3 ff ff d4 	bi 1c98 <float32_sqrt+0x138>
    }
    zExp = ( ( aExp - 0x7F )>>1 ) + 0x7E;
    aSig = ( aSig | 0x00800000 )<<8;
    zSig = estimateSqrt32( aExp, aSig ) + 2;
    if ( ( zSig & 0x7F ) <= 5 ) {
        if ( zSig < 2 ) {
    1d4c:	34 01 00 01 	mvi r1,1
    1d50:	54 c1 00 04 	bgu r6,r1,1d60 <float32_sqrt+0x200>
    1d54:	78 03 7f ff 	mvhi r3,0x7fff
    1d58:	38 63 ff ff 	ori r3,r3,0xffff
    1d5c:	e3 ff ff d6 	bi 1cb4 <float32_sqrt+0x154>
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    1d60:	00 c3 00 10 	srui r3,r6,16

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    1d64:	20 c4 ff ff 	andi r4,r6,0xffff
    zMiddleA = ( (bits32) aLow ) * bHigh;
    1d68:	88 64 08 00 	mul r1,r3,r4
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    1d6c:	b4 21 28 00 	add r5,r1,r1
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1d70:	54 25 00 2c 	bgu r1,r5,1e20 <float32_sqrt+0x2c0>
    1d74:	34 07 00 00 	mvi r7,0

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    1d78:	88 84 20 00 	mul r4,r4,r4
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
    1d7c:	3c a2 00 10 	sli r2,r5,16
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1d80:	88 63 18 00 	mul r3,r3,r3
    1d84:	81 ae 08 00 	sru r1,r13,r14
    zMiddleA <<= 16;
    z1 += zMiddleA;
    1d88:	b4 44 20 00 	add r4,r2,r4
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1d8c:	00 a5 00 10 	srui r5,r5,16
    1d90:	c8 23 08 00 	sub r1,r1,r3
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    1d94:	f4 44 10 00 	cmpgu r2,r2,r4
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1d98:	c8 25 08 00 	sub r1,r1,r5
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    1d9c:	7c 83 00 00 	cmpnei r3,r4,0
    1da0:	c8 22 08 00 	sub r1,r1,r2
    1da4:	c8 23 08 00 	sub r1,r1,r3
    1da8:	c8 27 28 00 	sub r5,r1,r7
INLINE void
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    1dac:	c8 04 18 00 	sub r3,r0,r4
        }
        else {
            aSig >>= aExp & 1;
            mul32To64( zSig, zSig, &term0, &term1 );
            sub64( aSig, 0, term0, term1, &rem0, &rem1 );
            while ( (sbits32) rem0 < 0 ) {
    1db0:	4c a0 00 0b 	bge r5,r0,1ddc <float32_sqrt+0x27c>
                --zSig;
    1db4:	34 c6 ff ff 	addi r6,r6,-1
 add64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{
    bits32 z1;

    z1 = a1 + b1;
    1db8:	b4 c6 08 00 	add r1,r6,r6
    1dbc:	38 21 00 01 	ori r1,r1,0x1
        }
        else {
            aSig >>= aExp & 1;
            mul32To64( zSig, zSig, &term0, &term1 );
            sub64( aSig, 0, term0, term1, &rem0, &rem1 );
            while ( (sbits32) rem0 < 0 ) {
    1dc0:	b8 60 10 00 	mv r2,r3
    1dc4:	b4 23 18 00 	add r3,r1,r3
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
    1dc8:	f4 43 10 00 	cmpgu r2,r2,r3
    1dcc:	00 c1 00 1f 	srui r1,r6,31
    1dd0:	b4 22 08 00 	add r1,r1,r2
    1dd4:	b4 a1 28 00 	add r5,r5,r1
    1dd8:	48 05 ff f7 	bg r0,r5,1db4 <float32_sqrt+0x254>
                --zSig;
                shortShift64Left( 0, zSig, 1, &term0, &term1 );
                term1 |= 1;
                add64( rem0, rem1, term0, term1, &rem0, &rem1 );
            }
            zSig |= ( ( rem0 | rem1 ) != 0 );
    1ddc:	b8 a3 08 00 	or r1,r5,r3
    1de0:	7c 21 00 00 	cmpnei r1,r1,0
    1de4:	b8 26 08 00 	or r1,r1,r6
    1de8:	00 22 00 01 	srui r2,r1,1
    1dec:	20 21 00 01 	andi r1,r1,0x1
    1df0:	b8 22 18 00 	or r3,r1,r2
    1df4:	e3 ff ff b0 	bi 1cb4 <float32_sqrt+0x154>

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, 0 );
    1df8:	34 02 00 00 	mvi r2,0
    1dfc:	fb ff fa 87 	calli 818 <propagateFloat32NaN>
    1e00:	b8 20 20 00 	mv r4,r1
    1e04:	e3 ff ff 6f 	bi 1bc0 <float32_sqrt+0x60>
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    1e08:	78 01 00 ff 	mvhi r1,0xff
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    1e0c:	3c a3 00 10 	sli r3,r5,16
    }
    if ( a < 0x1000000 ) {
    1e10:	38 21 ff ff 	ori r1,r1,0xffff
    1e14:	50 23 00 06 	bgeu r1,r3,1e2c <float32_sqrt+0x2cc>
    1e18:	34 04 00 08 	mvi r4,8
    1e1c:	e3 ff ff 7a 	bi 1c04 <float32_sqrt+0xa4>
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1e20:	78 07 00 01 	mvhi r7,0x1
    1e24:	38 e7 00 00 	ori r7,r7,0x0
    1e28:	e3 ff ff d4 	bi 1d78 <float32_sqrt+0x218>
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    1e2c:	34 02 00 18 	mvi r2,24
    1e30:	e3 ff ff 73 	bi 1bfc <float32_sqrt+0x9c>

00001e34 <float32_eq>:
corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_eq( float32 a, float32 b )
{
    1e34:	b8 20 20 00 	mv r4,r1

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    1e38:	00 21 00 17 	srui r1,r1,23
corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_eq( float32 a, float32 b )
{
    1e3c:	b8 40 28 00 	mv r5,r2

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    1e40:	20 21 00 ff 	andi r1,r1,0xff
    1e44:	34 02 00 ff 	mvi r2,255
    1e48:	44 22 00 0c 	be r1,r2,1e78 <float32_eq+0x44>
    1e4c:	00 a1 00 17 	srui r1,r5,23
    1e50:	34 02 00 ff 	mvi r2,255
    1e54:	20 21 00 ff 	andi r1,r1,0xff
    1e58:	44 22 00 16 	be r1,r2,1eb0 <float32_eq+0x7c>
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );
    1e5c:	34 03 00 01 	mvi r3,1
    1e60:	44 85 00 04 	be r4,r5,1e70 <float32_eq+0x3c>
    1e64:	b8 a4 08 00 	or r1,r5,r4
    1e68:	b4 21 08 00 	add r1,r1,r1
    1e6c:	64 23 00 00 	cmpei r3,r1,0

}
    1e70:	b8 60 08 00 	mv r1,r3
    1e74:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_eq( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    1e78:	78 01 00 7f 	mvhi r1,0x7f
    1e7c:	38 21 ff ff 	ori r1,r1,0xffff
    1e80:	a0 81 08 00 	and r1,r4,r1
    1e84:	44 20 ff f2 	be r1,r0,1e4c <float32_eq+0x18>
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    1e88:	00 81 00 16 	srui r1,r4,22
    1e8c:	34 02 01 fe 	mvi r2,510
    1e90:	20 21 01 ff 	andi r1,r1,0x1ff
    1e94:	44 22 00 0f 	be r1,r2,1ed0 <float32_eq+0x9c>
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );
    1e98:	00 a1 00 16 	srui r1,r5,22
    1e9c:	34 02 01 fe 	mvi r2,510
    1ea0:	20 21 01 ff 	andi r1,r1,0x1ff
    1ea4:	44 22 00 17 	be r1,r2,1f00 <float32_eq+0xcc>
    1ea8:	34 03 00 00 	mvi r3,0
    1eac:	e3 ff ff f1 	bi 1e70 <float32_eq+0x3c>
-------------------------------------------------------------------------------
*/
flag float32_eq( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    1eb0:	78 01 00 7f 	mvhi r1,0x7f
    1eb4:	38 21 ff ff 	ori r1,r1,0xffff
    1eb8:	a0 a1 08 00 	and r1,r5,r1
    1ebc:	44 20 ff e8 	be r1,r0,1e5c <float32_eq+0x28>
    1ec0:	00 81 00 16 	srui r1,r4,22
    1ec4:	34 02 01 fe 	mvi r2,510
    1ec8:	20 21 01 ff 	andi r1,r1,0x1ff
    1ecc:	5c 22 ff f3 	bne r1,r2,1e98 <float32_eq+0x64>
    1ed0:	78 01 00 3f 	mvhi r1,0x3f
    1ed4:	38 21 ff ff 	ori r1,r1,0xffff
    1ed8:	a0 81 08 00 	and r1,r4,r1
    1edc:	44 20 ff ef 	be r1,r0,1e98 <float32_eq+0x64>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    1ee0:	78 02 00 00 	mvhi r2,0x0
    1ee4:	38 42 28 c4 	ori r2,r2,0x28c4
    1ee8:	28 41 00 00 	lw r1,(r2+0)
    1eec:	34 03 00 00 	mvi r3,0
    1ef0:	38 21 00 10 	ori r1,r1,0x10
    1ef4:	58 41 00 00 	sw (r2+0),r1
        }
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );

}
    1ef8:	b8 60 08 00 	mv r1,r3
    1efc:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    1f00:	78 01 00 3f 	mvhi r1,0x3f
    1f04:	38 21 ff ff 	ori r1,r1,0xffff
    1f08:	a0 a1 08 00 	and r1,r5,r1
    1f0c:	5c 20 ff f5 	bne r1,r0,1ee0 <float32_eq+0xac>
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );
    1f10:	34 03 00 00 	mvi r3,0
    1f14:	e3 ff ff d7 	bi 1e70 <float32_eq+0x3c>

00001f18 <float32_le>:
performed according to the IEC/IEEE Standard for Binary Floating-point
Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_le( float32 a, float32 b )
{
    1f18:	b8 20 28 00 	mv r5,r1
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    1f1c:	00 21 00 17 	srui r1,r1,23
performed according to the IEC/IEEE Standard for Binary Floating-point
Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_le( float32 a, float32 b )
{
    1f20:	b8 40 20 00 	mv r4,r2
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    1f24:	20 21 00 ff 	andi r1,r1,0xff
    1f28:	34 02 00 ff 	mvi r2,255
    1f2c:	44 22 00 14 	be r1,r2,1f7c <float32_le+0x64>
    1f30:	00 81 00 17 	srui r1,r4,23
    1f34:	34 02 00 ff 	mvi r2,255
    1f38:	20 21 00 ff 	andi r1,r1,0xff
    1f3c:	44 22 00 1c 	be r1,r2,1fac <float32_le+0x94>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    1f40:	00 a2 00 1f 	srui r2,r5,31
        float_raise( float_flag_invalid );
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    1f44:	00 81 00 1f 	srui r1,r4,31
    1f48:	44 41 00 07 	be r2,r1,1f64 <float32_le+0x4c>
    1f4c:	5c 40 00 09 	bne r2,r0,1f70 <float32_le+0x58>
    1f50:	b8 85 08 00 	or r1,r4,r5
    1f54:	b4 21 08 00 	add r1,r1,r1
    1f58:	64 23 00 00 	cmpei r3,r1,0
    return ( a == b ) || ( aSign ^ ( a < b ) );

}
    1f5c:	b8 60 08 00 	mv r1,r3
    1f60:	c3 a0 00 00 	ret
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );
    1f64:	f4 85 08 00 	cmpgu r1,r4,r5
    1f68:	fc 22 18 00 	cmpne r3,r1,r2
    1f6c:	5c a4 ff fc 	bne r5,r4,1f5c <float32_le+0x44>
    1f70:	34 03 00 01 	mvi r3,1

}
    1f74:	b8 60 08 00 	mv r1,r3
    1f78:	c3 a0 00 00 	ret
*/
flag float32_le( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    1f7c:	78 01 00 7f 	mvhi r1,0x7f
    1f80:	38 21 ff ff 	ori r1,r1,0xffff
    1f84:	a0 a1 08 00 	and r1,r5,r1
    1f88:	44 20 ff ea 	be r1,r0,1f30 <float32_le+0x18>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    1f8c:	78 02 00 00 	mvhi r2,0x0
    1f90:	38 42 28 c4 	ori r2,r2,0x28c4
    1f94:	28 41 00 00 	lw r1,(r2+0)
    1f98:	34 03 00 00 	mvi r3,0
    1f9c:	38 21 00 10 	ori r1,r1,0x10
    1fa0:	58 41 00 00 	sw (r2+0),r1
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );

}
    1fa4:	b8 60 08 00 	mv r1,r3
    1fa8:	c3 a0 00 00 	ret
*/
flag float32_le( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    1fac:	78 01 00 7f 	mvhi r1,0x7f
    1fb0:	38 21 ff ff 	ori r1,r1,0xffff
    1fb4:	a0 81 08 00 	and r1,r4,r1
    1fb8:	44 20 ff e2 	be r1,r0,1f40 <float32_le+0x28>
    1fbc:	78 02 00 00 	mvhi r2,0x0
    1fc0:	38 42 28 c4 	ori r2,r2,0x28c4
    1fc4:	28 41 00 00 	lw r1,(r2+0)
    1fc8:	34 03 00 00 	mvi r3,0
    1fcc:	38 21 00 10 	ori r1,r1,0x10
    1fd0:	58 41 00 00 	sw (r2+0),r1
    1fd4:	e3 ff ff f4 	bi 1fa4 <float32_le+0x8c>

00001fd8 <float32_lt>:
the corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt( float32 a, float32 b )
{
    1fd8:	b8 20 28 00 	mv r5,r1
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    1fdc:	00 21 00 17 	srui r1,r1,23
the corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt( float32 a, float32 b )
{
    1fe0:	b8 40 20 00 	mv r4,r2
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    1fe4:	20 21 00 ff 	andi r1,r1,0xff
    1fe8:	34 02 00 ff 	mvi r2,255
    1fec:	44 22 00 11 	be r1,r2,2030 <float32_lt+0x58>
    1ff0:	00 81 00 17 	srui r1,r4,23
    1ff4:	34 02 00 ff 	mvi r2,255
    1ff8:	20 21 00 ff 	andi r1,r1,0xff
    1ffc:	44 22 00 19 	be r1,r2,2060 <float32_lt+0x88>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    2000:	00 a2 00 1f 	srui r2,r5,31
        float_raise( float_flag_invalid );
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    2004:	00 81 00 1f 	srui r1,r4,31
    2008:	44 41 00 1d 	be r2,r1,207c <float32_lt+0xa4>
    200c:	5c 40 00 04 	bne r2,r0,201c <float32_lt+0x44>
    return ( a != b ) && ( aSign ^ ( a < b ) );
    2010:	34 03 00 00 	mvi r3,0

}
    2014:	b8 60 08 00 	mv r1,r3
    2018:	c3 a0 00 00 	ret
        float_raise( float_flag_invalid );
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    201c:	b8 85 08 00 	or r1,r4,r5
    2020:	b4 21 08 00 	add r1,r1,r1
    2024:	7c 23 00 00 	cmpnei r3,r1,0
    return ( a != b ) && ( aSign ^ ( a < b ) );

}
    2028:	b8 60 08 00 	mv r1,r3
    202c:	c3 a0 00 00 	ret
*/
flag float32_lt( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2030:	78 01 00 7f 	mvhi r1,0x7f
    2034:	38 21 ff ff 	ori r1,r1,0xffff
    2038:	a0 a1 08 00 	and r1,r5,r1
    203c:	44 20 ff ed 	be r1,r0,1ff0 <float32_lt+0x18>
    2040:	78 02 00 00 	mvhi r2,0x0
    2044:	38 42 28 c4 	ori r2,r2,0x28c4
    2048:	28 41 00 00 	lw r1,(r2+0)
    204c:	34 03 00 00 	mvi r3,0
    2050:	38 21 00 10 	ori r1,r1,0x10
    2054:	58 41 00 00 	sw (r2+0),r1
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    return ( a != b ) && ( aSign ^ ( a < b ) );

}
    2058:	b8 60 08 00 	mv r1,r3
    205c:	c3 a0 00 00 	ret
*/
flag float32_lt( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2060:	78 01 00 7f 	mvhi r1,0x7f
    2064:	38 21 ff ff 	ori r1,r1,0xffff
    2068:	a0 81 08 00 	and r1,r4,r1
    206c:	5c 20 ff f5 	bne r1,r0,2040 <float32_lt+0x68>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    2070:	00 a2 00 1f 	srui r2,r5,31
        float_raise( float_flag_invalid );
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    2074:	00 81 00 1f 	srui r1,r4,31
    2078:	5c 41 ff e5 	bne r2,r1,200c <float32_lt+0x34>
    return ( a != b ) && ( aSign ^ ( a < b ) );
    207c:	f4 85 08 00 	cmpgu r1,r4,r5
    2080:	fc 22 18 00 	cmpne r3,r1,r2
    2084:	44 a4 ff e3 	be r5,r4,2010 <float32_lt+0x38>

}
    2088:	b8 60 08 00 	mv r1,r3
    208c:	c3 a0 00 00 	ret

00002090 <float32_eq_signaling>:
if either operand is a NaN.  Otherwise, the comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_eq_signaling( float32 a, float32 b )
{
    2090:	b8 20 28 00 	mv r5,r1

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2094:	00 21 00 17 	srui r1,r1,23
if either operand is a NaN.  Otherwise, the comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_eq_signaling( float32 a, float32 b )
{
    2098:	b8 40 20 00 	mv r4,r2

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    209c:	20 21 00 ff 	andi r1,r1,0xff
    20a0:	34 02 00 ff 	mvi r2,255
    20a4:	44 22 00 0c 	be r1,r2,20d4 <float32_eq_signaling+0x44>
    20a8:	00 81 00 17 	srui r1,r4,23
    20ac:	34 02 00 ff 	mvi r2,255
    20b0:	20 21 00 ff 	andi r1,r1,0xff
    20b4:	44 22 00 14 	be r1,r2,2104 <float32_eq_signaling+0x74>
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        float_raise( float_flag_invalid );
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );
    20b8:	34 03 00 01 	mvi r3,1
    20bc:	44 a4 00 04 	be r5,r4,20cc <float32_eq_signaling+0x3c>
    20c0:	b8 85 08 00 	or r1,r4,r5
    20c4:	b4 21 08 00 	add r1,r1,r1
    20c8:	64 23 00 00 	cmpei r3,r1,0

}
    20cc:	b8 60 08 00 	mv r1,r3
    20d0:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_eq_signaling( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    20d4:	78 01 00 7f 	mvhi r1,0x7f
    20d8:	38 21 ff ff 	ori r1,r1,0xffff
    20dc:	a0 a1 08 00 	and r1,r5,r1
    20e0:	44 20 ff f2 	be r1,r0,20a8 <float32_eq_signaling+0x18>
    20e4:	78 02 00 00 	mvhi r2,0x0
    20e8:	38 42 28 c4 	ori r2,r2,0x28c4
    20ec:	28 41 00 00 	lw r1,(r2+0)
    20f0:	34 03 00 00 	mvi r3,0
    20f4:	38 21 00 10 	ori r1,r1,0x10
    20f8:	58 41 00 00 	sw (r2+0),r1
        float_raise( float_flag_invalid );
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );

}
    20fc:	b8 60 08 00 	mv r1,r3
    2100:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_eq_signaling( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2104:	78 01 00 7f 	mvhi r1,0x7f
    2108:	38 21 ff ff 	ori r1,r1,0xffff
    210c:	a0 81 08 00 	and r1,r4,r1
    2110:	44 20 ff ea 	be r1,r0,20b8 <float32_eq_signaling+0x28>
    2114:	78 02 00 00 	mvhi r2,0x0
    2118:	38 42 28 c4 	ori r2,r2,0x28c4
    211c:	28 41 00 00 	lw r1,(r2+0)
    2120:	34 03 00 00 	mvi r3,0
    2124:	38 21 00 10 	ori r1,r1,0x10
    2128:	58 41 00 00 	sw (r2+0),r1
    212c:	e3 ff ff f4 	bi 20fc <float32_eq_signaling+0x6c>

00002130 <float32_le_quiet>:
cause an exception.  Otherwise, the comparison is performed according to the
IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_le_quiet( float32 a, float32 b )
{
    2130:	b8 20 18 00 	mv r3,r1
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2134:	00 21 00 17 	srui r1,r1,23
cause an exception.  Otherwise, the comparison is performed according to the
IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_le_quiet( float32 a, float32 b )
{
    2138:	b8 40 28 00 	mv r5,r2
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    213c:	20 21 00 ff 	andi r1,r1,0xff
    2140:	34 02 00 ff 	mvi r2,255
    2144:	44 22 00 14 	be r1,r2,2194 <float32_le_quiet+0x64>
    2148:	00 a1 00 17 	srui r1,r5,23
    214c:	34 02 00 ff 	mvi r2,255
    2150:	20 21 00 ff 	andi r1,r1,0xff
    2154:	44 22 00 1f 	be r1,r2,21d0 <float32_le_quiet+0xa0>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    2158:	00 62 00 1f 	srui r2,r3,31
        }
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    215c:	00 a1 00 1f 	srui r1,r5,31
    2160:	44 41 00 07 	be r2,r1,217c <float32_le_quiet+0x4c>
    2164:	5c 40 00 09 	bne r2,r0,2188 <float32_le_quiet+0x58>
    2168:	b8 a3 08 00 	or r1,r5,r3
    216c:	b4 21 08 00 	add r1,r1,r1
    2170:	64 24 00 00 	cmpei r4,r1,0
    return ( a == b ) || ( aSign ^ ( a < b ) );

}
    2174:	b8 80 08 00 	mv r1,r4
    2178:	c3 a0 00 00 	ret
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );
    217c:	f4 a3 08 00 	cmpgu r1,r5,r3
    2180:	fc 22 20 00 	cmpne r4,r1,r2
    2184:	5c 65 ff fc 	bne r3,r5,2174 <float32_le_quiet+0x44>
    2188:	34 04 00 01 	mvi r4,1

}
    218c:	b8 80 08 00 	mv r1,r4
    2190:	c3 a0 00 00 	ret
*/
flag float32_le_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2194:	78 01 00 7f 	mvhi r1,0x7f
    2198:	38 21 ff ff 	ori r1,r1,0xffff
    219c:	a0 61 08 00 	and r1,r3,r1
    21a0:	44 20 ff ea 	be r1,r0,2148 <float32_le_quiet+0x18>
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    21a4:	00 61 00 16 	srui r1,r3,22
    21a8:	34 02 01 fe 	mvi r2,510
    21ac:	20 21 01 ff 	andi r1,r1,0x1ff
    21b0:	44 22 00 10 	be r1,r2,21f0 <float32_le_quiet+0xc0>
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );
    21b4:	00 a1 00 16 	srui r1,r5,22
    21b8:	34 02 01 fe 	mvi r2,510
    21bc:	20 21 01 ff 	andi r1,r1,0x1ff
    21c0:	44 22 00 18 	be r1,r2,2220 <float32_le_quiet+0xf0>
    21c4:	34 04 00 00 	mvi r4,0

}
    21c8:	b8 80 08 00 	mv r1,r4
    21cc:	c3 a0 00 00 	ret
*/
flag float32_le_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    21d0:	78 01 00 7f 	mvhi r1,0x7f
    21d4:	38 21 ff ff 	ori r1,r1,0xffff
    21d8:	a0 a1 08 00 	and r1,r5,r1
    21dc:	44 20 ff df 	be r1,r0,2158 <float32_le_quiet+0x28>
    21e0:	00 61 00 16 	srui r1,r3,22
    21e4:	34 02 01 fe 	mvi r2,510
    21e8:	20 21 01 ff 	andi r1,r1,0x1ff
    21ec:	5c 22 ff f2 	bne r1,r2,21b4 <float32_le_quiet+0x84>
    21f0:	78 01 00 3f 	mvhi r1,0x3f
    21f4:	38 21 ff ff 	ori r1,r1,0xffff
    21f8:	a0 61 08 00 	and r1,r3,r1
    21fc:	44 20 ff ee 	be r1,r0,21b4 <float32_le_quiet+0x84>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    2200:	78 02 00 00 	mvhi r2,0x0
    2204:	38 42 28 c4 	ori r2,r2,0x28c4
    2208:	28 41 00 00 	lw r1,(r2+0)
    220c:	34 04 00 00 	mvi r4,0
    2210:	38 21 00 10 	ori r1,r1,0x10
    2214:	58 41 00 00 	sw (r2+0),r1
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );

}
    2218:	b8 80 08 00 	mv r1,r4
    221c:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    2220:	78 01 00 3f 	mvhi r1,0x3f
    2224:	38 21 ff ff 	ori r1,r1,0xffff
    2228:	a0 a1 08 00 	and r1,r5,r1
    222c:	5c 20 ff f5 	bne r1,r0,2200 <float32_le_quiet+0xd0>
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );
    2230:	34 04 00 00 	mvi r4,0
    2234:	e3 ff ff e5 	bi 21c8 <float32_le_quiet+0x98>

00002238 <float32_lt_quiet>:
exception.  Otherwise, the comparison is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt_quiet( float32 a, float32 b )
{
    2238:	b8 20 20 00 	mv r4,r1
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    223c:	00 21 00 17 	srui r1,r1,23
exception.  Otherwise, the comparison is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt_quiet( float32 a, float32 b )
{
    2240:	b8 40 28 00 	mv r5,r2
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2244:	20 21 00 ff 	andi r1,r1,0xff
    2248:	34 02 00 ff 	mvi r2,255
    224c:	44 22 00 14 	be r1,r2,229c <float32_lt_quiet+0x64>
    2250:	00 a1 00 17 	srui r1,r5,23
    2254:	34 02 00 ff 	mvi r2,255
    2258:	20 21 00 ff 	andi r1,r1,0xff
    225c:	44 22 00 28 	be r1,r2,22fc <float32_lt_quiet+0xc4>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    2260:	00 82 00 1f 	srui r2,r4,31
        }
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    2264:	00 a1 00 1f 	srui r1,r5,31
    2268:	44 41 00 07 	be r2,r1,2284 <float32_lt_quiet+0x4c>
    226c:	44 40 00 09 	be r2,r0,2290 <float32_lt_quiet+0x58>
    2270:	b8 a4 08 00 	or r1,r5,r4
    2274:	b4 21 08 00 	add r1,r1,r1
    2278:	7c 23 00 00 	cmpnei r3,r1,0
    return ( a != b ) && ( aSign ^ ( a < b ) );

}
    227c:	b8 60 08 00 	mv r1,r3
    2280:	c3 a0 00 00 	ret
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    return ( a != b ) && ( aSign ^ ( a < b ) );
    2284:	f4 a4 08 00 	cmpgu r1,r5,r4
    2288:	fc 22 18 00 	cmpne r3,r1,r2
    228c:	5c 85 ff fc 	bne r4,r5,227c <float32_lt_quiet+0x44>
    2290:	34 03 00 00 	mvi r3,0

}
    2294:	b8 60 08 00 	mv r1,r3
    2298:	c3 a0 00 00 	ret
*/
flag float32_lt_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    229c:	78 01 00 7f 	mvhi r1,0x7f
    22a0:	38 21 ff ff 	ori r1,r1,0xffff
    22a4:	a0 81 08 00 	and r1,r4,r1
    22a8:	44 20 ff ea 	be r1,r0,2250 <float32_lt_quiet+0x18>
    22ac:	00 81 00 16 	srui r1,r4,22
    22b0:	34 02 01 fe 	mvi r2,510
    22b4:	20 21 01 ff 	andi r1,r1,0x1ff
    22b8:	44 22 00 19 	be r1,r2,231c <float32_lt_quiet+0xe4>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    22bc:	00 a1 00 16 	srui r1,r5,22
    22c0:	34 02 01 fe 	mvi r2,510
    22c4:	20 21 01 ff 	andi r1,r1,0x1ff
    22c8:	5c 22 ff f2 	bne r1,r2,2290 <float32_lt_quiet+0x58>
    22cc:	78 01 00 3f 	mvhi r1,0x3f
    22d0:	38 21 ff ff 	ori r1,r1,0xffff
    22d4:	a0 a1 08 00 	and r1,r5,r1
    22d8:	44 20 ff ee 	be r1,r0,2290 <float32_lt_quiet+0x58>
    22dc:	78 02 00 00 	mvhi r2,0x0
    22e0:	38 42 28 c4 	ori r2,r2,0x28c4
    22e4:	28 41 00 00 	lw r1,(r2+0)
    22e8:	34 03 00 00 	mvi r3,0
    22ec:	38 21 00 10 	ori r1,r1,0x10
    22f0:	58 41 00 00 	sw (r2+0),r1
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    return ( a != b ) && ( aSign ^ ( a < b ) );

}
    22f4:	b8 60 08 00 	mv r1,r3
    22f8:	c3 a0 00 00 	ret
*/
flag float32_lt_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    22fc:	78 01 00 7f 	mvhi r1,0x7f
    2300:	38 21 ff ff 	ori r1,r1,0xffff
    2304:	a0 a1 08 00 	and r1,r5,r1
    2308:	44 20 ff d6 	be r1,r0,2260 <float32_lt_quiet+0x28>
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    230c:	00 81 00 16 	srui r1,r4,22
    2310:	34 02 01 fe 	mvi r2,510
    2314:	20 21 01 ff 	andi r1,r1,0x1ff
    2318:	5c 22 ff e9 	bne r1,r2,22bc <float32_lt_quiet+0x84>
    231c:	78 01 00 3f 	mvhi r1,0x3f
    2320:	38 21 ff ff 	ori r1,r1,0xffff
    2324:	a0 81 08 00 	and r1,r4,r1
    2328:	44 20 ff e5 	be r1,r0,22bc <float32_lt_quiet+0x84>
    232c:	e3 ff ff ec 	bi 22dc <float32_lt_quiet+0xa4>

00002330 <float32_abs>:
-------------------------------------------------------------------------------
This is an abs function
-------------------------------------------------------------------------------
*/
float32 float32_abs(float32 a)
{
    2330:	37 9c ff fc 	addi sp,sp,-4
    2334:	5b 9d 00 04 	sw (sp+4),ra
    2338:	b8 20 10 00 	mv r2,r1
	if ( extractFloat32Sign( a )){
    233c:	4c 20 00 05 	bge r1,r0,2350 <float32_abs+0x20>
	return float32_mul( a, 0xBF800000 ) ;
    2340:	78 02 bf 80 	mvhi r2,0xbf80
    2344:	38 42 00 00 	ori r2,r2,0x0
    2348:	fb ff fb d6 	calli 12a0 <float32_mul>
    234c:	b8 20 10 00 	mv r2,r1
	}
	else {
	return a;
	}
}
    2350:	b8 40 08 00 	mv r1,r2
    2354:	2b 9d 00 04 	lw ra,(sp+4)
    2358:	37 9c 00 04 	addi sp,sp,4
    235c:	c3 a0 00 00 	ret

00002360 <float32_artan>:
That formula was taken from equation 7
http://www.iro.umontreal.ca/~mignotte/IFT2425/Documents/EfficientApproximationArctgFunction.pdf
-------------------------------------------------------------------------------
*/
float32 float32_artan( float32 x )
{
    2360:	37 9c ff f8 	addi sp,sp,-8
    2364:	5b 8b 00 08 	sw (sp+8),r11
    2368:	5b 9d 00 04 	sw (sp+4),ra
    236c:	b8 20 58 00 	mv r11,r1
return	float32_mul(x,float32_add(0x3F490FD8,float32_mul(0x3E8BC6A8,float32_sub(0x3F800000,float32_abs(x)))));
    2370:	fb ff ff f0 	calli 2330 <float32_abs>
    2374:	b8 20 10 00 	mv r2,r1
    2378:	78 01 3f 80 	mvhi r1,0x3f80
    237c:	38 21 00 00 	ori r1,r1,0x0
    2380:	fb ff fb b9 	calli 1264 <float32_sub>
    2384:	b8 20 10 00 	mv r2,r1
    2388:	78 01 3e 8b 	mvhi r1,0x3e8b
    238c:	38 21 c6 a8 	ori r1,r1,0xc6a8
    2390:	fb ff fb c4 	calli 12a0 <float32_mul>
    2394:	b8 20 10 00 	mv r2,r1
    2398:	78 01 3f 49 	mvhi r1,0x3f49
    239c:	38 21 0f d8 	ori r1,r1,0xfd8
    23a0:	fb ff fb a2 	calli 1228 <float32_add>
    23a4:	b8 20 10 00 	mv r2,r1
    23a8:	b9 60 08 00 	mv r1,r11
    23ac:	fb ff fb bd 	calli 12a0 <float32_mul>
}
    23b0:	2b 9d 00 04 	lw ra,(sp+4)
    23b4:	2b 8b 00 08 	lw r11,(sp+8)
    23b8:	37 9c 00 08 	addi sp,sp,8
    23bc:	c3 a0 00 00 	ret

000023c0 <float32_pow2>:
-------------------------------------------------------------------------------
This is the square function
-------------------------------------------------------------------------------
*/
float32 float32_pow2( float32 a)
{
    23c0:	37 9c ff fc 	addi sp,sp,-4
    23c4:	5b 9d 00 04 	sw (sp+4),ra
	return float32_mul(a,a);
    23c8:	b8 20 10 00 	mv r2,r1
    23cc:	fb ff fb b5 	calli 12a0 <float32_mul>
}
    23d0:	2b 9d 00 04 	lw ra,(sp+4)
    23d4:	37 9c 00 04 	addi sp,sp,4
    23d8:	c3 a0 00 00 	ret

000023dc <float32_filterKom>:
// - oldAngle: 	Previous measured angle
// - AGy:		Gyroscope angle
// - AAc:		Accelerometer angle
// - dt:		time
//-----------------------------------------------------------------------
float32 float32_filterKom(float32 oldAngle, float32 AGy, float32 AAc, float32 dt){
    23dc:	37 9c ff f0 	addi sp,sp,-16
    23e0:	5b 8b 00 10 	sw (sp+16),r11
    23e4:	5b 8c 00 0c 	sw (sp+12),r12
    23e8:	5b 8d 00 08 	sw (sp+8),r13
    23ec:	5b 9d 00 04 	sw (sp+4),ra
    23f0:	b8 40 58 00 	mv r11,r2
	//Filter: newAngle= 0.98 *(oldAngle + AGy * dt) + 0.02 * AAc
	dt = float32_mul(dt, 0x322BCC77); //0,00000001
    23f4:	78 02 32 2b 	mvhi r2,0x322b
// - oldAngle: 	Previous measured angle
// - AGy:		Gyroscope angle
// - AAc:		Accelerometer angle
// - dt:		time
//-----------------------------------------------------------------------
float32 float32_filterKom(float32 oldAngle, float32 AGy, float32 AAc, float32 dt){
    23f8:	b8 20 60 00 	mv r12,r1
	//Filter: newAngle= 0.98 *(oldAngle + AGy * dt) + 0.02 * AAc
	dt = float32_mul(dt, 0x322BCC77); //0,00000001
    23fc:	38 42 cc 77 	ori r2,r2,0xcc77
    2400:	b8 80 08 00 	mv r1,r4
// - oldAngle: 	Previous measured angle
// - AGy:		Gyroscope angle
// - AAc:		Accelerometer angle
// - dt:		time
//-----------------------------------------------------------------------
float32 float32_filterKom(float32 oldAngle, float32 AGy, float32 AAc, float32 dt){
    2404:	b8 60 68 00 	mv r13,r3
	//Filter: newAngle= 0.98 *(oldAngle + AGy * dt) + 0.02 * AAc
	dt = float32_mul(dt, 0x322BCC77); //0,00000001
    2408:	fb ff fb a6 	calli 12a0 <float32_mul>
    240c:	b8 20 10 00 	mv r2,r1
	float32 newAngle = float32_mul(AGy, dt);
    2410:	b9 60 08 00 	mv r1,r11
    2414:	fb ff fb a3 	calli 12a0 <float32_mul>
	newAngle = float32_add(newAngle, oldAngle);
    2418:	b9 80 10 00 	mv r2,r12
    241c:	fb ff fb 83 	calli 1228 <float32_add>
	newAngle = float32_mul(newAngle, alfa);
    2420:	78 02 3f 4c 	mvhi r2,0x3f4c
    2424:	38 42 cc cd 	ori r2,r2,0xcccd
    2428:	fb ff fb 9e 	calli 12a0 <float32_mul>
	float32 temp = float32_mul(AAc, beta);
    242c:	78 02 3e 4c 	mvhi r2,0x3e4c
float32 float32_filterKom(float32 oldAngle, float32 AGy, float32 AAc, float32 dt){
	//Filter: newAngle= 0.98 *(oldAngle + AGy * dt) + 0.02 * AAc
	dt = float32_mul(dt, 0x322BCC77); //0,00000001
	float32 newAngle = float32_mul(AGy, dt);
	newAngle = float32_add(newAngle, oldAngle);
	newAngle = float32_mul(newAngle, alfa);
    2430:	b8 20 58 00 	mv r11,r1
	float32 temp = float32_mul(AAc, beta);
    2434:	38 42 cc cd 	ori r2,r2,0xcccd
    2438:	b9 a0 08 00 	mv r1,r13
    243c:	fb ff fb 99 	calli 12a0 <float32_mul>
    2440:	b8 20 10 00 	mv r2,r1
	return float32_add(newAngle, temp);
    2444:	b9 60 08 00 	mv r1,r11
    2448:	fb ff fb 78 	calli 1228 <float32_add>
}
    244c:	2b 9d 00 04 	lw ra,(sp+4)
    2450:	2b 8b 00 10 	lw r11,(sp+16)
    2454:	2b 8c 00 0c 	lw r12,(sp+12)
    2458:	2b 8d 00 08 	lw r13,(sp+8)
    245c:	37 9c 00 10 	addi sp,sp,16
    2460:	c3 a0 00 00 	ret
