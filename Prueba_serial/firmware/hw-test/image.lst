
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000728  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000104  00000728  00000728  0000077c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  0000082c  0000082c  00000880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000008c  00000840  00000840  00000894  2**2
                  ALLOC
  4 .debug_abbrev 00000324  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000674  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005e0  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000130  00000000  00000000  0000180c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000018b  00000000  00000000  0000193c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 0000015a  00000000  00000000  00001ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000040  00000000  00000000  00001c21  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000001e8  00000000  00000000  00001ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000024  00000000  00000000  00001e89  2**0
                  CONTENTS, READONLY
Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 01 0e 	calli 504 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 08 40 	ori gp,gp,0x840
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 08 40 	ori r1,r1,0x840
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 08 cc 	ori r3,r3,0x8cc

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 5f 	calli 2b8 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <test2>:
			uart_putchar('0'+digit);
		val <<= 4;
	}
}

void test2() {
 208:	37 9c ff fc 	addi sp,sp,-4
 20c:	5b 9d 00 04 	sw (sp+4),ra
    uart_putchar('b');   
 210:	34 01 00 62 	mvi r1,98
 214:	f8 00 01 2e 	calli 6cc <uart_putchar>
}
 218:	2b 9d 00 04 	lw ra,(sp+4)
 21c:	37 9c 00 04 	addi sp,sp,4
 220:	c3 a0 00 00 	ret

00000224 <test>:

void test() {
 224:	37 9c ff fc 	addi sp,sp,-4
 228:	5b 9d 00 04 	sw (sp+4),ra
    uart_putchar('a');
 22c:	34 01 00 61 	mvi r1,97
 230:	f8 00 01 27 	calli 6cc <uart_putchar>
		val <<= 4;
	}
}

void test2() {
    uart_putchar('b');   
 234:	34 01 00 62 	mvi r1,98
 238:	f8 00 01 25 	calli 6cc <uart_putchar>
}

void test() {
    uart_putchar('a');
    test2();
    uart_putchar('c');
 23c:	34 01 00 63 	mvi r1,99
 240:	f8 00 01 23 	calli 6cc <uart_putchar>
} 
 244:	2b 9d 00 04 	lw ra,(sp+4)
 248:	37 9c 00 04 	addi sp,sp,4
 24c:	c3 a0 00 00 	ret

00000250 <writeint>:
 */

#include "soc-hw.h"

inline void writeint(uint32_t val)
{
 250:	37 9c ff ec 	addi sp,sp,-20
 254:	5b 8b 00 14 	sw (sp+20),r11
 258:	5b 8c 00 10 	sw (sp+16),r12
 25c:	5b 8d 00 0c 	sw (sp+12),r13
 260:	5b 8e 00 08 	sw (sp+8),r14
 264:	5b 9d 00 04 	sw (sp+4),ra
 268:	34 0b 00 00 	mvi r11,0
 26c:	b8 20 60 00 	mv r12,r1
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
 270:	34 0e 00 09 	mvi r14,9

inline void writeint(uint32_t val)
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
 274:	34 0d 00 08 	mvi r13,8
		digit = (val & 0xf0000000) >> 28;
 278:	01 82 00 1c 	srui r2,r12,28
		if (digit >= 0xA) 
			uart_putchar('A'+digit-10);
 27c:	34 41 00 37 	addi r1,r2,55
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
 280:	51 c2 00 0c 	bgeu r14,r2,2b0 <writeint+0x60>

inline void writeint(uint32_t val)
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
 284:	35 6b 00 01 	addi r11,r11,1
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
			uart_putchar('A'+digit-10);
		else
			uart_putchar('0'+digit);
 288:	f8 00 01 11 	calli 6cc <uart_putchar>
		val <<= 4;
 28c:	3d 8c 00 04 	sli r12,r12,4

inline void writeint(uint32_t val)
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
 290:	5d 6d ff fa 	bne r11,r13,278 <writeint+0x28>
			uart_putchar('A'+digit-10);
		else
			uart_putchar('0'+digit);
		val <<= 4;
	}
}
 294:	2b 9d 00 04 	lw ra,(sp+4)
 298:	2b 8b 00 14 	lw r11,(sp+20)
 29c:	2b 8c 00 10 	lw r12,(sp+16)
 2a0:	2b 8d 00 0c 	lw r13,(sp+12)
 2a4:	2b 8e 00 08 	lw r14,(sp+8)
 2a8:	37 9c 00 14 	addi sp,sp,20
 2ac:	c3 a0 00 00 	ret
	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
			uart_putchar('A'+digit-10);
		else
			uart_putchar('0'+digit);
 2b0:	34 41 00 30 	addi r1,r2,48
 2b4:	e3 ff ff f4 	bi 284 <writeint+0x34>

000002b8 <main>:
volatile uint8_t *p2;

extern uint32_t tic_msec;

int main()
{
 2b8:	37 9c ff dc 	addi sp,sp,-36
 2bc:	5b 8b 00 18 	sw (sp+24),r11
 2c0:	5b 8c 00 14 	sw (sp+20),r12
 2c4:	5b 8d 00 10 	sw (sp+16),r13
 2c8:	5b 8e 00 0c 	sw (sp+12),r14
 2cc:	5b 8f 00 08 	sw (sp+8),r15
 2d0:	5b 9d 00 04 	sw (sp+4),ra
    char test2[] = "Lokalerstr";
 2d4:	78 01 4c 6f 	mvhi r1,0x4c6f
 2d8:	78 02 6c 65 	mvhi r2,0x6c65
 2dc:	38 42 72 73 	ori r2,r2,0x7273
 2e0:	34 03 74 72 	mvi r3,29810
 2e4:	34 04 00 00 	mvi r4,0
 2e8:	38 21 6b 61 	ori r1,r1,0x6b61
 2ec:	5b 82 00 20 	sw (sp+32),r2
 2f0:	0f 83 00 24 	sh (sp+36),r3
 2f4:	33 84 00 26 	sb (sp+38),r4
 2f8:	5b 81 00 1c 	sw (sp+28),r1
//    for (i = 0; i < 4; i++)
 //       test2[i] = 'l';
  //  glob[0]  = 'g';
    
 	// Initialize stuff
	uart_init();
 2fc:	f8 00 00 ea 	calli 6a4 <uart_init>

	// Say Hello!
	uart_putstr( "** Spike Test Firmware **\n" );
 300:	78 01 00 00 	mvhi r1,0x0
 304:	38 21 07 28 	ori r1,r1,0x728
 308:	f8 00 00 fa 	calli 6f0 <uart_putstr>

	// Initialize TIC
	isr_init();
 30c:	f8 00 00 97 	calli 568 <isr_init>
	tic_init();
 310:	f8 00 00 d3 	calli 65c <tic_init>
	irq_set_mask( 0x00000002 );
 314:	34 01 00 02 	mvi r1,2
 318:	fb ff ff 90 	calli 158 <irq_set_mask>
	irq_enable();
 31c:	fb ff ff 89 	calli 140 <irq_enable>

	// Say Hello!
	uart_putstr( "Timer Interrupt instelled.\n" );
 320:	78 01 00 00 	mvhi r1,0x0
 324:	38 21 07 44 	ori r1,r1,0x744
 328:	f8 00 00 f2 	calli 6f0 <uart_putstr>

	// Do some trivial tests
	uart_putstr( "Subroutine-Return Test: " );
 32c:	78 01 00 00 	mvhi r1,0x0
 330:	38 21 07 60 	ori r1,r1,0x760
 334:	f8 00 00 ef 	calli 6f0 <uart_putstr>
	test();
 338:	fb ff ff bb 	calli 224 <test>
	uart_putchar('\n');    
 33c:	34 01 00 0a 	mvi r1,10
 340:	f8 00 00 e3 	calli 6cc <uart_putchar>

	uart_putstr( "Local-Pointer Test:" );
 344:	78 01 00 00 	mvhi r1,0x0
 348:	38 21 07 7c 	ori r1,r1,0x77c
 34c:	f8 00 00 e9 	calli 6f0 <uart_putstr>
	for (;*str; str++) {
 350:	43 81 00 1c 	lbu r1,(sp+28)
 354:	44 20 00 06 	be r1,r0,36c <main+0xb4>
 358:	37 8b 00 1c 	addi r11,sp,28
 35c:	35 6b 00 01 	addi r11,r11,1
	   uart_putchar(*str);
 360:	f8 00 00 db 	calli 6cc <uart_putchar>
	uart_putstr( "Subroutine-Return Test: " );
	test();
	uart_putchar('\n');    

	uart_putstr( "Local-Pointer Test:" );
	for (;*str; str++) {
 364:	41 61 00 00 	lbu r1,(r11+0)
 368:	5c 20 ff fd 	bne r1,r0,35c <main+0xa4>
	   uart_putchar(*str);
	}
	uart_putchar('\n');    
 36c:	34 01 00 0a 	mvi r1,10
 370:	f8 00 00 d7 	calli 6cc <uart_putchar>
	
	uart_putstr( "Global-Pointer Test:" );
 374:	78 01 00 00 	mvhi r1,0x0
 378:	38 21 07 90 	ori r1,r1,0x790
 37c:	f8 00 00 dd 	calli 6f0 <uart_putstr>
	str = glob;
	for (;*str; str++) {
 380:	78 02 00 00 	mvhi r2,0x0
 384:	38 42 08 2c 	ori r2,r2,0x82c
 388:	40 41 00 00 	lbu r1,(r2+0)
 38c:	44 20 00 06 	be r1,r0,3a4 <main+0xec>
 390:	b8 40 58 00 	mv r11,r2
 394:	35 6b 00 01 	addi r11,r11,1
	   uart_putchar(*str);
 398:	f8 00 00 cd 	calli 6cc <uart_putchar>
	}
	uart_putchar('\n');    
	
	uart_putstr( "Global-Pointer Test:" );
	str = glob;
	for (;*str; str++) {
 39c:	41 61 00 00 	lbu r1,(r11+0)
 3a0:	5c 20 ff fd 	bne r1,r0,394 <main+0xdc>
	   uart_putchar(*str);
	}
	uart_putchar('\n');    
 3a4:	34 01 00 0a 	mvi r1,10
 3a8:	f8 00 00 c9 	calli 6cc <uart_putchar>

	uart_putstr( "Stack Pointer : " );
 3ac:	78 01 00 00 	mvhi r1,0x0
 3b0:	38 21 07 a8 	ori r1,r1,0x7a8
 3b4:	f8 00 00 cf 	calli 6f0 <uart_putstr>
	writeint(get_sp());
 3b8:	fb ff ff 90 	calli 1f8 <get_sp>
 3bc:	fb ff ff a5 	calli 250 <writeint>
	uart_putchar('\n');    
 3c0:	34 01 00 0a 	mvi r1,10
 3c4:	f8 00 00 c2 	calli 6cc <uart_putchar>

	uart_putstr( "Global Pointer: " );
 3c8:	78 01 00 00 	mvhi r1,0x0
 3cc:	38 21 07 bc 	ori r1,r1,0x7bc
 3d0:	f8 00 00 c8 	calli 6f0 <uart_putstr>
	writeint(get_gp());
 3d4:	fb ff ff 8b 	calli 200 <get_gp>
 3d8:	fb ff ff 9e 	calli 250 <writeint>
	uart_putchar('\n');    
 3dc:	34 01 00 0a 	mvi r1,10
 3e0:	f8 00 00 bb 	calli 6cc <uart_putchar>

	uart_putstr( "Timer Test (1s): " );
 3e4:	78 01 00 00 	mvhi r1,0x0
 3e8:	38 21 07 d0 	ori r1,r1,0x7d0
 3ec:	f8 00 00 c1 	calli 6f0 <uart_putstr>
 3f0:	34 0b 00 00 	mvi r11,0
	for(i=0; i<4; i++) {
		uart_putstr("tic...");    
 3f4:	78 0c 00 00 	mvhi r12,0x0
	uart_putstr( "Global Pointer: " );
	writeint(get_gp());
	uart_putchar('\n');    

	uart_putstr( "Timer Test (1s): " );
	for(i=0; i<4; i++) {
 3f8:	34 0d 00 04 	mvi r13,4
		uart_putstr("tic...");    
 3fc:	b9 80 08 00 	mv r1,r12
 400:	38 21 07 e4 	ori r1,r1,0x7e4
 404:	f8 00 00 bb 	calli 6f0 <uart_putstr>
	uart_putstr( "Global Pointer: " );
	writeint(get_gp());
	uart_putchar('\n');    

	uart_putstr( "Timer Test (1s): " );
	for(i=0; i<4; i++) {
 408:	35 6b 00 01 	addi r11,r11,1
		uart_putstr("tic...");    
		msleep(1000);
 40c:	34 01 03 e8 	mvi r1,1000
 410:	f8 00 00 6d 	calli 5c4 <msleep>
	uart_putstr( "Global Pointer: " );
	writeint(get_gp());
	uart_putchar('\n');    

	uart_putstr( "Timer Test (1s): " );
	for(i=0; i<4; i++) {
 414:	5d 6d ff fa 	bne r11,r13,3fc <main+0x144>
		uart_putstr("tic...");    
		msleep(1000);
	}
	uart_putchar('\n');    
 418:	34 01 00 0a 	mvi r1,10
 41c:	f8 00 00 ac 	calli 6cc <uart_putchar>

	uart_putstr( "Timer Interrupt counter: " );
 420:	78 01 00 00 	mvhi r1,0x0
 424:	38 21 07 ec 	ori r1,r1,0x7ec
	writeint( tic_msec );
 428:	78 0b 00 00 	mvhi r11,0x0
		uart_putstr("tic...");    
		msleep(1000);
	}
	uart_putchar('\n');    

	uart_putstr( "Timer Interrupt counter: " );
 42c:	f8 00 00 b1 	calli 6f0 <uart_putstr>
	writeint( tic_msec );
 430:	39 6b 08 c8 	ori r11,r11,0x8c8
 434:	29 61 00 00 	lw r1,(r11+0)
	uart_putchar('\n');    

	int val = tic_msec;
	uart_putstr( "Shift: " );
	writeint( val );
	uart_putstr(" <-> ");    
 438:	34 0c 00 00 	mvi r12,0
	for(i=0; i<32; i++) {
 43c:	34 0d 00 20 	mvi r13,32
		msleep(1000);
	}
	uart_putchar('\n');    

	uart_putstr( "Timer Interrupt counter: " );
	writeint( tic_msec );
 440:	fb ff ff 84 	calli 250 <writeint>
	uart_putchar('\n');    
 444:	34 01 00 0a 	mvi r1,10
 448:	f8 00 00 a1 	calli 6cc <uart_putchar>

	int val = tic_msec;
	uart_putstr( "Shift: " );
 44c:	78 01 00 00 	mvhi r1,0x0

	uart_putstr( "Timer Interrupt counter: " );
	writeint( tic_msec );
	uart_putchar('\n');    

	int val = tic_msec;
 450:	29 6b 00 00 	lw r11,(r11+0)
	uart_putstr( "Shift: " );
 454:	38 21 08 08 	ori r1,r1,0x808
 458:	f8 00 00 a6 	calli 6f0 <uart_putstr>
	writeint( val );
 45c:	b9 60 08 00 	mv r1,r11
 460:	fb ff ff 7c 	calli 250 <writeint>
	uart_putstr(" <-> ");    
 464:	78 01 00 00 	mvhi r1,0x0
 468:	38 21 08 10 	ori r1,r1,0x810
 46c:	f8 00 00 a1 	calli 6f0 <uart_putstr>
	for(i=0; i<32; i++) {
		if (val & 0x80000000)
			uart_putchar( '1' );
		else
			uart_putchar( '0' );
 470:	34 01 00 30 	mvi r1,48
	int val = tic_msec;
	uart_putstr( "Shift: " );
	writeint( val );
	uart_putstr(" <-> ");    
	for(i=0; i<32; i++) {
		if (val & 0x80000000)
 474:	4d 60 00 04 	bge r11,r0,484 <main+0x1cc>
			uart_putchar( '1' );
 478:	34 01 00 31 	mvi r1,49
 47c:	f8 00 00 94 	calli 6cc <uart_putchar>
 480:	e0 00 00 02 	bi 488 <main+0x1d0>
		else
			uart_putchar( '0' );
 484:	f8 00 00 92 	calli 6cc <uart_putchar>

	int val = tic_msec;
	uart_putstr( "Shift: " );
	writeint( val );
	uart_putstr(" <-> ");    
	for(i=0; i<32; i++) {
 488:	35 8c 00 01 	addi r12,r12,1
		if (val & 0x80000000)
			uart_putchar( '1' );
		else
			uart_putchar( '0' );
			
		val <<= 1;
 48c:	b5 6b 58 00 	add r11,r11,r11

	int val = tic_msec;
	uart_putstr( "Shift: " );
	writeint( val );
	uart_putstr(" <-> ");    
	for(i=0; i<32; i++) {
 490:	5d 8d ff f8 	bne r12,r13,470 <main+0x1b8>
		else
			uart_putchar( '0' );
			
		val <<= 1;
	}
	uart_putstr("\r\n");
 494:	78 01 00 00 	mvhi r1,0x0
 498:	38 21 08 18 	ori r1,r1,0x818
 49c:	f8 00 00 95 	calli 6f0 <uart_putstr>
	
	uart_putstr( "GPIO Test..." );
 4a0:	78 01 00 00 	mvhi r1,0x0
 4a4:	38 21 08 1c 	ori r1,r1,0x81c
	gpio0->oe = 0x000000ff;
 4a8:	78 0c 00 00 	mvhi r12,0x0
			
		val <<= 1;
	}
	uart_putstr("\r\n");
	
	uart_putstr( "GPIO Test..." );
 4ac:	f8 00 00 91 	calli 6f0 <uart_putstr>
	gpio0->oe = 0x000000ff;
 4b0:	39 8c 08 3c 	ori r12,r12,0x83c
 4b4:	29 82 00 00 	lw r2,(r12+0)
 4b8:	34 01 00 ff 	mvi r1,255
 4bc:	34 0b 00 00 	mvi r11,0
 4c0:	58 41 00 18 	sw (r2+24),r1
		for(i=0; i<8; i++) {
			uint32_t out1, out2;

			out1 = 0x01 << i;
			out2 = 0x80 >> i;
			gpio0->out = out1 | out2;
 4c4:	34 0f 00 80 	mvi r15,128
 4c8:	34 0e 00 01 	mvi r14,1
	uart_putstr("\r\n");
	
	uart_putstr( "GPIO Test..." );
	gpio0->oe = 0x000000ff;
	for(;;) {
		for(i=0; i<8; i++) {
 4cc:	34 0d 00 07 	mvi r13,7
			uint32_t out1, out2;

			out1 = 0x01 << i;
			out2 = 0x80 >> i;
			gpio0->out = out1 | out2;
 4d0:	bd cb 10 00 	sl r2,r14,r11
 4d4:	29 83 00 00 	lw r3,(r12+0)
 4d8:	95 eb 08 00 	sr r1,r15,r11
	uart_putstr("\r\n");
	
	uart_putstr( "GPIO Test..." );
	gpio0->oe = 0x000000ff;
	for(;;) {
		for(i=0; i<8; i++) {
 4dc:	35 6b 00 01 	addi r11,r11,1
			uint32_t out1, out2;

			out1 = 0x01 << i;
			out2 = 0x80 >> i;
			gpio0->out = out1 | out2;
 4e0:	b8 22 08 00 	or r1,r1,r2
 4e4:	58 61 00 14 	sw (r3+20),r1

			msleep(100);
 4e8:	34 01 00 64 	mvi r1,100
 4ec:	f8 00 00 36 	calli 5c4 <msleep>
	uart_putstr("\r\n");
	
	uart_putstr( "GPIO Test..." );
	gpio0->oe = 0x000000ff;
	for(;;) {
		for(i=0; i<8; i++) {
 4f0:	f1 ab 08 00 	cmpgeu r1,r13,r11
 4f4:	c8 01 08 00 	sub r1,r0,r1
 4f8:	a1 61 58 00 	and r11,r11,r1
 4fc:	e3 ff ff f5 	bi 4d0 <main+0x218>

00000500 <isr_null>:
void tic_isr();
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
 500:	c3 a0 00 00 	ret

00000504 <irq_handler>:
}

void irq_handler(uint32_t pending)
{
 504:	37 9c ff f0 	addi sp,sp,-16
 508:	5b 8b 00 10 	sw (sp+16),r11
 50c:	5b 8c 00 0c 	sw (sp+12),r12
 510:	5b 8d 00 08 	sw (sp+8),r13
 514:	5b 9d 00 04 	sw (sp+4),ra
 518:	78 0b 00 00 	mvhi r11,0x0
 51c:	39 6b 08 48 	ori r11,r11,0x848
 520:	b8 20 60 00 	mv r12,r1
 524:	35 6d 00 80 	addi r13,r11,128
 528:	e0 00 00 03 	bi 534 <irq_handler+0x30>
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 52c:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 530:	45 6d 00 08 	be r11,r13,550 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
 534:	21 81 00 01 	andi r1,r12,0x1
		pending >>= 1;
 538:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 53c:	44 20 ff fc 	be r1,r0,52c <irq_handler+0x28>
 540:	29 61 00 00 	lw r1,(r11+0)
 544:	35 6b 00 04 	addi r11,r11,4
 548:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 54c:	5d 6d ff fa 	bne r11,r13,534 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 550:	2b 9d 00 04 	lw ra,(sp+4)
 554:	2b 8b 00 10 	lw r11,(sp+16)
 558:	2b 8c 00 0c 	lw r12,(sp+12)
 55c:	2b 8d 00 08 	lw r13,(sp+8)
 560:	37 9c 00 10 	addi sp,sp,16
 564:	c3 a0 00 00 	ret

00000568 <isr_init>:

void isr_init()
{
 568:	78 01 00 00 	mvhi r1,0x0
 56c:	38 21 08 48 	ori r1,r1,0x848
 570:	78 02 00 00 	mvhi r2,0x0
 574:	38 42 05 00 	ori r2,r2,0x500
 578:	34 23 00 80 	addi r3,r1,128
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 57c:	58 22 00 00 	sw (r1+0),r2
 580:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 584:	5c 23 ff fe 	bne r1,r3,57c <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 588:	c3 a0 00 00 	ret

0000058c <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
 58c:	3c 21 00 02 	sli r1,r1,2
 590:	78 03 00 00 	mvhi r3,0x0
 594:	38 63 08 48 	ori r3,r3,0x848
 598:	b4 61 18 00 	add r3,r3,r1
 59c:	58 62 00 00 	sw (r3+0),r2
	isr_table[irq] = isr;
}
 5a0:	c3 a0 00 00 	ret

000005a4 <isr_unregister>:

void isr_unregister(int irq)
{
 5a4:	3c 21 00 02 	sli r1,r1,2
 5a8:	78 03 00 00 	mvhi r3,0x0
 5ac:	38 63 08 48 	ori r3,r3,0x848
 5b0:	78 02 00 00 	mvhi r2,0x0
 5b4:	b4 61 18 00 	add r3,r3,r1
 5b8:	38 42 05 00 	ori r2,r2,0x500
 5bc:	58 62 00 00 	sw (r3+0),r2
	isr_table[irq] = &isr_null;
}
 5c0:	c3 a0 00 00 	ret

000005c4 <msleep>:

/***************************************************************************
 * TIMER Functions
 */
void msleep(uint32_t msec)
{
 5c4:	78 02 00 00 	mvhi r2,0x0
 5c8:	38 42 08 38 	ori r2,r2,0x838
 5cc:	38 03 c3 50 	mvu r3,0xc350
 5d0:	88 23 08 00 	mul r1,r1,r3
 5d4:	28 43 00 00 	lw r3,(r2+0)
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 5d8:	34 02 00 08 	mvi r2,8
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 5dc:	58 61 00 10 	sw (r3+16),r1
	timer0->counter1 = 0;
 5e0:	34 01 00 00 	mvi r1,0
 5e4:	58 61 00 14 	sw (r3+20),r1
	timer0->tcr1 = TIMER_EN;
 5e8:	58 62 00 0c 	sw (r3+12),r2

	do {
		//halt();
 		tcr = timer0->tcr1;
 5ec:	28 61 00 0c 	lw r1,(r3+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 5f0:	20 21 00 01 	andi r1,r1,0x1
 5f4:	44 20 ff fe 	be r1,r0,5ec <msleep+0x28>
}
 5f8:	c3 a0 00 00 	ret

000005fc <nsleep>:

void nsleep(uint32_t nsec)
{
 5fc:	78 02 00 00 	mvhi r2,0x0
 600:	38 42 08 38 	ori r2,r2,0x838
 604:	28 43 00 00 	lw r3,(r2+0)
 608:	08 21 00 32 	muli r1,r1,50
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 60c:	34 02 00 08 	mvi r2,8
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 610:	58 61 00 10 	sw (r3+16),r1
	timer0->counter1 = 0;
 614:	34 01 00 00 	mvi r1,0
 618:	58 61 00 14 	sw (r3+20),r1
	timer0->tcr1 = TIMER_EN;
 61c:	58 62 00 0c 	sw (r3+12),r2

	do {
		//halt();
 		tcr = timer0->tcr1;
 620:	28 61 00 0c 	lw r1,(r3+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 624:	20 21 00 01 	andi r1,r1,0x1
 628:	44 20 ff fe 	be r1,r0,620 <nsleep+0x24>
}
 62c:	c3 a0 00 00 	ret

00000630 <tic_isr>:


uint32_t tic_msec;

void tic_isr()
{
 630:	78 03 00 00 	mvhi r3,0x0
 634:	38 63 08 c8 	ori r3,r3,0x8c8
 638:	28 62 00 00 	lw r2,(r3+0)
	tic_msec++;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 63c:	78 01 00 00 	mvhi r1,0x0
 640:	38 21 08 38 	ori r1,r1,0x838
 644:	28 24 00 00 	lw r4,(r1+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 648:	34 42 00 01 	addi r2,r2,1
 64c:	58 62 00 00 	sw (r3+0),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 650:	34 01 00 0e 	mvi r1,14
 654:	58 81 00 00 	sw (r4+0),r1
}
 658:	c3 a0 00 00 	ret

0000065c <tic_init>:

void tic_init()
{
 65c:	78 01 00 00 	mvhi r1,0x0
 660:	38 21 08 38 	ori r1,r1,0x838
 664:	28 24 00 00 	lw r4,(r1+0)
	tic_msec = 0;
 668:	78 02 00 00 	mvhi r2,0x0
 66c:	38 42 08 c8 	ori r2,r2,0x8c8
 670:	34 05 00 00 	mvi r5,0
 674:	58 45 00 00 	sw (r2+0),r5

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 678:	34 01 13 88 	mvi r1,5000
 67c:	58 81 00 04 	sw (r4+4),r1
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 680:	78 03 00 00 	mvhi r3,0x0
 684:	78 02 00 00 	mvhi r2,0x0
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 688:	58 85 00 08 	sw (r4+8),r5
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 68c:	38 63 08 48 	ori r3,r3,0x848
 690:	38 42 06 30 	ori r2,r2,0x630
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 694:	34 01 00 0e 	mvi r1,14
 698:	58 81 00 00 	sw (r4+0),r1
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 69c:	58 62 00 04 	sw (r3+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 6a0:	c3 a0 00 00 	ret

000006a4 <uart_init>:

/***************************************************************************
 * UART Functions
 */
void uart_init()
{
 6a4:	c3 a0 00 00 	ret

000006a8 <uart_getchar>:
	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
 6a8:	78 01 00 00 	mvhi r1,0x0
 6ac:	38 21 08 34 	ori r1,r1,0x834
 6b0:	28 22 00 00 	lw r2,(r1+0)
 6b4:	28 41 00 00 	lw r1,(r2+0)
 6b8:	20 21 00 01 	andi r1,r1,0x1
 6bc:	44 20 ff fe 	be r1,r0,6b4 <uart_getchar+0xc>
	while (! (uart0->ucr & UART_DR)) ;
	return uart0->rxtx;
 6c0:	28 41 00 04 	lw r1,(r2+4)
}
 6c4:	20 21 00 ff 	andi r1,r1,0xff
 6c8:	c3 a0 00 00 	ret

000006cc <uart_putchar>:

void uart_putchar(char c)
{
 6cc:	78 02 00 00 	mvhi r2,0x0
 6d0:	38 42 08 34 	ori r2,r2,0x834
 6d4:	28 42 00 00 	lw r2,(r2+0)
 6d8:	20 23 00 ff 	andi r3,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 6dc:	28 41 00 00 	lw r1,(r2+0)
 6e0:	20 21 00 10 	andi r1,r1,0x10
 6e4:	5c 20 ff fe 	bne r1,r0,6dc <uart_putchar+0x10>
	uart0->rxtx = c;
 6e8:	58 43 00 04 	sw (r2+4),r3
}
 6ec:	c3 a0 00 00 	ret

000006f0 <uart_putstr>:

void uart_putstr(char *str)
{
 6f0:	40 24 00 00 	lbu r4,(r1+0)
 6f4:	b8 20 18 00 	mv r3,r1
	char *c = str;
	while(*c) {
 6f8:	44 80 00 0b 	be r4,r0,724 <uart_putstr+0x34>
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 6fc:	78 01 00 00 	mvhi r1,0x0
 700:	38 21 08 34 	ori r1,r1,0x834
 704:	28 22 00 00 	lw r2,(r1+0)
 708:	28 41 00 00 	lw r1,(r2+0)
 70c:	20 21 00 10 	andi r1,r1,0x10
 710:	5c 20 ff fe 	bne r1,r0,708 <uart_putstr+0x18>
	uart0->rxtx = c;
 714:	58 44 00 04 	sw (r2+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 718:	34 63 00 01 	addi r3,r3,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 71c:	40 64 00 00 	lbu r4,(r3+0)
 720:	5c 81 ff fa 	bne r4,r1,708 <uart_putstr+0x18>
 724:	c3 a0 00 00 	ret
