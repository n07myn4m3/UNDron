
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004dc  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       0000007c  000004dc  000004dc  00000530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         0000000c  00000558  00000558  000005ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000004  00000564  00000564  000005b8  2**2
                  ALLOC
  4 .debug_abbrev 00000317  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000613  00000000  00000000  000008cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004a0  00000000  00000000  00000ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e0  00000000  00000000  00001384  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001fe  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000000ea  00000000  00000000  00001662  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000040  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000177  00000000  00000000  0000184c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000024  00000000  00000000  000019c3  2**0
                  CONTENTS, READONLY
Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 03 	calli 20 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_crt0>:
  20:	78 1c 00 00 	mvhi sp,0x0
  24:	3b 9c 0f fc 	ori sp,sp,0xffc
  28:	78 1a 00 00 	mvhi gp,0x0
  2c:	3b 5a 05 70 	ori gp,gp,0x570
  30:	78 01 00 00 	mvhi r1,0x0
  34:	38 21 05 64 	ori r1,r1,0x564
  38:	78 03 00 00 	mvhi r3,0x0
  3c:	38 63 05 68 	ori r3,r3,0x568

00000040 <.clearBSS>:
  40:	44 23 00 04 	be r1,r3,50 <.callMain>
  44:	58 20 00 00 	sw (r1+0),r0
  48:	34 21 00 04 	addi r1,r1,4
  4c:	e3 ff ff fd 	bi 40 <.clearBSS>

00000050 <.callMain>:
  50:	34 01 00 00 	mvi r1,0
  54:	34 02 00 00 	mvi r2,0
  58:	34 03 00 00 	mvi r3,0
  5c:	f8 00 00 cb 	calli 388 <main>

00000060 <irq_enable>:
  60:	34 01 00 01 	mvi r1,1
  64:	d0 01 00 00 	wcsr IE,r1
  68:	c3 a0 00 00 	ret

0000006c <irq_mask>:
  6c:	34 01 00 0f 	mvi r1,15
  70:	d0 21 00 00 	wcsr IM,r1
  74:	c3 a0 00 00 	ret

00000078 <irq_disable>:
  78:	34 01 00 00 	mvi r1,0
  7c:	d0 01 00 00 	wcsr IE,r1
  80:	c3 a0 00 00 	ret

00000084 <jump>:
  84:	c0 20 00 00 	b r1

00000088 <halt>:
  88:	e0 00 00 00 	bi 88 <halt>

0000008c <_save_all>:
  8c:	37 9c ff 80 	addi sp,sp,-128
  90:	5b 81 00 04 	sw (sp+4),r1
  94:	5b 82 00 08 	sw (sp+8),r2
  98:	5b 83 00 0c 	sw (sp+12),r3
  9c:	5b 84 00 10 	sw (sp+16),r4
  a0:	5b 85 00 14 	sw (sp+20),r5
  a4:	5b 86 00 18 	sw (sp+24),r6
  a8:	5b 87 00 1c 	sw (sp+28),r7
  ac:	5b 88 00 20 	sw (sp+32),r8
  b0:	5b 89 00 24 	sw (sp+36),r9
  b4:	5b 8a 00 28 	sw (sp+40),r10
  b8:	5b 9e 00 78 	sw (sp+120),ea
  bc:	5b 9f 00 7c 	sw (sp+124),ba
  c0:	2b 81 00 80 	lw r1,(sp+128)
  c4:	5b 81 00 74 	sw (sp+116),r1
  c8:	bb 80 08 00 	mv r1,sp
  cc:	34 21 00 80 	addi r1,r1,128
  d0:	5b 81 00 70 	sw (sp+112),r1
  d4:	c3 a0 00 00 	ret

000000d8 <_restore_all_and_return>:
  d8:	2b 81 00 04 	lw r1,(sp+4)
  dc:	2b 82 00 08 	lw r2,(sp+8)
  e0:	2b 83 00 0c 	lw r3,(sp+12)
  e4:	2b 84 00 10 	lw r4,(sp+16)
  e8:	2b 85 00 14 	lw r5,(sp+20)
  ec:	2b 86 00 18 	lw r6,(sp+24)
  f0:	2b 87 00 1c 	lw r7,(sp+28)
  f4:	2b 88 00 20 	lw r8,(sp+32)
  f8:	2b 89 00 24 	lw r9,(sp+36)
  fc:	2b 8a 00 28 	lw r10,(sp+40)
 100:	2b 9d 00 74 	lw ra,(sp+116)
 104:	2b 9e 00 78 	lw ea,(sp+120)
 108:	2b 9f 00 7c 	lw ba,(sp+124)
 10c:	2b 9c 00 70 	lw sp,(sp+112)
 110:	c3 c0 00 00 	eret

00000114 <ps_ready>:

/******************************************************************************
 * Control DDR phase shift
 */
inline int ps_ready()
{
 114:	78 01 00 00 	mvhi r1,0x0
 118:	38 21 05 60 	ori r1,r1,0x560
 11c:	28 23 00 00 	lw r3,(r1+0)
 120:	78 01 00 01 	mvhi r1,0x1
 124:	38 21 00 00 	ori r1,r1,0x0
 128:	28 62 00 10 	lw r2,(r3+16)
	return (gpio0->in & (1 << 16));  // return 1 when ready, 0 otherwise
}
 12c:	a0 41 08 00 	and r1,r2,r1
 130:	c3 a0 00 00 	ret

00000134 <ps_inc>:

inline void ps_inc()
{
 134:	78 01 00 00 	mvhi r1,0x0
 138:	38 21 05 60 	ori r1,r1,0x560
 13c:	28 24 00 00 	lw r4,(r1+0)
 140:	78 03 00 01 	mvhi r3,0x1
	uint32_t tmp;

	while ( ! ps_ready() );
 144:	38 63 00 00 	ori r3,r3,0x0
/******************************************************************************
 * Control DDR phase shift
 */
inline int ps_ready()
{
	return (gpio0->in & (1 << 16));  // return 1 when ready, 0 otherwise
 148:	28 81 00 10 	lw r1,(r4+16)

inline void ps_inc()
{
	uint32_t tmp;

	while ( ! ps_ready() );
 14c:	a0 23 08 00 	and r1,r1,r3
 150:	44 20 ff fe 	be r1,r0,148 <ps_inc+0x14>

	tmp  = gpio0->out;
 154:	28 82 00 14 	lw r2,(r4+20)
	gpio0->out = tmp | (1 << 16);
	gpio0->out = tmp;
	
	while ( ! ps_ready() );
 158:	b8 60 28 00 	mv r5,r3
	uint32_t tmp;

	while ( ! ps_ready() );

	tmp  = gpio0->out;
	gpio0->out = tmp | (1 << 16);
 15c:	b8 43 08 00 	or r1,r2,r3
 160:	58 81 00 14 	sw (r4+20),r1
	gpio0->out = tmp;
 164:	58 82 00 14 	sw (r4+20),r2
/******************************************************************************
 * Control DDR phase shift
 */
inline int ps_ready()
{
	return (gpio0->in & (1 << 16));  // return 1 when ready, 0 otherwise
 168:	28 81 00 10 	lw r1,(r4+16)

	tmp  = gpio0->out;
	gpio0->out = tmp | (1 << 16);
	gpio0->out = tmp;
	
	while ( ! ps_ready() );
 16c:	a0 25 08 00 	and r1,r1,r5
 170:	44 20 ff fe 	be r1,r0,168 <ps_inc+0x34>
}
 174:	c3 a0 00 00 	ret

00000178 <ps_dec>:

inline void ps_dec()
{
 178:	78 01 00 00 	mvhi r1,0x0
 17c:	38 21 05 60 	ori r1,r1,0x560
 180:	78 04 00 01 	mvhi r4,0x1
 184:	28 23 00 00 	lw r3,(r1+0)
	uint32_t tmp;

	while ( ! ps_ready() );
 188:	b8 80 10 00 	mv r2,r4
 18c:	38 42 00 00 	ori r2,r2,0x0
/******************************************************************************
 * Control DDR phase shift
 */
inline int ps_ready()
{
	return (gpio0->in & (1 << 16));  // return 1 when ready, 0 otherwise
 190:	28 61 00 10 	lw r1,(r3+16)

inline void ps_dec()
{
	uint32_t tmp;

	while ( ! ps_ready() );
 194:	a0 22 08 00 	and r1,r1,r2
 198:	44 20 ff fe 	be r1,r0,190 <ps_dec+0x18>

	tmp  = gpio0->out;
 19c:	28 62 00 14 	lw r2,(r3+20)
	gpio0->out = tmp | (1 << 17);
 1a0:	78 01 00 02 	mvhi r1,0x2
 1a4:	38 21 00 00 	ori r1,r1,0x0
 1a8:	b8 41 08 00 	or r1,r2,r1
 1ac:	58 61 00 14 	sw (r3+20),r1
	gpio0->out = tmp;
 1b0:	58 62 00 14 	sw (r3+20),r2
	
	while ( ! ps_ready() );
 1b4:	b8 80 10 00 	mv r2,r4
 1b8:	38 42 00 00 	ori r2,r2,0x0
/******************************************************************************
 * Control DDR phase shift
 */
inline int ps_ready()
{
	return (gpio0->in & (1 << 16));  // return 1 when ready, 0 otherwise
 1bc:	28 61 00 10 	lw r1,(r3+16)

	tmp  = gpio0->out;
	gpio0->out = tmp | (1 << 17);
	gpio0->out = tmp;
	
	while ( ! ps_ready() );
 1c0:	a0 22 08 00 	and r1,r1,r2
 1c4:	44 20 ff fe 	be r1,r0,1bc <ps_dec+0x44>
}
 1c8:	c3 a0 00 00 	ret

000001cc <memtest>:
 * Simple memory tester 
 *
 * Returns -1 on error, 0 when OK.
 */
inline int memtest(uint32_t size)
{
 1cc:	78 04 40 00 	mvhi r4,0x4000
 1d0:	b8 80 10 00 	mv r2,r4
 1d4:	38 42 00 00 	ori r2,r2,0x0
 1d8:	b4 22 18 00 	add r3,r1,r2
 1dc:	b8 40 08 00 	mv r1,r2
 1e0:	54 62 00 04 	bgu r3,r2,1f0 <memtest+0x24>
 1e4:	34 04 00 00 	mvi r4,0
			res = -1;
		}
	}

	return res;
}
 1e8:	b8 80 08 00 	mv r1,r4
 1ec:	c3 a0 00 00 	ret
{
	volatile uint32_t *p;
	int res = 0;

	for (p=(uint32_t *)RAM_START; p<(uint32_t *)(RAM_START+size); p++) {
		*p = (uint32_t) p;  
 1f0:	58 21 00 00 	sw (r1+0),r1
inline int memtest(uint32_t size)
{
	volatile uint32_t *p;
	int res = 0;

	for (p=(uint32_t *)RAM_START; p<(uint32_t *)(RAM_START+size); p++) {
 1f4:	34 21 00 04 	addi r1,r1,4
 1f8:	54 61 ff fe 	bgu r3,r1,1f0 <memtest+0x24>
 1fc:	b8 80 10 00 	mv r2,r4
 200:	38 42 00 00 	ori r2,r2,0x0
 204:	34 04 00 00 	mvi r4,0
		*p = (uint32_t) p;  
	}
	
	for (p=(uint32_t *)RAM_START; p<(uint32_t *)(RAM_START+size); p++) {
		if (*p != (uint32_t)p) {
 208:	28 41 00 00 	lw r1,(r2+0)
 20c:	44 41 00 02 	be r2,r1,214 <memtest+0x48>
 210:	34 04 ff ff 	mvi r4,-1

	for (p=(uint32_t *)RAM_START; p<(uint32_t *)(RAM_START+size); p++) {
		*p = (uint32_t) p;  
	}
	
	for (p=(uint32_t *)RAM_START; p<(uint32_t *)(RAM_START+size); p++) {
 214:	34 42 00 04 	addi r2,r2,4
 218:	54 62 ff fc 	bgu r3,r2,208 <memtest+0x3c>
			res = -1;
		}
	}

	return res;
}
 21c:	b8 80 08 00 	mv r1,r4
 220:	c3 a0 00 00 	ret

00000224 <scan_phase>:


void scan_phase(int dir, uint32_t size)
{
 224:	37 9c ff d0 	addi sp,sp,-48
 228:	5b 8b 00 30 	sw (sp+48),r11
 22c:	5b 8c 00 2c 	sw (sp+44),r12
 230:	5b 8d 00 28 	sw (sp+40),r13
 234:	5b 8e 00 24 	sw (sp+36),r14
 238:	5b 8f 00 20 	sw (sp+32),r15
 23c:	5b 90 00 1c 	sw (sp+28),r16
 240:	5b 91 00 18 	sw (sp+24),r17
 244:	5b 92 00 14 	sw (sp+20),r18
 248:	5b 93 00 10 	sw (sp+16),r19
 24c:	5b 94 00 0c 	sw (sp+12),r20
 250:	5b 95 00 08 	sw (sp+8),r21
 254:	5b 9d 00 04 	sw (sp+4),ra
 258:	78 03 40 00 	mvhi r3,0x4000
 25c:	78 0c 00 01 	mvhi r12,0x1
 260:	38 63 00 00 	ori r3,r3,0x0

inline void ps_dec()
{
	uint32_t tmp;

	while ( ! ps_ready() );
 264:	39 8c 00 00 	ori r12,r12,0x0
 268:	78 0e 00 00 	mvhi r14,0x0

	tmp  = gpio0->out;
	gpio0->out = tmp | (1 << 17);
 26c:	78 10 00 02 	mvhi r16,0x2
inline int memtest(uint32_t size)
{
	volatile uint32_t *p;
	int res = 0;

	for (p=(uint32_t *)RAM_START; p<(uint32_t *)(RAM_START+size); p++) {
 270:	b8 60 78 00 	mv r15,r3
	return res;
}


void scan_phase(int dir, uint32_t size)
{
 274:	b8 20 88 00 	mv r17,r1
 278:	b4 43 58 00 	add r11,r2,r3
 27c:	39 ce 05 60 	ori r14,r14,0x560
	uint32_t tmp;

	while ( ! ps_ready() );

	tmp  = gpio0->out;
	gpio0->out = tmp | (1 << 17);
 280:	3a 10 00 00 	ori r16,r16,0x0
	return res;
}


void scan_phase(int dir, uint32_t size)
{
 284:	34 0d 00 00 	mvi r13,0
 288:	b8 60 90 00 	mv r18,r3
		if (memtest(size) == 0)
			uart_putchar('O');
		else
			uart_putchar('-');

		if (dir == 1) ps_inc(); else ps_dec();
 28c:	34 13 00 01 	mvi r19,1

inline void ps_dec()
{
	uint32_t tmp;

	while ( ! ps_ready() );
 290:	b9 80 a8 00 	mv r21,r12

void scan_phase(int dir, uint32_t size)
{
	int i;

	for (i=0; i<=255; i++) {
 294:	34 14 01 00 	mvi r20,256
	return res;
}


void scan_phase(int dir, uint32_t size)
{
 298:	ba 40 08 00 	mv r1,r18
inline int memtest(uint32_t size)
{
	volatile uint32_t *p;
	int res = 0;

	for (p=(uint32_t *)RAM_START; p<(uint32_t *)(RAM_START+size); p++) {
 29c:	55 6f 00 1f 	bgu r11,r15,318 <scan_phase+0xf4>
{
	int i;

	for (i=0; i<=255; i++) {
		if (memtest(size) == 0)
			uart_putchar('O');
 2a0:	34 01 00 4f 	mvi r1,79
 2a4:	f8 00 00 77 	calli 480 <uart_putchar>
		else
			uart_putchar('-');

		if (dir == 1) ps_inc(); else ps_dec();
 2a8:	46 33 00 2a 	be r17,r19,350 <scan_phase+0x12c>
/******************************************************************************
 * Control DDR phase shift
 */
inline int ps_ready()
{
	return (gpio0->in & (1 << 16));  // return 1 when ready, 0 otherwise
 2ac:	29 c3 00 00 	lw r3,(r14+0)
 2b0:	28 61 00 10 	lw r1,(r3+16)

inline void ps_dec()
{
	uint32_t tmp;

	while ( ! ps_ready() );
 2b4:	a0 2c 08 00 	and r1,r1,r12
 2b8:	44 20 ff fe 	be r1,r0,2b0 <scan_phase+0x8c>

	tmp  = gpio0->out;
 2bc:	28 62 00 14 	lw r2,(r3+20)
	gpio0->out = tmp | (1 << 17);
 2c0:	b8 50 08 00 	or r1,r2,r16
 2c4:	58 61 00 14 	sw (r3+20),r1
	gpio0->out = tmp;
 2c8:	58 62 00 14 	sw (r3+20),r2
/******************************************************************************
 * Control DDR phase shift
 */
inline int ps_ready()
{
	return (gpio0->in & (1 << 16));  // return 1 when ready, 0 otherwise
 2cc:	28 61 00 10 	lw r1,(r3+16)

	tmp  = gpio0->out;
	gpio0->out = tmp | (1 << 17);
	gpio0->out = tmp;
	
	while ( ! ps_ready() );
 2d0:	a0 2c 08 00 	and r1,r1,r12
 2d4:	44 20 ff fe 	be r1,r0,2cc <scan_phase+0xa8>

void scan_phase(int dir, uint32_t size)
{
	int i;

	for (i=0; i<=255; i++) {
 2d8:	35 ad 00 01 	addi r13,r13,1
 2dc:	5d b4 ff ef 	bne r13,r20,298 <scan_phase+0x74>
		else
			uart_putchar('-');

		if (dir == 1) ps_inc(); else ps_dec();
	}
}
 2e0:	2b 9d 00 04 	lw ra,(sp+4)
 2e4:	2b 8b 00 30 	lw r11,(sp+48)
 2e8:	2b 8c 00 2c 	lw r12,(sp+44)
 2ec:	2b 8d 00 28 	lw r13,(sp+40)
 2f0:	2b 8e 00 24 	lw r14,(sp+36)
 2f4:	2b 8f 00 20 	lw r15,(sp+32)
 2f8:	2b 90 00 1c 	lw r16,(sp+28)
 2fc:	2b 91 00 18 	lw r17,(sp+24)
 300:	2b 92 00 14 	lw r18,(sp+20)
 304:	2b 93 00 10 	lw r19,(sp+16)
 308:	2b 94 00 0c 	lw r20,(sp+12)
 30c:	2b 95 00 08 	lw r21,(sp+8)
 310:	37 9c 00 30 	addi sp,sp,48
 314:	c3 a0 00 00 	ret
{
	volatile uint32_t *p;
	int res = 0;

	for (p=(uint32_t *)RAM_START; p<(uint32_t *)(RAM_START+size); p++) {
		*p = (uint32_t) p;  
 318:	58 21 00 00 	sw (r1+0),r1
inline int memtest(uint32_t size)
{
	volatile uint32_t *p;
	int res = 0;

	for (p=(uint32_t *)RAM_START; p<(uint32_t *)(RAM_START+size); p++) {
 31c:	34 21 00 04 	addi r1,r1,4
 320:	55 61 ff fe 	bgu r11,r1,318 <scan_phase+0xf4>
 324:	b9 e0 10 00 	mv r2,r15
 328:	34 03 00 00 	mvi r3,0
		*p = (uint32_t) p;  
	}
	
	for (p=(uint32_t *)RAM_START; p<(uint32_t *)(RAM_START+size); p++) {
		if (*p != (uint32_t)p) {
 32c:	28 41 00 00 	lw r1,(r2+0)
 330:	44 41 00 02 	be r2,r1,338 <scan_phase+0x114>
 334:	34 03 ff ff 	mvi r3,-1

	for (p=(uint32_t *)RAM_START; p<(uint32_t *)(RAM_START+size); p++) {
		*p = (uint32_t) p;  
	}
	
	for (p=(uint32_t *)RAM_START; p<(uint32_t *)(RAM_START+size); p++) {
 338:	34 42 00 04 	addi r2,r2,4
 33c:	55 62 ff fc 	bgu r11,r2,32c <scan_phase+0x108>
void scan_phase(int dir, uint32_t size)
{
	int i;

	for (i=0; i<=255; i++) {
		if (memtest(size) == 0)
 340:	44 60 ff d8 	be r3,r0,2a0 <scan_phase+0x7c>
			uart_putchar('O');
		else
			uart_putchar('-');
 344:	34 01 00 2d 	mvi r1,45
 348:	f8 00 00 4e 	calli 480 <uart_putchar>

		if (dir == 1) ps_inc(); else ps_dec();
 34c:	5e 33 ff d8 	bne r17,r19,2ac <scan_phase+0x88>
/******************************************************************************
 * Control DDR phase shift
 */
inline int ps_ready()
{
	return (gpio0->in & (1 << 16));  // return 1 when ready, 0 otherwise
 350:	29 c3 00 00 	lw r3,(r14+0)
 354:	28 61 00 10 	lw r1,(r3+16)

inline void ps_inc()
{
	uint32_t tmp;

	while ( ! ps_ready() );
 358:	a0 2c 08 00 	and r1,r1,r12
 35c:	44 20 ff fe 	be r1,r0,354 <scan_phase+0x130>

	tmp  = gpio0->out;
 360:	28 62 00 14 	lw r2,(r3+20)
	gpio0->out = tmp | (1 << 16);
 364:	b8 55 08 00 	or r1,r2,r21
 368:	58 61 00 14 	sw (r3+20),r1
	gpio0->out = tmp;
 36c:	58 62 00 14 	sw (r3+20),r2
/******************************************************************************
 * Control DDR phase shift
 */
inline int ps_ready()
{
	return (gpio0->in & (1 << 16));  // return 1 when ready, 0 otherwise
 370:	28 61 00 10 	lw r1,(r3+16)

	tmp  = gpio0->out;
	gpio0->out = tmp | (1 << 16);
	gpio0->out = tmp;
	
	while ( ! ps_ready() );
 374:	a0 2c 08 00 	and r1,r1,r12
 378:	44 20 ff fe 	be r1,r0,370 <scan_phase+0x14c>

void scan_phase(int dir, uint32_t size)
{
	int i;

	for (i=0; i<=255; i++) {
 37c:	35 ad 00 01 	addi r13,r13,1
 380:	5d b4 ff c6 	bne r13,r20,298 <scan_phase+0x74>
 384:	e3 ff ff d7 	bi 2e0 <scan_phase+0xbc>

00000388 <main>:
}



int main(int argc, char **argv)
{
 388:	37 9c ff f4 	addi sp,sp,-12
 38c:	5b 8b 00 0c 	sw (sp+12),r11
 390:	5b 8c 00 08 	sw (sp+8),r12
 394:	5b 9d 00 04 	sw (sp+4),ra
	uint32_t scan_size = 16*1024;    // scan 16 kByte

	// Initialize stuff
	uart_init();
 398:	f8 00 00 30 	calli 458 <uart_init>

	uart_putstr("\r\n\r\n** SOC-LM32 DDR PAHSER **\n\n");
 39c:	78 01 00 00 	mvhi r1,0x0
 3a0:	38 21 04 dc 	ori r1,r1,0x4dc
 3a4:	f8 00 00 40 	calli 4a4 <uart_putstr>
	uart_putstr("'O' => Memtest OK ; '-' => Memtest failed\n\n");
 3a8:	78 01 00 00 	mvhi r1,0x0
 3ac:	38 21 04 fc 	ori r1,r1,0x4fc
 3b0:	f8 00 00 3d 	calli 4a4 <uart_putstr>
	uart_putstr("Press [u] for upward scan, [d] for downward\n");
 3b4:	78 01 00 00 	mvhi r1,0x0
 3b8:	38 21 05 28 	ori r1,r1,0x528
 3bc:	f8 00 00 3a 	calli 4a4 <uart_putstr>

	for(;;) {
		uint8_t c = uart_getchar();

		switch (c) {
 3c0:	34 0b 00 64 	mvi r11,100
 3c4:	34 0c 00 75 	mvi r12,117
	uart_putstr("\r\n\r\n** SOC-LM32 DDR PAHSER **\n\n");
	uart_putstr("'O' => Memtest OK ; '-' => Memtest failed\n\n");
	uart_putstr("Press [u] for upward scan, [d] for downward\n");

	for(;;) {
		uint8_t c = uart_getchar();
 3c8:	f8 00 00 25 	calli 45c <uart_getchar>

		switch (c) {
 3cc:	44 2b 00 07 	be r1,r11,3e8 <main+0x60>
 3d0:	5c 2c ff fe 	bne r1,r12,3c8 <main+0x40>
			case 'u': // scan upward
				scan_phase(1, scan_size);
 3d4:	34 01 00 01 	mvi r1,1
 3d8:	34 02 40 00 	mvi r2,16384
 3dc:	fb ff ff 92 	calli 224 <scan_phase>
	uart_putstr("\r\n\r\n** SOC-LM32 DDR PAHSER **\n\n");
	uart_putstr("'O' => Memtest OK ; '-' => Memtest failed\n\n");
	uart_putstr("Press [u] for upward scan, [d] for downward\n");

	for(;;) {
		uint8_t c = uart_getchar();
 3e0:	f8 00 00 1f 	calli 45c <uart_getchar>

		switch (c) {
 3e4:	5c 2b ff fb 	bne r1,r11,3d0 <main+0x48>
			case 'u': // scan upward
				scan_phase(1, scan_size);
				break;
			case 'd': // scan downward
				scan_phase(-1, scan_size);
 3e8:	34 01 ff ff 	mvi r1,-1
 3ec:	34 02 40 00 	mvi r2,16384
 3f0:	fb ff ff 8d 	calli 224 <scan_phase>
 3f4:	e3 ff ff f5 	bi 3c8 <main+0x40>

000003f8 <sleep>:

/***************************************************************************
 * General utility functions
 */
void sleep(int msec)
{
 3f8:	78 02 00 00 	mvhi r2,0x0
 3fc:	38 42 05 5c 	ori r2,r2,0x55c
 400:	38 03 c3 50 	mvu r3,0xc350
 404:	88 23 08 00 	mul r1,r1,r3
 408:	28 43 00 00 	lw r3,(r2+0)
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN | TIMER_IRQEN;
 40c:	34 02 00 0a 	mvi r2,10
void sleep(int msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 410:	58 61 00 10 	sw (r3+16),r1
	timer0->counter1 = 0;
 414:	34 01 00 00 	mvi r1,0
 418:	58 61 00 14 	sw (r3+20),r1
	timer0->tcr1 = TIMER_EN | TIMER_IRQEN;
 41c:	58 62 00 0c 	sw (r3+12),r2

	do {
		//halt();
 		tcr = timer0->tcr1;
 420:	28 61 00 0c 	lw r1,(r3+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 424:	20 21 00 01 	andi r1,r1,0x1
 428:	44 20 ff fe 	be r1,r0,420 <sleep+0x28>
}
 42c:	c3 a0 00 00 	ret

00000430 <tic_init>:

void tic_init()
{
 430:	78 01 00 00 	mvhi r1,0x0
 434:	38 21 05 5c 	ori r1,r1,0x55c
 438:	28 23 00 00 	lw r3,(r1+0)
 43c:	38 02 c3 50 	mvu r2,0xc350
	// Setup timer0.0
	timer0->compare0 = (FCPU/1000);
	timer0->counter0 = 0;
 440:	34 01 00 00 	mvi r1,0
}

void tic_init()
{
	// Setup timer0.0
	timer0->compare0 = (FCPU/1000);
 444:	58 62 00 04 	sw (r3+4),r2
	timer0->counter0 = 0;
 448:	58 61 00 08 	sw (r3+8),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 44c:	34 02 00 0e 	mvi r2,14
 450:	58 62 00 00 	sw (r3+0),r2
}
 454:	c3 a0 00 00 	ret

00000458 <uart_init>:

/***************************************************************************
 * UART Functions
 */
void uart_init()
{
 458:	c3 a0 00 00 	ret

0000045c <uart_getchar>:
	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
 45c:	78 01 00 00 	mvhi r1,0x0
 460:	38 21 05 58 	ori r1,r1,0x558
 464:	28 22 00 00 	lw r2,(r1+0)
 468:	28 41 00 00 	lw r1,(r2+0)
 46c:	20 21 00 01 	andi r1,r1,0x1
 470:	44 20 ff fe 	be r1,r0,468 <uart_getchar+0xc>
	while (! (uart0->ucr & UART_DR)) ;
	return uart0->rxtx;
 474:	28 41 00 04 	lw r1,(r2+4)
}
 478:	20 21 00 ff 	andi r1,r1,0xff
 47c:	c3 a0 00 00 	ret

00000480 <uart_putchar>:

void uart_putchar(char c)
{
 480:	78 02 00 00 	mvhi r2,0x0
 484:	38 42 05 58 	ori r2,r2,0x558
 488:	28 42 00 00 	lw r2,(r2+0)
 48c:	20 23 00 ff 	andi r3,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 490:	28 41 00 00 	lw r1,(r2+0)
 494:	20 21 00 10 	andi r1,r1,0x10
 498:	5c 20 ff fe 	bne r1,r0,490 <uart_putchar+0x10>
	uart0->rxtx = c;
 49c:	58 43 00 04 	sw (r2+4),r3
}
 4a0:	c3 a0 00 00 	ret

000004a4 <uart_putstr>:

void uart_putstr(char *str)
{
 4a4:	40 24 00 00 	lbu r4,(r1+0)
 4a8:	b8 20 18 00 	mv r3,r1
	char *c = str;
	while(*c) {
 4ac:	44 80 00 0b 	be r4,r0,4d8 <uart_putstr+0x34>
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 4b0:	78 01 00 00 	mvhi r1,0x0
 4b4:	38 21 05 58 	ori r1,r1,0x558
 4b8:	28 22 00 00 	lw r2,(r1+0)
 4bc:	28 41 00 00 	lw r1,(r2+0)
 4c0:	20 21 00 10 	andi r1,r1,0x10
 4c4:	5c 20 ff fe 	bne r1,r0,4bc <uart_putstr+0x18>
	uart0->rxtx = c;
 4c8:	58 44 00 04 	sw (r2+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 4cc:	34 63 00 01 	addi r3,r3,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 4d0:	40 64 00 00 	lbu r4,(r3+0)
 4d4:	5c 81 ff fa 	bne r4,r1,4bc <uart_putstr+0x18>
 4d8:	c3 a0 00 00 	ret
